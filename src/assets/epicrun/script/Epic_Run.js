SGHelper = {};
(function ($hx_exports) { "use strict";
$hx_exports.openfl = $hx_exports.openfl || {};
$hx_exports.lime = $hx_exports.lime || {};
var $hxClasses = {},$estr = function() { return js.Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.config = null;
ApplicationMain.preloader = null;
ApplicationMain.create = function() {
	var app = new openfl.display.Application();
	app.create(ApplicationMain.config);
	var display = new Preloader();
	SGHelper.preloader = display;
	ApplicationMain.preloader = new openfl.display.Preloader(display);
	ApplicationMain.preloader.onComplete = ApplicationMain.init;
	ApplicationMain.preloader.create(ApplicationMain.config);
	var urls = [];
	var types = [];
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/general/fonts/impact.eot") == true) {
		urls.push("Assets/general/fonts/impact.eot");
		types.push("BINARY");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/general/fonts/impact.svg") == true) {
		urls.push("Assets/general/fonts/impact.svg");
		types.push("TEXT");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/general/fonts/impact.ttf") == true) {
		urls.push("Impact");
		types.push("FONT");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/general/fonts/impact.woff") == true) {
		urls.push("Assets/general/fonts/impact.woff");
		types.push("BINARY");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/general/rotate.png") == true) {
		urls.push("Assets/general/rotate.png");
		types.push("IMAGE");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/images1/0x/background.png") == true) {
		urls.push("Assets/images1/0x/background.png");
		types.push("IMAGE");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/images1/0x/comixfinal.png") == true) {
		urls.push("Assets/images1/0x/comixfinal.png");
		types.push("IMAGE");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/images1/0x/elements.png") == true) {
		urls.push("Assets/images1/0x/elements.png");
		types.push("IMAGE");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/images1/0x/map.png") == true) {
		urls.push("Assets/images1/0x/map.png");
		types.push("IMAGE");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/images1/0x/menu.png") == true) {
		urls.push("Assets/images1/0x/menu.png");
		types.push("IMAGE");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/images1/0x/panels.png") == true) {
		urls.push("Assets/images1/0x/panels.png");
		types.push("IMAGE");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/images1/0x/scenes.png") == true) {
		urls.push("Assets/images1/0x/scenes.png");
		types.push("IMAGE");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/images1/0x/shop.png") == true) {
		urls.push("Assets/images1/0x/shop.png");
		types.push("IMAGE");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/images1/0x/stones.png") == true) {
		urls.push("Assets/images1/0x/stones.png");
		types.push("IMAGE");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/images1/sglogo.png") == true) {
		urls.push("Assets/images1/sglogo.png");
		types.push("IMAGE");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/params/panelParams.xml") == true) {
		urls.push("Assets/params/panelParams.xml");
		types.push("TEXT");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/BirdFree.mp3") == true) {
		urls.push("Assets/sounds/BirdFree.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/BirdFree.ogg") == true) {
		urls.push("Assets/sounds/BirdFree.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/BirdInCage.mp3") == true) {
		urls.push("Assets/sounds/BirdInCage.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/BirdInCage.ogg") == true) {
		urls.push("Assets/sounds/BirdInCage.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/coconutsLand1.mp3") == true) {
		urls.push("Assets/sounds/coconutsLand1.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/coconutsLand1.ogg") == true) {
		urls.push("Assets/sounds/coconutsLand1.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/coconutsLand2.mp3") == true) {
		urls.push("Assets/sounds/coconutsLand2.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/coconutsLand2.ogg") == true) {
		urls.push("Assets/sounds/coconutsLand2.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/Collect1.mp3") == true) {
		urls.push("Assets/sounds/Collect1.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/Collect1.ogg") == true) {
		urls.push("Assets/sounds/Collect1.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/Collect2.mp3") == true) {
		urls.push("Assets/sounds/Collect2.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/Collect2.ogg") == true) {
		urls.push("Assets/sounds/Collect2.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/Collect3.mp3") == true) {
		urls.push("Assets/sounds/Collect3.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/Collect3.ogg") == true) {
		urls.push("Assets/sounds/Collect3.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/CrushStone1.mp3") == true) {
		urls.push("Assets/sounds/CrushStone1.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/CrushStone1.ogg") == true) {
		urls.push("Assets/sounds/CrushStone1.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/CrushStone2.mp3") == true) {
		urls.push("Assets/sounds/CrushStone2.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/CrushStone2.ogg") == true) {
		urls.push("Assets/sounds/CrushStone2.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/CrushWood1.mp3") == true) {
		urls.push("Assets/sounds/CrushWood1.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/CrushWood1.ogg") == true) {
		urls.push("Assets/sounds/CrushWood1.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/CrushWood2.mp3") == true) {
		urls.push("Assets/sounds/CrushWood2.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/CrushWood2.ogg") == true) {
		urls.push("Assets/sounds/CrushWood2.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/ducks.mp3") == true) {
		urls.push("Assets/sounds/ducks.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/ducks.ogg") == true) {
		urls.push("Assets/sounds/ducks.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/finalWindow.mp3") == true) {
		urls.push("Assets/sounds/finalWindow.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/finalWindow.ogg") == true) {
		urls.push("Assets/sounds/finalWindow.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/heroBeat.mp3") == true) {
		urls.push("Assets/sounds/heroBeat.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/heroBeat.ogg") == true) {
		urls.push("Assets/sounds/heroBeat.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/heroDamage1.mp3") == true) {
		urls.push("Assets/sounds/heroDamage1.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/heroDamage1.ogg") == true) {
		urls.push("Assets/sounds/heroDamage1.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/heroDamage2.mp3") == true) {
		urls.push("Assets/sounds/heroDamage2.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/heroDamage2.ogg") == true) {
		urls.push("Assets/sounds/heroDamage2.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/heroDoubleJump.mp3") == true) {
		urls.push("Assets/sounds/heroDoubleJump.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/heroDoubleJump.ogg") == true) {
		urls.push("Assets/sounds/heroDoubleJump.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/heroJump.mp3") == true) {
		urls.push("Assets/sounds/heroJump.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/heroJump.ogg") == true) {
		urls.push("Assets/sounds/heroJump.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/heroLand.mp3") == true) {
		urls.push("Assets/sounds/heroLand.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/heroLand.ogg") == true) {
		urls.push("Assets/sounds/heroLand.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/heroSlide.mp3") == true) {
		urls.push("Assets/sounds/heroSlide.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/heroSlide.ogg") == true) {
		urls.push("Assets/sounds/heroSlide.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/levelComplete.mp3") == true) {
		urls.push("Assets/sounds/levelComplete.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/levelComplete.ogg") == true) {
		urls.push("Assets/sounds/levelComplete.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/levelDefeat.mp3") == true) {
		urls.push("Assets/sounds/levelDefeat.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/levelDefeat.ogg") == true) {
		urls.push("Assets/sounds/levelDefeat.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/mainTheme.mp3") == true) {
		urls.push("Assets/sounds/mainTheme.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/mainTheme.ogg") == true) {
		urls.push("Assets/sounds/mainTheme.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/monkeyDead.mp3") == true) {
		urls.push("Assets/sounds/monkeyDead.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/monkeyDead.ogg") == true) {
		urls.push("Assets/sounds/monkeyDead.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/mouse_click.mp3") == true) {
		urls.push("Assets/sounds/mouse_click.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/mouse_click.ogg") == true) {
		urls.push("Assets/sounds/mouse_click.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/newCircleOnMap.mp3") == true) {
		urls.push("Assets/sounds/newCircleOnMap.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/newCircleOnMap.ogg") == true) {
		urls.push("Assets/sounds/newCircleOnMap.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/pickUpPlace.mp3") == true) {
		urls.push("Assets/sounds/pickUpPlace.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/pickUpPlace.ogg") == true) {
		urls.push("Assets/sounds/pickUpPlace.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/rollingStone.mp3") == true) {
		urls.push("Assets/sounds/rollingStone.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/rollingStone.ogg") == true) {
		urls.push("Assets/sounds/rollingStone.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/Shield.mp3") == true) {
		urls.push("Assets/sounds/Shield.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/Shield.ogg") == true) {
		urls.push("Assets/sounds/Shield.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/showFlag.mp3") == true) {
		urls.push("Assets/sounds/showFlag.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/showFlag.ogg") == true) {
		urls.push("Assets/sounds/showFlag.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/starCollect.mp3") == true) {
		urls.push("Assets/sounds/starCollect.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/starCollect.ogg") == true) {
		urls.push("Assets/sounds/starCollect.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/throwFlower.mp3") == true) {
		urls.push("Assets/sounds/throwFlower.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/throwFlower.ogg") == true) {
		urls.push("Assets/sounds/throwFlower.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/throwOrange.mp3") == true) {
		urls.push("Assets/sounds/throwOrange.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/throwOrange.ogg") == true) {
		urls.push("Assets/sounds/throwOrange.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/trampoline.mp3") == true) {
		urls.push("Assets/sounds/trampoline.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/trampoline.ogg") == true) {
		urls.push("Assets/sounds/trampoline.ogg");
		types.push("SOUND");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/upgradeUp.mp3") == true) {
		urls.push("Assets/sounds/upgradeUp.mp3");
		types.push("MUSIC");
	}
	if(Reflect.isFunction(Reflect.field(ApplicationMain.preloader,"needLoad")) == true && ApplicationMain.preloader.needLoad("Assets/sounds/upgradeUp.ogg") == true) {
		urls.push("Assets/sounds/upgradeUp.ogg");
		types.push("SOUND");
	}
	if(ApplicationMain.config.assetsPrefix != null) {
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(types[i] != "FONT") urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
		}
	}
	ApplicationMain.preloader.load(urls,types);
	var result = app.exec();
};
ApplicationMain.init = function() {
	var loaded = 0;
	var total = 0;
	/*var library_onLoad = function(__) {
		loaded++;
		if(loaded == total) ApplicationMain.start();
	};*/
	ApplicationMain.preloader = null;
	//if(loaded == total) SG_Hooks.loaded();
};
ApplicationMain.main = function() {
	ApplicationMain.config = { antialiasing : 0, background : 0, borderless : false, depthBuffer : false, fps : 60, fullscreen : false, height : 0, orientation : "", resizable : true, stencilBuffer : false, title : "Epic Run", vsync : false, width : 0};
};
ApplicationMain.start = function() {
	var hasMain = false;
	var entryPoint = Type.resolveClass("Main");
	var _g = 0;
	var _g1 = Type.getClassFields(entryPoint);
	while(_g < _g1.length) {
		var methodName = _g1[_g];
		++_g;
		if(methodName == "main") {
			hasMain = true;
			break;
		}
	}
	if(hasMain) Reflect.callMethod(entryPoint,Reflect.field(entryPoint,"main"),[]); else {
		var instance = Type.createInstance(DocumentClass,[]);
	}
	openfl.Lib.current.stage.dispatchEvent(new openfl.events.Event(openfl.events.Event.RESIZE,false,false));
};
var openfl = {};
openfl.events = {};
openfl.events.IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl.events.IEventDispatcher;
openfl.events.IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl.events.IEventDispatcher.prototype = {
	__class__: openfl.events.IEventDispatcher
};
openfl.events.EventDispatcher = function(target) {
	if(target != null) this.__targetDispatcher = target;
};
$hxClasses["openfl.events.EventDispatcher"] = openfl.events.EventDispatcher;
openfl.events.EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl.events.EventDispatcher.__interfaces__ = [openfl.events.IEventDispatcher];
openfl.events.EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) return 0; else if(l1.priority > l2.priority) return -1; else return 1;
};
openfl.events.EventDispatcher.prototype = {
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) this.__eventMap = new haxe.ds.StringMap();
		if(!this.__eventMap.exists(type)) {
			var list = new Array();
			list.push(new openfl.events._EventDispatcher.Listener(listener,useCapture,priority));
			this.__eventMap.set(type,list);
		} else {
			var list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(Reflect.compareMethods(list1[i].callback,listener)) return;
			}
			list1.push(new openfl.events._EventDispatcher.Listener(listener,useCapture,priority));
			list1.sort(openfl.events.EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) return false;
		var list = this.__eventMap.get(event.type);
		if(list == null) return false;
		if(event.target == null) {
			if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		}
		event.currentTarget = this;
		var capture = event.eventPhase == openfl.events.EventPhase.CAPTURING_PHASE;
		var index = 0;
		var listener;
		while(index < list.length) {
			listener = list[index];
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCancelledNow) return true;
			}
			if(listener == list[index]) index++;
		}
		return true;
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) return false;
		return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,capture) {
		if(capture == null) capture = false;
		if(this.__eventMap == null) return;
		var list = this.__eventMap.get(type);
		if(list == null) return;
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,capture)) {
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) this.__eventMap.remove(type);
		if(!this.__eventMap.iterator().hasNext()) this.__eventMap = null;
	}
	,toString: function() {
		var full = Type.getClassName(Type.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__class__: openfl.events.EventDispatcher
};
openfl.display = {};
openfl.display.IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl.display.IBitmapDrawable;
openfl.display.IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl.display.IBitmapDrawable.prototype = {
	__class__: openfl.display.IBitmapDrawable
};
openfl.display.DisplayObject = function() {
	openfl.events.EventDispatcher.call(this);
	this.__alpha = 1;
	this.__rotation = 0;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__visible = true;
	this.__x = 0;
	this.__y = 0;
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl.geom.Matrix();
	this.__rotationCache = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.set_name("instance" + ++openfl.display.DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl.display.DisplayObject;
openfl.display.DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl.display.DisplayObject.__interfaces__ = [openfl.display.IBitmapDrawable];
openfl.display.DisplayObject.__super__ = openfl.events.EventDispatcher;
openfl.display.DisplayObject.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	dispatchEvent: function(event) {
		var result = openfl.events.EventDispatcher.prototype.dispatchEvent.call(this,event);
		if(event.__isCancelled) return true;
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = openfl.events.EventPhase.BUBBLING_PHASE;
			this.parent.dispatchEvent(event);
		}
		return result;
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = this.__getTransform();
		if(targetCoordinateSpace != null) {
			matrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			matrix.concat(targetCoordinateSpace.__worldTransform.clone().invert());
		}
		var bounds = new openfl.geom.Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__getTransform().clone().invert().transformPoint(pos);
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		if(this.parent != null) {
			var currentBounds = this.getBounds(this);
			return currentBounds.containsPoint(new openfl.geom.Point(x,y));
		}
		return false;
	}
	,localToGlobal: function(point) {
		return this.__getTransform().transformPoint(point);
	}
	,__broadcast: function(event,notifyChilden) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl.events.EventDispatcher.prototype.dispatchEvent.call(this,event);
			if(event.__isCancelled) return true;
			return result;
		}
		return false;
	}
	,__getBounds: function(rect,matrix) {
	}
	,__getInteractive: function(stack) {
	}
	,__getLocalBounds: function(rect) {
		this.__getTransform();
		this.__getBounds(rect,new openfl.geom.Matrix());
	}
	,__getTransform: function() {
		if(this.__transformDirty || openfl.display.DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) this.__update(true,false);
			} else while(current.parent != null) {
				list.push(current);
				current = current.parent;
				if(current.__transformDirty) transformDirty = true;
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		return false;
	}
	,__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
	}
	,__renderMask: function(renderSession) {
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl.display.DisplayObject.__worldRenderDirty++;
		}
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl.display.DisplayObject.__worldTransformDirty++;
		}
	}
	,__update: function(transformOnly,updateChildren) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(this.get_rotation() != this.__rotationCache) {
			this.__rotationCache = this.get_rotation();
			var radians = this.get_rotation() * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
		}
		if(this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var a00 = this.__rotationCosine * this.get_scaleX();
			var a01 = this.__rotationSine * this.get_scaleX();
			var a10 = -this.__rotationSine * this.get_scaleY();
			var a11 = this.__rotationCosine * this.get_scaleY();
			var b00 = parentTransform.a;
			var b01 = parentTransform.b;
			var b10 = parentTransform.c;
			var b11 = parentTransform.d;
			if(this.__worldTransform == null) this.__worldTransform = new openfl.geom.Matrix();
			this.__worldTransform.a = a00 * b00 + a01 * b10;
			this.__worldTransform.b = a00 * b01 + a01 * b11;
			this.__worldTransform.c = a10 * b00 + a11 * b10;
			this.__worldTransform.d = a10 * b01 + a11 * b11;
			if(this.get_scrollRect() == null) {
				this.__worldTransform.tx = this.get_x() * b00 + this.get_y() * b10 + parentTransform.tx;
				this.__worldTransform.ty = this.get_x() * b01 + this.get_y() * b11 + parentTransform.ty;
			} else {
				this.__worldTransform.tx = (this.get_x() - this.get_scrollRect().x) * b00 + (this.get_y() - this.get_scrollRect().y) * b10 + parentTransform.tx;
				this.__worldTransform.ty = (this.get_x() - this.get_scrollRect().x) * b01 + (this.get_y() - this.get_scrollRect().y) * b11 + parentTransform.ty;
			}
		} else {
			this.__worldTransform.a = this.__rotationCosine * this.get_scaleX();
			this.__worldTransform.c = -this.__rotationSine * this.get_scaleY();
			this.__worldTransform.b = this.__rotationSine * this.get_scaleX();
			this.__worldTransform.d = this.__rotationCosine * this.get_scaleY();
			if(this.get_scrollRect() == null) {
				this.__worldTransform.tx = this.get_x();
				this.__worldTransform.ty = this.get_y();
			} else {
				this.__worldTransform.tx = this.get_y() - this.get_scrollRect().x;
				this.__worldTransform.ty = this.get_y() - this.get_scrollRect().y;
			}
		}
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl.display.DisplayObject.__worldTransformDirty--;
		}
		if(!transformOnly) {
			if(this.parent != null) this.__worldAlpha = this.get_alpha() * this.parent.__worldAlpha; else this.__worldAlpha = this.get_alpha();
			if(updateChildren && this.__renderDirty) this.__renderDirty = false;
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(!this.__renderable && !this.__isMask) return;
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl.display.DisplayObject.__worldTransformDirty--;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,get_filters: function() {
		if(this.__filters == null) return new Array(); else return this.__filters.slice();
	}
	,set_filters: function(value) {
		return value;
	}
	,get_height: function() {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		return bounds.height * this.get_scaleY();
	}
	,set_height: function(value) {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		if(value != bounds.height) this.set_scaleY(value / bounds.height); else this.set_scaleY(1);
		return value;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) this.__mask.__isMask = false;
		if(value != null) value.__isMask = true;
		return this.__mask = value;
	}
	,get_mouseX: function() {
		if(this.stage != null) return this.globalToLocal(new openfl.geom.Point(this.stage.__mouseX,0)).x;
		return 0;
	}
	,get_mouseY: function() {
		if(this.stage != null) return this.globalToLocal(new openfl.geom.Point(0,this.stage.__mouseY)).y;
		return 0;
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) return openfl.Lib.current;
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__rotation = value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleX = value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(this.__scaleY != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleY = value;
	}
	,get_scrollRect: function() {
		return this.__scrollRect;
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__transform == null) this.__transform = new openfl.geom.Transform(this);
		return this.__transform;
	}
	,set_transform: function(value) {
		if(value == null) throw new openfl.errors.TypeError("Parameter transform must be non-null.");
		if(this.__transform == null) this.__transform = new openfl.geom.Transform(this);
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl.display.DisplayObject.__worldTransformDirty++;
		}
		this.__transform.set_matrix(value.get_matrix().clone());
		this.__transform.set_colorTransform(new openfl.geom.ColorTransform(value.get_colorTransform().redMultiplier,value.get_colorTransform().greenMultiplier,value.get_colorTransform().blueMultiplier,value.get_colorTransform().alphaMultiplier,value.get_colorTransform().redOffset,value.get_colorTransform().greenOffset,value.get_colorTransform().blueOffset,value.get_colorTransform().alphaOffset));
		return this.__transform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		return bounds.width * this.get_scaleX();
	}
	,set_width: function(value) {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		if(value != bounds.width) this.set_scaleX(value / bounds.width); else this.set_scaleX(1);
		return value;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		if(value != this.__x) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__x = value;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		if(value != this.__y) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__y = value;
	}
	,__class__: openfl.display.DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
openfl.display.InteractiveObject = function() {
	openfl.display.DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.tabEnabled = true;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl.display.InteractiveObject;
openfl.display.InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl.display.InteractiveObject.__super__ = openfl.display.DisplayObject;
openfl.display.InteractiveObject.prototype = $extend(openfl.display.DisplayObject.prototype,{
	requestSoftKeyboard: function() {
		openfl.Lib.notImplemented("InteractiveObject.requestSoftKeyboard");
		return false;
	}
	,__getInteractive: function(stack) {
		stack.push(this);
		if(this.parent != null) this.parent.__getInteractive(stack);
	}
	,__class__: openfl.display.InteractiveObject
});
openfl.display.DisplayObjectContainer = function() {
	openfl.display.InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = new Array();
	this.__removedChildren = new Array();
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl.display.DisplayObjectContainer;
openfl.display.DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl.display.DisplayObjectContainer.__super__ = openfl.display.InteractiveObject;
openfl.display.DisplayObjectContainer.prototype = $extend(openfl.display.InteractiveObject.prototype,{
	addChild: function(child) {
		if(child != null) {
			if(child.parent != null) child.parent.removeChild(child);
			this.__children.push(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl.events.Event(openfl.events.Event.ADDED,true);
			event.target = child;
			child.dispatchEvent(event);
		}
		return child;
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) throw "Invalid index position " + index;
		if(child.parent == this) HxOverrides.remove(this.__children,child); else {
			if(child.parent != null) child.parent.removeChild(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl.events.Event(openfl.events.Event.ADDED,true);
			event.target = child;
			child.dispatchEvent(event);
		}
		this.__children.splice(index,0,child);
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return HxOverrides.indexOf(this.__children,child,0) > -1;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__children[index];
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) return child;
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) return i;
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		point = this.localToGlobal(point);
		var stack = new Array();
		this.__hitTest(point.x,point.y,false,stack,false);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			if(this.stage != null) child.__setStageReference(null);
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			child.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED,true));
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) return;
		}
		if(beginIndex > this.__children.length - 1) return; else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new openfl.errors.RangeError("The supplied index is out of bounds.");
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			numRemovals--;
		}
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = HxOverrides.indexOf(this.__children,child1,0);
			var index2 = HxOverrides.indexOf(this.__children,child2,0);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,swapChildrenAt: function(child1,child2) {
		var swap = this.__children[child1];
		this.__children[child1] = this.__children[child2];
		this.__children[child2] = swap;
		swap = null;
	}
	,__broadcast: function(event,notifyChilden) {
		if(event.target == null) event.target = this;
		if(notifyChilden) {
			var _g = 0;
			var _g1 = this.__children || [];
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__broadcast(event,true);
				if(event.__isCancelled) return true;
			}
		}
		return openfl.display.InteractiveObject.prototype.__broadcast.call(this,event,notifyChilden);
	}
	,__getBounds: function(rect,matrix) {
		if(this.__children.length == 0) return;
		var matrixCache = null;
		if(matrix != null) {
			matrixCache = this.__worldTransform;
			this.__worldTransform = matrix;
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(!child.__renderable) continue;
			child.__getBounds(rect,null);
		}
		if(matrix != null) {
			this.__worldTransform = matrixCache;
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true)) {
					if(stack != null) stack.push(this);
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,stack,interactiveOnly)) {
					stack.splice(length,0,this);
					return true;
				}
			}
		} else while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false);
		return false;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.get_scrollRect() != null) {
		}
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) {
		}
	}
	,__renderDOM: function(renderSession) {
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) orphan.__renderDOM(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		this.__removedChildren = [];
	}
	,__renderMask: function(renderSession) {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setStageReference(stage);
				}
			}
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl.display.InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(!this.__renderable) return;
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl.display.InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl.display.DisplayObjectContainer
	,__properties__: $extend(openfl.display.InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
openfl.display.Sprite = function() {
	openfl.display.DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
	this.loaderInfo = openfl.display.LoaderInfo.create(null);
};
$hxClasses["openfl.display.Sprite"] = openfl.display.Sprite;
openfl.display.Sprite.__name__ = ["openfl","display","Sprite"];
openfl.display.Sprite.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.Sprite.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(this.stage != null) this.stage.__startDrag(this,lockCenter,bounds);
	}
	,stopDrag: function() {
		if(this.stage != null) this.stage.__stopDrag(this);
	}
	,__getBounds: function(rect,matrix) {
		openfl.display.DisplayObjectContainer.prototype.__getBounds.call(this,rect,matrix);
		if(this.__graphics != null) this.__graphics.__getBounds(rect,matrix != null?matrix:this.__worldTransform);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var length = 0;
		if(stack != null) length = stack.length;
		if(openfl.display.DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly)) return interactiveOnly; else if(this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getTransform())) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		openfl._internal.renderer.canvas.CanvasShape.render(this,renderSession);
		openfl.display.DisplayObjectContainer.prototype.__renderCanvas.call(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl._internal.renderer.dom.DOMShape.render(this,renderSession);
		openfl.display.DisplayObjectContainer.prototype.__renderDOM.call(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__graphics != null) openfl._internal.renderer.opengl.utils.GraphicsRenderer.render(this,renderSession);
		openfl.display.DisplayObjectContainer.prototype.__renderGL.call(this,renderSession);
	}
	,__renderMask: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.canvas.CanvasGraphics.renderMask(this.__graphics,renderSession); else openfl.display.DisplayObjectContainer.prototype.__renderMask.call(this,renderSession);
	}
	,get_graphics: function() {
		if(this.__graphics == null) this.__graphics = new openfl.display.Graphics();
		return this.__graphics;
	}
	,__class__: openfl.display.Sprite
	,__properties__: $extend(openfl.display.DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var Main = function() {
	this.keyCode = 999;
	this.dontPressButton = false;
	this.costsUpgrade = [[[75,150,250],[30,60,90,120,150],[25,50,75,100,125],[60,90,120]],[[25,50,75],[25,50,75],[25,50,75],[25,50,75]]];
	if(Main.instance != null) throw "Error: Allready inited. Use getInstance() instead;";
	openfl.display.Sprite.call(this);
	//console.log('p2-dbg: Main called', this);
	Main.instance = this;
	this.buttons = new Array();
	this.init();
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.instance = null;
//console.log('p2-dbg: Main.instance = null', Main.instance);
Main.getInstance = function() {
	//console.log('p2-dbg: getInstance called', Main.instance);
	if(Main.instance == null) return new Main(); else return Main.instance;
};
Main.__super__ = openfl.display.Sprite;
Main.prototype = $extend(openfl.display.Sprite.prototype,{
	init: function() {
		//console.log('p2-dbg: Main.init called', this);
		com.tools.DataManager.getInstance().init();
		com.jdtiles.Tile.init();
		com.Variables.initParam();
		this.sManager = new SceneManager();
		this.addChild(this.sManager);
		this.panel = new panels.PanelBase();
		this.variables = new com.Variables();
		this.addChild(this.variables);
		api.SoftGames.getInstance().initLang();
		this.variables.initGame();
		if(com.Variables.showFps == true) this.addChild(new openfl.display.FPS(10,10,16777215));
		this.offerValues = new OfferValues();
		this.initListeners();
		if(Std["int"](com.tools.DataManager.getInstance().getData("played")) == 0) {
			this.showScene(ScenesList.Comix);
			com.tools.DataManager.getInstance().saveData("played",1);
			com.tools.DataManager.getInstance().saveData("lastStars",0);
			com.tools.DataManager.getInstance().saveData("Levels",1);
		} else this.showScene(ScenesList.Menu);
		com.sound.SoundManager.start();
	}
	,resize: function() {
		this.sManager.set_scaleX(this.sManager.set_scaleY(1));
		this.sManager.set_scaleX(this.sManager.set_scaleY(com.Variables.currentScale));
		this.sManager.set_x(com.Variables.shiftLayerX);
		this.sManager.set_y(com.Variables.shiftLayerY);
		if(this.scene != null) this.scene.resize();
		this.panel.resize();
	}
	,initListeners: function() {
		this.addEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.update));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.mouseDown));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.mouseUp));
		if(com.Variables.onMobile == false) {
			this.stage.addEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.keyDown));
			this.stage.addEventListener(openfl.events.KeyboardEvent.KEY_UP,$bind(this,this.keyUp));
		}
	}
	,keyDown: function(e) {
		if((function($this) {
			var $r;
			var $int = $this.keyCode;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == e.keyCode) return;
		this.keyCode = e.keyCode;
		this.scene.keyDown(e);
	}
	,keyUp: function(e) {
		if((function($this) {
			var $r;
			var $int = $this.keyCode;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) != e.keyCode) return;
		this.keyCode = 999;
		this.scene.keyUp(e);
	}
	,showScene: function(sceneId,level) {
		if(level == null) level = 0;
		this.changeScene();
		this.sManager.deletePrevScene();
		switch(sceneId[1]) {
		case 0:
			this.scene = new scenes.Menu();
			break;
		case 4:
			this.scene = new scenes.Final();
			break;
		case 1:
			this.scene = new scenes.LevelBuilder(level);
			break;
		case 2:
			this.scene = new scenes.Comix();
			break;
		case 3:
			this.scene = new scenes.Shop();
			break;
		case 5:
			this.scene = new scenes.Levels();
			break;
		}
		this.sManager.show(this.scene);
	}
	,changeScene: function() {
		motion.Actuate.reset();
		this.variables.prevTime = 0;
		if(this.scene != null) {
			var _g1 = 0;
			var _g = this.buttons.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.buttons[i].free();
			}
			this.buttons = [];
			com.tools.Tools.clearLayer(this.scene);
		}
		com.sound.SoundManager.reset();
		com.jdtiles.Tile.changeScene();
		this.panel.free();
	}
	,mouseDown: function(e) {
		this.scene.mouseDown(e);
		this.dontPressButton = false;
		if(js.Boot.__instanceof(e.target,com.buttons.Button)) (js.Boot.__cast(e.target , com.buttons.Button)).mouseDown();
	}
	,mouseUp: function(e) {
		this.scene.mouseUp(e);
		if(js.Boot.__instanceof(e.target,com.buttons.Button) == true && this.dontPressButton == false && (js.Boot.__cast(e.target , com.buttons.Button)).pressed == true) {
			(js.Boot.__cast(e.target , com.buttons.Button)).mouseUp();
			return;
		}
		this.breakBtn();
	}
	,breakBtn: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.pressed == true) {
				i.mouseUp(false);
				break;
			}
		}
	}
	,update: function(e) {
		if(this.variables.updateTimer() == false) return;
		this.scene.update();
		this.panel.update();
		this.sManager.update();
		motion.Actuate.updateEnterFrame();
		com.jdtiles.Tile.update();
	}
	,checkUpgrade: function(_name,iterCost) {
		var money = Std["int"](com.tools.DataManager.getInstance().getData("money"));
		var progress = 0;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			progress = Std["int"](com.tools.DataManager.getInstance().getData(_name + "Upgrade" + i));
			if(_name == "power" && progress == 3) continue; else if(_name == "hero") {
				if(i == 3 && com.tools.DataManager.getInstance().getData("openOranges") == null) continue;
				if(i == 0 && progress == 3 || i == 3 && progress == 3 || i == 1 && progress == 5 || i == 2 && progress == 5) continue;
			}
			if(money >= this.costsUpgrade[iterCost][i][progress]) return true;
		}
		return false;
	}
	,__class__: Main
});
var DocumentClass = function() {
	openfl.Lib.current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var ContactListener = function(physWorld) {
	var opType = new nape.callbacks.OptionType([zpp_nape.callbacks.ZPP_CbType.ANY_BODY]);
	var beginContactListener = new nape.callbacks.InteractionListener((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InteractionType_ANY;
		return $r;
	}(this)),opType,opType,$bind(this,this.beginContact));
	physWorld.zpp_inner.wrap_listeners.add(beginContactListener);
	var endContactListener = new nape.callbacks.InteractionListener((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InteractionType_ANY;
		return $r;
	}(this)),opType,opType,$bind(this,this.endContact));
	physWorld.zpp_inner.wrap_listeners.add(endContactListener);
	ContactListener.oneWayType = new nape.callbacks.CbType();
	physWorld.zpp_inner.wrap_listeners.add(new nape.callbacks.PreListener((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
		return $r;
	}(this)),ContactListener.oneWayType,zpp_nape.callbacks.ZPP_CbType.ANY_BODY,$bind(this,this.oneWayHandler),0,true));
};
$hxClasses["ContactListener"] = ContactListener;
ContactListener.__name__ = ["ContactListener"];
ContactListener.oneWayType = null;
ContactListener.prototype = {
	beginContact: function(contact) {
		if(contact.zpp_inner.int1.outer_i.get_userData() == null || contact.zpp_inner.int2.outer_i.get_userData() == null) return;
		var uData1 = contact.zpp_inner.int1.outer_i.get_userData();
		var uData2 = contact.zpp_inner.int2.outer_i.get_userData();
		if(uData1.link != null) uData1.link.onContact(uData2.data,contact.zpp_inner.int2.outer_i);
		if(uData2.link != null) uData2.link.onContact(uData1.data,contact.zpp_inner.int1.outer_i);
	}
	,endContact: function(contact) {
		if(contact.zpp_inner.int1.outer_i.get_userData() == null || contact.zpp_inner.int2.outer_i.get_userData() == null) return;
		var uData1 = contact.zpp_inner.int1.outer_i.get_userData();
		var uData2 = contact.zpp_inner.int2.outer_i.get_userData();
		if(uData1.link != null) uData1.link.endContact(uData2.data,contact.zpp_inner.int2.outer_i);
		if(uData2.link != null) uData2.link.endContact(uData1.data,contact.zpp_inner.int1.outer_i);
	}
	,oneWayHandler: function(cb) {
		if(scenes.additional.Game.instance.jumpOff == true) {
			if(scenes.additional.Game.instance.ignorContact == false) {
				scenes.additional.Game.instance.jumpOff = false;
				if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				return zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
			}
			scenes.additional.Game.instance.ignorContact = false;
			if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
		}
		var colArb = cb.zpp_inner.pre_arbiter.wrapper().get_collisionArbiter();
		if(((function($this) {
			var $r;
			if(colArb.zpp_inner.colarb.wrap_normal == null) colArb.zpp_inner.colarb.getnormal();
			$r = colArb.zpp_inner.colarb.wrap_normal;
			return $r;
		}(this))).get_y() < 0.8) {
			if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
		} else {
			if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
		}
	}
	,__class__: ContactListener
};
var lime = {};
lime.AssetLibrary = function() {
};
$hxClasses["lime.AssetLibrary"] = lime.AssetLibrary;
lime.AssetLibrary.__name__ = ["lime","AssetLibrary"];
lime.AssetLibrary.prototype = {
	exists: function(id,type) {
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) return null; else return bytes.readUTFBytes(bytes.length);
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		return null;
	}
	,load: function(handler) {
		handler(this);
	}
	,loadAudioBuffer: function(id,handler) {
		handler(this.getAudioBuffer(id));
	}
	,loadBytes: function(id,handler) {
		handler(this.getBytes(id));
	}
	,loadFont: function(id,handler) {
		handler(this.getFont(id));
	}
	,loadImage: function(id,handler) {
		handler(this.getImage(id));
	}
	,loadText: function(id,handler) {
		var callback = function(bytes) {
			if(bytes == null) handler(null); else handler(bytes.readUTFBytes(bytes.length));
		};
		this.loadBytes(id,callback);
	}
	,__class__: lime.AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe.ds.StringMap();
	this.path = new haxe.ds.StringMap();
	this.className = new haxe.ds.StringMap();
	lime.AssetLibrary.call(this);
	var id;
	id = "Assets/general/fonts/impact.eot";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "Assets/general/fonts/impact.svg";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "Assets/general/fonts/impact.ttf";
	this.className.set(id,__ASSET__assets_general_fonts_impact_ttf);
	this.type.set(id,"FONT");
	id = "Assets/general/fonts/impact.woff";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "Assets/general/rotate.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "Assets/images1/0x/background.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "Assets/images1/0x/comixfinal.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "Assets/images1/0x/elements.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "Assets/images1/0x/map.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "Assets/images1/0x/menu.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "Assets/images1/0x/panels.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "Assets/images1/0x/scenes.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "Assets/images1/0x/shop.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "Assets/images1/0x/stones.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "Assets/images1/sglogo.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "Assets/params/panelParams.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "Assets/sounds/BirdFree.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/BirdFree.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/BirdInCage.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/BirdInCage.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/coconutsLand1.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/coconutsLand1.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/coconutsLand2.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/coconutsLand2.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/Collect1.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/Collect1.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/Collect2.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/Collect2.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/Collect3.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/Collect3.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/CrushStone1.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/CrushStone1.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/CrushStone2.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/CrushStone2.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/CrushWood1.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/CrushWood1.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/CrushWood2.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/CrushWood2.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/ducks.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/ducks.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/finalWindow.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/finalWindow.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/heroBeat.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/heroBeat.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/heroDamage1.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/heroDamage1.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/heroDamage2.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/heroDamage2.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/heroDoubleJump.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/heroDoubleJump.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/heroJump.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/heroJump.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/heroLand.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/heroLand.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/heroSlide.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/heroSlide.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/levelComplete.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/levelComplete.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/levelDefeat.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/levelDefeat.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/mainTheme.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/mainTheme.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/monkeyDead.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/monkeyDead.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/mouse_click.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/mouse_click.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/newCircleOnMap.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/newCircleOnMap.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/pickUpPlace.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/pickUpPlace.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/rollingStone.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/rollingStone.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/Shield.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/Shield.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/showFlag.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/showFlag.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/starCollect.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/starCollect.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/throwFlower.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/throwFlower.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/throwOrange.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/throwOrange.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/trampoline.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/trampoline.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "Assets/sounds/upgradeUp.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "Assets/sounds/upgradeUp.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	var assetsPrefix = ApplicationMain.config.assetsPrefix;
	if(assetsPrefix != null) {
		var $it0 = this.path.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value = assetsPrefix + this.path.get(k);
			this.path.set(k,value);
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime.AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime.AssetLibrary.prototype,{
	exists: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js.Boot.__cast(type , String); else requestedType = null;
		var assetType = this.type.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
		}
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		var bytes = null;
		var data = ((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime.app.Preloader.loaders.get(key);
			return $r;
		}(this))).data;
		if(typeof(data) == "string") {
			bytes = new lime.utils.ByteArray();
			bytes.writeUTFBytes(data);
		} else if(js.Boot.__instanceof(data,lime.utils.ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes;
		} else return null;
	}
	,getFont: function(id) {
		var limeFont;
		limeFont = js.Boot.__cast(Type.createInstance(this.className.get(id),[]) , lime.text.Font);
		return new openfl.text.Font(limeFont.name);
	}
	,getImage: function(id) {
		return lime.graphics.Image.fromImageElement((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime.app.Preloader.images.get(key);
			return $r;
		}(this)));
	}
	,getPath: function(id) {
		return this.path.get(id);
	}
	,getText: function(id) {
		var bytes = null;
		var data = ((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime.app.Preloader.loaders.get(key);
			return $r;
		}(this))).data;
		if(typeof(data) == "string") return data; else if(js.Boot.__instanceof(data,lime.utils.ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes.readUTFBytes(bytes.length);
		} else return null;
	}
	,isLocal: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js.Boot.__cast(type , String); else requestedType = null;
		return true;
	}
	,list: function(type) {
		var requestedType;
		if(type != null) requestedType = js.Boot.__cast(type , String); else requestedType = null;
		var items = [];
		var $it0 = this.type.keys();
		while( $it0.hasNext() ) {
			var id = $it0.next();
			if(requestedType == null || this.exists(id,type)) items.push(id);
		}
		return items;
	}
	,loadAudioBuffer: function(id,handler) {
		handler(this.getAudioBuffer(id));
	}
	,loadBytes: function(id,handler) {
		handler(this.getBytes(id));
	}
	,loadImage: function(id,handler) {
		handler(this.getImage(id));
	}
	,loadText: function(id,handler) {
		var callback = function(bytes) {
			if(bytes == null) handler(null); else handler(bytes.readUTFBytes(bytes.length));
		};
		this.loadBytes(id,callback);
	}
	,__class__: DefaultAssetLibrary
});
lime.text = {};
lime.text.Font = function(name) {
	this.name = name;
	if(this.__fontPath != null) this.__fromFile(this.__fontPath);
};
$hxClasses["lime.text.Font"] = lime.text.Font;
lime.text.Font.__name__ = ["lime","text","Font"];
lime.text.Font.fromBytes = function(bytes) {
	var font = new lime.text.Font();
	font.__fromBytes(bytes);
	return font;
};
lime.text.Font.fromFile = function(path) {
	var font = new lime.text.Font();
	font.__fromFile(path);
	return font;
};
lime.text.Font.prototype = {
	decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime.text.Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
var __ASSET__assets_general_fonts_impact_ttf = function() {
	lime.text.Font.call(this);
	this.name = "Impact";
};
$hxClasses["__ASSET__assets_general_fonts_impact_ttf"] = __ASSET__assets_general_fonts_impact_ttf;
__ASSET__assets_general_fonts_impact_ttf.__name__ = ["__ASSET__assets_general_fonts_impact_ttf"];
__ASSET__assets_general_fonts_impact_ttf.__super__ = lime.text.Font;
__ASSET__assets_general_fonts_impact_ttf.prototype = $extend(lime.text.Font.prototype,{
	__class__: __ASSET__assets_general_fonts_impact_ttf
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw "EReg::matched";
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.indexOf = function(it,v) {
	var i = 0;
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var v2 = $it0.next();
		if(v == v2) return i;
		i++;
	}
	return -1;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,iterator: function() {
		return { h : this.h, hasNext : function() {
			return this.h != null;
		}, next : function() {
			if(this.h == null) return null;
			var x = this.h[0];
			this.h = this.h[1];
			return x;
		}};
	}
	,__class__: List
};
var ScenesList = $hxClasses["ScenesList"] = { __ename__ : true, __constructs__ : ["Menu","LevelBuilder","Comix","Shop","Final","Levels"] };
ScenesList.Menu = ["Menu",0];
ScenesList.Menu.toString = $estr;
ScenesList.Menu.__enum__ = ScenesList;
ScenesList.LevelBuilder = ["LevelBuilder",1];
ScenesList.LevelBuilder.toString = $estr;
ScenesList.LevelBuilder.__enum__ = ScenesList;
ScenesList.Comix = ["Comix",2];
ScenesList.Comix.toString = $estr;
ScenesList.Comix.__enum__ = ScenesList;
ScenesList.Shop = ["Shop",3];
ScenesList.Shop.toString = $estr;
ScenesList.Shop.__enum__ = ScenesList;
ScenesList.Final = ["Final",4];
ScenesList.Final.toString = $estr;
ScenesList.Final.__enum__ = ScenesList;
ScenesList.Levels = ["Levels",5];
ScenesList.Levels.toString = $estr;
ScenesList.Levels.__enum__ = ScenesList;
var IMap = function() { };
$hxClasses["IMap"] = IMap;
IMap.__name__ = ["IMap"];
IMap.prototype = {
	__class__: IMap
};
Math.__name__ = ["Math"];
var NMEPreloader = function() {
	openfl.display.Sprite.call(this);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = openfl.display.Sprite;
NMEPreloader.prototype = $extend(openfl.display.Sprite.prototype,{
	getBackgroundColor: function() {
		return 0;
	}
	,getHeight: function() {
		var height = 0;
		if(height > 0) return height; else return openfl.Lib.current.stage.stageHeight;
	}
	,getWidth: function() {
		var width = 0;
		if(width > 0) return width; else return openfl.Lib.current.stage.stageWidth;
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) percentLoaded = 1;
		this.progress.set_scaleX(percentLoaded);
	}
	,needLoad: function(value) {
		return true;
	}
	,__class__: NMEPreloader
});
var OfferValues = $hx_exports.OfferValues = function() {
	this.defMoney = 0;
	this.limitedPlays = 0;
	this.currPlays = 0;
	this.limitedTime = 0;
	this.limitedActive = false;
	OfferValues.instance = this;
	var xml = openfl.Assets.getText("Assets/params/panelParams.xml");
	xml = "<?xml version='1.0' encoding='utf-8'?><data><SubData name='gift' active='true'/><SubData name='limitedOffer' active='true' time='1' plays='10'/></data>";
	var x = new haxe.xml.Fast(Xml.parse(xml).firstElement());
	var $it0 = x.nodes.resolve("SubData").iterator();
	while( $it0.hasNext() ) {
		var texture = $it0.next();
		if(texture.att.resolve("name") == "gift") {
			if(texture.att.resolve("active") == "false") this.setDefaulGift(); else this.setGiftParams(20);
		} else if(texture.att.resolve("name") == "limitedOffer") {
			if(texture.att.resolve("active") == "false") this.setDefaultLimited(); else {
				this.limitedTime = Std.parseInt(texture.att.resolve("time"));
				this.limitedPlays = Std.parseInt(texture.att.resolve("plays"));
				this.setLimitedParams(50);
			}
		}
	}
};
$hxClasses["OfferValues"] = OfferValues;
OfferValues.__name__ = ["OfferValues"];
OfferValues.instance = null;
OfferValues.prototype = {
	setDefaulGift: function() {
		this.gift = 0;
	}
	,setDefaultLimited: function() {
		this.limited = 0;
	}
	,setGiftParams: function(money) {
		this.gift = money;
	}
	,setLimitedParams: function(money) {
		this.saveTime = new Date().getTime();
		com.tools.DataManager.getInstance().saveData("timer",this.saveTime);
		this.defMoney = money;
		this.limitedActive = true;
		this.limited = money;
	}
	,calcPlays: function() {
		if(this.limitedActive == true && this.limited == 0) {
			this.currPlays += 1;
			if(this.currPlays >= this.limitedPlays) {
				this.currPlays = 0;
				this.setLimitedParams(this.defMoney);
			}
		}
	}
	,__class__: OfferValues
};
openfl.display.BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) fillColor = -1;
	if(transparent == null) transparent = true;
	this.transparent = transparent;
	if(width > 0 && height > 0) {
		this.width = width;
		this.height = height;
		this.rect = new openfl.geom.Rectangle(0,0,width,height);
		if(transparent) {
			if((function($this) {
				var $r;
				var $int = fillColor & -16777216;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this)) == 0) fillColor = 0;
		} else fillColor = -16777216 | fillColor & 16777215;
		this.__image = new lime.graphics.Image(null,0,0,width,height,fillColor);
		this.__image.set_transparent(transparent);
		this.__isValid = true;
	}
	this.__createUVs();
};
$hxClasses["openfl.display.BitmapData"] = openfl.display.BitmapData;
openfl.display.BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl.display.BitmapData.__interfaces__ = [openfl.display.IBitmapDrawable];
openfl.display.BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__loadFromBase64(base64,type,onload);
	return bitmapData;
};
openfl.display.BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__loadFromBytes(bytes,rawAlpha,onload);
	return bitmapData;
};
openfl.display.BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl.display.BitmapData(0,0,transparent);
	bitmapData.__loadFromImage(lime.graphics.Image.fromCanvas(canvas));
	bitmapData.__image.set_transparent(transparent);
	return bitmapData;
};
openfl.display.BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__loadFromFile(path,onload,onerror);
	return bitmapData;
};
openfl.display.BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl.display.BitmapData(0,0,transparent);
	bitmapData.__loadFromImage(image);
	bitmapData.__image.set_transparent(transparent);
	return bitmapData;
};
openfl.display.BitmapData.__flipPixel = function(pixel) {
	return (pixel & 255) << 24 | (pixel >> 8 & 255) << 16 | (pixel >> 16 & 255) << 8 | pixel >> 24 & 255;
};
openfl.display.BitmapData.__ucompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >> 24 & 255;
	tmp2 = n2 >> 24 & 255;
	if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
		tmp1 = n1 >> 16 & 255;
		tmp2 = n2 >> 16 & 255;
		if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
			tmp1 = n1 >> 8 & 255;
			tmp2 = n2 >> 8 & 255;
			if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else return 0;
			}
		}
	}
};
openfl.display.BitmapData.prototype = {
	applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid) return;
		lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this.__image);
		lime.graphics.utils.ImageCanvasUtil.createImageData(this.__image);
		lime.graphics.utils.ImageCanvasUtil.convertToCanvas(sourceBitmapData.__image);
		lime.graphics.utils.ImageCanvasUtil.createImageData(sourceBitmapData.__image);
		filter.__applyFilter(this.__image.buffer.__srcImageData,sourceBitmapData.__image.buffer.__srcImageData,sourceRect,destPoint);
		this.__image.dirty = true;
	}
	,clone: function() {
		if(!this.__isValid) return new openfl.display.BitmapData(this.width,this.height,this.transparent); else return openfl.display.BitmapData.fromImage(this.__image.clone(),this.transparent);
	}
	,colorTransform: function(rect,colorTransform) {
		this.__image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.__isValid) return;
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime.graphics.ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime.graphics.ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime.graphics.ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime.graphics.ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime.graphics.ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime.graphics.ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime.graphics.ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime.graphics.ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.__image.copyChannel(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(!this.__isValid || sourceBitmapData == null) return;
		this.__image.copyPixels(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null?alphaBitmapData.__image:null,alphaPoint != null?alphaPoint.__toLimeVector2():null,mergeAlpha);
	}
	,dispose: function() {
		this.__image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		if(!this.__isValid) return;
		var _g = this.__image.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this.__image);
			lime.graphics.utils.ImageCanvasUtil.sync(this.__image);
			var buffer = this.__image.buffer;
			var renderSession = new openfl._internal.renderer.RenderSession();
			renderSession.context = buffer.__srcContext;
			renderSession.roundPixels = true;
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.webkitImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			var matrixCache = source.__worldTransform;
			if(matrix != null) source.__worldTransform = matrix; else source.__worldTransform = new openfl.geom.Matrix();
			source.__updateChildren(false);
			source.__renderCanvas(renderSession);
			source.__worldTransform = matrixCache;
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.webkitImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			break;
		default:
		}
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.__isValid || rect == null) return byteArray = null;
		if(js.Boot.__instanceof(compressor,openfl.display.PNGEncoderOptions)) return byteArray = this.__image.encode("png"); else if(js.Boot.__instanceof(compressor,openfl.display.JPEGEncoderOptions)) return byteArray = this.__image.encode("jpg",(js.Boot.__cast(compressor , openfl.display.JPEGEncoderOptions)).quality);
		return byteArray = null;
	}
	,fillRect: function(rect,color) {
		if(!this.__isValid || rect == null) return;
		this.__image.fillRect(rect.__toLimeRectangle(),color);
	}
	,floodFill: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.floodFill(x,y,color);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl) {
		if(this.__buffer == null) {
			var data = [this.width,this.height,0,1,1,0,this.height,0,0,1,this.width,0,0,1,0,0,0,0,0,0];
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(data),gl.STATIC_DRAW);
			gl.bindBuffer(gl.ARRAY_BUFFER,null);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) findColor = true;
		return this.__image.get_rect().__toFlashRectangle();
	}
	,getPixel: function(x,y) {
		if(!this.__isValid) return 0;
		return this.__image.getPixel(x,y);
	}
	,getPixel32: function(x,y) {
		if(!this.__isValid) return 0;
		return this.__image.getPixel32(x,y);
	}
	,getPixels: function(rect) {
		if(!this.__isValid) return null;
		if(rect == null) rect = this.rect;
		return this.__image.getPixels(rect.__toLimeRectangle());
	}
	,getTexture: function(gl) {
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
			this.__image.dirty = true;
		}
		if(this.__image.dirty) {
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.__image.clone();
			textureImage.set_premultiplied(true);
			gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,this.width,this.height,0,gl.RGBA,gl.UNSIGNED_BYTE,textureImage.get_data());
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.__image.dirty = false;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = pixels.length / 4 | 0;
		var result;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(length);
		this1.data = this2;
		this1.length = length;
		this1.fixed = true;
		result = this1;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var value = pixels.readUnsignedInt();
			if(!result.fixed) {
				if(i >= result.length) result.length = i + 1;
				if(result.data.length < result.length) {
					var data;
					var this3;
					this3 = new Array(result.data.length + 10);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(result.data,0,data,0,result.data.length);
					result.data = data;
				}
			}
			result.data[i] = value;
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect;
		if(hRect != null) rect = hRect; else rect = new openfl.geom.Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var result;
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			_g.push((function($this) {
				var $r;
				var _g2 = [];
				{
					var _g3 = 0;
					while(_g3 < 256) {
						var j = _g3++;
						_g2.push(0);
					}
				}
				$r = _g2;
				return $r;
			}(this)));
		}
		result = _g;
		var _g21 = 0;
		var _g11 = pixels.length;
		while(_g21 < _g11) {
			var i1 = _g21++;
			++result[i1 % 4][pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) secondAlphaThreshold = 1;
		if(!this.__isValid) return false;
		openfl.Lib.notImplemented("BitmapData.hitTest");
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid || sourceRect == null || destPoint == null) return;
		this.__image.merge(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(high == null) high = 255;
		if(low == null) low = 0;
		if(!this.__isValid) return;
		openfl.Lib.notImplemented("BitmapData.noise");
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = this.getPixels(sourceRect);
		pixels.position = 0;
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var c1;
		var c2;
		var c3;
		var c4;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) c1 = pixelValue & -16777216; else c1 = alphaArray[pixelValue >> 24 & 255];
			if(redArray == null) c2 = pixelValue & 16711680; else c2 = redArray[pixelValue >> 16 & 255];
			if(greenArray == null) c3 = pixelValue & 65280; else c3 = greenArray[pixelValue >> 8 & 255];
			if(blueArray == null) c4 = pixelValue & 255; else c4 = blueArray[pixelValue & 255];
			a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
			if(a > 255) a == 255;
			r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
			if(r > 255) r == 255;
			g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
			if(g > 255) g == 255;
			b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
			if(b > 255) b == 255;
			color = a << 24 | r << 16 | g << 8 | b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = new openfl.geom.Rectangle(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		openfl.Lib.notImplemented("BitmapData.perlinNoise");
	}
	,scroll: function(x,y) {
		openfl.Lib.notImplemented("BitmapData.scroll");
	}
	,setPixel: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.setPixel(x,y,color);
	}
	,setPixel32: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.setPixel32(x,y,color);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.__isValid || rect == null) return;
		this.__image.setPixels(rect.__toLimeRectangle(),byteArray);
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new lime.utils.ByteArray();
		byteArray.set_length(inputVector.length * 4);
		var _g = 0;
		while(_g < inputVector.length) {
			var color = inputVector.data[_g];
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		if(sourceBitmapData == this && sourceRect.equals(this.rect) && destPoint.x == 0 && destPoint.y == 0) {
			var hits = 0;
			threshold = (threshold & 255) << 24 | (threshold >> 8 & 255) << 16 | (threshold >> 16 & 255) << 8 | threshold >> 24 & 255;
			color = (color & 255) << 24 | (color >> 8 & 255) << 16 | (color >> 16 & 255) << 8 | color >> 24 & 255;
			var memory = new lime.utils.ByteArray();
			memory.set_length(this.width * this.height * 4);
			memory = this.getPixels(this.rect);
			memory.position = 0;
			openfl.Memory.select(memory);
			var thresholdMask = threshold & mask;
			var width_yy;
			var position;
			var pixelMask;
			var pixelValue;
			var i;
			var test;
			var _g1 = 0;
			var _g = this.height;
			while(_g1 < _g) {
				var yy = _g1++;
				width_yy = this.width * yy;
				var _g3 = 0;
				var _g2 = this.width;
				while(_g3 < _g2) {
					var xx = _g3++;
					position = (width_yy + xx) * 4;
					pixelValue = openfl.Memory._setPositionTemporarily(position,function() {
						return openfl.Memory.gcRef.readInt();
					});
					pixelMask = pixelValue & mask;
					i = openfl.display.BitmapData.__ucompare(pixelMask,thresholdMask);
					test = false;
					if(operation == "==") test = i == 0; else if(operation == "<") test = i == -1; else if(operation == ">") test = i == 1; else if(operation == "!=") test = i != 0; else if(operation == "<=") test = i == 0 || i == -1; else if(operation == ">=") test = i == 0 || i == 1;
					if(test) {
						openfl.Memory.setI32(position,color);
						hits++;
					}
				}
			}
			memory.position = 0;
			this.setPixels(this.rect,memory);
			openfl.Memory.select(null);
			return hits;
		} else {
			var sx = sourceRect.x | 0;
			var sy = sourceRect.y | 0;
			var sw = sourceBitmapData.width | 0;
			var sh = sourceBitmapData.height | 0;
			var dx = destPoint.x | 0;
			var dy = destPoint.y | 0;
			var bw = this.width - sw - dx;
			var bh = this.height - sh - dy;
			var dw;
			if(bw < 0) dw = sw + (this.width - sw - dx); else dw = sw;
			var dh;
			if(bw < 0) dh = sh + (this.height - sh - dy); else dh = sh;
			var hits1 = 0;
			threshold = (threshold & 255) << 24 | (threshold >> 8 & 255) << 16 | (threshold >> 16 & 255) << 8 | threshold >> 24 & 255;
			color = (color & 255) << 24 | (color >> 8 & 255) << 16 | (color >> 16 & 255) << 8 | color >> 24 & 255;
			var canvasMemory = sw * sh * 4;
			var sourceMemory = 0;
			if(copySource) sourceMemory = sw * sh * 4;
			var totalMemory = canvasMemory + sourceMemory;
			var memory1 = new lime.utils.ByteArray();
			if(memory1.allocated < totalMemory) memory1.___resizeBuffer(memory1.allocated = Std["int"](Math.max(totalMemory,memory1.allocated * 2))); else if(memory1.allocated > totalMemory * 2) memory1.___resizeBuffer(memory1.allocated = totalMemory);
			memory1.length = totalMemory;
			totalMemory;
			memory1.position = 0;
			var bitmapData = sourceBitmapData.clone();
			var pixels = bitmapData.getPixels(sourceRect);
			memory1.writeBytes(pixels);
			memory1.position = canvasMemory;
			if(copySource) memory1.writeBytes(pixels);
			memory1.position = 0;
			openfl.Memory.select(memory1);
			var thresholdMask1 = threshold & mask;
			var position1;
			var pixelMask1;
			var pixelValue1;
			var i1;
			var test1;
			var _g4 = 0;
			while(_g4 < dh) {
				var yy1 = _g4++;
				var _g11 = 0;
				while(_g11 < dw) {
					var xx1 = _g11++;
					position1 = (xx1 + sx + (yy1 + sy) * sw) * 4;
					pixelValue1 = openfl.Memory._setPositionTemporarily(position1,function() {
						return openfl.Memory.gcRef.readInt();
					});
					pixelMask1 = pixelValue1 & mask;
					i1 = openfl.display.BitmapData.__ucompare(pixelMask1,thresholdMask1);
					test1 = false;
					if(operation == "==") test1 = i1 == 0; else if(operation == "<") test1 = i1 == -1; else if(operation == ">") test1 = i1 == 1; else if(operation == "!=") test1 = i1 != 0; else if(operation == "<=") test1 = i1 == 0 || i1 == -1; else if(operation == ">=") test1 = i1 == 0 || i1 == 1;
					if(test1) {
						openfl.Memory.setI32(position1,color);
						hits1++;
					} else if(copySource) openfl.Memory.setI32(position1,openfl.Memory._setPositionTemporarily(canvasMemory + position1,function() {
						return openfl.Memory.gcRef.readInt();
					}));
				}
			}
			memory1.position = 0;
			bitmapData.setPixels(sourceRect,memory1);
			this.copyPixels(bitmapData,bitmapData.rect,destPoint);
			openfl.Memory.select(null);
			return hits1;
		}
	}
	,unlock: function(changeRect) {
	}
	,__createUVs: function() {
		if(this.__uvData == null) this.__uvData = new openfl.display.TextureUvs();
		this.__uvData.x0 = 0;
		this.__uvData.y0 = 0;
		this.__uvData.x1 = 1;
		this.__uvData.y1 = 0;
		this.__uvData.x2 = 1;
		this.__uvData.y2 = 1;
		this.__uvData.x3 = 0;
		this.__uvData.y3 = 1;
	}
	,__loadFromBase64: function(base64,type,onload) {
		var _g = this;
		lime.graphics.Image.fromBase64(base64,type,function(image) {
			_g.__loadFromImage(image);
			if(onload != null) onload(_g);
		});
	}
	,__loadFromBytes: function(bytes,rawAlpha,onload) {
		var _g = this;
		lime.graphics.Image.fromBytes(bytes,function(image) {
			_g.__loadFromImage(image);
			if(rawAlpha != null) {
				lime.graphics.utils.ImageCanvasUtil.convertToCanvas(_g.__image);
				lime.graphics.utils.ImageCanvasUtil.createImageData(_g.__image);
				var data = _g.__image.buffer.data;
				var _g2 = 0;
				var _g1 = rawAlpha.length;
				while(_g2 < _g1) {
					var i = _g2++;
					data[i * 4 + 3] = rawAlpha.readUnsignedByte();
				}
				_g.__image.dirty = true;
			}
			if(onload != null) onload(_g);
		});
	}
	,__loadFromFile: function(path,onload,onerror) {
		var _g = this;
		lime.graphics.Image.fromFile(path,function(image) {
			_g.__loadFromImage(image);
			if(onload != null) onload(_g);
		},onerror);
	}
	,__loadFromImage: function(image) {
		this.__image = image;
		this.width = image.width;
		this.height = image.height;
		this.rect = new openfl.geom.Rectangle(0,0,image.width,image.height);
		this.__isValid = true;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__isValid) return;
		lime.graphics.utils.ImageCanvasUtil.sync(this.__image);
		var context = renderSession.context;
		if(this.__worldTransform == null) this.__worldTransform = new openfl.geom.Matrix();
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.drawImage(this.__image.buffer.get_src(),0,0);
	}
	,__renderMask: function(renderSession) {
	}
	,__sync: function() {
		lime.graphics.utils.ImageCanvasUtil.sync(this.__image);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__class__: openfl.display.BitmapData
};
var LogoImage = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl.display.BitmapData.call(this,0,0,transparent,fillRGBA);
	if(LogoImage.preload != null) {
		this.__image = LogoImage.preload;
		width = this.__image.width;
		height = this.__image.height;
	} else this.__loadFromBase64(haxe.Resource.getString(LogoImage.resourceName),LogoImage.resourceType,function(b) {
		if(LogoImage.preload == null) LogoImage.preload = b.__image;
		if(onload != null) onload(b);
	});
};
$hxClasses["LogoImage"] = LogoImage;
LogoImage.__name__ = ["LogoImage"];
LogoImage.preload = null;
LogoImage.__super__ = openfl.display.BitmapData;
LogoImage.prototype = $extend(openfl.display.BitmapData.prototype,{
	__class__: LogoImage
});
var SGLogoImage = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl.display.BitmapData.call(this,0,0,transparent,fillRGBA);
	if(SGLogoImage.preload != null) {
		this.__image = SGLogoImage.preload;
		width = this.__image.width;
		height = this.__image.height;
	} else this.__loadFromBase64(haxe.Resource.getString(SGLogoImage.resourceName),SGLogoImage.resourceType,function(b) {
		if(SGLogoImage.preload == null) SGLogoImage.preload = b.__image;
		if(onload != null) onload(b);
	});
};
$hxClasses["SGLogoImage"] = SGLogoImage;
SGLogoImage.__name__ = ["SGLogoImage"];
SGLogoImage.preload = null;
SGLogoImage.__super__ = openfl.display.BitmapData;
SGLogoImage.prototype = $extend(openfl.display.BitmapData.prototype,{
	__class__: SGLogoImage
});
var Preloader = function() {
	this.done = false;
	this.onloadOpenfl = false;
	this.onloadWindow = false;
	this._padding = 3;
	this._height = 30;
	this._width = 400;
	this._y = 425;
	this._x = 160;
	NMEPreloader.call(this);
};
$hxClasses["Preloader"] = Preloader;
Preloader.__name__ = ["Preloader"];
Preloader.__super__ = NMEPreloader;
Preloader.prototype = $extend(NMEPreloader.prototype,{
	onInit: function() {
		api.SoftGames.getInstance().init();
		com.Variables.initParam();
		this.logoImage = new openfl.display.Bitmap(new LogoImage(0,0));
		this.logoImage.smoothing = true;
		this.logoImage.set_x(-com.Variables.oW);
		this.logoImage.set_y(-com.Variables.oH);
		this.addChild(this.logoImage);
		this.sglogoImage = new openfl.display.Bitmap(new SGLogoImage(0,0));
		this.sglogoImage.smoothing = true;
		this.sglogoImage.set_x(125);
		this.sglogoImage.set_y(300);
		this.addChild(this.sglogoImage);
		this.outline = new openfl.display.Sprite();
		this.addChild(this.outline);
		this.outline.get_graphics().lineStyle(1.5,13957620,1,true);
		this.outline.get_graphics().drawRoundRect(0,0,this._width,this._height,this._padding * 2,this._padding * 2);
		this.outline.get_graphics().endFill();
		this.outline.set_x(this._x);
		this.progress = new openfl.display.Sprite();
		this.addChild(this.progress);
		this.progress.get_graphics().beginFill(14742271,1);
		this.progress.get_graphics().drawRect(0,0,this._width - this._padding * 2,this._height - this._padding * 2);
		this.progress.get_graphics().beginFill(16777215,1);
		this.progress.get_graphics().drawRect(4,2,this._width - 8 - this._padding * 2,this._height - 12 - this._padding * 2);
		this.progress.set_x(this._x + this._padding);
		this.progress.set_scaleX(0);
		this.outline.set_y(this._y);
		this.progress.set_y(this._y + this._padding);
		this.addEventListener(openfl.events.MouseEvent.MOUSE_UP,com.Sponsors.goLogo);
		window.addEventListener("resize",$bind(this,this.resize));
		window.onload = $bind(this,this.windowOnLoad);
		this.resize();
	}
	,resize: function(e) {
		com.Variables.resizeManual();
		this.set_scaleX(this.set_scaleY(1));
		this.set_scaleX(this.set_scaleY(com.Variables.currentScale));
		this.set_x(com.Variables.shiftLayerX);
		this.set_y(com.Variables.shiftLayerY);
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded >= 1) hidePreloader(), percentLoaded = 1;
		this.progress.set_scaleX(percentLoaded);
	}
	,windowOnLoad: function(e) {
		this.onloadWindow = true;
		if(this.onloadOpenfl == true) this.onComplete();
	}
	,onLoaded: function() {
		this.onloadOpenfl = true;
		SG_Hooks.loaded();
		if(this.onloadWindow == true) this.onComplete();
	}
	,onComplete: function() {
		this.removeChild(this.outline);
		this.removeChild(this.progress);
		this.removeEventListener(openfl.events.MouseEvent.MOUSE_UP,com.Sponsors.goLogo);
		window.removeEventListener("resize",$bind(this,this.resize));
		this.removeChild(this.logoImage);
		this.removeChild(this.sglogoImage);
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
		//SG_Hooks.loaded();
	}
	,__class__: Preloader
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compare = function(a,b) {
	if(a == b) return 0; else if(a > b) return 1; else return -1;
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.isEnumValue = function(v) {
	return v != null && v.__enum__ != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		Reflect.setField(o2,f,Reflect.field(o,f));
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var SceneManager = function() {
	this.startChangeScene = false;
	openfl.display.Sprite.call(this);
	this.init();
};
$hxClasses["SceneManager"] = SceneManager;
SceneManager.__name__ = ["SceneManager"];
SceneManager.__super__ = openfl.display.Sprite;
SceneManager.prototype = $extend(openfl.display.Sprite.prototype,{
	init: function() {
		this.scenesList = new Array();
		this.sceneLayer = new openfl.display.Sprite();
		this.sceneLayer.get_graphics().beginFill(0,1);
		this.sceneLayer.get_graphics().drawRect(-com.Variables.oW,-com.Variables.oH,com.Variables.mSW,com.Variables.mSH);
		this.sceneLayer.get_graphics().endFill();
		this.addChild(this.sceneLayer);
		this.effectLayer = new openfl.display.Sprite();
		this.effectLayer.get_graphics().beginFill(16777215);
		this.effectLayer.get_graphics().drawRect(-com.Variables.oW,-com.Variables.oH,com.Variables.mSW,com.Variables.mSH);
		this.effectLayer.set_alpha(0);
		this.effectLayer.mouseChildren = this.effectLayer.mouseEnabled = false;
		this.addChild(this.effectLayer);
	}
	,deletePrevScene: function() {
		if(this.scenesList.length > 0) {
			var oldScene = this.scenesList.shift();
			oldScene.free();
			this.sceneLayer.removeChild(oldScene);
			oldScene = null;
		}
	}
	,show: function(scene) {
		if(scene == null) return;
		this.changeScene();
		this.scenesList.push(scene);
		this.sceneLayer.addChild(scene);
		scene.init();
	}
	,changeScene: function() {
		this.startChangeScene = true;
		this.effectLayer.set_alpha(1);
	}
	,update: function() {
		if(this.startChangeScene == true) {
			var _g = this.effectLayer;
			_g.set_alpha(_g.get_alpha() - 0.15);
			if(this.effectLayer.get_alpha() <= 0) {
				this.effectLayer.set_alpha(0);
				this.startChangeScene = false;
			}
		}
	}
	,__class__: SceneManager
});
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	add: function(x) {
		this.b += Std.string(x);
	}
	,addSub: function(s,pos,len) {
		if(len == null) this.b += HxOverrides.substr(s,pos,null); else this.b += HxOverrides.substr(s,pos,len);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null;
	return js.Boot.getClass(o);
};
Type.getClassName = function(c) {
	var a = c.__name__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw "Too many arguments";
	}
	return null;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.enumEq = function(a,b) {
	if(a == b) return true;
	try {
		if(a[0] != b[0]) return false;
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) return false;
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) return false;
	} catch( e1 ) {
		return false;
	}
	return true;
};
var XmlType = $hxClasses["XmlType"] = { __ename__ : true, __constructs__ : [] };
var Xml = function() {
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.Element = null;
Xml.PCData = null;
Xml.CData = null;
Xml.Comment = null;
Xml.DocType = null;
Xml.ProcessingInstruction = null;
Xml.Document = null;
Xml.parse = function(str) {
	return haxe.xml.Parser.parse(str);
};
Xml.createElement = function(name) {
	var r = new Xml();
	r.nodeType = Xml.Element;
	r._children = new Array();
	r._attributes = new haxe.ds.StringMap();
	r.set_nodeName(name);
	return r;
};
Xml.createPCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.PCData;
	r.set_nodeValue(data);
	return r;
};
Xml.createCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.CData;
	r.set_nodeValue(data);
	return r;
};
Xml.createComment = function(data) {
	var r = new Xml();
	r.nodeType = Xml.Comment;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocType = function(data) {
	var r = new Xml();
	r.nodeType = Xml.DocType;
	r.set_nodeValue(data);
	return r;
};
Xml.createProcessingInstruction = function(data) {
	var r = new Xml();
	r.nodeType = Xml.ProcessingInstruction;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocument = function() {
	var r = new Xml();
	r.nodeType = Xml.Document;
	r._children = new Array();
	return r;
};
Xml.prototype = {
	get_nodeName: function() {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName;
	}
	,set_nodeName: function(n) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName = n;
	}
	,set_nodeValue: function(v) {
		if(this.nodeType == Xml.Element || this.nodeType == Xml.Document) throw "bad nodeType";
		return this._nodeValue = v;
	}
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.get(att);
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		this._attributes.set(att,value);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.exists(att);
	}
	,elementsNamed: function(name) {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			var k = this.cur;
			var l = this.x.length;
			while(k < l) {
				var n = this.x[k];
				if(n.nodeType == Xml.Element && n._nodeName == name) break;
				k++;
			}
			this.cur = k;
			return k < l;
		}, next : function() {
			var k1 = this.cur;
			var l1 = this.x.length;
			while(k1 < l1) {
				var n1 = this.x[k1];
				k1++;
				if(n1.nodeType == Xml.Element && n1._nodeName == name) {
					this.cur = k1;
					return n1;
				}
			}
			return null;
		}};
	}
	,firstElement: function() {
		if(this._children == null) throw "bad nodetype";
		var cur = 0;
		var l = this._children.length;
		while(cur < l) {
			var n = this._children[cur];
			if(n.nodeType == Xml.Element) return n;
			cur++;
		}
		return null;
	}
	,addChild: function(x) {
		if(this._children == null) throw "bad nodetype";
		if(x._parent != null) HxOverrides.remove(x._parent._children,x);
		x._parent = this;
		this._children.push(x);
	}
	,__class__: Xml
	,__properties__: {set_nodeValue:"set_nodeValue",set_nodeName:"set_nodeName",get_nodeName:"get_nodeName"}
};
var api = {};
api.SoftGames = function() {
	this.langInited = false;
	this.lang = "en";
	this.useApi = true;
	if(api.SoftGames.instance != null) throw "Error: Allready inited. Use getInstance() instead;";
	api.SoftGames.instance = this;
};
$hxClasses["api.SoftGames"] = api.SoftGames;
api.SoftGames.__name__ = ["api","SoftGames"];
api.SoftGames.isLocalStorageNameSupported = null;
api.SoftGames.instance = null;
api.SoftGames.isLocalStorageNameSupportedfunc = function() {

			var testKey = 'test', storage = window.sessionStorage;
			try {
			storage.setItem(testKey, '1');
			storage.removeItem(testKey);
			return true;
			} catch (error) {
			return false;
			}
		;
	return false;
};
api.SoftGames.getInstance = function() {
	if(api.SoftGames.instance == null) return new api.SoftGames(); else return api.SoftGames.instance;
};
api.SoftGames.prototype = {
	init: function() {
		if(this.useApi == false) return;
		api.SoftGames.isLocalStorageNameSupported = api.SoftGames.isLocalStorageNameSupportedfunc();
		this.sg = SG_Hooks;
	}
	,initLang: function() {
		if(this.useApi == false || this.langInited == true) return;
		this.langInited = true;
		this.lang = "en"; //this.sg.getLanguage(["en","de","es","fr","it","pt","ru","tr","nl","pl"]);
	}
	,setOrientationHandler: function(func) {
		if(this.useApi == false) return;
		this.sg.setOrientationHandler(func);
	}
	,setResizeHandler: function(func) {
		if(this.useApi == false) return;
		this.sg.setResizeHandler(func);
	}
	,start: function() {
		if(this.useApi == false) return;
		this.sg.start();
	}
	,levelStarted: function(level) {;
		if(this.useApi == false) return;
		this.sg.levelStarted(level);
	}
	,levelFinished: function(level,score) {
		if(this.useApi == false) return;
		this.sg.levelFinished(level,score);
	}
	,levelUp: function(level,score) {
		turnOffSoundForAd();
		if(this.useApi == false) return;
		this.sg.levelUp(level,score, function() { turnOnSoundForAd(); });
	}
	,gameOver: function(level,score) {
		turnOffSoundForAd();
		if(this.useApi == false) return;
		this.sg.gameOver(level,score, function() { turnOnSoundForAd(); });
	}
	,setPauseHandler: function(func) {
		if(this.useApi == false) return;
		this.sg.setPauseHandler(func);
	}
	,setUnpauseHandler: function(func) {
		if(this.useApi == false) return;
		this.sg.setUnpauseHandler(func);
	}
	,setStorageItem: function(a,b) {
		if(this.useApi == false) return;
		this.sg.setStorageItem(a,b);
	}
	,getStorageItem: function(a) {
		if(this.useApi == false) return -1;
		return this.sg.getStorageItem(a);
	}
	,isEnabledIncentiviseButton: function() {
		return this.sg.isEnabledIncentiviseButton();
	}
	,triggerIncentivise: function(func) {
		this.sg.triggerIncentivise(func);
	}
	,__class__: api.SoftGames
};
var com = {};
com.Initializer = function() {
	this.fontName = openfl.Assets.getFont("Assets/general/fonts/impact.ttf").get_fontName();
	this.initTexts(api.SoftGames.getInstance().lang);
	this.initSounds();
	this.initAwards();
};
$hxClasses["com.Initializer"] = com.Initializer;
com.Initializer.__name__ = ["com","Initializer"];
com.Initializer.prototype = {
	initTexts: function(lang) {
		this.texts = new haxe.ds.StringMap();
		if(lang == "en") {
			this.texts.set("dodge","Dodged");
			this.texts.set("unlockitems","Unlock items");
			this.texts.set("unlockeditems","Items unlocked!");
			this.texts.set("pause","Pause");
			this.texts.set("score","score");
			this.texts.set("health","Health : ");
			this.texts.set("victory","Victory");
			this.texts.set("defeat","Oops try again");
			this.texts.set("noPack","Game over?");
			this.texts.set("getCoins","Get more gems");
			this.texts.set("whatchfullyvideo","No more videos\nfor today");
			this.texts.set("tutorial1","Click to jump");
			this.texts.set("tutorial2","Swipe down\nto jump down");
			this.texts.set("tutorial3","Swipe right\nto rolling");
			this.texts.set("tutorial4","Free the birds\nto get stars");
			this.texts.set("tutorial5","Swipe right to\nstrike the monkey");
			this.texts.set("tutorial6","Click the button\nto throw the orange");
			this.texts.set("tutorial7","Click 2 times\nto doublejump");
			this.texts.set("tutorial8","Jump to avoid\nbarriers");
			this.texts.set("newAbility","New Ability");
			this.texts.set("openOranges","Click the button to\nthrow the orange");
			this.texts.set("openDoubleJump","Click two times\nto doublejump");
			this.texts.set("uphero0","Increase maximum\ncounts of lives");
			this.texts.set("uphero1","Increase your\nspeed");
			this.texts.set("uphero2","Grants you a chance to\ndodge any attacks");
			this.texts.set("uphero3","Increase your\nstarting oranges");
			this.texts.set("uppower0","Increase duration\nfor double crystals");
			this.texts.set("uppower1","Increase duration\nfor shield");
			this.texts.set("uppower2","Increase duration\nfor magnet");
			this.texts.set("uppower3","Increase amount of\ncrystals in chest");
			this.texts.set("addgems","Watch the video\nto get 50 gems");
		} else if(lang == "de") {
			this.texts.set("dodge","Ausgewichen");
			this.texts.set("unlockitems","Freischalten");
			this.texts.set("unlockeditems","Freigeschaltet");
			this.texts.set("pause","Pause");
			this.texts.set("score","Punktzahl");
			this.texts.set("health","Leben: ");
			this.texts.set("victory","Sieg");
			this.texts.set("defeat","Ups, versuche\nes noch einmal");
			this.texts.set("noPack","Spiel vorbei?");
			this.texts.set("getCoins","Get more gems");
			this.texts.set("whatchfullyvideo","Keine Videos mehr\nfür heute");
			this.texts.set("tutorial1","Klicke um zu\nspringen");
			this.texts.set("tutorial2","Wische nach unten,\num herab zu springen");
			this.texts.set("tutorial3","Wische nach rechts,\num zu rollen");
			this.texts.set("tutorial4","Befreie die Vögel,\num Sterne zu erhalten");
			this.texts.set("tutorial5","Wische nach rechts, um\ndem Affen auszuweichen");
			this.texts.set("tutorial6","Berühre den Knopf, um\neine Orange zu werfen");
			this.texts.set("tutorial7","Klicke zweimal für\neinen Doppelsprung");
			this.texts.set("tutorial8","Springe, um Hindernisse\nzu überwinden");
			this.texts.set("newAbility","Neue Fähigkeit");
			this.texts.set("openOranges","Berühre den Knopf, um\neine Orange zu werfen");
			this.texts.set("openDoubleJump","Klicke zweimal für\neinen Doppelsprung");
			this.texts.set("uphero0","Erhöhe die maximale\nAnzahl Leben");
			this.texts.set("uphero1","Erhöhe Deine\nGeschwindigkeit");
			this.texts.set("uphero2","Gewährt Dir die Chance,\nGegnern auszuweichen");
			this.texts.set("uphero3","Erhöhe die Anzahl Deiner\nOrangen beim Start");
			this.texts.set("uppower0","Erhöhe die Dauer\nfür doppelte Kristalle");
			this.texts.set("uppower1","Erhöhe die Dauer\ndes Schildes");
			this.texts.set("uppower2","Erhöhe die Dauer\ndes Magneten");
			this.texts.set("uppower3","Erhöhe die Anzahl\nder Kristalle in Kisten");
			this.texts.set("addgems","Sieh Dir ein Video an, um\n50 Edelsteine zu erhalten.");
		} else if(lang == "es") {
			this.texts.set("dodge","Esquivado");
			this.texts.set("unlockitems","Desbloquear objetos");
			this.texts.set("unlockeditems","¡Objetos desbloqueados!");
			this.texts.set("pause","Pausa");
			this.texts.set("score","puntuación");
			this.texts.set("health","Vida: ");
			this.texts.set("victory","Victoria");
			this.texts.set("defeat","Vaya, inténtalo\nde nuevo");
			this.texts.set("noPack","¿Juego terminado?");
			this.texts.set("getCoins","Get more gems");
			this.texts.set("whatchfullyvideo","No hay más\nvídeos por hoy");
			this.texts.set("tutorial1","Haz clic para saltar");
			this.texts.set("tutorial2","Deslízate hacia\nabajo para saltar");
			this.texts.set("tutorial3","Deslízate hacia la\nderecha para rodar");
			this.texts.set("tutorial4","Libera a las aves para\nconseguir estrellas");
			this.texts.set("tutorial5","Deslízate hacia la derecha\npara golpear al mono");
			this.texts.set("tutorial6","Haz clic en el botón para\nlanzar la naranja");
			this.texts.set("tutorial7","Haz clic dos veces para\nhacer un doble salto");
			this.texts.set("tutorial8","Saltar para evitar\nlas barreras");
			this.texts.set("newAbility","Nueva habilidad");
			this.texts.set("openOranges","Haz clic en el botón para\nlanzar la naranja");
			this.texts.set("openDoubleJump","Haz clic dos veces para\nhacer un doble salto");
			this.texts.set("uphero0","Aumenta el número\nmáximo de vidas");
			this.texts.set("uphero1","Aumenta tu velocidad");
			this.texts.set("uphero2","Te da la oportunidad de\nesquivar cualquier ataque");
			this.texts.set("uphero3","Aumenta tus\nnaranjas iniciales");
			this.texts.set("uppower0","Aumenta la duración\nde los cristales dobles");
			this.texts.set("uppower1","Aumenta la duración\ndel escudo");
			this.texts.set("uppower2","Aumenta la duración\ndel imán");
			this.texts.set("uppower3","Aumenta la cantidad\nde cristales en el cofre");
			this.texts.set("addgems","Ver el vídeo para\nconseguir 50 gemas");
		} else if(lang == "fr") {
			this.texts.set("dodge","Esquivé");
			this.texts.set("unlockitems","Déverrouillez les articles");
			this.texts.set("unlockeditems","Articles déverrouillés!");
			this.texts.set("pause","Pause");
			this.texts.set("score","score");
			this.texts.set("health","Santé : ");
			this.texts.set("victory","Victoire");
			this.texts.set("defeat","Oups !\nRéessayez !");
			this.texts.set("noPack","Jeu terminé ?");
			this.texts.set("getCoins","Get more gems");
			this.texts.set("whatchfullyvideo","Plus de vidéos\npour aujourd'hui");
			this.texts.set("tutorial1","Cliquez pour sauter");
			this.texts.set("tutorial2","Faites glisser vers\nle bas pour sauter");
			this.texts.set("tutorial3","Faites glisser vers\nla droite pour rouler");
			this.texts.set("tutorial4","Libérez les oiseaux\npour obtenir des étoiles");
			this.texts.set("tutorial5","Faites glisser vers la droite\npour frapper le singe");
			this.texts.set("tutorial6","Cliquez sur le bouton\npour lancer l'orange");
			this.texts.set("tutorial7","Cliquez 2 fois pour\nun double saut");
			this.texts.set("tutorial8","Sautez pour éviter\nles obstacles");
			this.texts.set("newAbility","Nouvelle capacité");
			this.texts.set("openOranges","Cliquez sur le bouton\npour lancer l'orange");
			this.texts.set("openDoubleJump","Cliquez deux fois\npour un double saut");
			this.texts.set("uphero0","Augmentez le nombre\nmaximal de vies");
			this.texts.set("uphero1","Augmentez\nvotre vitesse");
			this.texts.set("uphero2","Vous donne une chance d'esquiver\ntoutes les attaques");
			this.texts.set("uphero3","Augmentez vos\noranges de départ");
			this.texts.set("uppower0","Augmentez la durée\ndes doubles cristaux");
			this.texts.set("uppower1","Augmentez la durée\ndu bouclier");
			this.texts.set("uppower2","Augmentez la durée\nde l'aimant");
			this.texts.set("uppower3","Augmentez la quantité de\ncristaux dans le coffre");
			this.texts.set("addgems","Regardez la vidéo\npour obtenir 50 gemmes");
		} else if(lang == "it") {
			this.texts.set("dodge","Schivato");
			this.texts.set("unlockitems","Sblocca articoli");
			this.texts.set("unlockeditems","Articoli sbloccati!");
			this.texts.set("pause","Pausa");
			this.texts.set("score","Punteggio");
			this.texts.set("health","Salute : ");
			this.texts.set("victory","Vittoria");
			this.texts.set("defeat","Ops, riprova");
			this.texts.set("noPack","Gioco finito?");
			this.texts.set("getCoins","Get more gems");
			this.texts.set("whatchfullyvideo","Niente più\nvideo per oggi");
			this.texts.set("tutorial1","Clicca per saltare");
			this.texts.set("tutorial2","Scorri verso il basso\nper saltare giù");
			this.texts.set("tutorial3","Scorri verso destra\nper rotolare");
			this.texts.set("tutorial4","Libera gli uccelli\nper ottenere delle stelle");
			this.texts.set("tutorial5","Scorri verso destra\nper colpire la scimmia");
			this.texts.set("tutorial6","Clicca sul tasto\nper lanciare l'arancia");
			this.texts.set("tutorial7","Clicca 2 volte per\nfare un doppio salto");
			this.texts.set("tutorial8","Salta per evitare\ngli ostacoli");
			this.texts.set("newAbility","Nuova abilità");
			this.texts.set("openOranges","Clicca sul tasto per\nlanciare l'arancia");
			this.texts.set("openDoubleJump","Clicca 2 volte per\nfare un doppio salto");
			this.texts.set("uphero0","Aumenta il conteggio\nmassimo delle vite");
			this.texts.set("uphero1","Aumenta la velocità");
			this.texts.set("uphero2","Ti concede una possibilità\ndi schivare tutti gli attacchi");
			this.texts.set("uphero3","Aumenta le\narance iniziali");
			this.texts.set("uppower0","Aumenta la durata\nper raddoppiare i cristalli");
			this.texts.set("uppower1","Aumenta la durata\nper lo scudo");
			this.texts.set("uppower2","Aumenta la durata\nper la calamita");
			this.texts.set("uppower3","Aumenta le quantità\ndi cristalli nella cesta");
			this.texts.set("addgems","Guarda il video per\nottenere 50 gemme");
		} else if(lang == "pt") {
			this.texts.set("dodge","Escapou");
			this.texts.set("unlockitems","Desbloquear itens");
			this.texts.set("unlockeditems","Itens desbloqueados!");
			this.texts.set("pause","Pausa");
			this.texts.set("score","pontuação");
			this.texts.set("health","Saúde: ");
			this.texts.set("victory","Vitória");
			this.texts.set("defeat","Ups, tente\nde novo");
			this.texts.set("noPack","Fim do jogo?");
			this.texts.set("getCoins","Get more gems");
			this.texts.set("whatchfullyvideo","Por hoje\nacabaram-se os vídeos");
			this.texts.set("tutorial1","Clicar para saltar");
			this.texts.set("tutorial2","Deslizar para baixo\npara saltar para baixo");
			this.texts.set("tutorial3","Deslizar para a\ndireita para rolar");
			this.texts.set("tutorial4","Soltar os pássaros\npara obter estrelas");
			this.texts.set("tutorial5","Deslizar para a direita\npara atacar o macaco");
			this.texts.set("tutorial6","Clicar no botão para\natirar a laranja");
			this.texts.set("tutorial7","Clicar 2 vezes para\nsaltar duas vezes");
			this.texts.set("tutorial8","Saltar para\nevitar barreiras");
			this.texts.set("newAbility","Nova Capacidade");
			this.texts.set("openOranges","Clicar no botão\npara atirar a laranja");
			this.texts.set("openDoubleJump","Clicar duas vezes\npara saltar duas vezes");
			this.texts.set("uphero0","Aumentar as contagens\nmáximas de vidas");
			this.texts.set("uphero1","Aumentar a sua\nvelocidade");
			this.texts.set("uphero2","Dá-lhe a oportunidade de se\ndesviar de quaisquer ataques");
			this.texts.set("uphero3","Aumentar as suas\nlaranjas iniciais");
			this.texts.set("uppower0","Aumentar a duração\ndos cristais duplos");
			this.texts.set("uppower1","Aumentar a duração\ndo escudo");
			this.texts.set("uppower2","Aumentar a duração\ndo íman");
			this.texts.set("uppower3","Aumentar a quantidade\nde cristais na arca");
			this.texts.set("addgems","Veja o vídeo para\nobter 50 pedras preciosas");
		} else if(lang == "ru") {
			this.texts.set("dodge","Мимо");
			this.texts.set("unlockitems","Открыть объекты");
			this.texts.set("unlockeditems","Объекты открыты!");
			this.texts.set("pause","Пауза");
			this.texts.set("score","счет");
			this.texts.set("health","Здоровье: ");
			this.texts.set("victory","Победа");
			this.texts.set("defeat","Ой, попробуйте\nеще раз");
			this.texts.set("noPack","Игра окончена?");
			this.texts.set("getCoins","Get more gems");
			this.texts.set("whatchfullyvideo","На сегодня\nбольше нет видео");
			this.texts.set("tutorial1","Нажмите для прыжка");
			this.texts.set("tutorial2","Проведите вниз\nдля прыжка вниз");
			this.texts.set("tutorial3","Проведите вправо\nдля перекатывания");
			this.texts.set("tutorial4","Освободите птиц,\nчтобы получить звезды");
			this.texts.set("tutorial5","Проведите вправо,\nчтобы попасть в обезьяну");
			this.texts.set("tutorial6","Нажмите на кнопку,\nчтобы бросить апельсин");
			this.texts.set("tutorial7","Нажмите 2 раза, чтобы\nсовершить двойной прыжок");
			this.texts.set("tutorial8","Прыгайте, чтобы\nизбегать барьеров");
			this.texts.set("newAbility","Новая способность");
			this.texts.set("openOranges","Нажмите на кнопку,\nчтобы бросить апельсин");
			this.texts.set("openDoubleJump","Нажмите два раза, чтобы\nсовершить двойной прыжок");
			this.texts.set("uphero0","Увеличьте максимальное\nчисло жизней");
			this.texts.set("uphero1","Увеличьте скорость");
			this.texts.set("uphero2","Дает вам шанс\nуклониться от удара");
			this.texts.set("uphero3","Увеличьте начальное\nколичество апельсинов");
			this.texts.set("uppower0","Увеличьте продолжительность\nза двойные кристаллы");
			this.texts.set("uppower1","Увеличьте продолжительность\nза щит");
			this.texts.set("uppower2","Увеличьте продолжительность\nза магнит");
			this.texts.set("uppower3","Увеличьте количество\nкристаллов в комоде");
			this.texts.set("addgems","Посмотрите видео, чтобы\nполучить 50 драгоценных камней");
			this.texts.set("addgems2","Посмотрите видео,\nчтобы получить 50\nдрагоценных камней");
		} else if(lang == "tr") {
			this.texts.set("dodge","Kaçırılmış");
			this.texts.set("unlockitems","Öğelerin kilidini aç");
			this.texts.set("unlockeditems","Öğelerin kilidi açıldı!");
			this.texts.set("pause","Duraklat");
			this.texts.set("score","skor");
			this.texts.set("health","Sağlık : ");
			this.texts.set("victory","Galibiyet");
			this.texts.set("defeat","Hoppala,\ntekrar dene");
			this.texts.set("noPack","Oyun bitti mi?");
			this.texts.set("getCoins","Get more gems");
			this.texts.set("whatchfullyvideo","Bugünlük\nbaşka video yok");
			this.texts.set("tutorial1","Zıplamak için tıkla");
			this.texts.set("tutorial2","Aşağıya zıplamak\niçin aşağıya kaydır");
			this.texts.set("tutorial3","Yuvarlanmak için\nsağa kaydır");
			this.texts.set("tutorial4","Yıldızları almak için\nkuşları serbest bırak");
			this.texts.set("tutorial5","Maymunu vurmak\niçin sağa kaydır");
			this.texts.set("tutorial6","Portakalı fırlatmak\niçin düğmeye tıkla");
			this.texts.set("tutorial7","İki kez zıplamak\niçin 2 kez tıkla");
			this.texts.set("tutorial8","Bariyerlerden kaçmak\niçin zıpla");
			this.texts.set("newAbility","Yeni Yetenek");
			this.texts.set("openOranges","Portakalı fırlatmak\niçin düğmeye tıkla");
			this.texts.set("openDoubleJump","İki kez zıplamak\niçin iki kez tıkla");
			this.texts.set("uphero0","Maksimum can\nsayısını arttır");
			this.texts.set("uphero1","Hızını arttır");
			this.texts.set("uphero2","Sana tüm saldırıları\natlatma fırsatı verir");
			this.texts.set("uphero3","Başlangıçtaki\nportakallarını arttır");
			this.texts.set("uppower0","Çift kristal\niçin süreyi uzat");
			this.texts.set("uppower1","Kalkan için\nsüreyi uzat");
			this.texts.set("uppower2","Mıknatıs için\nsüreyi uzat");
			this.texts.set("uppower3","Sandıktaki kristaller\niçin miktarı arttır");
			this.texts.set("addgems","50 değerli taş almak\niçin videoyu izle");
		} else if(lang == "nl") {
			this.texts.set("dodge","Ontweek");
			this.texts.set("unlockitems","Ontgrendel items");
			this.texts.set("unlockeditems","Items ontgrendeld!");
			this.texts.set("pause","Pauzeren");
			this.texts.set("score","score");
			this.texts.set("health","Leven : ");
			this.texts.set("victory","Overwinning");
			this.texts.set("defeat","Oeps\nprobeer opnieuw");
			this.texts.set("noPack","Game over?");
			this.texts.set("getCoins","Get more gems");
			this.texts.set("whatchfullyvideo","Geen video's\nmeer vandaag");
			this.texts.set("tutorial1","Klik om te springen");
			this.texts.set("tutorial2","Veeg naar beneden om\nnaar beneden te springen");
			this.texts.set("tutorial3","Veeg naar rechts\nom te rollen");
			this.texts.set("tutorial4","Bevrijd de vogels\nom sterren te krijgen");
			this.texts.set("tutorial5","Veeg naar rechts\nom de aap te raken");
			this.texts.set("tutorial6","Klik op de knop om\nde sinaasappel te werpen");
			this.texts.set("tutorial7","Klik 2 keer voor\neen dubbele sprong");
			this.texts.set("tutorial8","Ga naar obstakels\nte vermijden");
			this.texts.set("newAbility","Nieuwe vaardigheid");
			this.texts.set("openOranges","Klik op de knop om\nde sinaasappel te werpen");
			this.texts.set("openDoubleJump","Klik twee keer voor\neen dubbele sprong");
			this.texts.set("uphero0","Verhoog maximale\naantal levens");
			this.texts.set("uphero1","Verhoog je snelheid");
			this.texts.set("uphero2","Geeft je de mogelijkheid\nom aanvallen te ontwijken");
			this.texts.set("uphero3","Verhoog het startaantal\nsinaasappels");
			this.texts.set("uppower0","Verhoog duurtijd\nvoor dubbele kristallen");
			this.texts.set("uppower1","Verhoog duurtijd\nvoor schild");
			this.texts.set("uppower2","Verhoog duurtijd\nvoor magneet");
			this.texts.set("uppower3","Verhoog aantal\nkristallen in kist");
			this.texts.set("addgems","Bekijk de video om\n50 edelstenen te krijgen");
		} else if(lang == "pl") {
			this.texts.set("dodge","Uniknięto");
			this.texts.set("unlockitems","Odblokuj przedmioty");
			this.texts.set("unlockeditems","Odblokowano przedmioty!");
			this.texts.set("pause","Pauza");
			this.texts.set("score","wynik");
			this.texts.set("health","Zdrowie : ");
			this.texts.set("victory","Zwycięstwo");
			this.texts.set("defeat","Oj, spróbuj\nponownie");
			this.texts.set("noPack","Koniec gry?");
			this.texts.set("getCoins","Get more gems");
			this.texts.set("whatchfullyvideo","Brak filmów\nna dziś");
			this.texts.set("tutorial1","Kliknij, by skoczyć");
			this.texts.set("tutorial2","Przesuń w dół,\nby zeskoczyć");
			this.texts.set("tutorial3","Przesuń w prawo,\nby przeturlać");
			this.texts.set("tutorial4","Uwolnij ptaki,\nby zyskać gwiazdki");
			this.texts.set("tutorial5","Przesuń w prawo,\nby uderzyć małpę");
			this.texts.set("tutorial6","Kliknij przycisk,\nby rzucić pomarańczą");
			this.texts.set("tutorial7","Kliknij 2 razy,\nby skoczyć podwójnie");
			this.texts.set("tutorial8","Skacz, by\nunikać przeszkód");
			this.texts.set("newAbility","Nowa zdolność");
			this.texts.set("openOranges","Kliknij przycisk, by\nrzucić pomarańczą");
			this.texts.set("openDoubleJump","Kliknij dwa razy,\nby skoczyć podwójnie");
			this.texts.set("uphero0","Zwiększ maksymalną\nliczbę żyć");
			this.texts.set("uphero1","Zwiększ szybkość");
			this.texts.set("uphero2","Daje szansę uniknięcia\nkażdego ataku");
			this.texts.set("uphero3","Zwiększa liczbę\npomarańczy na start");
			this.texts.set("uppower0","Zwiększa czas\ndziałania podwójnych kryształów");
			this.texts.set("uppower1","Zwiększa czas\ndziałania tarczy");
			this.texts.set("uppower2","Zwiększa czas\ndziałania magnesu");
			this.texts.set("uppower3","Zwiększa liczbę\nkryształów w skrzyni");
			this.texts.set("addgems","Obejrzyj film, aby\notrzymać 50 klejnotów");
		}
	}
	,initSounds: function() {
		com.sound.SoundManager.init();
		if(com.Variables.loadSound == false) return;
		com.sound.SoundManager.mainTheme = "mainTheme";
		com.sound.SoundManager.btnClick = "mouse_click";
		com.sound.SoundManager.addSound("mainTheme");
		com.sound.SoundManager.addSound("ducks");
		com.sound.SoundManager.addSound("mouse_click");
		com.sound.SoundManager.addSound("BirdFree");
		com.sound.SoundManager.addSound("BirdInCage");
		com.sound.SoundManager.addSound("Collect1");
		com.sound.SoundManager.addSound("Collect2");
		com.sound.SoundManager.addSound("Collect3");
		com.sound.SoundManager.addSound("CrushStone1");
		com.sound.SoundManager.addSound("CrushStone2");
		com.sound.SoundManager.addSound("CrushWood1");
		com.sound.SoundManager.addSound("CrushWood2");
		com.sound.SoundManager.addSound("starCollect");
		com.sound.SoundManager.addSound("trampoline");
		com.sound.SoundManager.addSound("throwFlower");
		com.sound.SoundManager.addSound("throwOrange");
		com.sound.SoundManager.addSound("finalWindow");
		com.sound.SoundManager.addSound("heroBeat");
		com.sound.SoundManager.addSound("heroDamage1");
		com.sound.SoundManager.addSound("heroDamage2");
		com.sound.SoundManager.addSound("heroSlide");
		com.sound.SoundManager.addSound("heroJump");
		com.sound.SoundManager.addSound("heroLand");
		com.sound.SoundManager.addSound("levelComplete");
		com.sound.SoundManager.addSound("levelDefeat");
		com.sound.SoundManager.addSound("monkeyDead");
		com.sound.SoundManager.addSound("pickUpPlace");
		com.sound.SoundManager.addSound("rollingStone");
		com.sound.SoundManager.addSound("showFlag");
		com.sound.SoundManager.addSound("upgradeUp");
		com.sound.SoundManager.addSound("Shield");
		com.sound.SoundManager.addSound("coconutsLand1");
		com.sound.SoundManager.addSound("coconutsLand2");
		com.sound.SoundManager.addSound("heroDoubleJump");
		com.sound.SoundManager.addSound("newCircleOnMap");
	}
	,getXML: function(id) {
		if(id == "background") return "<?xml version=\"1.0\" encoding=\"utf-8\"?><TextureAtlas imagePath=\"background.png\"><SubTexture name=\"Tutorial instance 10000\" x=\"252\" y=\"452\" width=\"125\" height=\"217\"/><SubTexture name=\"bgEl_1 instance 10000\" x=\"1\" y=\"103\" width=\"441\" height=\"173\"/><SubTexture name=\"bgEl_2 instance 10000\" x=\"825\" y=\"273\" width=\"157\" height=\"131\"/><SubTexture name=\"bgEl_3 instance 10000\" x=\"602\" y=\"273\" width=\"222\" height=\"165\"/><SubTexture name=\"bgEl_4 instance 10000\" x=\"378\" y=\"364\" width=\"53\" height=\"297\"/><SubTexture name=\"bgEl_5 instance 10000\" x=\"695\" y=\"103\" width=\"228\" height=\"169\"/><SubTexture name=\"bgEl_6 instance 10000\" x=\"797\" y=\"753\" width=\"67\" height=\"72\"/><SubTexture name=\"bgEl_7 instance 10000\" x=\"810\" y=\"653\" width=\"73\" height=\"99\"/><SubTexture name=\"bigPalma instance 10000\" x=\"443\" y=\"259\" width=\"158\" height=\"240\"/><SubTexture name=\"ground0 instance 10000\" x=\"943\" y=\"585\" width=\"60\" height=\"127\"/><SubTexture name=\"ground1 instance 10000\" x=\"432\" y=\"500\" width=\"118\" height=\"127\"/><SubTexture name=\"ground2 instance 10000\" x=\"1\" y=\"638\" width=\"118\" height=\"127\"/><SubTexture name=\"ground2_0 instance 10000\" x=\"670\" y=\"716\" width=\"126\" height=\"48\"/><SubTexture name=\"ground2_1 instance 10000\" x=\"679\" y=\"659\" width=\"126\" height=\"56\"/><SubTexture name=\"ground2_2 instance 10000\" x=\"543\" y=\"671\" width=\"126\" height=\"54\"/><SubTexture name=\"ground3 instance 10000\" x=\"120\" y=\"638\" width=\"117\" height=\"127\"/><SubTexture name=\"infoTut instance 10000\" x=\"884\" y=\"713\" width=\"90\" height=\"80\" frameX=\"-25\" frameY=\"-7\" frameWidth=\"159\" frameHeight=\"105\"/><SubTexture name=\"infoTut instance 10001\" x=\"551\" y=\"585\" width=\"127\" height=\"85\" frameX=\"-3\" frameY=\"-5\" frameWidth=\"159\" frameHeight=\"105\"/><SubTexture name=\"infoTut instance 10002\" x=\"810\" y=\"585\" width=\"132\" height=\"67\" frameX=\"-9\" frameY=\"-13\" frameWidth=\"159\" frameHeight=\"105\"/><SubTexture name=\"infoTut instance 10003\" x=\"679\" y=\"585\" width=\"130\" height=\"73\" frameX=\"-16\" frameY=\"-5\" frameWidth=\"159\" frameHeight=\"105\"/><SubTexture name=\"infoTut instance 10004\" x=\"855\" y=\"511\" width=\"159\" height=\"73\" frameX=\"0\" frameY=\"-4\" frameWidth=\"159\" frameHeight=\"105\"/><SubTexture name=\"infoTut instance 10005\" x=\"238\" y=\"670\" width=\"142\" height=\"68\" frameX=\"-8\" frameY=\"-7\" frameWidth=\"159\" frameHeight=\"105\"/><SubTexture name=\"infoTut instance 10006\" x=\"855\" y=\"405\" width=\"117\" height=\"105\" frameX=\"-13\" frameY=\"0\" frameWidth=\"159\" frameHeight=\"105\"/><SubTexture name=\"infoTut instance 10007\" x=\"432\" y=\"628\" width=\"110\" height=\"96\" frameX=\"-16\" frameY=\"-1\" frameWidth=\"159\" frameHeight=\"105\"/><SubTexture name=\"kystu1 instance 10000\" x=\"602\" y=\"439\" width=\"252\" height=\"145\"/><SubTexture name=\"kystu2 instance 10000\" x=\"1\" y=\"500\" width=\"250\" height=\"137\"/><SubTexture name=\"kystu3 instance 10000\" x=\"443\" y=\"103\" width=\"251\" height=\"155\"/><SubTexture name=\"mount1 instance 10000\" x=\"1\" y=\"364\" width=\"358\" height=\"87\"/><SubTexture name=\"mount2 instance 10000\" x=\"1\" y=\"277\" width=\"394\" height=\"86\"/><SubTexture name=\"sea instance 10000\" x=\"1\" y=\"1\" width=\"994\" height=\"101\"/><SubTexture name=\"smallPalma instance 10000\" x=\"924\" y=\"103\" width=\"91\" height=\"134\"/></TextureAtlas>"; else if(id == "comixfinal") return "<?xml version=\"1.0\" encoding=\"UTF-16\"?><TextureAtlas imagePath=\"comixfinal.png\"><SubTexture name=\"btn_fon образец 10000\" x=\"708\" y=\"231\" width=\"78\" height=\"63\"/><SubTexture name=\"comix1 образец 10000\" x=\"486\" y=\"1\" width=\"369\" height=\"227\"/><SubTexture name=\"comix2 образец 10000\" x=\"431\" y=\"357\" width=\"376\" height=\"225\"/><SubTexture name=\"comix3 образец 10000\" x=\"666\" y=\"585\" width=\"285\" height=\"222\"/><SubTexture name=\"comix4 образец 10000\" x=\"486\" y=\"231\" width=\"219\" height=\"80\"/><SubTexture name=\"comix5 образец 10000\" x=\"1\" y=\"357\" width=\"427\" height=\"222\"/><SubTexture name=\"final1 образец 10000\" x=\"1\" y=\"585\" width=\"662\" height=\"96\"/><SubTexture name=\"final2 образец 10000\" x=\"810\" y=\"231\" width=\"170\" height=\"321\"/><SubTexture name=\"final3 образец 10000\" x=\"1\" y=\"1\" width=\"482\" height=\"353\"/></TextureAtlas>"; else if(id == "elements") return "<?xml version=\"1.0\" encoding=\"UTF-16\"?><TextureAtlas imagePath=\"elements.png\"><SubTexture name=\"Bark1 образец 10000\" x=\"818\" y=\"814\" width=\"22\" height=\"34\"/><SubTexture name=\"Bark2 образец 10000\" x=\"967\" y=\"517\" width=\"16\" height=\"18\"/><SubTexture name=\"Bark3 образец 10000\" x=\"967\" y=\"486\" width=\"16\" height=\"29\"/><SubTexture name=\"Basket образец 10000\" x=\"864\" y=\"860\" width=\"53\" height=\"44\"/><SubTexture name=\"Basket образец 10001\" x=\"919\" y=\"860\" width=\"53\" height=\"44\"/><SubTexture name=\"BatutFon образец 10000\" x=\"689\" y=\"461\" width=\"118\" height=\"61\"/><SubTexture name=\"BatutFront образец 10000\" x=\"792\" y=\"400\" width=\"112\" height=\"58\"/><SubTexture name=\"Bird образец 10000\" x=\"899\" y=\"906\" width=\"38\" height=\"58\" frameX=\"-14\" frameY=\"0\" frameWidth=\"61\" frameHeight=\"71\"/><SubTexture name=\"Bird образец 10001\" x=\"943\" y=\"766\" width=\"58\" height=\"55\" frameX=\"-3\" frameY=\"-2\" frameWidth=\"61\" frameHeight=\"71\"/><SubTexture name=\"Bird образец 10002\" x=\"943\" y=\"766\" width=\"58\" height=\"55\" frameX=\"-3\" frameY=\"-2\" frameWidth=\"61\" frameHeight=\"71\"/><SubTexture name=\"Bird образец 10003\" x=\"880\" y=\"766\" width=\"61\" height=\"55\" frameX=\"0\" frameY=\"-1\" frameWidth=\"61\" frameHeight=\"71\"/><SubTexture name=\"Bird образец 10004\" x=\"880\" y=\"766\" width=\"61\" height=\"55\" frameX=\"0\" frameY=\"-1\" frameWidth=\"61\" frameHeight=\"71\"/><SubTexture name=\"Bird образец 10005\" x=\"737\" y=\"861\" width=\"57\" height=\"70\" frameX=\"-4\" frameY=\"-1\" frameWidth=\"61\" frameHeight=\"71\"/><SubTexture name=\"Bird образец 10006\" x=\"737\" y=\"861\" width=\"57\" height=\"70\" frameX=\"-4\" frameY=\"-1\" frameWidth=\"61\" frameHeight=\"71\"/><SubTexture name=\"Bird образец 10007\" x=\"840\" y=\"914\" width=\"57\" height=\"60\" frameX=\"-4\" frameY=\"-1\" frameWidth=\"61\" frameHeight=\"71\"/><SubTexture name=\"Bird образец 10008\" x=\"840\" y=\"914\" width=\"57\" height=\"60\" frameX=\"-4\" frameY=\"-1\" frameWidth=\"61\" frameHeight=\"71\"/><SubTexture name=\"BirdHelp образец 10000\" x=\"777\" y=\"304\" width=\"90\" height=\"74\"/><SubTexture name=\"Bush образец 10000\" x=\"3\" y=\"228\" width=\"99\" height=\"151\"/><SubTexture name=\"Cage образец 10000\" x=\"503\" y=\"789\" width=\"81\" height=\"81\"/><SubTexture name=\"Chest образец 10000\" x=\"774\" y=\"933\" width=\"64\" height=\"60\" frameX=\"-1\" frameY=\"-9\" frameWidth=\"66\" frameHeight=\"69\"/><SubTexture name=\"Chest образец 10001\" x=\"637\" y=\"933\" width=\"66\" height=\"69\"/><SubTexture name=\"CoconutPart1 образец 10000\" x=\"370\" y=\"989\" width=\"32\" height=\"30\"/><SubTexture name=\"CoconutPart2 образец 10000\" x=\"404\" y=\"989\" width=\"24\" height=\"30\"/><SubTexture name=\"Diamond образец 10000\" x=\"335\" y=\"989\" width=\"33\" height=\"30\"/><SubTexture name=\"Diamond образец 10001\" x=\"974\" y=\"876\" width=\"31\" height=\"28\" frameX=\"-1\" frameY=\"-1\" frameWidth=\"33\" frameHeight=\"30\"/><SubTexture name=\"DoubleD образец 10000\" x=\"705\" y=\"933\" width=\"67\" height=\"64\"/><SubTexture name=\"Flower образец 10000\" x=\"663\" y=\"524\" width=\"79\" height=\"86\" frameX=\"-34\" frameY=\"-16\" frameWidth=\"115\" frameHeight=\"103\"/><SubTexture name=\"Flower образец 10001\" x=\"414\" y=\"897\" width=\"75\" height=\"89\" frameX=\"-39\" frameY=\"-13\" frameWidth=\"115\" frameHeight=\"103\"/><SubTexture name=\"Flower образец 10002\" x=\"915\" y=\"219\" width=\"76\" height=\"91\" frameX=\"-39\" frameY=\"-11\" frameWidth=\"115\" frameHeight=\"103\"/><SubTexture name=\"Flower образец 10003\" x=\"503\" y=\"694\" width=\"77\" height=\"93\" frameX=\"-38\" frameY=\"-10\" frameWidth=\"115\" frameHeight=\"103\"/><SubTexture name=\"Flower образец 10004\" x=\"335\" y=\"893\" width=\"77\" height=\"94\" frameX=\"-38\" frameY=\"-9\" frameWidth=\"115\" frameHeight=\"103\"/><SubTexture name=\"Flower образец 10005\" x=\"330\" y=\"712\" width=\"84\" height=\"95\" frameX=\"-30\" frameY=\"-7\" frameWidth=\"115\" frameHeight=\"103\"/><SubTexture name=\"Flower образец 10006\" x=\"121\" y=\"521\" width=\"107\" height=\"100\" frameX=\"-6\" frameY=\"-2\" frameWidth=\"115\" frameHeight=\"103\"/><SubTexture name=\"Flower образец 10007\" x=\"319\" y=\"226\" width=\"110\" height=\"100\" frameX=\"-3\" frameY=\"-1\" frameWidth=\"115\" frameHeight=\"103\"/><SubTexture name=\"Flower образец 10008\" x=\"701\" y=\"114\" width=\"113\" height=\"101\" frameX=\"0\" frameY=\"0\" frameWidth=\"115\" frameHeight=\"103\"/><SubTexture name=\"Flower образец 10009\" x=\"487\" y=\"412\" width=\"102\" height=\"93\" frameX=\"-11\" frameY=\"-8\" frameWidth=\"115\" frameHeight=\"103\"/><SubTexture name=\"Flower образец 10010\" x=\"390\" y=\"619\" width=\"91\" height=\"89\" frameX=\"-22\" frameY=\"-12\" frameWidth=\"115\" frameHeight=\"103\"/><SubTexture name=\"Flower образец 10011\" x=\"663\" y=\"524\" width=\"79\" height=\"86\" frameX=\"-34\" frameY=\"-16\" frameWidth=\"115\" frameHeight=\"103\"/><SubTexture name=\"Flower образец 10012\" x=\"582\" y=\"692\" width=\"78\" height=\"86\" frameX=\"-35\" frameY=\"-16\" frameWidth=\"115\" frameHeight=\"103\"/><SubTexture name=\"Flower образец 10013\" x=\"491\" y=\"897\" width=\"77\" height=\"86\" frameX=\"-36\" frameY=\"-16\" frameWidth=\"115\" frameHeight=\"103\"/><SubTexture name=\"Flower образец 10014\" x=\"414\" y=\"809\" width=\"78\" height=\"86\" frameX=\"-35\" frameY=\"-16\" frameWidth=\"115\" frameHeight=\"103\"/><SubTexture name=\"Flower образец 10015\" x=\"663\" y=\"524\" width=\"79\" height=\"86\" frameX=\"-34\" frameY=\"-16\" frameWidth=\"115\" frameHeight=\"103\"/><SubTexture name=\"Hero образец 10000\" x=\"823\" y=\"535\" width=\"67\" height=\"82\" frameX=\"-12\" frameY=\"-16\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10001\" x=\"901\" y=\"486\" width=\"64\" height=\"82\" frameX=\"-15\" frameY=\"-16\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10002\" x=\"582\" y=\"507\" width=\"79\" height=\"87\" frameX=\"-7\" frameY=\"-12\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10003\" x=\"744\" y=\"524\" width=\"77\" height=\"88\" frameX=\"-8\" frameY=\"-10\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10004\" x=\"577\" y=\"604\" width=\"78\" height=\"86\" frameX=\"-7\" frameY=\"-12\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10005\" x=\"740\" y=\"692\" width=\"70\" height=\"83\" frameX=\"-11\" frameY=\"-14\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10006\" x=\"948\" y=\"312\" width=\"64\" height=\"83\" frameX=\"-16\" frameY=\"-14\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10007\" x=\"869\" y=\"312\" width=\"77\" height=\"86\" frameX=\"-8\" frameY=\"-11\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10008\" x=\"834\" y=\"212\" width=\"79\" height=\"88\" frameX=\"-8\" frameY=\"-9\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10009\" x=\"906\" y=\"400\" width=\"77\" height=\"84\" frameX=\"-7\" frameY=\"-13\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10010\" x=\"741\" y=\"777\" width=\"75\" height=\"75\" frameX=\"-9\" frameY=\"-10\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10011\" x=\"665\" y=\"778\" width=\"74\" height=\"81\" frameX=\"-13\" frameY=\"-11\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10012\" x=\"818\" y=\"755\" width=\"60\" height=\"57\" frameX=\"-40\" frameY=\"-22\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10013\" x=\"743\" y=\"614\" width=\"77\" height=\"76\" frameX=\"-8\" frameY=\"-22\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10014\" x=\"823\" y=\"460\" width=\"76\" height=\"73\" frameX=\"-8\" frameY=\"-24\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10015\" x=\"823\" y=\"460\" width=\"76\" height=\"73\" frameX=\"-8\" frameY=\"-24\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10016\" x=\"378\" y=\"525\" width=\"92\" height=\"92\" frameX=\"-13\" frameY=\"-5\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10017\" x=\"221\" y=\"815\" width=\"92\" height=\"96\" frameX=\"-13\" frameY=\"0\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10018\" x=\"487\" y=\"507\" width=\"93\" height=\"95\" frameX=\"-14\" frameY=\"-2\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10019\" x=\"236\" y=\"712\" width=\"92\" height=\"87\" frameX=\"-12\" frameY=\"-10\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10020\" x=\"662\" y=\"691\" width=\"76\" height=\"85\" frameX=\"-8\" frameY=\"-12\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10021\" x=\"586\" y=\"780\" width=\"77\" height=\"85\" frameX=\"-11\" frameY=\"-13\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10022\" x=\"416\" y=\"710\" width=\"85\" height=\"88\" frameX=\"-6\" frameY=\"-10\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10023\" x=\"483\" y=\"604\" width=\"92\" height=\"88\" frameX=\"0\" frameY=\"-10\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10024\" x=\"315\" y=\"809\" width=\"97\" height=\"82\" frameX=\"-8\" frameY=\"-7\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10025\" x=\"534\" y=\"222\" width=\"115\" height=\"81\" frameX=\"-6\" frameY=\"-5\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10026\" x=\"125\" y=\"438\" width=\"133\" height=\"81\" frameX=\"-6\" frameY=\"-6\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Hero образец 10027\" x=\"124\" y=\"917\" width=\"122\" height=\"84\" frameX=\"-11\" frameY=\"-14\" frameWidth=\"139\" frameHeight=\"99\"/><SubTexture name=\"Magnet образец 10000\" x=\"939\" y=\"906\" width=\"46\" height=\"44\"/><SubTexture name=\"Monkey образец 10000\" x=\"573\" y=\"305\" width=\"99\" height=\"94\" frameX=\"-22\" frameY=\"-13\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10001\" x=\"380\" y=\"428\" width=\"105\" height=\"95\" frameX=\"-20\" frameY=\"-12\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10002\" x=\"591\" y=\"401\" width=\"96\" height=\"96\" frameX=\"-32\" frameY=\"-11\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10003\" x=\"927\" y=\"3\" width=\"89\" height=\"105\" frameX=\"-42\" frameY=\"-2\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10004\" x=\"927\" y=\"110\" width=\"83\" height=\"107\" frameX=\"-51\" frameY=\"0\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10005\" x=\"293\" y=\"519\" width=\"83\" height=\"103\" frameX=\"-52\" frameY=\"-4\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10006\" x=\"248\" y=\"913\" width=\"85\" height=\"97\" frameX=\"-52\" frameY=\"-10\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10007\" x=\"360\" y=\"117\" width=\"108\" height=\"107\" frameX=\"-9\" frameY=\"0\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10008\" x=\"3\" y=\"490\" width=\"116\" height=\"106\" frameX=\"0\" frameY=\"-1\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10009\" x=\"3\" y=\"598\" width=\"113\" height=\"106\" frameX=\"-3\" frameY=\"-1\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10010\" x=\"104\" y=\"228\" width=\"104\" height=\"106\" frameX=\"-14\" frameY=\"-1\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10011\" x=\"591\" y=\"114\" width=\"108\" height=\"106\" frameX=\"-10\" frameY=\"-1\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10012\" x=\"248\" y=\"117\" width=\"110\" height=\"106\" frameX=\"-9\" frameY=\"-1\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10013\" x=\"573\" y=\"305\" width=\"99\" height=\"94\" frameX=\"-22\" frameY=\"-13\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10014\" x=\"573\" y=\"305\" width=\"99\" height=\"94\" frameX=\"-22\" frameY=\"-13\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10015\" x=\"116\" y=\"815\" width=\"103\" height=\"100\" frameX=\"-24\" frameY=\"-7\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10016\" x=\"210\" y=\"225\" width=\"107\" height=\"103\" frameX=\"-26\" frameY=\"-4\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10017\" x=\"431\" y=\"226\" width=\"101\" height=\"97\" frameX=\"-28\" frameY=\"-10\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10018\" x=\"293\" y=\"624\" width=\"95\" height=\"86\" frameX=\"-33\" frameY=\"-21\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10019\" x=\"651\" y=\"222\" width=\"97\" height=\"81\" frameX=\"-31\" frameY=\"-27\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10020\" x=\"674\" y=\"305\" width=\"101\" height=\"77\" frameX=\"-28\" frameY=\"-33\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey образец 10021\" x=\"689\" y=\"384\" width=\"101\" height=\"75\" frameX=\"-28\" frameY=\"-36\" frameWidth=\"137\" frameHeight=\"111\"/><SubTexture name=\"Monkey2 образец 10000\" x=\"3\" y=\"816\" width=\"111\" height=\"107\" frameX=\"-40\" frameY=\"-14\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10001\" x=\"816\" y=\"107\" width=\"109\" height=\"103\" frameX=\"-44\" frameY=\"-18\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10002\" x=\"125\" y=\"336\" width=\"109\" height=\"100\" frameX=\"-48\" frameY=\"-21\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10003\" x=\"236\" y=\"330\" width=\"109\" height=\"99\" frameX=\"-49\" frameY=\"-22\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10004\" x=\"347\" y=\"328\" width=\"110\" height=\"98\" frameX=\"-50\" frameY=\"-23\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10005\" x=\"797\" y=\"3\" width=\"128\" height=\"102\" frameX=\"-25\" frameY=\"-19\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10006\" x=\"3\" y=\"3\" width=\"156\" height=\"106\" frameX=\"0\" frameY=\"-15\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10007\" x=\"161\" y=\"3\" width=\"132\" height=\"107\" frameX=\"-20\" frameY=\"-14\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10008\" x=\"3\" y=\"706\" width=\"110\" height=\"108\" frameX=\"-41\" frameY=\"-13\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10009\" x=\"135\" y=\"112\" width=\"111\" height=\"107\" frameX=\"-40\" frameY=\"-14\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10010\" x=\"3\" y=\"816\" width=\"111\" height=\"107\" frameX=\"-40\" frameY=\"-14\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10011\" x=\"3\" y=\"381\" width=\"120\" height=\"107\" frameX=\"-33\" frameY=\"-8\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10012\" x=\"295\" y=\"3\" width=\"126\" height=\"112\" frameX=\"-33\" frameY=\"-3\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10013\" x=\"3\" y=\"111\" width=\"130\" height=\"115\" frameX=\"-35\" frameY=\"0\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10014\" x=\"423\" y=\"3\" width=\"124\" height=\"110\" frameX=\"-37\" frameY=\"-5\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10015\" x=\"470\" y=\"115\" width=\"119\" height=\"97\" frameX=\"-41\" frameY=\"-18\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10016\" x=\"3\" y=\"925\" width=\"119\" height=\"91\" frameX=\"-42\" frameY=\"-24\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10017\" x=\"115\" y=\"726\" width=\"119\" height=\"87\" frameX=\"-42\" frameY=\"-30\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10018\" x=\"260\" y=\"431\" width=\"118\" height=\"86\" frameX=\"-43\" frameY=\"-31\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"Monkey2 образец 10019\" x=\"459\" y=\"325\" width=\"112\" height=\"85\" frameX=\"-44\" frameY=\"-32\" frameWidth=\"165\" frameHeight=\"121\"/><SubTexture name=\"RollingStone образец 10000\" x=\"901\" y=\"637\" width=\"64\" height=\"65\"/><SubTexture name=\"Shield образец 10000\" x=\"974\" y=\"823\" width=\"45\" height=\"51\"/><SubTexture name=\"Stone1 образец 10000\" x=\"901\" y=\"570\" width=\"65\" height=\"65\"/><SubTexture name=\"Stone1 образец 10001\" x=\"491\" y=\"985\" width=\"65\" height=\"34\" frameX=\"0\" frameY=\"-29\" frameWidth=\"65\" frameHeight=\"65\"/><SubTexture name=\"Stone2 образец 10000\" x=\"586\" y=\"867\" width=\"77\" height=\"64\"/><SubTexture name=\"Stone2 образец 10001\" x=\"840\" y=\"976\" width=\"77\" height=\"42\" frameX=\"0\" frameY=\"-22\" frameWidth=\"77\" frameHeight=\"64\"/><SubTexture name=\"Stone3 образец 10000\" x=\"774\" y=\"995\" width=\"30\" height=\"24\"/><SubTexture name=\"Stone4 образец 10000\" x=\"637\" y=\"1004\" width=\"24\" height=\"15\"/><SubTexture name=\"Stone5 образец 10000\" x=\"104\" y=\"336\" width=\"19\" height=\"25\"/><SubTexture name=\"Stump образец 10000\" x=\"899\" y=\"704\" width=\"56\" height=\"60\"/><SubTexture name=\"Stump образец 10001\" x=\"224\" y=\"668\" width=\"56\" height=\"41\" frameX=\"0\" frameY=\"-19\" frameWidth=\"56\" frameHeight=\"60\"/><SubTexture name=\"Wall образец 10000\" x=\"230\" y=\"521\" width=\"61\" height=\"145\"/><SubTexture name=\"bullet образец 10000\" x=\"796\" y=\"914\" width=\"39\" height=\"17\"/><SubTexture name=\"cageDoor образец 10000\" x=\"899\" y=\"823\" width=\"68\" height=\"35\"/><SubTexture name=\"hand образец 10000\" x=\"750\" y=\"217\" width=\"82\" height=\"85\"/><SubTexture name=\"orange образец 10000\" x=\"315\" y=\"893\" width=\"18\" height=\"18\"/><SubTexture name=\"powerUpBack образец 10000\" x=\"812\" y=\"692\" width=\"62\" height=\"61\"/><SubTexture name=\"powerUpBackAnim образец 10000\" x=\"665\" y=\"861\" width=\"70\" height=\"70\"/><SubTexture name=\"rope образец 10000\" x=\"985\" y=\"397\" width=\"6\" height=\"287\"/><SubTexture name=\"shieldEffect образец 10000\" x=\"549\" y=\"3\" width=\"122\" height=\"109\"/><SubTexture name=\"shieldEffect образец 10001\" x=\"673\" y=\"3\" width=\"122\" height=\"109\"/><SubTexture name=\"shieldEffect образец 10002\" x=\"118\" y=\"623\" width=\"104\" height=\"101\" frameX=\"-14\" frameY=\"-4\" frameWidth=\"122\" frameHeight=\"109\"/><SubTexture name=\"shieldEffect образец 10003\" x=\"657\" y=\"612\" width=\"84\" height=\"77\" frameX=\"-17\" frameY=\"-16\" frameWidth=\"122\" frameHeight=\"109\"/><SubTexture name=\"shieldEffect образец 10004\" x=\"796\" y=\"854\" width=\"66\" height=\"58\" frameX=\"-27\" frameY=\"-26\" frameWidth=\"122\" frameHeight=\"109\"/><SubTexture name=\"shieldEffect образец 10005\" x=\"822\" y=\"619\" width=\"77\" height=\"70\" frameX=\"-22\" frameY=\"-20\" frameWidth=\"122\" frameHeight=\"109\"/><SubTexture name=\"shieldEffect образец 10006\" x=\"570\" y=\"933\" width=\"65\" height=\"74\" frameX=\"-28\" frameY=\"-18\" frameWidth=\"122\" frameHeight=\"109\"/></TextureAtlas>"; else if(id == "panels") return "<?xml version=\"1.0\" encoding=\"utf-8\"?><TextureAtlas imagePath=\"panels.png\"><SubTexture name=\"DoubleD instance 10000\" x=\"428\" y=\"658\" width=\"66\" height=\"63\"/><SubTexture name=\"Magnet instance 10000\" x=\"186\" y=\"870\" width=\"45\" height=\"44\"/><SubTexture name=\"ResultWindow instance 10000\" x=\"1\" y=\"1\" width=\"404\" height=\"340\"/><SubTexture name=\"Shield instance 10000\" x=\"468\" y=\"338\" width=\"43\" height=\"51\"/><SubTexture name=\"bird instance 10000\" x=\"1\" y=\"871\" width=\"43\" height=\"40\"/><SubTexture name=\"blow0000\" x=\"487\" y=\"138\" width=\"20\" height=\"21\" frameX=\"-15\" frameY=\"-20\" frameWidth=\"53\" frameHeight=\"57\"/><SubTexture name=\"blow0001\" x=\"157\" y=\"915\" width=\"31\" height=\"32\" frameX=\"-10\" frameY=\"-15\" frameWidth=\"53\" frameHeight=\"57\"/><SubTexture name=\"blow0002\" x=\"468\" y=\"390\" width=\"43\" height=\"46\" frameX=\"-4\" frameY=\"-7\" frameWidth=\"53\" frameHeight=\"57\"/><SubTexture name=\"blow0003\" x=\"455\" y=\"837\" width=\"50\" height=\"53\" frameX=\"-1\" frameY=\"-3\" frameWidth=\"53\" frameHeight=\"57\"/><SubTexture name=\"blow0004\" x=\"401\" y=\"837\" width=\"53\" height=\"53\" frameX=\"0\" frameY=\"-2\" frameWidth=\"53\" frameHeight=\"57\"/><SubTexture name=\"blow0005\" x=\"348\" y=\"834\" width=\"52\" height=\"55\" frameX=\"0\" frameY=\"-2\" frameWidth=\"53\" frameHeight=\"57\"/><SubTexture name=\"blow0006\" x=\"240\" y=\"812\" width=\"53\" height=\"56\" frameX=\"0\" frameY=\"-1\" frameWidth=\"53\" frameHeight=\"57\"/><SubTexture name=\"blow0007\" x=\"451\" y=\"779\" width=\"53\" height=\"57\"/><SubTexture name=\"blow0008\" x=\"186\" y=\"812\" width=\"53\" height=\"57\"/><SubTexture name=\"blow0009\" x=\"294\" y=\"812\" width=\"53\" height=\"56\" frameX=\"0\" frameY=\"0\" frameWidth=\"53\" frameHeight=\"57\"/><SubTexture name=\"blow0010\" x=\"240\" y=\"869\" width=\"52\" height=\"48\" frameX=\"-1\" frameY=\"0\" frameWidth=\"53\" frameHeight=\"57\"/><SubTexture name=\"btn_back instance 10000\" x=\"468\" y=\"482\" width=\"34\" height=\"33\"/><SubTexture name=\"btn_back2 instance 10000\" x=\"86\" y=\"909\" width=\"33\" height=\"33\"/><SubTexture name=\"btn_music instance 10000\" x=\"479\" y=\"277\" width=\"32\" height=\"34\"/><SubTexture name=\"btn_next instance 10000\" x=\"120\" y=\"915\" width=\"36\" height=\"29\"/><SubTexture name=\"btn_off instance 10000\" x=\"346\" y=\"890\" width=\"45\" height=\"33\"/><SubTexture name=\"btn_orange instance 10000\" x=\"307\" y=\"589\" width=\"120\" height=\"105\"/><SubTexture name=\"btn_pause instance 10000\" x=\"453\" y=\"722\" width=\"56\" height=\"56\"/><SubTexture name=\"btn_play instance 10000\" x=\"394\" y=\"778\" width=\"56\" height=\"55\"/><SubTexture name=\"btn_restart instance 10000\" x=\"86\" y=\"871\" width=\"43\" height=\"37\"/><SubTexture name=\"btn_restart2 instance 10000\" x=\"293\" y=\"869\" width=\"52\" height=\"45\"/><SubTexture name=\"btn_sfx instance 10000\" x=\"392\" y=\"891\" width=\"44\" height=\"32\"/><SubTexture name=\"btn_shop instance 10000\" x=\"344\" y=\"695\" width=\"46\" height=\"35\"/><SubTexture name=\"btn_video instance 10000\" x=\"428\" y=\"589\" width=\"77\" height=\"68\"/><SubTexture name=\"dobDiamond instance 10000\" x=\"406\" y=\"277\" width=\"72\" height=\"60\"/><SubTexture name=\"dodge instance 10000\" x=\"279\" y=\"695\" width=\"64\" height=\"28\"/><SubTexture name=\"flagfinish instance 10000\" x=\"468\" y=\"437\" width=\"43\" height=\"44\"/><SubTexture name=\"health instance 10000\" x=\"487\" y=\"116\" width=\"23\" height=\"21\"/><SubTexture name=\"heart instance 10000\" x=\"48\" y=\"912\" width=\"35\" height=\"31\"/><SubTexture name=\"loseEnergy instance 10000\" x=\"1\" y=\"912\" width=\"46\" height=\"24\"/><SubTexture name=\"loseHeart instance 10000\" x=\"437\" y=\"891\" width=\"46\" height=\"25\"/><SubTexture name=\"loseIcon instance 10000\" x=\"270\" y=\"342\" width=\"197\" height=\"176\"/><SubTexture name=\"panelHD instance 10000\" x=\"1\" y=\"776\" width=\"392\" height=\"35\"/><SubTexture name=\"pause instance 10000\" x=\"307\" y=\"519\" width=\"200\" height=\"69\"/><SubTexture name=\"pbBackground instance 10000\" x=\"1\" y=\"660\" width=\"277\" height=\"74\"/><SubTexture name=\"pbProgress instance 10000\" x=\"189\" y=\"918\" width=\"87\" height=\"11\"/><SubTexture name=\"podBtn instance 10000\" x=\"406\" y=\"211\" width=\"82\" height=\"65\"/><SubTexture name=\"podDiamond instance 10000\" x=\"1\" y=\"812\" width=\"184\" height=\"58\"/><SubTexture name=\"podStar instance 10000\" x=\"1\" y=\"342\" width=\"268\" height=\"179\"/><SubTexture name=\"progressIcon instance 10000\" x=\"130\" y=\"871\" width=\"36\" height=\"43\"/><SubTexture name=\"progressShaka instance 10000\" x=\"1\" y=\"735\" width=\"378\" height=\"40\"/><SubTexture name=\"resultbtnfon instance 10000\" x=\"406\" y=\"116\" width=\"80\" height=\"94\"/><SubTexture name=\"resultbtnfonBig instance 10000\" x=\"406\" y=\"1\" width=\"103\" height=\"114\"/><SubTexture name=\"shopCanBuy instance 10000\" x=\"45\" y=\"871\" width=\"40\" height=\"40\"/><SubTexture name=\"showFullVideo instance 10000\" x=\"1\" y=\"522\" width=\"305\" height=\"137\"/><SubTexture name=\"starFull instance 10000\" x=\"394\" y=\"722\" width=\"58\" height=\"55\"/></TextureAtlas>"; else if(id == "scenes") return "<?xml version=\"1.0\" encoding=\"utf-8\"?><TextureAtlas imagePath=\"scenes.png\"><SubTexture name=\"ResultWindow instance 10000\" x=\"1\" y=\"1\" width=\"307\" height=\"308\"/><SubTexture name=\"animCurrFlag instance 10000\" x=\"1\" y=\"408\" width=\"83\" height=\"103\"/><SubTexture name=\"blickBtnUp instance 10000\" x=\"401\" y=\"277\" width=\"113\" height=\"109\"/><SubTexture name=\"btnMenuBig instance 10000\" x=\"728\" y=\"319\" width=\"87\" height=\"117\"/><SubTexture name=\"btnMenuSmall instance 10000\" x=\"600\" y=\"492\" width=\"61\" height=\"82\"/><SubTexture name=\"btn_back instance 10000\" x=\"532\" y=\"186\" width=\"34\" height=\"44\"/><SubTexture name=\"btn_gift instance 10000\" x=\"728\" y=\"518\" width=\"67\" height=\"69\"/><SubTexture name=\"btn_limited instance 10000\" x=\"816\" y=\"398\" width=\"152\" height=\"62\"/><SubTexture name=\"btn_menu_i instance 10000\" x=\"997\" y=\"177\" width=\"24\" height=\"36\"/><SubTexture name=\"btn_menu_play instance 10000\" x=\"560\" y=\"493\" width=\"35\" height=\"44\"/><SubTexture name=\"btn_musicOn instance 10000\" x=\"532\" y=\"231\" width=\"33\" height=\"35\"/><SubTexture name=\"btn_next instance 10000\" x=\"150\" y=\"533\" width=\"37\" height=\"28\"/><SubTexture name=\"btn_sfxOn instance 10000\" x=\"79\" y=\"598\" width=\"45\" height=\"33\"/><SubTexture name=\"btn_shop instance 10000\" x=\"485\" y=\"557\" width=\"55\" height=\"58\"/><SubTexture name=\"btn_shopBuy instance 10000\" x=\"481\" y=\"493\" width=\"78\" height=\"63\"/><SubTexture name=\"btn_shopFull instance 10000\" x=\"273\" y=\"502\" width=\"78\" height=\"63\"/><SubTexture name=\"btn_shop_icon instance 10000\" x=\"969\" y=\"398\" width=\"48\" height=\"48\"/><SubTexture name=\"btn_shop_pod instance 10000\" x=\"515\" y=\"319\" width=\"104\" height=\"101\"/><SubTexture name=\"btn_showVideo instance 10000\" x=\"1\" y=\"512\" width=\"77\" height=\"63\"/><SubTexture name=\"btn_soundsOff instance 10000\" x=\"944\" y=\"593\" width=\"46\" height=\"34\"/><SubTexture name=\"btn_x instance 10000\" x=\"265\" y=\"594\" width=\"40\" height=\"38\"/><SubTexture name=\"btn_yes instance 10000\" x=\"515\" y=\"277\" width=\"46\" height=\"38\"/><SubTexture name=\"currFlag instance 10000\" x=\"960\" y=\"517\" width=\"54\" height=\"75\"/><SubTexture name=\"currLevel instance 10000\" x=\"622\" y=\"593\" width=\"73\" height=\"23\" frameX=\"-6\" frameY=\"-2\" frameWidth=\"85\" frameHeight=\"27\"/><SubTexture name=\"currLevel instance 10001\" x=\"150\" y=\"593\" width=\"75\" height=\"25\" frameX=\"-5\" frameY=\"-1\" frameWidth=\"85\" frameHeight=\"27\"/><SubTexture name=\"currLevel instance 10002\" x=\"1\" y=\"576\" width=\"77\" height=\"25\" frameX=\"-4\" frameY=\"-1\" frameWidth=\"85\" frameHeight=\"27\"/><SubTexture name=\"currLevel instance 10003\" x=\"865\" y=\"586\" width=\"78\" height=\"25\" frameX=\"-3\" frameY=\"-1\" frameWidth=\"85\" frameHeight=\"27\"/><SubTexture name=\"currLevel instance 10004\" x=\"541\" y=\"575\" width=\"80\" height=\"27\" frameX=\"-2\" frameY=\"0\" frameWidth=\"85\" frameHeight=\"27\"/><SubTexture name=\"currLevel instance 10005\" x=\"235\" y=\"566\" width=\"82\" height=\"27\" frameX=\"-1\" frameY=\"0\" frameWidth=\"85\" frameHeight=\"27\"/><SubTexture name=\"currLevel instance 10006\" x=\"150\" y=\"565\" width=\"84\" height=\"27\" frameX=\"0\" frameY=\"0\" frameWidth=\"85\" frameHeight=\"27\"/><SubTexture name=\"currLevel instance 10007\" x=\"309\" y=\"277\" width=\"85\" height=\"27\"/><SubTexture name=\"diamond instance 10000\" x=\"992\" y=\"365\" width=\"30\" height=\"27\"/><SubTexture name=\"flag instance 10000\" x=\"816\" y=\"319\" width=\"54\" height=\"75\"/><SubTexture name=\"haxeopenfl instance 10000\" x=\"309\" y=\"186\" width=\"222\" height=\"90\"/><SubTexture name=\"iconEnergy instance 10000\" x=\"426\" y=\"557\" width=\"58\" height=\"55\"/><SubTexture name=\"inset3 instance 10000\" x=\"309\" y=\"1\" width=\"257\" height=\"184\"/><SubTexture name=\"insetWindow instance 10000\" x=\"873\" y=\"177\" width=\"123\" height=\"125\"/><SubTexture name=\"lockedMap instance 10000\" x=\"85\" y=\"477\" width=\"112\" height=\"55\"/><SubTexture name=\"lockedMap2 instance 10000\" x=\"888\" y=\"461\" width=\"112\" height=\"55\"/><SubTexture name=\"moregames instance 10000\" x=\"1\" y=\"602\" width=\"44\" height=\"33\"/><SubTexture name=\"openDoubleJump instance 10000\" x=\"812\" y=\"1\" width=\"209\" height=\"175\"/><SubTexture name=\"openOranges instance 10000\" x=\"567\" y=\"1\" width=\"244\" height=\"180\"/><SubTexture name=\"panelNohelathplus instance 10000\" x=\"716\" y=\"437\" width=\"86\" height=\"80\"/><SubTexture name=\"plus instance 10000\" x=\"226\" y=\"594\" width=\"38\" height=\"40\"/><SubTexture name=\"podBtn instance 10000\" x=\"620\" y=\"416\" width=\"95\" height=\"75\"/><SubTexture name=\"podPanelBtn instance 10000\" x=\"198\" y=\"492\" width=\"74\" height=\"72\"/><SubTexture name=\"resultbtnfon instance 10000\" x=\"297\" y=\"408\" width=\"79\" height=\"93\"/><SubTexture name=\"shopCanBuy instance 10000\" x=\"728\" y=\"588\" width=\"40\" height=\"41\"/><SubTexture name=\"shopIconHero0 instance 10000\" x=\"352\" y=\"543\" width=\"73\" height=\"53\"/><SubTexture name=\"shopIconHero1 instance 10000\" x=\"377\" y=\"487\" width=\"103\" height=\"55\"/><SubTexture name=\"shopIconHero2 instance 10000\" x=\"85\" y=\"408\" width=\"119\" height=\"68\"/><SubTexture name=\"shopIconHero3 instance 10000\" x=\"499\" y=\"421\" width=\"100\" height=\"71\"/><SubTexture name=\"shopIconProgress instance 10000\" x=\"620\" y=\"319\" width=\"107\" height=\"96\"/><SubTexture name=\"shopIconUp0 instance 10000\" x=\"79\" y=\"533\" width=\"70\" height=\"64\"/><SubTexture name=\"shopIconUp1 instance 10000\" x=\"662\" y=\"518\" width=\"65\" height=\"74\"/><SubTexture name=\"shopIconUp2 instance 10000\" x=\"888\" y=\"517\" width=\"71\" height=\"68\"/><SubTexture name=\"shopIconUp3 instance 10000\" x=\"796\" y=\"542\" width=\"68\" height=\"60\"/><SubTexture name=\"shopInset1 instance 10000\" x=\"803\" y=\"461\" width=\"84\" height=\"80\"/><SubTexture name=\"shopInset2 instance 10000\" x=\"205\" y=\"408\" width=\"91\" height=\"83\"/><SubTexture name=\"shopInset3 instance 10000\" x=\"401\" y=\"387\" width=\"97\" height=\"99\"/><SubTexture name=\"shopPanelProgress instance 10000\" x=\"1\" y=\"310\" width=\"399\" height=\"97\"/><SubTexture name=\"shopProgress instance 10000\" x=\"306\" y=\"597\" width=\"50\" height=\"30\"/><SubTexture name=\"shopProgress instance 10001\" x=\"357\" y=\"597\" width=\"50\" height=\"30\"/><SubTexture name=\"shopProgress2 instance 10000\" x=\"992\" y=\"303\" width=\"31\" height=\"30\"/><SubTexture name=\"shopProgress2 instance 10001\" x=\"992\" y=\"334\" width=\"31\" height=\"30\"/><SubTexture name=\"showFullVideo instance 10000\" x=\"567\" y=\"182\" width=\"305\" height=\"136\"/><SubTexture name=\"star instance 10000\" x=\"997\" y=\"214\" width=\"18\" height=\"17\"/><SubTexture name=\"urbanduck instance 10000\" x=\"873\" y=\"303\" width=\"118\" height=\"94\"/><SubTexture name=\"wayPoint instance 10000\" x=\"997\" y=\"232\" width=\"11\" height=\"7\"/></TextureAtlas>";
		return "";
	}
	,initAwards: function() {
		com.tools.DataManager.getInstance().createAchieve(com.Initializer.rope,50);
		com.tools.DataManager.getInstance().createAchieve(com.Initializer.die,100);
		com.tools.DataManager.getInstance().createAchieve(com.Initializer.collect,100);
		com.tools.DataManager.getInstance().createAchieve(com.Initializer.collectInOneGame,1);
		com.tools.DataManager.getInstance().createAchieve(com.Initializer.breakFloor,100);
		com.tools.DataManager.getInstance().createAchieve(com.Initializer.newHero,1);
		com.tools.DataManager.getInstance().createAchieve(com.Initializer.collect,500);
		com.tools.DataManager.getInstance().createAchieve(com.Initializer.rope,350);
		com.tools.DataManager.getInstance().createAchieve(com.Initializer.saw,35);
		com.tools.DataManager.getInstance().createAchieve(com.Initializer.dieLaser,15);
		com.tools.DataManager.getInstance().createAchieve(com.Initializer.booster,20);
		com.tools.DataManager.getInstance().createAchieve(com.Initializer.newRecord,10);
		com.tools.DataManager.getInstance().createAchieve(com.Initializer.rope,1000);
		com.tools.DataManager.getInstance().createAchieve(com.Initializer.collect,1500);
		com.tools.DataManager.getInstance().createAchieve(com.Initializer.climbFloor,1);
	}
	,__class__: com.Initializer
};
com.Sponsors = function() { };
$hxClasses["com.Sponsors"] = com.Sponsors;
com.Sponsors.__name__ = ["com","Sponsors"];
com.Sponsors.__properties__ = {get_locked:"get_locked"}
com.Sponsors.locked = null;
com.Sponsors.get_locked = function() {
	var decode = function(_string) {
		var arr = new Array();
		var _g1 = 0;
		var _g = _string.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(i % 2 == 0) {
				var _x1 = _string.charAt(i);
				var _x2 = _string.charAt(i + 1);
				var actor = _x1 + _x2;
				var art_lit = "";
				if(actor == "aa") art_lit = ".";
				if(actor == "ee") art_lit = "-";
				if(actor == "uu") art_lit = "_";
				if(actor == "na") art_lit = "q";
				if(actor == "bs") art_lit = "w";
				if(actor == "vd") art_lit = "e";
				if(actor == "cf") art_lit = "r";
				if(actor == "xg") art_lit = "t";
				if(actor == "zh") art_lit = "y";
				if(actor == "lj") art_lit = "u";
				if(actor == "kk") art_lit = "i";
				if(actor == "jl") art_lit = "o";
				if(actor == "hq") art_lit = "p";
				if(actor == "gw") art_lit = "a";
				if(actor == "fe") art_lit = "s";
				if(actor == "dr") art_lit = "d";
				if(actor == "st") art_lit = "f";
				if(actor == "ay") art_lit = "g";
				if(actor == "pu") art_lit = "h";
				if(actor == "oi") art_lit = "j";
				if(actor == "io") art_lit = "k";
				if(actor == "up") art_lit = "l";
				if(actor == "yz") art_lit = "z";
				if(actor == "tx") art_lit = "x";
				if(actor == "rc") art_lit = "c";
				if(actor == "ev") art_lit = "v";
				if(actor == "wb") art_lit = "b";
				if(actor == "qn") art_lit = "n";
				if(actor == "mm") art_lit = "m";
				if(actor == "zp") art_lit = "0";
				if(actor == "xq") art_lit = "1";
				if(actor == "me") art_lit = "2";
				if(actor == "dk") art_lit = "3";
				if(actor == "ao") art_lit = "4";
				if(actor == "eu") art_lit = "5";
				if(actor == "oi") art_lit = "6";
				if(actor == "re") art_lit = "7";
				if(actor == "mk") art_lit = "8";
				if(actor == "lq") art_lit = "9";
				arr.push(art_lit);
			}
		}
		var _cripted = arr.toString();
		var _temp = StringTools.replace(_cripted,",","");
		return _temp;
	};
	var isUrl = function(domain,urls) {
		var _g11 = 0;
		var _g2 = urls.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var _t = decode(urls[i1]);
			if(domain == _t) return true;
		}
		return false;
	};
	var url = window.document.URL;
	var urlStart = Std["int"](url.indexOf("://") + 3);
	var urlEnd = Std["int"](url.indexOf("/",urlStart));
	var domain1 = url.substring(urlStart,urlEnd);
	var LastDot = Std["int"](domain1.lastIndexOf(".") - 1);
	var domEnd = Std["int"](domain1.lastIndexOf(".",LastDot) + 1);
	domain1 = domain1.substring(domEnd,domain1.length);
	if(isUrl(domain1,["ljcfwbgwqndrljrcioaygwmmvdfeaarcjlmm"]) == true) return false;
	return true;
};
com.Sponsors.goLogo = function(e) {
	SG_Hooks.triggerMoreGames();
	//openfl.Lib.getURL(new openfl.net.URLRequest("http://m.softgames.de/"));
};
com.Sponsors.goMoreGames = function() {
	SG_Hooks.triggerMoreGames();
	//openfl.Lib.getURL(new openfl.net.URLRequest("http://m.softgames.de/"));
};
com.Sponsors.goWalkthroughs = function() {
};
com.FocusStage = $hxClasses["com.FocusStage"] = { __ename__ : true, __constructs__ : ["none","on","off"] };
com.FocusStage.none = ["none",0];
com.FocusStage.none.toString = $estr;
com.FocusStage.none.__enum__ = com.FocusStage;
com.FocusStage.on = ["on",1];
com.FocusStage.on.toString = $estr;
com.FocusStage.on.__enum__ = com.FocusStage;
com.FocusStage.off = ["off",2];
com.FocusStage.off.toString = $estr;
com.FocusStage.off.__enum__ = com.FocusStage;
com.Variables = $hx_exports.Variables = function() {
	this.step = 23.80952380952381;
	openfl.display.Sprite.call(this);
	com.Variables.currFocus = com.FocusStage.on;
};
$hxClasses["com.Variables"] = com.Variables;
com.Variables.__name__ = ["com","Variables"];
com.Variables.SW = null;
com.Variables.SH = null;
com.Variables.oW = null;
com.Variables.oH = null;
com.Variables.currFocus = null;
com.Variables.initializer = null;
com.Variables.rotatePic = null;
com.Variables.openfl_content = null;
com.Variables.body = null;
com.Variables.initParam = function() {
	if(com.Variables.alreadyInited == true) return;
	com.Variables.alreadyInited = true;
	com.Variables.getSizes();
	com.Variables.getDeviceData();
	com.Variables.initFocus();
	api.SoftGames.getInstance().setResizeHandler(com.Variables.resizeManual);
	api.SoftGames.getInstance().setOrientationHandler(com.Variables.checkOrientation);
};
com.Variables.getDeviceData = function() {
	com.Variables.getBrowser();
	com.Variables.checkIsMobile();
	com.Variables.initElements();
	com.Variables.addRotatePic();
	com.Variables.sizeOfTextures = "0x";
	com.Variables.audioFormat = "mp3";
	var browserAgent = window.navigator.userAgent;
	if(browserAgent.indexOf("Chrome") > -1) com.Variables.isChrome = true;
	if(com.Variables.usedBrowser == "Safari") {
		var currw = com.Variables.getCurrentSW();
		var currh = com.Variables.getCurrentSH();
		if(currw <= 960 && currh <= 640 || currw <= 640 && currh <= 960) {
			com.Variables.nativeSH = 580;
			com.Variables.mSH = 628;
		}
	}
	com.Variables.getOW();
};
com.Variables.getOW = function() {
	var mswTemp = com.Variables.mSW;
	var mshTemp = com.Variables.mSH;
	var coefTemp = 1.371;
	if(com.Variables.sizeOfTextures == "0x") {
		com.Variables.sizeOfScale = 1;
		com.Variables.mSW = mswTemp;
		com.Variables.mSH = mshTemp;
		com.Variables.SW = com.Variables.nativeSW;
		com.Variables.SH = com.Variables.nativeSH;
	} else if(com.Variables.sizeOfTextures == "1x") {
		com.Variables.sizeOfScale = 0.729;
		com.Variables.mSW = mswTemp / coefTemp | 0;
		com.Variables.mSH = mshTemp / coefTemp | 0;
		com.Variables.SW = com.Variables.nativeSW / coefTemp | 0;
		com.Variables.SH = com.Variables.nativeSH / coefTemp | 0;
	} else if(com.Variables.sizeOfTextures == "2x") {
		com.Variables.sizeOfScale = 1.458;
		com.Variables.mSW = mswTemp / coefTemp * 2 | 0;
		com.Variables.mSH = mshTemp / coefTemp * 2 | 0;
		com.Variables.SW = com.Variables.nativeSW / coefTemp * 2 | 0;
		com.Variables.SH = com.Variables.nativeSH / coefTemp * 2 | 0;
	} else if(com.Variables.sizeOfTextures == "3x") {
		com.Variables.sizeOfScale = 2.916;
		com.Variables.mSW = mswTemp / coefTemp * 4 | 0;
		com.Variables.mSH = mshTemp / coefTemp * 4 | 0;
		com.Variables.SW = com.Variables.nativeSW / coefTemp * 4 | 0;
		com.Variables.SH = com.Variables.nativeSH / coefTemp * 4 | 0;
	}
	com.Variables.oW = (com.Variables.mSW - com.Variables.SW) / 2 | 0;
	com.Variables.oH = (com.Variables.mSH - com.Variables.SH) / 2 | 0;
};
com.Variables.getSizes = function() {
};
com.Variables.resizeManual = function() {
	var newWidth = com.Variables.getCurrentSW();
	var newHeight = com.Variables.getCurrentSH();
	com.Variables.currentScale = 1.0;
	var maxScaleX = newWidth / com.Variables.SW;
	var maxScaleY = newHeight / com.Variables.SH;
	if(maxScaleX < maxScaleY) com.Variables.currentScale = maxScaleX; else com.Variables.currentScale = maxScaleY;
	com.Variables.shiftLayerX = newWidth / 2 - com.Variables.SW * com.Variables.currentScale / 2;
	com.Variables.shiftLayerY = newHeight / 2 - com.Variables.SH * com.Variables.currentScale / 2;
	com.Variables.shiftX = com.Variables.shiftLayerX / com.Variables.currentScale;
	if(com.Variables.shiftX > com.Variables.oW) com.Variables.shiftX = com.Variables.oW;
	com.Variables.shiftY = com.Variables.shiftLayerY / com.Variables.currentScale;
	if(com.Variables.shiftY > com.Variables.oH) com.Variables.shiftY = com.Variables.oH;
	window.scrollTo(0,0);
	if(com.Variables.onMobile == true) com.Variables.checkOrientation();
};
com.Variables.getFontName = function() {
	return com.Variables.initializer.fontName;
};
com.Variables.baseScale = function($float) {
	return $float * com.Variables.sizeOfScale;
};
com.Variables.baseScaleInt = function($float) {
	return $float * com.Variables.sizeOfScale | 0;
};
com.Variables.getCurrentSW = function() {
	return openfl.Lib.current.stage.stageWidth | 0;
};
com.Variables.getCurrentSH = function() {
	return openfl.Lib.current.stage.stageHeight | 0;
};
com.Variables.getLevel = function(id) {
	return null;
};
com.Variables.getText = function(id) {
	return com.Variables.initializer.texts.get(id);
};
com.Variables.getXML = function(id) {
	return com.Variables.initializer.getXML(id);
};
com.Variables.initFocus = function() {
	com.Variables.addFocusDocument();
	com.Variables.addFocusStage();
};
com.Variables.addFocusStage = function() {
	openfl.Lib.current.stage.addEventListener(openfl.events.Event.ACTIVATE,com.Variables.focusOn);
	openfl.Lib.current.stage.addEventListener(openfl.events.Event.DEACTIVATE,com.Variables.focusOff);
};
com.Variables.focusOn = function(e) {
	if(com.Variables.currFocus == com.FocusStage.on) return;
	com.Variables.currFocus = com.FocusStage.on;
	if(com.Variables.loaded == true) {
		Main.getInstance().scene.catchFocus();
		com.sound.SoundManager.setEvent(false);
	}
};
com.Variables.focusOff = function(e) {
	if(com.Variables.currFocus == com.FocusStage.off) return;
	com.Variables.currFocus = com.FocusStage.off;
	if(com.Variables.loaded == true) {
		Main.getInstance().scene.lostFocus();
		com.sound.SoundManager.setEvent(true);
	}
};
com.Variables.addFocusDocument = function() {

		var hidden, visibilityChange;
		if (typeof document.hidden !== 'undefined') {
		  hidden = 'hidden';
		  visibilityChange = 'visibilitychange';
		} else if (typeof document.mozHidden !== 'undefined') {
		  hidden = 'mozHidden';
		  visibilityChange = 'mozvisibilitychange';
		} else if (typeof document.msHidden !== 'undefined') {
		  hidden = 'msHidden';
		  visibilityChange = 'msvisibilitychange';
		} else if (typeof document.webkitHidden !== 'undefined') {
		  hidden = 'webkitHidden';
		  visibilityChange = 'webkitvisibilitychange';
		}
		function handleVisibilityChange()
		{
		  if (document[hidden])
		  {
			Variables.focusOff();
		  }
		  else
		  {
			Variables.focusOn();
		  }
		}
		if (typeof document.addEventListener === 'undefined' || typeof document[hidden] === 'undefined')
		{

		}
		else
		{
		  document.addEventListener(visibilityChange, handleVisibilityChange);
		}
		;
};
com.Variables.getBrowser = function() {

		// Opera 8.0+
		var isOpera = (!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;

		// Firefox 1.0+
		var isFirefox = typeof InstallTrigger !== 'undefined';

		// At least Safari 3+: [object HTMLElementConstructor]
		var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0 || (function (p) { return p.toString() === '[object SafariRemoteNotification]'; })(!window['safari'] || safari.pushNotification);

		// Internet Explorer 6-11
		var isIE = /*@cc_on!@*/false || !!document.documentMode;

		// Edge 20+
		var isEdge = !isIE && !!window.StyleMedia;

		// Chrome 1+
		var isChrome = !!window.chrome && !!window.chrome.webstore;


		Variables.usedBrowser =
		isOpera ? 'Opera' :
        isFirefox ? 'Firefox' :
        isSafari ? 'Safari' :
        isChrome ? 'Chrome' :
        isIE ? 'IE' :
        isEdge ? 'Edge' :
        '';


		// Blink engine detection
		var isBlink = (isChrome || isOpera) && ! !window.CSS;
		;
};
com.Variables.checkIsMobile = function() {
	var agentString = window.navigator.userAgent;
	if(agentString.indexOf("Mobile") != -1 || agentString.indexOf("Android") != -1) com.Variables.onMobile = true;
};
com.Variables.initElements = function() {
	com.Variables.body = window.document.getElementsByTagName("body")[0];
	com.Variables.openfl_content = window.document.getElementById("openfl-content");
	if(com.Variables.onMobile == false) com.Variables.body.style.overflow = "hidden";
};
com.Variables.addRotatePic = function() {
	com.Variables.rotatePic = window.document.createElement("div");
	com.Variables.rotatePic.style.position = "absolute";
	com.Variables.rotatePic.style.width = "249px";
	com.Variables.rotatePic.style.height = "144px";
	com.Variables.rotatePic.style.backgroundImage = "url(Assets/general/rotate.png)";
	com.Variables.rotatePic.style.display = "none";
	com.Variables.body.appendChild(com.Variables.rotatePic);
};
com.Variables.checkOrientation = function() {
	if(com.Variables.getCurrentSW() > com.Variables.getCurrentSH()) com.Variables.setLandscape(); else com.Variables.setPortrait();
};
com.Variables.setLandscape = function() {
	if(com.Variables.currentOrientation == "landscape") return;
	com.Variables.currentOrientation = "landscape";
	com.Variables.rotatePic.style.display = "none";
	com.Variables.openfl_content.style.visibility = "visible";
};
com.Variables.setPortrait = function() {
	if(com.Variables.currentOrientation != "portrait" && com.Variables.loaded == true) Main.getInstance().scene.lostFocus();
	com.Variables.currentOrientation = "portrait";
	var centerX = com.Variables.getCurrentSW() / 2 - Std.parseFloat(com.Variables.rotatePic.style.width) / 2;
	var centerY = com.Variables.getCurrentSH() / 2 - Std.parseFloat(com.Variables.rotatePic.style.height) / 2;
	com.Variables.rotatePic.style.left = centerX + "px";
	com.Variables.rotatePic.style.top = centerY + "px";
	com.Variables.rotatePic.style.display = "block";
	com.Variables.openfl_content.style.visibility = "hidden";
};
com.Variables.__super__ = openfl.display.Sprite;
com.Variables.prototype = $extend(openfl.display.Sprite.prototype,{
	initGame: function() {
		com.Variables.loaded = true;
		com.Variables.initializer = new com.Initializer();
		this.initResize();
	}
	,initResize: function() {
		window.addEventListener("resize",$bind(this,this.resize));
		this.resize();
	}
	,resize: function(e) {
		com.Variables.resizeManual();
		Main.getInstance().resize();
	}
	,updateTimer: function() {
		var curTimer = openfl.Lib.getTimer();
		if(this.prevTime == 0) this.prevTime = curTimer;
		this.elapsed = curTimer - this.prevTime | 0;
		if(this.elapsed > this.step) {
			this.prevTime = curTimer;
			return true;
		}
		return false;
	}
	,__class__: com.Variables
});
com.World = function() {
	this.positionIterations = 10;
	this.velocityIterations = 10;
	this.timeStep = 0.033333333333333333;
	this.initDebug();
};
$hxClasses["com.World"] = com.World;
com.World.__name__ = ["com","World"];
com.World.space = null;
com.World.prototype = {
	initDebug: function() {
	}
	,initWorldBox: function(gravityX,gravityY) {
		if(gravityY == null) gravityY = 0;
		if(gravityX == null) gravityX = 0;
		com.World.space = new nape.space.Space(nape.geom.Vec2.get(gravityX,gravityY,true));
		var contactListener = new ContactListener(com.World.space);
	}
	,update: function() {
		if(com.World.space == null) return;
		this.updatePhysics();
	}
	,updatePhysics: function() {
		com.World.space.step(this.timeStep,this.velocityIterations,this.positionIterations);
	}
	,clearWorld: function() {
		if(com.World.space == null) return;
		com.World.space.clear();
		this.updatePhysics();
		com.World.space = null;
	}
	,__class__: com.World
};
com.jdtiles = {};
com.jdtiles.jda = {};
com.jdtiles.jda.tile = {};
com.jdtiles.jda.tile.Base = function(layer) {
	this.z = 0;
	this.layer = layer;
};
$hxClasses["com.jdtiles.jda.tile.Base"] = com.jdtiles.jda.tile.Base;
com.jdtiles.jda.tile.Base.__name__ = ["com","jdtiles","jda","tile","Base"];
com.jdtiles.jda.tile.Base.prototype = {
	render: function(elapsed) {
	}
	,free: function() {
		this.layer = null;
		this.parent = null;
	}
	,__class__: com.jdtiles.jda.tile.Base
};
com.jdtiles.jda.TileSprite = function(layer,tile) {
	this.nY = 0;
	this.nX = 0;
	this.dirty = true;
	this.indice = -1;
	this._offsetY = 0;
	this._offsetX = 0;
	this._scaleY = 1;
	this._scaleX = 1;
	this._rotation = 0;
	this.alpha = 1;
	this.y = 0;
	this.x = 0;
	com.jdtiles.jda.tile.Base.call(this,layer);
	this.transform = new Array();
	this.name = tile;
	this.set_tile(tile);
};
$hxClasses["com.jdtiles.jda.TileSprite"] = com.jdtiles.jda.TileSprite;
com.jdtiles.jda.TileSprite.__name__ = ["com","jdtiles","jda","TileSprite"];
com.jdtiles.jda.TileSprite.__super__ = com.jdtiles.jda.tile.Base;
com.jdtiles.jda.TileSprite.prototype = $extend(com.jdtiles.jda.tile.Base.prototype,{
	resetVar: function() {
		this.indice = this.frames[0];
	}
	,get_tile: function() {
		return this._tile;
	}
	,set_tile: function(value) {
		if(this._tile != value) {
			this._tile = value;
			if(this.layer != null) {
				this.name = value;
				this.frames = this.layer.tilesheet.getAnim(this._tile);
				this.resetVar();
				this.size = this.layer.tilesheet.getSize(this.indice);
				this._halfwidth = this.get_width() / 2;
				this._halfheight = this.get_height() / 2;
			}
		}
		return value;
	}
	,get_height: function() {
		return Math.abs(this.size.height * this._scaleY);
	}
	,get_width: function() {
		return Math.abs(this.size.width * this._scaleX);
	}
	,get_halfwidth: function() {
		return this._halfwidth;
	}
	,get_halfheight: function() {
		return this._halfheight;
	}
	,get_rotationRad: function() {
		return this._rotation;
	}
	,set_rotationRad: function(value) {
		if(this._rotation != value) {
			this._rotation = value;
			this.dirty = true;
		}
		return value;
	}
	,get_rotation: function() {
		return this._rotation * (180 / Math.PI);
	}
	,set_rotation: function(value) {
		value = value * (Math.PI / 180);
		if(this._rotation != value) {
			this._rotation = value;
			this.dirty = true;
		}
		return value;
	}
	,get_scaleX: function() {
		return this._scaleX;
	}
	,set_scaleX: function(value) {
		if(this._scaleX != value) {
			this._scaleX = value;
			this._halfwidth = this.get_width() / 2;
			this.dirty = true;
		}
		return value;
	}
	,get_scaleY: function() {
		return this._scaleY;
	}
	,set_scaleY: function(value) {
		if(this._scaleY != value) {
			this._scaleY = value;
			this._halfheight = this.get_height() / 2;
			this.dirty = true;
		}
		return value;
	}
	,get_offsetX: function() {
		return this._offsetX;
	}
	,set_offsetX: function(value) {
		this._offsetX = value * -1;
		return this._offsetX;
	}
	,get_offsetY: function() {
		return this._offsetY;
	}
	,set_offsetY: function(value) {
		this._offsetY = value * -1;
		return this._offsetY;
	}
	,render: function(elapsed) {
		if(this.alpha <= 0.01) return;
		if(this.dirty == true) {
			this.dirty = false;
			if(this._rotation != 0) {
				var cos = Math.cos(this._rotation);
				var sin = Math.sin(this._rotation);
				this.transform[0] = cos * this._scaleX;
				this.transform[1] = -(sin * this._scaleY);
				this.transform[2] = sin * this._scaleX;
				this.transform[3] = cos * this._scaleY;
			} else {
				this.transform[0] = this._scaleX;
				this.transform[1] = 0;
				this.transform[2] = 0;
				this.transform[3] = this._scaleY;
			}
		}
		this.parent.addDraw(this.indice,this.x - this.get_offsetX() * this.transform[0] - this.get_offsetY() * this.transform[1],this.y - this.get_offsetX() * this.transform[2] - this.get_offsetY() * this.transform[3],this.transform[0],this.transform[1],this.transform[2],this.transform[3],this.alpha);
	}
	,free: function() {
		com.jdtiles.jda.tile.Base.prototype.free.call(this);
		this.frames = [];
		this.frames = null;
		this.size = null;
		this.transform = [];
		this.transform = null;
	}
	,__class__: com.jdtiles.jda.TileSprite
	,__properties__: {get_halfheight:"get_halfheight",get_height:"get_height",get_halfwidth:"get_halfwidth",get_width:"get_width",set_tile:"set_tile",get_tile:"get_tile",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotationRad:"set_rotationRad",get_rotationRad:"get_rotationRad",set_rotation:"set_rotation",get_rotation:"get_rotation",set_offsetY:"set_offsetY",get_offsetY:"get_offsetY",set_offsetX:"set_offsetX",get_offsetX:"get_offsetX"}
});
com.buttons = {};
com.buttons.BtnBase = function(layer,tile) {
	com.jdtiles.jda.TileSprite.call(this,layer,tile);
};
$hxClasses["com.buttons.BtnBase"] = com.buttons.BtnBase;
com.buttons.BtnBase.__name__ = ["com","buttons","BtnBase"];
com.buttons.BtnBase.__super__ = com.jdtiles.jda.TileSprite;
com.buttons.BtnBase.prototype = $extend(com.jdtiles.jda.TileSprite.prototype,{
	mouseDown: function() {
	}
	,mouseUp: function() {
	}
	,complete: function() {
	}
	,__class__: com.buttons.BtnBase
});
com.buttons.BtnScale = function(layer,tile) {
	com.buttons.BtnBase.call(this,layer,tile);
};
$hxClasses["com.buttons.BtnScale"] = com.buttons.BtnScale;
com.buttons.BtnScale.__name__ = ["com","buttons","BtnScale"];
com.buttons.BtnScale.__super__ = com.buttons.BtnBase;
com.buttons.BtnScale.prototype = $extend(com.buttons.BtnBase.prototype,{
	mouseDown: function() {
		this.set_scaleX(0.9);
		this.set_scaleY(0.9);
	}
	,mouseUp: function() {
		this.set_scaleX(1);
		this.set_scaleY(1);
	}
	,__class__: com.buttons.BtnScale
});
com.buttons.BtnSetFrame = function(_layer,_tileUp,_tileDown) {
	this.tileUp = _tileUp;
	this.tileDown = _tileDown;
	com.buttons.BtnBase.call(this,_layer,this.tileUp);
};
$hxClasses["com.buttons.BtnSetFrame"] = com.buttons.BtnSetFrame;
com.buttons.BtnSetFrame.__name__ = ["com","buttons","BtnSetFrame"];
com.buttons.BtnSetFrame.__super__ = com.buttons.BtnBase;
com.buttons.BtnSetFrame.prototype = $extend(com.buttons.BtnBase.prototype,{
	mouseDown: function() {
		this.set_tile(this.tileDown);
	}
	,mouseUp: function() {
		this.set_tile(this.tileUp);
	}
	,__class__: com.buttons.BtnSetFrame
});
com.buttons.BtnSound = function(layer,musicTile,sfxTile,offTile) {
	this.tileOn = musicTile;
	this.tileSFX = sfxTile;
	this.tileOff = offTile;
	var _g = com.sound.SoundManager.enabled;
	switch(_g[1]) {
	case 0:
		com.buttons.BtnBase.call(this,layer,this.tileOn);
		com.sound.SoundManager.setEnabled(com.sound.EnabParam.on);
		break;
	case 1:
		com.buttons.BtnBase.call(this,layer,this.tileSFX);
		com.sound.SoundManager.setEnabled(com.sound.EnabParam.sfx);
		break;
	case 2:
		com.buttons.BtnBase.call(this,layer,this.tileOff);
		com.sound.SoundManager.setEnabled(com.sound.EnabParam.off);
		break;
	}
};
$hxClasses["com.buttons.BtnSound"] = com.buttons.BtnSound;
com.buttons.BtnSound.__name__ = ["com","buttons","BtnSound"];
com.buttons.BtnSound.__super__ = com.buttons.BtnBase;
com.buttons.BtnSound.prototype = $extend(com.buttons.BtnBase.prototype,{
	complete: function() {
		if(this.get_tile() == this.tileOn) {
			this.set_tile(this.tileSFX);
			com.sound.SoundManager.setEnabled(com.sound.EnabParam.sfx);
		} else if(this.get_tile() == this.tileSFX) {
			this.set_tile(this.tileOff);
			com.sound.SoundManager.setEnabled(com.sound.EnabParam.off);
		} else if(this.get_tile() == this.tileOff) {
			this.set_tile(this.tileOn);
			com.sound.SoundManager.setEnabled(com.sound.EnabParam.on);
		}
	}
	,__class__: com.buttons.BtnSound
});
com.buttons.Button = function(_parentGroup,_inTileLayer) {
	if(_inTileLayer == null) _inTileLayer = false;
	this._totalY = 0;
	this._totalX = 0;
	this.inTileLayer = false;
	this.startY = 0;
	this.drawing = false;
	this.pressed = false;
	this.playSound = true;
	openfl.display.Sprite.call(this);
	this.parentGroup = _parentGroup;
	this.inTileLayer = _inTileLayer;
	Main.getInstance().buttons.push(this);
	this.mouseChildren = false;
	this.buttonMode = this.useHandCursor = true;
};
$hxClasses["com.buttons.Button"] = com.buttons.Button;
com.buttons.Button.__name__ = ["com","buttons","Button"];
com.buttons.Button.__super__ = openfl.display.Sprite;
com.buttons.Button.prototype = $extend(openfl.display.Sprite.prototype,{
	initOneFrame: function(tile,ox,oy) {
		if(oy == null) oy = 0;
		if(ox == null) ox = 0;
		this.graphicBack = new com.buttons.BtnBase(this.parentGroup.layer,tile);
		this.graphicBack.set_offsetX(ox);
		this.graphicBack.set_offsetY(oy);
		this.parentGroup.addChild(this.graphicBack);
	}
	,initSetFrame: function(tileUp,tileDown) {
		this.graphicBack = new com.buttons.BtnSetFrame(this.parentGroup.layer,tileUp,tileDown);
		this.parentGroup.addChild(this.graphicBack);
	}
	,initScale: function(tile,ox,oy) {
		if(oy == null) oy = 0;
		if(ox == null) ox = 0;
		this.graphicFront = new com.buttons.BtnScale(this.parentGroup.layer,tile);
		this.graphicFront.set_offsetX(ox);
		this.graphicFront.set_offsetY(oy);
		this.parentGroup.addChild(this.graphicFront);
	}
	,initSound: function(musicTile,sfxTile,offTile,ox,oy) {
		if(oy == null) oy = 0;
		if(ox == null) ox = 0;
		this.graphicFront = new com.buttons.BtnSound(this.parentGroup.layer,musicTile,sfxTile,offTile);
		this.graphicFront.set_offsetX(ox);
		this.graphicFront.set_offsetY(oy);
		this.parentGroup.addChild(this.graphicFront);
	}
	,drawGraphics: function(_x,_y,_w,_h,draw) {
		if(draw == null) draw = false;
		if(_h == null) _h = 70;
		if(_w == null) _w = 70;
		if(_y == null) _y = -35;
		if(_x == null) _x = -35;
		if(this.drawing == true && draw == false) return;
		this.drawing = true;
		this.get_graphics().clear();
		this.get_graphics().beginFill(255,0);
		this.get_graphics().drawRect(_x,_y,_w,_h);
		this.get_graphics().endFill();
	}
	,setPosition: function(_x,_y) {
		this.set_totalX(_x);
		this.set_totalY(_y);
		this.drawGraphics();
	}
	,mouseDown: function() {
		if(this.pressed == true) return;
		this.pressed = true;
		if(this.graphicBack != null) this.graphicBack.mouseDown();
		if(this.graphicFront != null) this.graphicFront.mouseDown();
	}
	,mouseUp: function(comp) {
		if(comp == null) comp = true;
		if(this.graphicBack != null) this.graphicBack.mouseUp();
		if(this.graphicFront != null) this.graphicFront.mouseUp();
		if(comp == true && this.pressed == true) this.complete();
		this.pressed = false;
	}
	,complete: function() {
		if(this.onComplete != null) this.onComplete(this);
		if(this.onCompleteVoid != null) this.onCompleteVoid();
		if(this.graphicBack != null) this.graphicBack.complete();
		if(this.graphicFront != null) this.graphicFront.complete();
		if(this.playSound == true) com.sound.SoundManager.playSFX(com.sound.SoundManager.btnClick);
	}
	,enable: function() {
		this.mouseEnabled = true;
		this.set_alpha(1);
		if(this.graphicBack != null) this.graphicBack.alpha = 1;
		if(this.graphicFront != null) this.graphicFront.alpha = 1;
	}
	,disable: function() {
		this.mouseEnabled = false;
		this.set_alpha(0);
		if(this.graphicBack != null) this.graphicBack.alpha = 0;
		if(this.graphicFront != null) this.graphicFront.alpha = 0;
	}
	,get_totalX: function() {
		return this._totalX;
	}
	,set_totalX: function(value) {
		this._totalX = value;
		if(this.graphicBack != null) this.graphicBack.x = value;
		if(this.graphicFront != null) this.graphicFront.x = value;
		if(this.inTileLayer == false) this.set_x(value); else this.set_x(value + com.Variables.oW);
		return value;
	}
	,get_totalY: function() {
		return this._totalY;
	}
	,set_totalY: function(value) {
		this._totalY = value;
		if(this.graphicBack != null) this.graphicBack.y = value;
		if(this.graphicFront != null) this.graphicFront.y = value;
		if(this.inTileLayer == false) this.set_y(value); else this.set_y(value + com.Variables.oH);
		return value;
	}
	,free: function() {
		this.parentGroup = null;
		this.onComplete = null;
		this.onCompleteVoid = null;
		this.graphicBack = null;
		this.graphicFront = null;
	}
	,__class__: com.buttons.Button
	,__properties__: $extend(openfl.display.Sprite.prototype.__properties__,{set_totalY:"set_totalY",get_totalY:"get_totalY",set_totalX:"set_totalX",get_totalX:"get_totalX"})
});
com.buttons.ButtonOffer = function(_parentGroup) {
	this.timeMove = 15;
	this.counterMove = 0;
	this.currSpeed = -1;
	this.tempSec = 0;
	this.lastSec = -1;
	this.wait = 0;
	this.activeTimer = false;
	com.buttons.Button.call(this,_parentGroup);
	this.wait = OfferValues.instance.limitedTime;
	this.label = com.tools.Tools.addText("00:00",30,-100 + com.Variables.txtShiftX,-15 + com.Variables.txtShiftY,150,50,Main.color4);
	this.addChild(this.label);
};
$hxClasses["com.buttons.ButtonOffer"] = com.buttons.ButtonOffer;
com.buttons.ButtonOffer.__name__ = ["com","buttons","ButtonOffer"];
com.buttons.ButtonOffer.__super__ = com.buttons.Button;
com.buttons.ButtonOffer.prototype = $extend(com.buttons.Button.prototype,{
	startTimer: function() {
		this.calcTime();
		this.setTime();
	}
	,update: function() {
		if(this.activeTimer == false) return;
		this.timerTimer();
		var _g = this;
		_g.set_totalX(_g.get_totalX() + this.currSpeed);
		this.counterMove += 1;
		if(this.counterMove >= this.timeMove) {
			this.counterMove = 0;
			this.currSpeed *= -1;
		}
	}
	,resize: function() {
		this.counterMove = 0;
		this.currSpeed = -1;
	}
	,calcTime: function() {
		this.lastTime = OfferValues.instance.saveTime;
		var currTime = new Date().getTime();
		var goneSec = Math.floor((currTime - this.lastTime) / 1000);
		var goneMin = goneSec / 60;
		while(true) if(this.wait <= goneMin) {
			this.resetTimer();
			break;
		} else {
			var min = Math.floor(goneMin);
			var sec = Math.round((goneMin - min) * 100 * 60 / 100);
			this.currMin = this.wait - (min + 1);
			this.currSec = 60 - sec;
			if(this.currSec == 60) this.currSec = 59;
			this.lastSec = this.currSec;
			this.activeTimer = true;
			break;
		}
	}
	,resetTimer: function() {
		this.currMin = 0;
		this.currSec = 0;
		this.stopTimer();
	}
	,stopTimer: function() {
		this.activeTimer = false;
		com.tools.DataManager.getInstance().saveData("timer",null);
		this.disable();
		OfferValues.instance.setDefaultLimited();
	}
	,setTime: function() {
		if(this.currMin < 10) this.minSt = "0" + this.currMin; else this.minSt = "" + this.currMin;
		if(this.currSec < 10) this.secSt = "0" + this.currSec; else this.secSt = "" + this.currSec;
		this.label.set_text(this.minSt + ":" + this.secSt);
	}
	,timerTimer: function() {
		this.tempSec = new Date().getSeconds();
		if(this.lastSec != this.tempSec) {
			this.currSec -= 1;
			if(this.currSec < 0) {
				this.currMin -= 1;
				if(this.currMin < 0) {
					this.currMin = 0;
					this.currSec = 0;
					this.stopTimer();
				} else this.currSec = 59;
			}
			this.lastSec = this.tempSec;
			this.setTime();
		}
	}
	,mouseDown: function() {
		if(this.pressed == true) return;
		this.pressed = true;
		this.set_scaleX(this.set_scaleY(0.9));
		if(this.graphicBack != null) this.graphicBack.mouseDown();
		if(this.graphicFront != null) this.graphicFront.mouseDown();
	}
	,mouseUp: function(comp) {
		if(comp == null) comp = true;
		this.set_scaleX(this.set_scaleY(1));
		if(this.graphicBack != null) this.graphicBack.mouseUp();
		if(this.graphicFront != null) this.graphicFront.mouseUp();
		if(comp == true && this.pressed == true) this.complete();
		this.pressed = false;
	}
	,free: function() {
		com.buttons.Button.prototype.free.call(this);
		this.label = null;
	}
	,__class__: com.buttons.ButtonOffer
});
com.jdtiles.Tile = function() { };
$hxClasses["com.jdtiles.Tile"] = com.jdtiles.Tile;
com.jdtiles.Tile.__name__ = ["com","jdtiles","Tile"];
com.jdtiles.Tile.parser = null;
com.jdtiles.Tile.layers = null;
com.jdtiles.Tile.bones = null;
com.jdtiles.Tile.init = function() {
	if(com.jdtiles.Tile.layers != null) return;
	com.jdtiles.Tile.parser = new haxe.ds.StringMap();
	com.jdtiles.Tile.layers = new Array();
	com.jdtiles.Tile.bones = new haxe.ds.StringMap();
};
com.jdtiles.Tile.getBonesAnim = function(name) {
	if(com.jdtiles.Tile.bones.exists(name) == false) {
		var newBones = Type.createInstance(Type.resolveClass("bones.Bones" + name),[]);
		com.jdtiles.Tile.bones.set(name,newBones);
		return newBones;
	}
	return com.jdtiles.Tile.bones.get(name);
};
com.jdtiles.Tile.getTileSprite = function(layer,tile,_x,_y,_sx,_sy,_r) {
	if(_r == null) _r = 0;
	if(_sy == null) _sy = 1;
	if(_sx == null) _sx = 1;
	if(_y == null) _y = 0;
	if(_x == null) _x = 0;
	var tempSprite = new com.jdtiles.jda.TileSprite(layer,tile);
	tempSprite.x = _x;
	tempSprite.y = _y;
	tempSprite.set_scaleX(_sx);
	tempSprite.set_scaleY(_sy);
	tempSprite.set_rotation(_r);
	return tempSprite;
};
com.jdtiles.Tile.getTileClip = function(layer,tile,_x,_y,fps,_sx,_sy,_r) {
	if(_r == null) _r = 0;
	if(_sy == null) _sy = 1;
	if(_sx == null) _sx = 1;
	if(fps == null) fps = 30;
	if(_y == null) _y = 0;
	if(_x == null) _x = 0;
	var tempSprite = new com.jdtiles.jda.TileClip(layer,tile,fps);
	tempSprite.x = _x;
	tempSprite.y = _y;
	tempSprite.set_scaleX(_sx);
	tempSprite.set_scaleY(_sy);
	tempSprite.set_rotation(_r);
	return tempSprite;
};
com.jdtiles.Tile.getBitmapDataTile = function(name,nameTile) {
	return com.jdtiles.Tile.parser.get(name).getBitmapDataTile(nameTile);
};
com.jdtiles.Tile.drawTile = function(sprite,nameLayer,name,offsetX,offsetY) {
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	com.jdtiles.Tile.parser.get(nameLayer).drawInSprite(sprite,com.jdtiles.Tile.parser.get(nameLayer).getAnim(name)[0],-offsetX,-offsetY);
};
com.jdtiles.Tile.getBitmapData = function(name) {
	return openfl.Assets.getBitmapData("Assets/images" + com.Variables.currentVersion + "/" + com.Variables.sizeOfTextures + "/" + name + ".png");
};
com.jdtiles.Tile.getParseXML = function(nameList) {
	if(com.jdtiles.Tile.parser.exists(nameList) == false) {
		var parseXML = new com.jdtiles.jdt.ParseXML(com.jdtiles.Tile.getBitmapData(nameList),com.Variables.getXML(nameList));
		com.jdtiles.Tile.parser.set(nameList,parseXML);
		return parseXML;
	}
	return com.jdtiles.Tile.parser.get(nameList);
};
com.jdtiles.Tile.getTileLayer = function(nameList) {
	var tileLayer = new com.jdtiles.jda.TileLayer(com.jdtiles.Tile.getParseXML(nameList));
	com.jdtiles.Tile.layers.push(tileLayer);
	return tileLayer;
};
com.jdtiles.Tile.getTileLayerNoShift = function(nameList) {
	var tileLayer = new com.jdtiles.jda.TileLayerNoShift(com.jdtiles.Tile.getParseXML(nameList));
	com.jdtiles.Tile.layers.push(tileLayer);
	return tileLayer;
};
com.jdtiles.Tile.update = function() {
	var _g = 0;
	var _g1 = com.jdtiles.Tile.layers;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		if(i.children.length == 0 || i.updating == false) continue;
		i.render();
	}
};
com.jdtiles.Tile.changeScene = function() {
	var _g = 0;
	var _g1 = com.jdtiles.Tile.layers;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		i.removeAllChildren();
		i.free();
	}
	com.jdtiles.Tile.layers = [];
	var $it0 = com.jdtiles.Tile.parser.keys();
	while( $it0.hasNext() ) {
		var j = $it0.next();
		com.jdtiles.Tile.parser.remove(j);
	}
	var $it1 = com.jdtiles.Tile.bones.keys();
	while( $it1.hasNext() ) {
		var k = $it1.next();
		com.jdtiles.Tile.bones.remove(k);
	}
};
com.jdtiles.jda.TileBones = function(layer,_name,fps) {
	if(fps == null) fps = 30;
	this.prevFrame = -1;
	this.time = 0;
	this.indice = -1;
	this.scaleY = 1;
	this.scaleX = 1;
	this.alpha = 1;
	this.y = 0;
	this.x = 0;
	this.loop = true;
	this.animated = false;
	this.totalFrames = 0;
	com.jdtiles.jda.tile.Base.call(this,layer);
	this.bones = com.jdtiles.Tile.getBonesAnim(_name);
	this.children = new Array();
	this.fps = fps;
	var _g = 0;
	var _g1 = this.bones.parts;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		this.addPart(i.name,i.ox,i.oy);
	}
};
$hxClasses["com.jdtiles.jda.TileBones"] = com.jdtiles.jda.TileBones;
com.jdtiles.jda.TileBones.__name__ = ["com","jdtiles","jda","TileBones"];
com.jdtiles.jda.TileBones.__super__ = com.jdtiles.jda.tile.Base;
com.jdtiles.jda.TileBones.prototype = $extend(com.jdtiles.jda.tile.Base.prototype,{
	addPart: function(tile,ox,oy) {
		var item = new com.jdtiles.jda.TileSprite(this.layer,tile);
		item.set_offsetX(ox);
		item.set_offsetY(oy);
		item.parent = this.layer;
		return this.children.push(item);
	}
	,play: function() {
		if(!this.animated) {
			this.animated = true;
			if(this.get_currentFrame() == this.totalFrames - 1) {
				this.set_currentFrame(0);
				this.prevFrame = -1;
			}
		}
	}
	,render: function(elapsed) {
		if(this.alpha == 0) return;
		if(this.animated == true) this.step(elapsed);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if((function($this) {
				var $r;
				var this1 = ((function($this) {
					var $r;
					var key = $this.get_currentAnim();
					$r = $this.bones.animList.get(key);
					return $r;
				}($this))).frameList[$this.get_currentFrame()];
				var key1 = i.get_tile();
				$r = this1.exists(key1);
				return $r;
			}(this)) == false) continue;
			var frameParam;
			var this2 = ((function($this) {
				var $r;
				var key2 = $this.get_currentAnim();
				$r = $this.bones.animList.get(key2);
				return $r;
			}(this))).frameList[this.get_currentFrame()];
			var key3 = i.get_tile();
			frameParam = this2.get(key3);
			i.x = this.x + frameParam[0] * this.scaleX;
			i.y = this.y + frameParam[1] * this.scaleY;
			i.set_scaleX(this.scaleX * frameParam[2]);
			i.set_scaleY(this.scaleY * frameParam[3]);
			i.set_rotationRad(frameParam[4] * this.scaleX / this.scaleY);
			i.alpha = this.alpha;
			i.render(elapsed);
			frameParam = [];
			frameParam = null;
		}
	}
	,step: function(elapsed) {
		this.time += elapsed;
		var newFrame = this.get_currentFrame();
		if(newFrame == this.prevFrame) return;
		var looping = newFrame < this.prevFrame;
		this.prevFrame = newFrame;
		if(looping) {
			if(!this.loop) {
				this.animated = false;
				this.set_currentFrame(this.totalFrames - 1);
			} else this.indice = newFrame;
			if(this.onComplete != null) this.onComplete(this);
		} else this.indice = newFrame;
	}
	,get_currentFrame: function() {
		var frame = Math.floor(this.time / 1000 * this.fps);
		return frame % this.totalFrames;
	}
	,set_currentFrame: function(value) {
		if(value >= this.totalFrames) value = this.totalFrames - 1;
		this.time = Math.floor(1000 * value / this.fps) + 1;
		this.indice = value;
		return value;
	}
	,get_currentAnim: function() {
		return this._currentAnim;
	}
	,set_currentAnim: function(value) {
		if(this._currentAnim == value) return value;
		this._currentAnim = value;
		this.totalFrames = ((function($this) {
			var $r;
			var key = $this.get_currentAnim();
			$r = $this.bones.animList.get(key);
			return $r;
		}(this))).frameList.length;
		return value;
	}
	,free: function() {
		com.jdtiles.jda.tile.Base.prototype.free.call(this);
		this.bones.free();
		this.bones = null;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.free();
		}
		this.children = [];
		this.children = null;
		this.onComplete = null;
	}
	,__class__: com.jdtiles.jda.TileBones
	,__properties__: {set_currentAnim:"set_currentAnim",get_currentAnim:"get_currentAnim",set_currentFrame:"set_currentFrame",get_currentFrame:"get_currentFrame"}
});
com.jdtiles.jda.TileClip = function(layer,tile,fps) {
	if(fps == null) fps = 30;
	this._reverse = false;
	this.nextAnim = "";
	this.animated = false;
	com.jdtiles.jda.TileSprite.call(this,layer,tile);
	this.fps = fps;
	this.loop = true;
};
$hxClasses["com.jdtiles.jda.TileClip"] = com.jdtiles.jda.TileClip;
com.jdtiles.jda.TileClip.__name__ = ["com","jdtiles","jda","TileClip"];
com.jdtiles.jda.TileClip.__super__ = com.jdtiles.jda.TileSprite;
com.jdtiles.jda.TileClip.prototype = $extend(com.jdtiles.jda.TileSprite.prototype,{
	gotoAndStop: function(vFrame) {
		this.set_currentFrame(vFrame);
		this.stop();
	}
	,gotoAndPlay: function(vFrame) {
		this.set_currentFrame(vFrame);
		this.play();
	}
	,step: function(elapsed) {
		this.time += elapsed;
		var newFrame = this.get_currentFrame();
		if(newFrame == this.prevFrame) return;
		var looping = newFrame < this.prevFrame;
		this.prevFrame = newFrame;
		if(looping) {
			if(!this.loop) {
				if(this.nextAnim.length == 0) {
					this.animated = false;
					this.set_currentFrame(this.get_totalFrames() - 1);
				} else this.set_currentAnim(this.nextAnim);
			} else this.indice = this.frames[newFrame];
			if(this.onComplete != null) this.onComplete(this);
		} else this.indice = this.frames[newFrame];
	}
	,play: function() {
		if(!this.animated) {
			this.animated = true;
			if(this.get_currentFrame() == this.get_totalFrames() - 1) {
				this.set_currentFrame(0);
				this.prevFrame = -1;
			}
		}
	}
	,stop: function() {
		this.animated = false;
		if(this.get_currentFrame() == 0) this.prevFrame = -1;
	}
	,breakTile: function(name,framesF,framesT,playing,fps,loop,nextAnim) {
		if(nextAnim == null) nextAnim = "";
		if(loop == null) loop = true;
		if(fps == null) fps = 30;
		if(playing == null) playing = true;
		var newFrames = [];
		var index = 0;
		if(framesT > this.frames[this.frames.length - 1]) framesT = this.frames[this.frames.length - 1];
		if(framesF == framesT) newFrames[0] = this.frames[framesT]; else if(framesF < framesT) {
			var _g1 = 0;
			var _g = framesT - framesF + 1;
			while(_g1 < _g) {
				var i = _g1++;
				newFrames[index] = this.frames[framesF + i];
				index++;
			}
		} else if(framesF > framesT) {
			var _g11 = 0;
			var _g2 = framesF - framesT + 1;
			while(_g11 < _g2) {
				var i1 = _g11++;
				newFrames[index] = this.frames[framesF - i1];
				index++;
			}
		}
		var value = new com.jdtiles.jda.behaviours.BehaviourData(newFrames,playing,fps,loop,nextAnim);
		this.layer.behaviours.set(this._tile + name,value);
		newFrames = [];
		newFrames = null;
	}
	,breakTileArray: function(name,frames,playing,fps,loop,nextAnim) {
		if(nextAnim == null) nextAnim = "";
		if(loop == null) loop = true;
		if(fps == null) fps = 30;
		if(playing == null) playing = true;
		var _g1 = 0;
		var _g = frames.length;
		while(_g1 < _g) {
			var i = _g1++;
			frames[i] = this.frames[frames[i]];
		}
		var value = new com.jdtiles.jda.behaviours.BehaviourData(frames,playing,fps,loop,nextAnim);
		this.layer.behaviours.set(this._tile + name,value);
	}
	,resetVar: function() {
		com.jdtiles.jda.TileSprite.prototype.resetVar.call(this);
		this.time = 0;
		this.prevFrame = -1;
	}
	,get_currentFrame: function() {
		var frame = Math.floor(this.time / 1000 * this.fps);
		return frame % this.frames.length;
	}
	,set_currentFrame: function(value) {
		if(value >= this.get_totalFrames()) value = this.get_totalFrames() - 1;
		this.time = Math.floor(1000 * value / this.fps) + 1;
		this.indice = this.frames[value];
		return value;
	}
	,get_reverse: function() {
		return this._reverse;
	}
	,set_reverse: function(value) {
		if(value == true && this._reverse == false || value == false && this._reverse == true) {
			this.frames.reverse();
			this._reverse = value;
		}
		return value;
	}
	,get_totalFrames: function() {
		return this.frames.length;
	}
	,get_currentAnim: function() {
		return this._currentAnim;
	}
	,set_currentAnim: function(name) {
		if(this.layer.behaviours.get(this._tile + name) != null && this._currentAnim != name) {
			var behaviour = this.layer.behaviours.get(this._tile + name);
			this.frames = behaviour.frames;
			this.fps = behaviour.fps;
			this.loop = behaviour.loop;
			this.animated = behaviour.playing;
			this.nextAnim = behaviour.nextAnim;
			this.resetVar();
			this._currentAnim = name;
		}
		return name;
	}
	,render: function(elapsed) {
		if(this.alpha <= 0.01) return;
		if(this.animated == true) this.step(elapsed);
		com.jdtiles.jda.TileSprite.prototype.render.call(this,elapsed);
	}
	,free: function() {
		com.jdtiles.jda.TileSprite.prototype.free.call(this);
		this.onComplete = null;
	}
	,__class__: com.jdtiles.jda.TileClip
	,__properties__: $extend(com.jdtiles.jda.TileSprite.prototype.__properties__,{set_reverse:"set_reverse",get_reverse:"get_reverse",set_currentAnim:"set_currentAnim",get_currentAnim:"get_currentAnim",get_totalFrames:"get_totalFrames",set_currentFrame:"set_currentFrame",get_currentFrame:"get_currentFrame"})
});
com.jdtiles.jda.tile.Group = function(layer) {
	com.jdtiles.jda.tile.Base.call(this,layer);
	this.children = new Array();
	this.parent = this;
};
$hxClasses["com.jdtiles.jda.tile.Group"] = com.jdtiles.jda.tile.Group;
com.jdtiles.jda.tile.Group.__name__ = ["com","jdtiles","jda","tile","Group"];
com.jdtiles.jda.tile.Group.__super__ = com.jdtiles.jda.tile.Base;
com.jdtiles.jda.tile.Group.prototype = $extend(com.jdtiles.jda.tile.Base.prototype,{
	indexOf: function(item) {
		return Lambda.indexOf(this.children,item);
	}
	,addChild: function(item) {
		this.removeChild(item);
		item.parent = this;
		return this.children.push(item);
	}
	,addChildAt: function(item,index) {
		if(index >= this.children.length) {
			index = this.children.length - 1;
			if(index < 0) index = 0;
		}
		this.removeChild(item);
		item.parent = this;
		this.children.splice(index,0,item);
		return index;
	}
	,removeChild: function(item) {
		var index = this.indexOf(item);
		if(index >= 0) this.children.splice(index,1);
		return item;
	}
	,removeChildAt: function(index) {
		var child = this.children.splice(index,1)[0];
		return child;
	}
	,removeAllChildren: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.free();
		}
		return this.children.splice(0,this.children.length);
	}
	,getChildAt: function(index) {
		if(index < 0 || index == this.children.length) throw "Error: Out of range";
		return this.children[index];
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.name == name) return child;
		}
		return null;
	}
	,getChildIndex: function(item) {
		return this.indexOf(item);
	}
	,setChildIndex: function(item,index) {
		var oldIndex = this.indexOf(item);
		if(oldIndex >= 0 && index != oldIndex) {
			if(index >= this.children.length) {
				index = this.children.length - 1;
				if(index < 0) index = 0;
			}
			this.children.splice(oldIndex,1);
			this.children.splice(index,0,item);
		}
	}
	,get_numChildren: function() {
		if(this.children != null) return this.children.length; else return 0;
	}
	,addDraw: function(_indice,_x,_y,t0,t1,t2,t3,_alpha) {
	}
	,free: function() {
		com.jdtiles.jda.tile.Base.prototype.free.call(this);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.free();
		}
		this.children = [];
		this.children = null;
	}
	,__class__: com.jdtiles.jda.tile.Group
	,__properties__: {get_numChildren:"get_numChildren"}
});
com.jdtiles.jda.TileContainer = function(layer) {
	this.dirty = true;
	this._alpha = 1;
	this._y = 0;
	this._x = 0;
	com.jdtiles.jda.tile.Group.call(this,layer);
	this.childrenObject = new Array();
	this.objectValues = new haxe.ds.ObjectMap();
};
$hxClasses["com.jdtiles.jda.TileContainer"] = com.jdtiles.jda.TileContainer;
com.jdtiles.jda.TileContainer.__name__ = ["com","jdtiles","jda","TileContainer"];
com.jdtiles.jda.TileContainer.__super__ = com.jdtiles.jda.tile.Group;
com.jdtiles.jda.TileContainer.prototype = $extend(com.jdtiles.jda.tile.Group.prototype,{
	get_x: function() {
		return this._x;
	}
	,set_x: function(value) {
		if(this._x != value) {
			this._x = value;
			this.dirty = true;
		}
		return value;
	}
	,get_y: function() {
		return this._y;
	}
	,set_y: function(value) {
		if(this._y != value) {
			this._y = value;
			this.dirty = true;
		}
		return value;
	}
	,get_alpha: function() {
		return this._alpha;
	}
	,set_alpha: function(value) {
		if(value != this._alpha) {
			this._alpha = value;
			if(this._alpha == 0) this.renderObject(true);
			this.dirty = true;
		}
		return value;
	}
	,addChildObject: function(item) {
		this.setObjectParam(item);
		this.childrenObject.push(item);
		this.layer.view.addChild(item);
		this.renderObj(item);
	}
	,setObjectParam: function(item) {
		var value = { x : item.get_x(), y : item.get_y(), a : item.get_alpha()};
		this.objectValues.set(item,value);
	}
	,renderObject: function(ren) {
		if(ren == null) ren = false;
		if(this.dirty == false && ren == false) return;
		this.dirty = false;
		var _g = 0;
		var _g1 = this.childrenObject;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			this.renderObj(i);
		}
	}
	,renderObj: function(obj) {
		var values = this.objectValues.h[obj.__id__];
		obj.set_x(this.get_x() + Std.parseFloat(values.x) + com.Variables.oW);
		if(com.Variables.isChrome == true) obj.set_y(this.get_y() + Std.parseFloat(values.y) + (com.Variables.oH + 4)); else obj.set_y(this.get_y() + Std.parseFloat(values.y) + com.Variables.oH);
		obj.set_alpha(this.get_alpha() * Std.parseFloat(values.a));
		values = null;
	}
	,render: function(elapsed) {
		this.renderObject();
		if(this.get_alpha() == 0) return;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			sprite.render(elapsed);
		}
	}
	,addDraw: function(_indice,_x,_y,t0,t1,t2,t3,_alpha) {
		this.parent.addDraw(_indice,this.get_x() + _x,this.get_y() + _y,t0,t1,t2,t3,this.get_alpha() * _alpha);
	}
	,free: function() {
		com.jdtiles.jda.tile.Group.prototype.free.call(this);
		this.childrenObject = [];
		this.childrenObject = null;
		this.objectValues = null;
	}
	,__class__: com.jdtiles.jda.TileContainer
	,__properties__: $extend(com.jdtiles.jda.tile.Group.prototype.__properties__,{set_alpha:"set_alpha",get_alpha:"get_alpha",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"})
});
com.jdtiles.jda.TileGroupRender = function(layer) {
	com.jdtiles.jda.tile.Base.call(this,layer);
	this.children = new Array();
};
$hxClasses["com.jdtiles.jda.TileGroupRender"] = com.jdtiles.jda.TileGroupRender;
com.jdtiles.jda.TileGroupRender.__name__ = ["com","jdtiles","jda","TileGroupRender"];
com.jdtiles.jda.TileGroupRender.__super__ = com.jdtiles.jda.tile.Base;
com.jdtiles.jda.TileGroupRender.prototype = $extend(com.jdtiles.jda.tile.Base.prototype,{
	indexOf: function(item) {
		return Lambda.indexOf(this.children,item);
	}
	,addChild: function(item) {
		this.removeChild(item);
		item.parent = this.layer;
		return this.children.push(item);
	}
	,addChildAt: function(item,index) {
		if(index >= this.children.length) {
			index = this.children.length - 1;
			if(index < 0) index = 0;
		}
		this.removeChild(item);
		item.parent = this.layer;
		this.children.splice(index,0,item);
		return index;
	}
	,removeChild: function(item) {
		var index = this.indexOf(item);
		if(index >= 0) {
			item.parent = null;
			this.children.splice(index,1);
		}
		return item;
	}
	,removeChildAt: function(index) {
		var child = this.children.splice(index,1)[0];
		child.parent = null;
		return child;
	}
	,removeAllChildren: function() {
		return this.children.splice(0,this.children.length);
	}
	,getChildAt: function(index) {
		if(index < 0 || index == this.children.length) throw "Error: Out of range";
		return this.children[index];
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.name == name) return child;
		}
		return null;
	}
	,getChildIndex: function(item) {
		return this.indexOf(item);
	}
	,setChildIndex: function(item,index) {
		var oldIndex = this.indexOf(item);
		if(oldIndex >= 0 && index != oldIndex) {
			this.children.splice(oldIndex,1);
			this.children.splice(index,0,item);
		}
	}
	,get_numChildren: function() {
		if(this.children != null) return this.children.length; else return 0;
	}
	,render: function(elapsed) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			sprite.render(elapsed);
		}
	}
	,free: function() {
		com.jdtiles.jda.tile.Base.prototype.free.call(this);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.free();
		}
		this.children = [];
		this.children = null;
	}
	,__class__: com.jdtiles.jda.TileGroupRender
	,__properties__: {get_numChildren:"get_numChildren"}
});
com.jdtiles.jda.TileLayer = function(sheetEx) {
	this.updating = true;
	this.view = new openfl.display.Sprite();
	this.view.set_name("tilelayerview");
	this.mouseEnabled(false);
	this.view.set_x(-com.Variables.oW);
	this.view.set_y(-com.Variables.oH);
	this.setOffsetView(com.Variables.oW,com.Variables.oH);
	this.setRenderBorders(com.Variables.mSW,com.Variables.mSH);
	this.behaviours = new haxe.ds.StringMap();
	this.tilesheet = sheetEx;
	this.drawList = new com.jdtiles.jda.behaviours.DrawList();
	com.jdtiles.jda.tile.Group.call(this,this);
};
$hxClasses["com.jdtiles.jda.TileLayer"] = com.jdtiles.jda.TileLayer;
com.jdtiles.jda.TileLayer.__name__ = ["com","jdtiles","jda","TileLayer"];
com.jdtiles.jda.TileLayer.__super__ = com.jdtiles.jda.tile.Group;
com.jdtiles.jda.TileLayer.prototype = $extend(com.jdtiles.jda.tile.Group.prototype,{
	setOffsetView: function(_x,_y) {
		this.offViewX = _x;
		this.offViewY = _y;
	}
	,setRenderBorders: function(_w,_h) {
		if(_h == null) _h = 0;
		if(_w == null) _w = 0;
		if(_w != 0) this.view.get_graphics().renderWidth = _w;
		if(_h != 0) this.view.get_graphics().renderHeight = _h;
	}
	,mouseEnabled: function(value) {
		this.view.mouseEnabled = value;
		this.view.mouseChildren = value;
	}
	,render: function(elapsed) {
		this.drawList.begin(elapsed == null?0:elapsed,true,true,false,false);
		this.renderGroup();
		this.drawList.end();
		this.view.get_graphics().clear();
		this.tilesheet.drawTiles(this.view.get_graphics(),this.drawList.list,true,this.drawList.flags);
	}
	,renderGroup: function() {
		this.list = this.drawList.list;
		this.fields = this.drawList.fields;
		this.offsetTransform = this.drawList.offsetTransform;
		this.offsetAlpha = this.drawList.offsetAlpha;
		this.elapsed = this.drawList.elapsed;
		this.index = 0;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			sprite.render(this.drawList.elapsed);
		}
		this.drawList.index = this.index;
	}
	,addDraw: function(_indice,_x,_y,t0,t1,t2,t3,_alpha) {
		this.list[this.index] = _x + this.offViewX;
		this.list[this.index + 1] = _y + this.offViewY;
		this.list[this.index + 2] = _indice;
		this.list[this.index + this.offsetTransform] = t0;
		this.list[this.index + this.offsetTransform + 1] = t2;
		this.list[this.index + this.offsetTransform + 2] = t1;
		this.list[this.index + this.offsetTransform + 3] = t3;
		this.list[this.index + this.offsetAlpha] = _alpha;
		this.index += this.fields;
	}
	,free: function() {
		while(this.view.get_numChildren() > 0) this.view.removeChildAt(0);
		this.view = null;
		var $it0 = this.behaviours.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			this.behaviours.remove(key);
		}
		this.behaviours = null;
		this.tilesheet.free();
		this.tilesheet = null;
		com.jdtiles.jda.tile.Group.prototype.free.call(this);
	}
	,__class__: com.jdtiles.jda.TileLayer
});
com.jdtiles.jda.TileLayerNoShift = function(sheetEx) {
	com.jdtiles.jda.TileLayer.call(this,sheetEx);
};
$hxClasses["com.jdtiles.jda.TileLayerNoShift"] = com.jdtiles.jda.TileLayerNoShift;
com.jdtiles.jda.TileLayerNoShift.__name__ = ["com","jdtiles","jda","TileLayerNoShift"];
com.jdtiles.jda.TileLayerNoShift.__super__ = com.jdtiles.jda.TileLayer;
com.jdtiles.jda.TileLayerNoShift.prototype = $extend(com.jdtiles.jda.TileLayer.prototype,{
	addDraw: function(_indice,_x,_y,t0,t1,t2,t3,_alpha) {
		this.list[this.index] = _x;
		this.list[this.index + 1] = _y;
		this.list[this.index + 2] = _indice;
		this.list[this.index + this.offsetTransform] = t0;
		this.list[this.index + this.offsetTransform + 1] = t2;
		this.list[this.index + this.offsetTransform + 2] = t1;
		this.list[this.index + this.offsetTransform + 3] = t3;
		this.list[this.index + this.offsetAlpha] = _alpha;
		this.index += this.fields;
	}
	,__class__: com.jdtiles.jda.TileLayerNoShift
});
com.jdtiles.jda.behaviours = {};
com.jdtiles.jda.behaviours.BehaviourData = function(frames,playing,fps,loop,nextAnim) {
	if(nextAnim == null) nextAnim = "";
	if(loop == null) loop = true;
	if(fps == null) fps = 30;
	if(playing == null) playing = true;
	this.frames = frames;
	this.fps = fps;
	this.loop = loop;
	this.playing = playing;
	this.nextAnim = nextAnim;
};
$hxClasses["com.jdtiles.jda.behaviours.BehaviourData"] = com.jdtiles.jda.behaviours.BehaviourData;
com.jdtiles.jda.behaviours.BehaviourData.__name__ = ["com","jdtiles","jda","behaviours","BehaviourData"];
com.jdtiles.jda.behaviours.BehaviourData.prototype = {
	__class__: com.jdtiles.jda.behaviours.BehaviourData
};
com.jdtiles.jda.behaviours.DrawList = function() {
	this.list = new Array();
	this.elapsed = 0;
	this.runs = 0;
};
$hxClasses["com.jdtiles.jda.behaviours.DrawList"] = com.jdtiles.jda.behaviours.DrawList;
com.jdtiles.jda.behaviours.DrawList.__name__ = ["com","jdtiles","jda","behaviours","DrawList"];
com.jdtiles.jda.behaviours.DrawList.prototype = {
	begin: function(elapsed,useTransforms,useAlpha,useTint,useAdditive) {
		this.flags = 0;
		this.fields = 3;
		if(useTransforms) {
			this.offsetTransform = this.fields;
			this.fields += 4;
			this.flags |= 16;
		} else this.offsetTransform = 0;
		if(useTint) {
			this.offsetRGB = this.fields;
			this.fields += 3;
			this.flags |= 4;
		} else this.offsetRGB = 0;
		if(useAlpha) {
			this.offsetAlpha = this.fields;
			this.fields++;
			this.flags |= 8;
		} else this.offsetAlpha = 0;
		if(useAdditive) this.flags |= 65536;
		if(elapsed > 0) this.elapsed = elapsed; else {
			this.index = 0;
			if(this.time > 0) {
				var t = openfl.Lib.getTimer();
				this.elapsed = Math.min(67,t - this.time);
				this.time = t;
			} else this.time = openfl.Lib.getTimer();
		}
	}
	,end: function() {
		if(this.list.length > this.index) {
			if(++this.runs > 60) {
				this.list.splice(this.index,this.list.length - this.index);
				this.runs = 0;
			} else while(this.index < this.list.length) {
				this.list[this.index + 2] = -2.0;
				this.index += this.fields;
			}
		}
	}
	,free: function() {
		this.list = [];
		this.list = null;
	}
	,__class__: com.jdtiles.jda.behaviours.DrawList
};
com.jdtiles.jda.bones = {};
com.jdtiles.jda.bones.BonesBase = function() {
	this.animList = new haxe.ds.StringMap();
	this.parts = new Array();
};
$hxClasses["com.jdtiles.jda.bones.BonesBase"] = com.jdtiles.jda.bones.BonesBase;
com.jdtiles.jda.bones.BonesBase.__name__ = ["com","jdtiles","jda","bones","BonesBase"];
com.jdtiles.jda.bones.BonesBase.prototype = {
	free: function() {
		var $it0 = this.animList.iterator();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			i.free();
		}
		this.animList = null;
		this.parts = [];
		this.parts = null;
	}
	,__class__: com.jdtiles.jda.bones.BonesBase
};
com.jdtiles.jda.bones.BonesPart = function(_name,_ox,_oy) {
	this.name = _name;
	this.ox = _ox;
	this.oy = _oy;
};
$hxClasses["com.jdtiles.jda.bones.BonesPart"] = com.jdtiles.jda.bones.BonesPart;
com.jdtiles.jda.bones.BonesPart.__name__ = ["com","jdtiles","jda","bones","BonesPart"];
com.jdtiles.jda.bones.BonesPart.prototype = {
	__class__: com.jdtiles.jda.bones.BonesPart
};
com.jdtiles.jda.bones.BonesAnim = function(frames) {
	this.frameList = frames;
};
$hxClasses["com.jdtiles.jda.bones.BonesAnim"] = com.jdtiles.jda.bones.BonesAnim;
com.jdtiles.jda.bones.BonesAnim.__name__ = ["com","jdtiles","jda","bones","BonesAnim"];
com.jdtiles.jda.bones.BonesAnim.prototype = {
	free: function() {
		this.frameList = [];
		this.frameList = null;
	}
	,__class__: com.jdtiles.jda.bones.BonesAnim
};
openfl.geom = {};
openfl.geom.Point = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl.geom.Point;
openfl.geom.Point.__name__ = ["openfl","geom","Point"];
openfl.geom.Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl.geom.Point.interpolate = function(pt1,pt2,f) {
	return new openfl.geom.Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl.geom.Point.polar = function(len,angle) {
	return new openfl.geom.Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl.geom.Point.prototype = {
	add: function(v) {
		return new openfl.geom.Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl.geom.Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl.geom.Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		return new lime.math.Vector2(this.x,this.y);
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl.geom.Point
	,__properties__: {get_length:"get_length"}
};
openfl.display.Tilesheet = function(image) {
	this.__bitmap = image;
	this.__centerPoints = new Array();
	this.__tileRects = new Array();
	this.__tileUVs = new Array();
	this.__rectTile = new openfl.geom.Rectangle();
	this.__rectUV = new openfl.geom.Rectangle();
	this.__point = new openfl.geom.Point();
};
$hxClasses["openfl.display.Tilesheet"] = openfl.display.Tilesheet;
openfl.display.Tilesheet.__name__ = ["openfl","display","Tilesheet"];
openfl.display.Tilesheet.prototype = {
	addTileRect: function(rectangle,centerPoint) {
		this.__tileRects.push(rectangle);
		if(centerPoint == null) centerPoint = openfl.display.Tilesheet.__defaultPoint;
		this.__centerPoints.push(centerPoint);
		this.__tileUVs.push(new openfl.geom.Rectangle(rectangle.get_left() / this.__bitmap.width,rectangle.get_top() / this.__bitmap.height,rectangle.get_right() / this.__bitmap.width,rectangle.get_bottom() / this.__bitmap.height));
		return this.__tileRects.length - 1;
	}
	,drawTiles: function(graphics,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		graphics.drawTiles(this,tileData,smooth,flags,count);
	}
	,getTileCenter: function(index) {
		return this.__centerPoints[index];
	}
	,getTileRect: function(index) {
		return this.__tileRects[index];
	}
	,getTileUVs: function(index) {
		return this.__tileUVs[index];
	}
	,__class__: openfl.display.Tilesheet
};
com.jdtiles.jda.tile.SheetEx = function(img) {
	openfl.display.Tilesheet.call(this,img);
	this.defs = new Array();
	this.anims = new haxe.ds.StringMap();
	this.sizes = new Array();
	this.matrix = new openfl.geom.Matrix();
};
$hxClasses["com.jdtiles.jda.tile.SheetEx"] = com.jdtiles.jda.tile.SheetEx;
com.jdtiles.jda.tile.SheetEx.__name__ = ["com","jdtiles","jda","tile","SheetEx"];
com.jdtiles.jda.tile.SheetEx.__super__ = openfl.display.Tilesheet;
com.jdtiles.jda.tile.SheetEx.prototype = $extend(openfl.display.Tilesheet.prototype,{
	addDefinition: function(name,size,rect,center) {
		this.defs.push(name);
		this.sizes.push(size);
		this.addTileRect(rect,center);
	}
	,getAnim: function(name) {
		if(this.anims.exists(name)) return this.anims.get(name);
		var indices = new Array();
		var _g1 = 0;
		var _g = this.defs.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(StringTools.startsWith(this.defs[i],name)) indices.push(i);
		}
		this.anims.set(name,indices);
		return indices;
	}
	,getSize: function(indice) {
		if(indice < this.sizes.length) return this.sizes[indice]; else return new openfl.geom.Rectangle();
	}
	,getBitmapDataTile: function(name,frame) {
		if(frame == null) frame = 0;
		var size = this.sizes[this.getAnim(name)[0]];
		var bmp = new openfl.display.BitmapData(size.width,size.height,true,0);
		bmp.copyPixels(this.__bitmap,this.__tileRects[this.getAnim(name)[frame]],new openfl.geom.Point(-size.get_left(),-size.get_top()));
		return bmp;
	}
	,drawTile: function(container,_indice,_x,_y,_sx,_sy,_r,_alpha,_ox,_oy) {
		this.drawInSprite(container,_indice,_ox,_oy);
		container.set_x(_x);
		container.set_y(_y);
		container.set_scaleX(_sx);
		container.set_scaleY(_sy);
		container.set_rotation(_r * (180 / Math.PI));
		container.set_alpha(_alpha);
	}
	,drawInSprite: function(sprite,_indice,_ox,_oy) {
		var rect = this.__tileRects[_indice];
		var size = this.sizes[_indice];
		var hw = size.width / 2;
		var hh = size.height / 2;
		this.matrix.tx = -rect.x - hw - size.x - _ox;
		this.matrix.ty = -rect.y - hh - size.y - _oy;
		sprite.get_graphics().clear();
		sprite.get_graphics().beginBitmapFill(this.__bitmap,this.matrix,false,true);
		sprite.get_graphics().drawRect(-hw - size.x - _ox,-hh - size.y - _oy,rect.width,rect.height);
		sprite.get_graphics().endFill();
	}
	,free: function() {
		this.__bitmap = null;
		this.__centerPoints = [];
		this.__centerPoints = null;
		this.__tileRects = [];
		this.__tileRects = null;
		this.__tileUVs = [];
		this.__tileUVs = null;
		this.__rectTile = null;
		this.__rectUV = null;
		this.matrix = null;
		this.defs = [];
		this.defs = null;
		this.sizes = [];
		this.sizes = null;
		this.anims = null;
	}
	,__class__: com.jdtiles.jda.tile.SheetEx
});
com.jdtiles.jdt = {};
com.jdtiles.jdt.ParseXML = function(img,xml) {
	com.jdtiles.jda.tile.SheetEx.call(this,img);
	var x = new haxe.xml.Fast(Xml.parse(xml).firstElement());
	var center = new openfl.geom.Point(0,0);
	var $it0 = x.nodes.resolve("SubTexture").iterator();
	while( $it0.hasNext() ) {
		var texture = $it0.next();
		var name = texture.att.resolve("name");
		var rect = new openfl.geom.Rectangle(Std.parseFloat(texture.att.resolve("x")),Std.parseFloat(texture.att.resolve("y")),Std.parseFloat(texture.att.resolve("width")),Std.parseFloat(texture.att.resolve("height")));
		var size;
		if(texture.has.resolve("frameX")) size = new openfl.geom.Rectangle(Std.parseInt(texture.att.resolve("frameX")),Std.parseInt(texture.att.resolve("frameY")),Std.parseInt(texture.att.resolve("frameWidth")),Std.parseInt(texture.att.resolve("frameHeight"))); else size = new openfl.geom.Rectangle(0,0,rect.width,rect.height);
		center = new openfl.geom.Point(size.x + size.width / 2,size.y + size.height / 2);
		this.addDefinition(name,size,rect,center);
	}
};
$hxClasses["com.jdtiles.jdt.ParseXML"] = com.jdtiles.jdt.ParseXML;
com.jdtiles.jdt.ParseXML.__name__ = ["com","jdtiles","jdt","ParseXML"];
com.jdtiles.jdt.ParseXML.__super__ = com.jdtiles.jda.tile.SheetEx;
com.jdtiles.jdt.ParseXML.prototype = $extend(com.jdtiles.jda.tile.SheetEx.prototype,{
	__class__: com.jdtiles.jdt.ParseXML
});
com.sound = {};
com.sound.SoundState = $hxClasses["com.sound.SoundState"] = { __ename__ : true, __constructs__ : ["play","pause","resume","stop","complete"] };
com.sound.SoundState.play = ["play",0];
com.sound.SoundState.play.toString = $estr;
com.sound.SoundState.play.__enum__ = com.sound.SoundState;
com.sound.SoundState.pause = ["pause",1];
com.sound.SoundState.pause.toString = $estr;
com.sound.SoundState.pause.__enum__ = com.sound.SoundState;
com.sound.SoundState.resume = ["resume",2];
com.sound.SoundState.resume.toString = $estr;
com.sound.SoundState.resume.__enum__ = com.sound.SoundState;
com.sound.SoundState.stop = ["stop",3];
com.sound.SoundState.stop.toString = $estr;
com.sound.SoundState.stop.__enum__ = com.sound.SoundState;
com.sound.SoundState.complete = ["complete",4];
com.sound.SoundState.complete.toString = $estr;
com.sound.SoundState.complete.__enum__ = com.sound.SoundState;
com.sound.BasicChannel = function() {
	this.pausePosition = 0;
	this.currentVolume = 1;
	this.soundEnable = true;
	this.soundTransform = new openfl.media.SoundTransform();
	this.setVolume(this.currentVolume);
	this.currentState = com.sound.SoundState.stop;
};
$hxClasses["com.sound.BasicChannel"] = com.sound.BasicChannel;
com.sound.BasicChannel.__name__ = ["com","sound","BasicChannel"];
com.sound.BasicChannel.prototype = {
	setVolume: function(value) {
		this.soundTransform.volume = value;
	}
	,play: function(soundName,repeat,end) {
		if(repeat == null) repeat = false;
		if(soundName == null) return;
		if(this.soundEnable == false) {
			this.currentSound = soundName;
			return;
		}
		if(this.currentSound != null && this.currentSound == soundName && this.currentState == com.sound.SoundState.play) return;
		if(soundName != this.currentSound) {
			if(this.soundChanel != null) this.soundChanel.stop();
			if(this.currentState == com.sound.SoundState.play) this.pausePosition = 0;
		} else if(this.currentState == com.sound.SoundState.play || repeat == true) this.pausePosition = 0;
		this.currentState = com.sound.SoundState.play;
		this.currentSound = soundName;
		this.soundChanel = soundName.play(this.pausePosition,0,this.soundTransform);
		if(this.soundChanel != null && this.soundChanel.hasEventListener(openfl.events.Event.SOUND_COMPLETE) == false) this.soundChanel.addEventListener(openfl.events.Event.SOUND_COMPLETE,$bind(this,this.restart));
	}
	,pause: function() {
		if(this.soundEnable == false) {
			this.currentState = com.sound.SoundState.pause;
			return;
		}
		if(this.currentState == com.sound.SoundState.play) {
			if(this.soundChanel != null) {
				this.pausePosition = this.soundChanel.get_position();
				this.soundChanel.stop();
			}
			this.currentState = com.sound.SoundState.pause;
		}

	}
	,resume: function() {
		if(this.soundEnable == false) return;
		if(this.currentState == com.sound.SoundState.pause && this.currentSound != null) this.play(this.currentSound);
	}
	,restart: function(e) {
		if(this.soundEnable == false) return;
		if(this.currentState == com.sound.SoundState.play && this.soundChanel != null) {
			this.currentState = com.sound.SoundState.complete;
			this.play(this.currentSound,true);
		}
	}
	,stop: function() {
		if(this.soundEnable == false) return;
		if(this.soundChanel != null) {
			this.currentSound = null;
			this.soundChanel.stop();
		}
		this.currentState = com.sound.SoundState.stop;
	}
	,enable: function() {
		this.soundEnable = true;
		this.play(this.currentSound);
	}
	,disable: function() {
		this.pause();
		this.soundEnable = false;
	}
	,__class__: com.sound.BasicChannel
};
com.sound.SFXChannel = function() {
	com.sound.BasicChannel.call(this);
};
$hxClasses["com.sound.SFXChannel"] = com.sound.SFXChannel;
com.sound.SFXChannel.__name__ = ["com","sound","SFXChannel"];
com.sound.SFXChannel.__super__ = com.sound.BasicChannel;
com.sound.SFXChannel.prototype = $extend(com.sound.BasicChannel.prototype,{
	play: function(soundName,restart,end) {
		if(restart == null) restart = false;
		if(soundName == null || this.soundEnable == false) return;
		this.soundChanel = soundName.play(0,0,this.soundTransform);
		if(end == null) return;
		if(this.soundChanel != null && this.soundChanel.hasEventListener(openfl.events.Event.SOUND_COMPLETE) == false) this.soundChanel.addEventListener(openfl.events.Event.SOUND_COMPLETE,(function($this) {
			var $r;
			var onComplete = function(e) {
				end(soundName.toString());
			};
			$r = onComplete;
			return $r;
		}(this)));
	}
	,__class__: com.sound.SFXChannel
});
com.sound.EnabParam = $hxClasses["com.sound.EnabParam"] = { __ename__ : true, __constructs__ : ["on","sfx","off"] };
com.sound.EnabParam.on = ["on",0];
com.sound.EnabParam.on.toString = $estr;
com.sound.EnabParam.on.__enum__ = com.sound.EnabParam;
com.sound.EnabParam.sfx = ["sfx",1];
com.sound.EnabParam.sfx.toString = $estr;
com.sound.EnabParam.sfx.__enum__ = com.sound.EnabParam;
com.sound.EnabParam.off = ["off",2];
com.sound.EnabParam.off.toString = $estr;
com.sound.EnabParam.off.__enum__ = com.sound.EnabParam;
com.sound.SoundManager = $hx_exports.SoundManager = function() { };
$hxClasses["com.sound.SoundManager"] = com.sound.SoundManager;
com.sound.SoundManager.__name__ = ["com","sound","SoundManager"];
com.sound.SoundManager.sounds = null;
com.sound.SoundManager.musicChanel = null;
com.sound.SoundManager.sfxArr = null;
com.sound.SoundManager.enabled = null;
com.sound.SoundManager.mainTheme = null;
com.sound.SoundManager.btnClick = null;
com.sound.SoundManager.init = function() {
	com.sound.SoundManager.sounds = new haxe.ds.StringMap();
	com.sound.SoundManager.musicChanel = new com.sound.BasicChannel();
	SGHelper.musicChanel = com.sound.SoundManager.musicChanel;
	com.sound.SoundManager.sfxArr = new Array();
	var sound = Std["int"](com.tools.DataManager.getInstance().getData("sounds"));
	if(sound == 0) com.sound.SoundManager.enabled = com.sound.EnabParam.on; else if(sound == 1) com.sound.SoundManager.enabled = com.sound.EnabParam.sfx; else if(sound == 2) com.sound.SoundManager.enabled = com.sound.EnabParam.off;
};
com.sound.SoundManager.start = function() {
	var _g = com.sound.SoundManager.enabled;
	switch(_g[1]) {
	case 0:
		com.sound.SoundManager.setEnabled(com.sound.EnabParam.on);
		break;
	case 1:
		com.sound.SoundManager.setEnabled(com.sound.EnabParam.sfx);
		break;
	case 2:
		com.sound.SoundManager.setEnabled(com.sound.EnabParam.off);
		break;
	}
};
com.sound.SoundManager.addSound = function(name) {
	var value = openfl.Assets.getSound("Assets/sounds/" + name + "." + com.Variables.audioFormat);
	com.sound.SoundManager.sounds.set(name,value);
};
com.sound.SoundManager.playMusic = function(name,restart) {
	if(restart == null) restart = false;
	com.sound.SoundManager.musicChanel.play(com.sound.SoundManager.sounds.get(name),restart);
};
com.sound.SoundManager.playSFX = function(name,onComplete,channel) {
	if(channel == null) channel = 0;
	com.sound.SoundManager.checkSFXArr(channel);
	com.sound.SoundManager.sfxArr[channel].play(com.sound.SoundManager.sounds.get(name),false,onComplete);
};
com.sound.SoundManager.playSFXRound = function(name,restart,channel) {
	if(channel == null) channel = 0;
	if(restart == null) restart = false;
	com.sound.SoundManager.checkSFXArr(channel,true);
	com.sound.SoundManager.sfxArr[channel].play(com.sound.SoundManager.sounds.get(name),restart);
};
com.sound.SoundManager.stopMusic = function() {
	com.sound.SoundManager.musicChanel.stop();
};
com.sound.SoundManager.stopSFX = function(channel) {
	if(channel == null) channel = 0;
	com.sound.SoundManager.checkSFXArr(channel);
	com.sound.SoundManager.sfxArr[channel].stop();
};
com.sound.SoundManager.checkSFXArr = function(channel,round) {
	if(round == null) round = false;
	if(com.sound.SoundManager.sfxArr[channel] == null) {
		if(round == true) com.sound.SoundManager.sfxArr[channel] = new com.sound.BasicChannel(); else com.sound.SoundManager.sfxArr[channel] = new com.sound.SFXChannel();
		if(com.sound.SoundManager.sfxEnable == false) com.sound.SoundManager.sfxArr[channel].disable();
	}
};
com.sound.SoundManager.setEnabled = function(value) {
	if(com.Variables.currFocus == com.FocusStage.none) return;
	switch(value[1]) {
	case 0:
		com.sound.SoundManager.enableMusic();
		com.sound.SoundManager.enableSFX();
		com.tools.DataManager.getInstance().saveData("sounds",0);
		break;
	case 1:
		com.sound.SoundManager.disableMusic();
		com.sound.SoundManager.enableSFX();
		com.tools.DataManager.getInstance().saveData("sounds",1);
		break;
	case 2:
		com.sound.SoundManager.disableMusic();
		com.sound.SoundManager.disableSFX();
		com.tools.DataManager.getInstance().saveData("sounds",2);
		break;
	}
	com.sound.SoundManager.enabled = value;
};
com.sound.SoundManager.setEvent = function(lost) {
	if(lost == true) {
		com.sound.SoundManager.disableMusic();
		com.sound.SoundManager.disableSFX();
	} else com.sound.SoundManager.setEnabled(com.sound.SoundManager.enabled);
};
com.sound.SoundManager.enableSFX = function() {
	var _g1 = 0;
	var _g = com.sound.SoundManager.sfxArr.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(com.sound.SoundManager.sfxArr[i] == null) continue;
		com.sound.SoundManager.sfxArr[i].enable();
	}
	com.sound.SoundManager.sfxEnable = true;
};
com.sound.SoundManager.disableSFX = function() {
	var _g1 = 0;
	var _g = com.sound.SoundManager.sfxArr.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(com.sound.SoundManager.sfxArr[i] == null) continue;
		com.sound.SoundManager.sfxArr[i].disable();
	}
	com.sound.SoundManager.sfxEnable = false;
};
com.sound.SoundManager.enableMusic = function() {
	com.sound.SoundManager.musicChanel.enable();
	if(Main.getInstance().scene != null) com.sound.SoundManager.playMusic(com.sound.SoundManager.mainTheme);
	com.sound.SoundManager.musicEnable = true;
};
com.sound.SoundManager.disableMusic = function() {
	com.sound.SoundManager.musicChanel.disable();
	com.sound.SoundManager.musicEnable = false;
};
com.sound.SoundManager.reset = function() {
	var _g1 = 0;
	var _g = com.sound.SoundManager.sfxArr.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(com.sound.SoundManager.sfxArr[i] == null) continue;
		com.sound.SoundManager.sfxArr[i].stop();
	}
};
com.tools = {};
com.tools.Color = function() { };
$hxClasses["com.tools.Color"] = com.tools.Color;
com.tools.Color.__name__ = ["com","tools","Color"];
com.tools.Color.toHex = function(color) {
	return "0x" + StringTools.hex(color,6);
};
com.tools.Color.random = function() {
	return Std["int"]((function($this) {
		var $r;
		var _g1 = Math.random();
		var _g = com.tools.Color.WHITE;
		$r = (function($this) {
			var $r;
			var $int = _g;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}($this)) * _g1;
		return $r;
	}(this)));
};
com.tools.Color.getRGB = function(color,results) {
	var red = color >> 16 & 255;
	var green = color >> 8 & 255;
	var blue = color & 255;
	if(results != null) results = { red : red, green : green, blue : blue};
	return { red : red, green : green, blue : blue};
};
com.tools.Color.getColor24 = function(red,green,blue) {
	return red << 16 | green << 8 | blue;
};
com.tools.Color.interpolateColor = function(color1,color2,currentStep,totalSteps) {
	var src1 = com.tools.Color.getRGB(color1);
	var src2 = com.tools.Color.getRGB(color2);
	var r = (src2.red - src1.red) * currentStep / totalSteps + src1.red | 0;
	var g = (src2.green - src1.green) * currentStep / totalSteps + src1.green | 0;
	var b = (src2.blue - src1.blue) * currentStep / totalSteps + src1.blue | 0;
	return com.tools.Color.getColor24(r,g,b);
};
openfl.events.Event = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = openfl.events.EventPhase.AT_TARGET;
};
$hxClasses["openfl.events.Event"] = openfl.events.Event;
openfl.events.Event.__name__ = ["openfl","events","Event"];
openfl.events.Event.prototype = {
	clone: function() {
		var event = new openfl.events.Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,isDefaultPrevented: function() {
		return this.__isCancelled || this.__isCancelledNow;
	}
	,stopImmediatePropagation: function() {
		this.__isCancelled = true;
		this.__isCancelledNow = true;
	}
	,stopPropagation: function() {
		this.__isCancelled = true;
	}
	,toString: function() {
		return "[Event type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + "]";
	}
	,__class__: openfl.events.Event
};
com.tools.CustomEvent = function(type,bubbles,cancelable,new_args) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	if(new_args != null) this.properties = new_args;
};
$hxClasses["com.tools.CustomEvent"] = com.tools.CustomEvent;
com.tools.CustomEvent.__name__ = ["com","tools","CustomEvent"];
com.tools.CustomEvent.__super__ = openfl.events.Event;
com.tools.CustomEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: com.tools.CustomEvent
});
com.tools.DataManager = function() {
	this.achieves_counter = -1;
	this.dataSaves = { };
	openfl.display.Sprite.call(this);
	if(com.tools.DataManager.instance != null) throw "Error: Allready inited. Use getInstance() instead;";
	com.tools.DataManager.instance = this;
};
$hxClasses["com.tools.DataManager"] = com.tools.DataManager;
com.tools.DataManager.__name__ = ["com","tools","DataManager"];
com.tools.DataManager.instance = null;
com.tools.DataManager.getInstance = function() {
	if(com.tools.DataManager.instance == null) return new com.tools.DataManager(); else return com.tools.DataManager.instance;
};
com.tools.DataManager.__super__ = openfl.display.Sprite;
com.tools.DataManager.prototype = $extend(openfl.display.Sprite.prototype,{
	init: function() {
		this.initAchievesList();
	}
	,saveData: function(key,value) {
		if(api.SoftGames.isLocalStorageNameSupported == true) api.SoftGames.getInstance().setStorageItem(key,value); else this.dataSaves[key] = value;
	}
	,getData: function(key) {
		if(api.SoftGames.isLocalStorageNameSupported == true) return api.SoftGames.getInstance().getStorageItem(key); else return Reflect.getProperty(this.dataSaves,key);
	}
	,saveBigger: function(key,value) {
		var currentValue = this.getData(key);
		if(currentValue == null || value > currentValue) this.saveData(key,value);
	}
	,calc: function(key,start,end) {
		var total = 0;
		var dataValue;
		var dataKey;
		var _g1 = start;
		var _g = end + 1;
		while(_g1 < _g) {
			var i = _g1++;
			dataKey = key + "" + i;
			dataValue = Std["int"](this.getData(dataKey));
			if(dataValue != null) total += dataValue;
		}
		if(total == null) total = 0;
		return total;
	}
	,initAchievesList: function() {
		this.achievesList = new Array();
		this.achieves_counter = -1;
	}
	,createAchieve: function(resource_id,demand) {
		this.achieves_counter++;
		if(this.checkAchieve(this.achieves_counter) == true) return;
		var resource_name = "resource_" + resource_id;
		this.achievesList.push({ id : this.achieves_counter, resource : resource_name, demand : demand});
	}
	,checkAchieve: function(achieve_id) {
		var achieve_name = "Award" + achieve_id;
		if(this.getData(achieve_name) != null) return true;
		return false;
	}
	,checkAchieves: function() {
		if(this.achievesList.length == 0) return;
		var del = -1;
		var _g1 = 0;
		var _g = this.achievesList.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.checkAchieveDemand(this.achievesList[i].resource,this.achievesList[i].demand) == true) {
				this.openAchieve(this.achievesList[i].id);
				del = i;
			}
		}
		if(del >= 0) this.achievesList.splice(del,1);
	}
	,checkAchieveDemand: function(resource,demand) {
		var current_data_count = this.getData(resource);
		if(current_data_count >= demand) return true; else return false;
	}
	,openAchieve: function(achieve_id) {
		this.dispatchEvent(new com.tools.CustomEvent(com.tools.DataManager.OwnAchieve,false,false,{ id : achieve_id}));
		var achieve_name = "Award" + achieve_id;
		this.saveData(achieve_name,true);
	}
	,saveAchives: function(resource_id,moreThen_1) {
		if(moreThen_1 == null) moreThen_1 = 1;
		var resource_name = "resource_" + resource_id;
		var currentValue = this.getData(resource_name);
		if(currentValue == null) currentValue = 0;
		currentValue += moreThen_1;
		this.saveData(resource_name,currentValue);
		this.checkAchieves();
	}
	,calcAchives: function(resource_id) {
		var resource_name = "resource_" + resource_id;
		var countResource = Std["int"](this.getData(resource_name));
		return countResource;
	}
	,__class__: com.tools.DataManager
});
com.tools.KeyCode = function() { };
$hxClasses["com.tools.KeyCode"] = com.tools.KeyCode;
com.tools.KeyCode.__name__ = ["com","tools","KeyCode"];
com.tools.NapeTools = function() { };
$hxClasses["com.tools.NapeTools"] = com.tools.NapeTools;
com.tools.NapeTools.__name__ = ["com","tools","NapeTools"];
com.tools.NapeTools.ContactCoordinates = function(contact) {
	var Coordinates = new nape.geom.Vec2();
	contact.zpp_inner.wrap_arbiters.at(0).get_collisionArbiter().get_contacts().foreach(function(c) {
		if(c.zpp_inner.wrap_position == null) c.zpp_inner.getposition();
		Coordinates = c.zpp_inner.wrap_position;
	});
	return Coordinates;
};
com.tools.NapeTools.RayCastFirst = function(physWorld,StartVec,Angle,Distance,vCollisionGroup,vCollisionMask) {
	var ray = new nape.geom.Ray(StartVec,nape.geom.Vec2.fromPolar(1,Angle));
	ray.zpp_inner.maxdist = Distance;
	ray.zpp_inner.maxdist;
	var rayResult = physWorld.rayCast(ray,false,new nape.dynamics.InteractionFilter(vCollisionGroup,~vCollisionMask));
	return rayResult;
};
com.tools.NapeTools.calcImpulseVec = function(start,target,power,minRand,maxRand) {
	if(maxRand == null) maxRand = 0;
	if(minRand == null) minRand = 0;
	var impulseVec = target.sub(start);
	var topRand = com.tools.Tools.randTo(minRand,0);
	var botRand = com.tools.Tools.randTo(0,maxRand);
	var randAngle = topRand + botRand;
	randAngle = com.tools.Tools.toRad(randAngle);
	impulseVec.rotate(randAngle);
	impulseVec.set_length(power);
	return impulseVec;
};
com.tools.NapeTools.SetShapeMaterials = function(vDensity,vElasticity,vDynamicFriction) {
	var material = new nape.phys.Material();
	if(vDensity != material.zpp_inner.density * 1000) {
		material.zpp_inner.density = vDensity / 1000;
		material.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.PROPS);
	}
	material.zpp_inner.density * 1000;
	if(vElasticity != material.zpp_inner.elasticity) {
		material.zpp_inner.elasticity = vElasticity / 1;
		material.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	material.zpp_inner.elasticity;
	if(vDynamicFriction != material.zpp_inner.dynamicFriction) {
		material.zpp_inner.dynamicFriction = vDynamicFriction / 1;
		material.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ANGDRAG | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	material.zpp_inner.dynamicFriction;
	return material;
};
com.tools.NapeTools.SetInteractionFilter = function(vCollisionGroup,vCollisionMask) {
	var filter = new nape.dynamics.InteractionFilter();
	if(filter.zpp_inner.collisionGroup != vCollisionGroup) {
		filter.zpp_inner.collisionGroup = vCollisionGroup;
		filter.zpp_inner.invalidate();
	}
	filter.zpp_inner.collisionGroup;
	filter.set_collisionMask(~vCollisionMask);
	return filter;
};
com.tools.NapeTools.shapePolygon = function(width,height) {
	return new nape.shape.Polygon(nape.shape.Polygon.box(width,height));
};
com.tools.NapeTools.shapeRectangle = function(x,y,width,height) {
	return new nape.shape.Polygon(nape.shape.Polygon.rect(x,y,width,height));
};
com.tools.NapeTools.shapeCircle = function(radius) {
	return new nape.shape.Circle(radius / 2);
};
com.tools.NapeTools.shapePolygonArr = function(arr) {
	return new nape.shape.Polygon(arr);
};
com.tools.NapeTools.createBox = function(physWorld,bodytype,width,height,vx,vy,angle,sensor) {
	if(sensor == null) sensor = false;
	if(angle == null) angle = 0;
	var body = new nape.phys.Body(bodytype,new nape.geom.Vec2(vx,vy));
	var block = new nape.shape.Polygon(nape.shape.Polygon.box(width,height));
	block.rotate(com.tools.Tools.toRad(angle));
	block.zpp_inner.immutable_midstep("Shape::sensorEnabled");
	block.zpp_inner.sensorEnabled = sensor;
	block.zpp_inner.wake();
	block.zpp_inner.sensorEnabled;
	body.zpp_inner.wrap_shapes.add(block);
	body.zpp_inner.immutable_midstep("Body::space");
	if((body.zpp_inner.space == null?null:body.zpp_inner.space.outer) != physWorld) {
		if((body.zpp_inner.space == null?null:body.zpp_inner.space.outer) != null) body.zpp_inner.component.woken = false;
		if((body.zpp_inner.space == null?null:body.zpp_inner.space.outer) != null) (body.zpp_inner.space == null?null:body.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(body);
		if(physWorld != null) physWorld.zpp_inner.wrap_bodies.add(body);
	}
	if(body.zpp_inner.space == null) null; else body.zpp_inner.space.outer;
	return body;
};
com.tools.NapeTools.createBox2 = function(bodytype,width,height) {
	var body = new nape.phys.Body(bodytype);
	var block = new nape.shape.Polygon(nape.shape.Polygon.box(width,height));
	body.zpp_inner.wrap_shapes.add(block);
	return body;
};
com.tools.NapeTools.createCircle = function(physWorld,bodytype,radius,vx,vy,sensor) {
	if(sensor == null) sensor = false;
	var body = new nape.phys.Body(bodytype);
	var block = new nape.shape.Circle(radius / 2);
	block.zpp_inner.immutable_midstep("Shape::sensorEnabled");
	block.zpp_inner.sensorEnabled = sensor;
	block.zpp_inner.wake();
	block.zpp_inner.sensorEnabled;
	body.zpp_inner.wrap_shapes.add(block);
	((function($this) {
		var $r;
		if(body.zpp_inner.wrap_pos == null) body.zpp_inner.setupPosition();
		$r = body.zpp_inner.wrap_pos;
		return $r;
	}(this))).setxy(vx,vy);
	body.zpp_inner.immutable_midstep("Body::space");
	if((body.zpp_inner.space == null?null:body.zpp_inner.space.outer) != physWorld) {
		if((body.zpp_inner.space == null?null:body.zpp_inner.space.outer) != null) body.zpp_inner.component.woken = false;
		if((body.zpp_inner.space == null?null:body.zpp_inner.space.outer) != null) (body.zpp_inner.space == null?null:body.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(body);
		if(physWorld != null) physWorld.zpp_inner.wrap_bodies.add(body);
	}
	if(body.zpp_inner.space == null) null; else body.zpp_inner.space.outer;
	return body;
};
com.tools.NapeTools.createCircle2 = function(physWorld,bodytype,radius,sensor) {
	if(sensor == null) sensor = false;
	var body = new nape.phys.Body(bodytype);
	var block = new nape.shape.Circle(radius / 2);
	block.zpp_inner.immutable_midstep("Shape::sensorEnabled");
	block.zpp_inner.sensorEnabled = sensor;
	block.zpp_inner.wake();
	block.zpp_inner.sensorEnabled;
	body.zpp_inner.wrap_shapes.add(block);
	body.zpp_inner.immutable_midstep("Body::space");
	if((body.zpp_inner.space == null?null:body.zpp_inner.space.outer) != physWorld) {
		if((body.zpp_inner.space == null?null:body.zpp_inner.space.outer) != null) body.zpp_inner.component.woken = false;
		if((body.zpp_inner.space == null?null:body.zpp_inner.space.outer) != null) (body.zpp_inner.space == null?null:body.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(body);
		if(physWorld != null) physWorld.zpp_inner.wrap_bodies.add(body);
	}
	if(body.zpp_inner.space == null) null; else body.zpp_inner.space.outer;
	return body;
};
com.tools.NapeTools.createCircle3 = function(bodytype,radius) {
	var body = new nape.phys.Body(bodytype);
	var block = new nape.shape.Circle(radius / 2);
	body.zpp_inner.wrap_shapes.add(block);
	return body;
};
com.tools.NapeTools.createBodyArr = function(physWorld,bodytype,arr,vx,vy,sensor) {
	if(sensor == null) sensor = false;
	var body = new nape.phys.Body(bodytype);
	var polygon = new nape.shape.Polygon(arr);
	polygon.zpp_inner.immutable_midstep("Shape::body");
	if((polygon.zpp_inner.body != null?polygon.zpp_inner.body.outer:null) != body) {
		if(polygon.zpp_inner.body != null) (polygon.zpp_inner.body != null?polygon.zpp_inner.body.outer:null).zpp_inner.wrap_shapes.remove(polygon);
		if(body != null) body.zpp_inner.wrap_shapes.add(polygon);
	}
	if(polygon.zpp_inner.body != null) polygon.zpp_inner.body.outer; else null;
	polygon.zpp_inner.immutable_midstep("Shape::sensorEnabled");
	polygon.zpp_inner.sensorEnabled = sensor;
	polygon.zpp_inner.wake();
	polygon.zpp_inner.sensorEnabled;
	((function($this) {
		var $r;
		if(body.zpp_inner.wrap_pos == null) body.zpp_inner.setupPosition();
		$r = body.zpp_inner.wrap_pos;
		return $r;
	}(this))).setxy(vx,vy);
	body.zpp_inner.immutable_midstep("Body::space");
	if((body.zpp_inner.space == null?null:body.zpp_inner.space.outer) != physWorld) {
		if((body.zpp_inner.space == null?null:body.zpp_inner.space.outer) != null) body.zpp_inner.component.woken = false;
		if((body.zpp_inner.space == null?null:body.zpp_inner.space.outer) != null) (body.zpp_inner.space == null?null:body.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(body);
		if(physWorld != null) physWorld.zpp_inner.wrap_bodies.add(body);
	}
	if(body.zpp_inner.space == null) null; else body.zpp_inner.space.outer;
	return body;
};
com.tools.NapeTools.connectPivotJoint = function(physWorld,body1,body2,anchor1,anchor2) {
	var Joint = new nape.constraint.PivotJoint(body1,body2,body1.worldPointToLocal(anchor1,true),body2.worldPointToLocal(anchor2,true));
	if((Joint.zpp_inner.space == null?null:Joint.zpp_inner.space.outer) != physWorld) {
		if(Joint.zpp_inner.component != null) Joint.zpp_inner.component.woken = false;
		Joint.zpp_inner.clearcache();
		if(Joint.zpp_inner.space != null) Joint.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(Joint);
		if(physWorld != null) physWorld.zpp_inner.wrap_constraints.add(Joint); else Joint.zpp_inner.space = null;
	}
	if(Joint.zpp_inner.space == null) null; else Joint.zpp_inner.space.outer;
	return Joint;
};
com.tools.NapeTools.connectWeldJoint = function(physWorld,body1,body2,anchor1,anchor2,angle) {
	if(angle == null) angle = 0;
	var Joint = new nape.constraint.WeldJoint(body1,body2,body1.worldPointToLocal(anchor1,true),body2.worldPointToLocal(anchor2,true),angle);
	if((Joint.zpp_inner.space == null?null:Joint.zpp_inner.space.outer) != physWorld) {
		if(Joint.zpp_inner.component != null) Joint.zpp_inner.component.woken = false;
		Joint.zpp_inner.clearcache();
		if(Joint.zpp_inner.space != null) Joint.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(Joint);
		if(physWorld != null) physWorld.zpp_inner.wrap_constraints.add(Joint); else Joint.zpp_inner.space = null;
	}
	if(Joint.zpp_inner.space == null) null; else Joint.zpp_inner.space.outer;
	return Joint;
};
com.tools.NapeTools.connectDistanceJoint = function(physWorld,body1,body2,anchor1,anchor2,jointMin,jointMax) {
	var Joint = new nape.constraint.DistanceJoint(body1,body2,body1.worldPointToLocal(anchor1,true),body2.worldPointToLocal(anchor2,true),jointMin,jointMax);
	if((Joint.zpp_inner.space == null?null:Joint.zpp_inner.space.outer) != physWorld) {
		if(Joint.zpp_inner.component != null) Joint.zpp_inner.component.woken = false;
		Joint.zpp_inner.clearcache();
		if(Joint.zpp_inner.space != null) Joint.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(Joint);
		if(physWorld != null) physWorld.zpp_inner.wrap_constraints.add(Joint); else Joint.zpp_inner.space = null;
	}
	if(Joint.zpp_inner.space == null) null; else Joint.zpp_inner.space.outer;
	return Joint;
};
com.tools.NapeTools.connectLineJoint = function(physWorld,body1,body2,anchor1,anchor2,direction,jointMin,jointMax) {
	var Joint = new nape.constraint.LineJoint(body1,body2,body1.worldPointToLocal(anchor1,true),body2.worldPointToLocal(anchor2,true),direction,jointMin,jointMax);
	if((Joint.zpp_inner.space == null?null:Joint.zpp_inner.space.outer) != physWorld) {
		if(Joint.zpp_inner.component != null) Joint.zpp_inner.component.woken = false;
		Joint.zpp_inner.clearcache();
		if(Joint.zpp_inner.space != null) Joint.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(Joint);
		if(physWorld != null) physWorld.zpp_inner.wrap_constraints.add(Joint); else Joint.zpp_inner.space = null;
	}
	if(Joint.zpp_inner.space == null) null; else Joint.zpp_inner.space.outer;
	return Joint;
};
com.tools.NapeTools.connectPulleyJoint = function(physWorld,body1,body2,body3,body4,anchor1,anchor2,anchor3,anchor4,jointMin,jointMax,ratio) {
	var Joint = new nape.constraint.PulleyJoint(body1,body2,body3,body4,body1.worldPointToLocal(anchor1,true),body2.worldPointToLocal(anchor2,true),body3.worldPointToLocal(anchor3,true),body4.worldPointToLocal(anchor4,true),jointMin,jointMax,ratio);
	if((Joint.zpp_inner.space == null?null:Joint.zpp_inner.space.outer) != physWorld) {
		if(Joint.zpp_inner.component != null) Joint.zpp_inner.component.woken = false;
		Joint.zpp_inner.clearcache();
		if(Joint.zpp_inner.space != null) Joint.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(Joint);
		if(physWorld != null) physWorld.zpp_inner.wrap_constraints.add(Joint); else Joint.zpp_inner.space = null;
	}
	if(Joint.zpp_inner.space == null) null; else Joint.zpp_inner.space.outer;
	return Joint;
};
com.tools.NapeTools.connectAngleJoint = function(physWorld,body1,body2,jointMin,jointMax,ratio) {
	var Joint = new nape.constraint.AngleJoint(body1,body2,jointMin,jointMax,ratio);
	if((Joint.zpp_inner.space == null?null:Joint.zpp_inner.space.outer) != physWorld) {
		if(Joint.zpp_inner.component != null) Joint.zpp_inner.component.woken = false;
		Joint.zpp_inner.clearcache();
		if(Joint.zpp_inner.space != null) Joint.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(Joint);
		if(physWorld != null) physWorld.zpp_inner.wrap_constraints.add(Joint); else Joint.zpp_inner.space = null;
	}
	if(Joint.zpp_inner.space == null) null; else Joint.zpp_inner.space.outer;
	return Joint;
};
com.tools.NapeTools.connectMotorJoint = function(physWorld,body1,body2,rate,ratio) {
	var Joint = new nape.constraint.MotorJoint(body1,body2,rate,ratio);
	if((Joint.zpp_inner.space == null?null:Joint.zpp_inner.space.outer) != physWorld) {
		if(Joint.zpp_inner.component != null) Joint.zpp_inner.component.woken = false;
		Joint.zpp_inner.clearcache();
		if(Joint.zpp_inner.space != null) Joint.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(Joint);
		if(physWorld != null) physWorld.zpp_inner.wrap_constraints.add(Joint); else Joint.zpp_inner.space = null;
	}
	if(Joint.zpp_inner.space == null) null; else Joint.zpp_inner.space.outer;
	return Joint;
};
com.tools.Performance = function(showGraph) {
	if(showGraph == null) showGraph = false;
	this.fullHeight = 50;
	this.memPeak = 0;
	this.barHeight = 30;
	this.graphBarPadding = 1;
	this.graphBarTickness = 3;
	this.paddingY = 3;
	this.padding = 10;
	this.skip = 10;
	this.skipped = 0;
	openfl.display.Sprite.call(this);
	this.mouseChildren = this.mouseEnabled = false;
	this.showGraph = showGraph;
	this.set_x(0);
	this.set_y(0);
	this.fpsHistory = [];
	var _g = 0;
	while(_g < 30) {
		var i = _g++;
		this.fpsHistory.push(0);
	}
	this.times = [];
	this.performanceText = new openfl.text.TextField();
	this.performanceText.set_y(this.paddingY);
	this.performanceText.set_width(500);
	this.performanceText.selectable = false;
	this.performanceText.set_textColor(15592941);
	this.performanceText.set_text("FPS: 0\nMEM: 0 MB\nMPK: 0 MB");
	this.fullHeight = Std["int"](this.performanceText.get_textHeight() + this.paddingY * 3);
	this.barHeight = Std["int"](this.performanceText.get_textHeight()) - this.paddingY;
	var nextX = this.padding;
	if(showGraph) {
		this.graph = new openfl.display.Shape();
		this.graph.set_x(nextX);
		this.graph.set_y(this.paddingY * 2);
		nextX = this.graph.get_x() + (this.graphBarTickness + this.graphBarPadding) * 28 + this.graphBarTickness + this.padding;
	}
	this.performanceText.set_x(nextX);
	this.bound = new openfl.display.Bitmap();
	this.onResize(null);
	this.addChild(this.bound);
	if(showGraph) this.addChild(this.graph);
	this.addChild(this.performanceText);
	openfl.Lib.current.stage.addEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.onEnter));
	openfl.Lib.current.stage.addEventListener(openfl.events.Event.RESIZE,$bind(this,this.onResize));
};
$hxClasses["com.tools.Performance"] = com.tools.Performance;
com.tools.Performance.__name__ = ["com","tools","Performance"];
com.tools.Performance.__super__ = openfl.display.Sprite;
com.tools.Performance.prototype = $extend(openfl.display.Sprite.prototype,{
	onEnter: function(_) {
		var now = haxe.Timer.stamp();
		this.times.push(now);
		while(this.times[0] < now - 1) this.times.shift();
		if(this.skipped == this.skip) {
			this.skipped = 0;
			var mem = Math.round(openfl.system.System.get_totalMemory() / 1024 / 1024 * 100) / 100;
			if(mem > this.memPeak) this.memPeak = mem;
			if(this.get_visible()) {
				var fps = this.times.length;
				if(this.showGraph) this.drawGraph(fps);
				this.performanceText.set_text("FPS: " + fps + "\nMEM: " + mem + " MB\nMPK: " + this.memPeak + " MB");
			}
		}
		this.skipped++;
	}
	,drawGraph: function(fps) {
		var color;
		this.fpsHistory.push(fps);
		this.fpsHistory.shift();
		this.graph.get_graphics().clear();
		var _g = 0;
		while(_g < 30) {
			var i = _g++;
			this.graph.get_graphics().moveTo(this.graphBarTickness * i + i * this.graphBarPadding,this.barHeight);
			if(this.fpsHistory[i] > 55) color = 10477976; else if(this.fpsHistory[i] > 40) color = 15720098; else if(this.fpsHistory[i] > 30) color = 15711650; else color = 15573156;
			this.graph.get_graphics().lineStyle(this.graphBarTickness,color,0.5);
			this.graph.get_graphics().lineTo(this.graphBarTickness * i + i * this.graphBarPadding,this.barHeight - this.barHeight * this.fpsHistory[i] / 60);
		}
	}
	,onResize: function(_) {
		this.boundData = new openfl.display.BitmapData(110,this.fullHeight);
		this.boundData.fillRect(new openfl.geom.Rectangle(0,0,110,this.fullHeight),-2013265920);
		this.bound.bitmapData = this.boundData;
	}
	,__class__: com.tools.Performance
});
openfl.text = {};
openfl.text.TextField = function() {
	openfl.display.InteractiveObject.call(this);
	this.__width = 100;
	this.__height = 100;
	this.__text = "";
	this.set_type(openfl.text.TextFieldType.DYNAMIC);
	this.set_autoSize(openfl.text.TextFieldAutoSize.NONE);
	this.displayAsPassword = false;
	this.embedFonts = false;
	this.selectable = true;
	this.set_borderColor(0);
	this.set_border(false);
	this.set_backgroundColor(16777215);
	this.set_background(false);
	this.gridFitType = openfl.text.GridFitType.PIXEL;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.set_wordWrap(false);
	if(openfl.text.TextField.__defaultTextFormat == null) {
		openfl.text.TextField.__defaultTextFormat = new openfl.text.TextFormat("Times New Roman",12,0,false,false,false,"","",openfl.text.TextFormatAlign.LEFT,0,0,0,0);
		openfl.text.TextField.__defaultTextFormat.blockIndent = 0;
		openfl.text.TextField.__defaultTextFormat.bullet = false;
		openfl.text.TextField.__defaultTextFormat.letterSpacing = 0;
		openfl.text.TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl.text.TextField.__defaultTextFormat.clone();
};
$hxClasses["openfl.text.TextField"] = openfl.text.TextField;
openfl.text.TextField.__name__ = ["openfl","text","TextField"];
openfl.text.TextField.__defaultTextFormat = null;
openfl.text.TextField.__super__ = openfl.display.InteractiveObject;
openfl.text.TextField.prototype = $extend(openfl.display.InteractiveObject.prototype,{
	appendText: function(text) {
		var _g = this;
		_g.set_text(_g.get_text() + text);
	}
	,getCharBoundaries: function(a) {
		openfl.Lib.notImplemented("TextField.getCharBoundaries");
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		openfl.Lib.notImplemented("TextField.getCharIndexAtPoint");
		return 0;
	}
	,getLineIndexAtPoint: function(x,y) {
		openfl.Lib.notImplemented("TextField.getLineIndexAtPoint");
		return 0;
	}
	,getLineMetrics: function(lineIndex) {
		openfl.Lib.notImplemented("TextField.getLineMetrics");
		return new openfl.text.TextLineMetrics(0,0,0,0,0,0);
	}
	,getLineOffset: function(lineIndex) {
		openfl.Lib.notImplemented("TextField.getLineOffset");
		return 0;
	}
	,getLineText: function(lineIndex) {
		openfl.Lib.notImplemented("TextField.getLineText");
		return "";
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		return this.__textFormat.clone();
	}
	,setSelection: function(beginIndex,endIndex) {
		openfl.Lib.notImplemented("TextField.setSelection");
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		if(format.font != null) this.__textFormat.font = format.font;
		if(format.size != null) this.__textFormat.size = format.size;
		if(format.color != null) this.__textFormat.color = format.color;
		if(format.bold != null) this.__textFormat.bold = format.bold;
		if(format.italic != null) this.__textFormat.italic = format.italic;
		if(format.underline != null) this.__textFormat.underline = format.underline;
		if(format.url != null) this.__textFormat.url = format.url;
		if(format.target != null) this.__textFormat.target = format.target;
		if(format.align != null) this.__textFormat.align = format.align;
		if(format.leftMargin != null) this.__textFormat.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.__textFormat.rightMargin = format.rightMargin;
		if(format.indent != null) this.__textFormat.indent = format.indent;
		if(format.leading != null) this.__textFormat.leading = format.leading;
		if(format.blockIndent != null) this.__textFormat.blockIndent = format.blockIndent;
		if(format.bullet != null) this.__textFormat.bullet = format.bullet;
		if(format.kerning != null) this.__textFormat.kerning = format.kerning;
		if(format.letterSpacing != null) this.__textFormat.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.__textFormat.tabStops = format.tabStops;
		this.__dirty = true;
	}
	,__clipText: function(value) {
		var textWidth = this.__getTextWidth(value);
		var fillPer = textWidth / this.__width;
		this.set_text(fillPer > 1?(function($this) {
			var $r;
			var _this = $this.get_text();
			var pos = -1 * Math.floor($this.get_text().length / fillPer);
			$r = HxOverrides.substr(_this,pos,null);
			return $r;
		}(this)):this.get_text());
		return this.get_text() + "";
	}
	,__disableInputMode: function() {
		this.this_onRemovedFromStage(null);
	}
	,__enableInputMode: function() {
		this.__cursorPosition = -1;
		if(this.__hiddenInput == null) {
			this.__hiddenInput = window.document.createElement("input");
			this.__hiddenInput.type = "text";
			this.__hiddenInput.style.position = "absolute";
			this.__hiddenInput.style.opacity = "0";
			this.__hiddenInput.style.pointerEvents = "none";
			this.__hiddenInput.style.left = this.get_x() + (this.__canvas != null?this.__canvas.offsetLeft:0) + "px";
			this.__hiddenInput.style.top = this.get_y() + (this.__canvas != null?this.__canvas.offsetTop:0) + "px";
			this.__hiddenInput.style.width = this.__width + "px";
			this.__hiddenInput.style.height = this.__height + "px";
			this.__hiddenInput.style.zIndex = "0";
			if(this.maxChars > 0) this.__hiddenInput.maxLength = this.maxChars;
			window.document.body.appendChild(this.__hiddenInput);
			this.__hiddenInput.value = this.__text;
		}
		if(this.stage != null) this.this_onAddedToStage(null); else {
			this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.this_onAddedToStage));
			this.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.this_onRemovedFromStage));
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = new openfl.geom.Rectangle(0,0,this.__width,this.__height);
		bounds.transform(this.__worldTransform);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getFont: function(format) {
		var font;
		if(format.italic) font = "italic "; else font = "normal ";
		font += "normal ";
		if(format.bold) font += "bold "; else font += "normal ";
		font += format.size + "px";
		font += "/" + (format.size + format.leading + 4) + "px ";
		font += "'" + (function($this) {
			var $r;
			var _g = format.font;
			$r = (function($this) {
				var $r;
				switch(_g) {
				case "_sans":
					$r = "sans-serif";
					break;
				case "_serif":
					$r = "serif";
					break;
				case "_typewriter":
					$r = "monospace";
					break;
				default:
					$r = format.font;
				}
				return $r;
			}($this));
			return $r;
		}(this));
		font += "'";
		return font;
	}
	,__getPosition: function(x,y) {
		var value = this.get_text();
		var text = value;
		var totalW = 0;
		var pos = text.length;
		if(x < this.__getTextWidth(text)) {
			var _g1 = 0;
			var _g = text.length;
			while(_g1 < _g) {
				var i = _g1++;
				totalW += this.__getTextWidth(text.charAt(i));
				if(totalW >= x) {
					pos = i;
					break;
				}
			}
		}
		return pos;
	}
	,__getTextWidth: function(text) {
		if(this.__context == null) {
			this.__canvas = window.document.createElement("canvas");
			this.__context = this.__canvas.getContext("2d");
		}
		this.__context.font = this.__getFont(this.__textFormat);
		this.__context.textAlign = "left";
		return this.__context.measureText(text).width;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var point = this.globalToLocal(new openfl.geom.Point(x,y));
		if(point.x > 0 && point.y > 0 && point.x <= this.__width && point.y <= this.__height) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,__measureText: function() {
		if(this.__ranges == null) {
			this.__context.font = this.__getFont(this.__textFormat);
			return [this.__context.measureText(this.__text).width];
		} else {
			var measurements = [];
			var _g = 0;
			var _g1 = this.__ranges;
			while(_g < _g1.length) {
				var range = _g1[_g];
				++_g;
				this.__context.font = this.__getFont(range.format);
				measurements.push(this.__context.measureText(this.get_text().substring(range.start,range.end)).width);
			}
			return measurements;
		}
	}
	,__measureTextWithDOM: function() {
		var div = this.__div;
		if(this.__div == null) {
			div = window.document.createElement("div");
			div.innerHTML = new EReg("\n","g").replace(this.__text,"<br>");
			div.style.setProperty("font",this.__getFont(this.__textFormat),null);
			div.style.position = "absolute";
			div.style.top = "110%";
			window.document.body.appendChild(div);
		}
		this.__measuredWidth = div.clientWidth;
		if(this.__div == null) div.style.width = Std.string(this.__width) + "px";
		this.__measuredHeight = div.clientHeight;
		if(this.__div == null) window.document.body.removeChild(div);
	}
	,__renderCanvas: function(renderSession) {
		openfl._internal.renderer.canvas.CanvasTextField.render(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl._internal.renderer.dom.DOMTextField.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		openfl._internal.renderer.opengl.GLTextField.render(this,renderSession);
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe.Timer.delay($bind(this,this.__startCursorTimer),500);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) this.__cursorTimer.stop();
	}
	,input_onKeyUp: function(event) {
		this.__isKeyDown = false;
		if(event == null) event == window.event;
		this.__text = this.__hiddenInput.value;
		this.__ranges = null;
		this.__isHTML = false;
		this.__cursorPosition = this.__hiddenInput.selectionStart;
		this.__selectionStart = this.__cursorPosition;
		this.__dirty = true;
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE,true));
	}
	,input_onKeyDown: function(event) {
		this.__isKeyDown = true;
		if(event == null) event == window.event;
		var keyCode = event.which;
		var isShift = event.shiftKey;
		if(keyCode == 65 && (event.ctrlKey || event.metaKey)) {
			this.__hiddenInput.selectionStart = 0;
			this.__hiddenInput.selectionEnd = this.get_text().length;
			event.preventDefault();
			this.__dirty = true;
			return;
		}
		if(keyCode == 17 || event.metaKey || event.ctrlKey) return;
		this.__text = this.__hiddenInput.value;
		this.__ranges = null;
		this.__isHTML = false;
		this.__selectionStart = this.__hiddenInput.selectionStart;
		this.__dirty = true;
	}
	,stage_onFocusOut: function(event) {
		this.__cursorPosition = -1;
		this.__hasFocus = false;
		this.__stopCursorTimer();
		this.__hiddenInput.blur();
		this.__dirty = true;
	}
	,stage_onMouseMove: function(event) {
		if(this.__hasFocus && this.__selectionStart >= 0) {
			this.__cursorPosition = this.__getPosition(event.localX,event.localY);
			this.__dirty = true;
		}
	}
	,stage_onMouseUp: function(event) {
		var upPos = this.__getPosition(event.localX,event.localY);
		var leftPos;
		var rightPos;
		leftPos = Std["int"](Math.min(this.__selectionStart,upPos));
		rightPos = Std["int"](Math.max(this.__selectionStart,upPos));
		this.__selectionStart = leftPos;
		this.__cursorPosition = rightPos;
		this.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
		this.stage.set_focus(this);
		if(this.__cursorPosition < 0) {
			this.__cursorPosition = this.__text.length;
			this.__selectionStart = this.__cursorPosition;
		}
		this.__hiddenInput.focus();
		this.__hiddenInput.selectionStart = this.__selectionStart;
		this.__hiddenInput.selectionEnd = this.__cursorPosition;
		this.__stopCursorTimer();
		this.__startCursorTimer();
		this.__hasFocus = true;
		this.__dirty = true;
	}
	,this_onAddedToStage: function(event) {
		this.stage.addEventListener(openfl.events.FocusEvent.FOCUS_OUT,$bind(this,this.stage_onFocusOut));
		this.__hiddenInput.addEventListener("keydown",$bind(this,this.input_onKeyDown));
		this.__hiddenInput.addEventListener("keyup",$bind(this,this.input_onKeyUp));
		this.__hiddenInput.addEventListener("input",$bind(this,this.input_onKeyUp));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
	}
	,this_onMouseDown: function(event) {
		this.__selectionStart = this.__getPosition(event.localX,event.localY);
		this.stage.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,this_onRemovedFromStage: function(event) {
		if(this.stage != null) this.stage.removeEventListener(openfl.events.FocusEvent.FOCUS_OUT,$bind(this,this.stage_onFocusOut));
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("keydown",$bind(this,this.input_onKeyDown));
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("keyup",$bind(this,this.input_onKeyUp));
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("input",$bind(this,this.input_onKeyUp));
		this.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
		if(this.stage != null) this.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		if(this.stage != null) this.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,set_autoSize: function(value) {
		if(value != this.autoSize) this.__dirty = true;
		return this.autoSize = value;
	}
	,set_background: function(value) {
		if(value != this.background) this.__dirty = true;
		return this.background = value;
	}
	,set_backgroundColor: function(value) {
		if(value != this.backgroundColor) this.__dirty = true;
		return this.backgroundColor = value;
	}
	,set_border: function(value) {
		if(value != this.border) this.__dirty = true;
		return this.border = value;
	}
	,set_borderColor: function(value) {
		if(value != this.borderColor) this.__dirty = true;
		return this.borderColor = value;
	}
	,get_bottomScrollV: function() {
		return this.get_numLines();
	}
	,get_caretPos: function() {
		return 0;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		return value;
	}
	,get_height: function() {
		return this.__height * this.get_scaleY();
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
		}
		this.set_scaleY(1);
		return this.__height = value;
	}
	,get_htmlText: function() {
		return this.__text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) this.__dirty = true;
		this.__ranges = null;
		this.__isHTML = true;
		if(this.__div == null) {
			value = new EReg("<br>","g").replace(value,"\n");
			value = new EReg("<br/>","g").replace(value,"\n");
			var segments = value.split("<font");
			if(segments.length == 1) {
				value = new EReg("<.*?>","g").replace(value,"");
				if(this.__hiddenInput != null) this.__hiddenInput.value = value;
				return this.__text = value;
			} else {
				value = "";
				this.__ranges = [];
				var _g = 0;
				while(_g < segments.length) {
					var segment = segments[_g];
					++_g;
					if(segment == "") continue;
					var closeFontIndex = segment.indexOf("</font>");
					if(closeFontIndex > -1) {
						var start = segment.indexOf(">") + 1;
						var end = closeFontIndex;
						var format = this.__textFormat.clone();
						var faceIndex = segment.indexOf("face=");
						var colorIndex = segment.indexOf("color=");
						var sizeIndex = segment.indexOf("size=");
						if(faceIndex > -1 && faceIndex < start) {
							var len = segment.indexOf("\"",faceIndex);
							format.font = HxOverrides.substr(segment,faceIndex + 6,len);
						}
						if(colorIndex > -1 && colorIndex < start) format.color = Std.parseInt("0x" + HxOverrides.substr(segment,colorIndex + 8,6));
						if(sizeIndex > -1 && sizeIndex < start) format.size = Std.parseInt((function($this) {
							var $r;
							var len1 = segment.indexOf("\"",sizeIndex);
							$r = HxOverrides.substr(segment,sizeIndex + 6,len1);
							return $r;
						}(this)));
						var sub = segment.substring(start,end);
						sub = new EReg("<.*?>","g").replace(sub,"");
						this.__ranges.push(new openfl.text.TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						if(closeFontIndex + 7 < segment.length) {
							sub = HxOverrides.substr(segment,closeFontIndex + 7,null);
							this.__ranges.push(new openfl.text.TextFormatRange(this.__textFormat,value.length,value.length + sub.length));
							value += sub;
						}
					} else {
						this.__ranges.push(new openfl.text.TextFormatRange(this.__textFormat,value.length,value.length + segment.length));
						value += segment;
					}
				}
			}
		}
		if(this.__hiddenInput != null) this.__hiddenInput.value = value;
		return this.__text = value;
	}
	,get_maxScrollH: function() {
		return 0;
	}
	,get_maxScrollV: function() {
		return 1;
	}
	,get_numLines: function() {
		if(this.get_text() != "" && this.get_text() != null) {
			var count = this.get_text().split("\n").length;
			if(this.__isHTML) count += this.get_text().split("<br>").length - 1;
			return count;
		}
		return 1;
	}
	,get_text: function() {
		if(this.__isHTML) {
		}
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__text != value && this.__hiddenInput != null) this.__hiddenInput.value = value;
		if(this.__isHTML || this.__text != value) this.__dirty = true;
		this.__ranges = null;
		this.__isHTML = false;
		return this.__text = value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) this.__dirty = true;
		if(this.__ranges != null) {
			var _g = 0;
			var _g1 = this.__ranges;
			while(_g < _g1.length) {
				var range = _g1[_g];
				++_g;
				range.format.color = value;
			}
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		if(this.__canvas != null) {
			var sizes = this.__measureText();
			var total = 0;
			var _g = 0;
			while(_g < sizes.length) {
				var size = sizes[_g];
				++_g;
				total += size;
			}
			return total;
		} else if(this.__div != null) return this.__div.clientWidth; else {
			this.__measureTextWithDOM();
			return this.__measuredWidth;
		}
	}
	,get_textHeight: function() {
		if(this.__canvas != null) return this.__textFormat.size * 1.185; else if(this.__div != null) return this.__div.clientHeight; else {
			this.__measureTextWithDOM();
			return this.__measuredHeight + this.__textFormat.size * 0.185;
		}
	}
	,set_type: function(value) {
		if(value != this.type) {
			if(value == openfl.text.TextFieldType.INPUT) this.__enableInputMode(); else this.__disableInputMode();
			this.__dirty = true;
		}
		return this.type = value;
	}
	,get_width: function() {
		if(this.autoSize == openfl.text.TextFieldAutoSize.LEFT) return (this.get_textWidth() + 4) * this.get_scaleX(); else return this.__width * this.get_scaleX();
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1 || this.__width != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
		}
		this.set_scaleX(1);
		return this.__width = value;
	}
	,get_wordWrap: function() {
		return this.wordWrap;
	}
	,set_wordWrap: function(value) {
		return this.wordWrap = value;
	}
	,__class__: openfl.text.TextField
	,__properties__: $extend(openfl.display.InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",get_numLines:"get_numLines",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretPos:"get_caretPos",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",set_border:"set_border",set_backgroundColor:"set_backgroundColor",set_background:"set_background",set_autoSize:"set_autoSize"})
});
com.tools.Text = function() {
	openfl.text.TextField.call(this);
};
$hxClasses["com.tools.Text"] = com.tools.Text;
com.tools.Text.__name__ = ["com","tools","Text"];
com.tools.Text.__super__ = openfl.text.TextField;
com.tools.Text.prototype = $extend(openfl.text.TextField.prototype,{
	set_y: function(value) {
		if(com.Variables.usedBrowser == "Firefox") {
		} else if(com.Variables.usedBrowser == "Safari") value = value - this.get_defaultTextFormat().size / 7; else value = value - this.get_defaultTextFormat().size / 5;
		if(value != this.__y) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__y = value;
	}
	,__class__: com.tools.Text
});
com.tools.Tools = function() { };
$hxClasses["com.tools.Tools"] = com.tools.Tools;
com.tools.Tools.__name__ = ["com","tools","Tools"];
com.tools.Tools.addText = function(_text,_size,_x,_y,_w,_h,_color,align) {
	if(align == null) align = 0;
	if(_color == null) _color = 16777215;
	if(_h == null) _h = 0;
	if(_w == null) _w = 0;
	if(_size == null) _size = 24;
	var format = new openfl.text.TextFormat(com.Variables.getFontName(),_size,_color);
	switch(align) {
	case 0:
		format.align = openfl.text.TextFormatAlign.CENTER;
		break;
	case 1:
		format.align = openfl.text.TextFormatAlign.LEFT;
		break;
	case 2:
		format.align = openfl.text.TextFormatAlign.RIGHT;
		break;
	}
	var Label = new com.tools.Text();
	Label.mouseEnabled = false;
	Label.set_defaultTextFormat(format);
	Label.embedFonts = true;
	Label.selectable = false;
	Label.set_text(_text);
	if(_w > 0) Label.set_width(_w);
	if(_h > 0) Label.set_height(_h);
	Label.set_x(_x);
	Label.set_y(_y);
	return Label;
};
com.tools.Tools.randTo = function(min,max,places) {
	if(places == null) places = 0;
	if(places == 0) return Math.floor(Math.random() * (max - min + 1)) + min; else {
		var randNum = Math.random() * (max - min + 1) + min;
		randNum = com.tools.Tools.roundDec(randNum,places);
		if(randNum > max) randNum = max;
		return randNum;
	}
};
com.tools.Tools.roundDec = function(numIn,decimalPlaces) {
	if(decimalPlaces == null) decimalPlaces = 0;
	var nExp;
	nExp = js.Boot.__cast(Math.pow(10,decimalPlaces) , Int);
	var nRetVal = Math.round(numIn * nExp) / nExp;
	return nRetVal;
};
com.tools.Tools.clamp = function(val,min,max) {
	return Math.max(min,Math.min(max,val));
};
com.tools.Tools.toDeg = function(rad) {
	return rad * (180 / Math.PI);
};
com.tools.Tools.toRad = function(deg) {
	return deg * (Math.PI / 180);
};
com.tools.Tools.localToLocal = function(containerFrom,containerTo,origin) {
	var point;
	if(origin != null) point = origin; else point = new openfl.geom.Point();
	point = containerFrom.localToGlobal(point);
	point = containerTo.globalToLocal(point);
	return point;
};
com.tools.Tools.calcDistOfDots = function(x1,y1,x2,y2) {
	return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
};
com.tools.Tools.angleOfPoints = function(x1,y1,x2,y2) {
	return Math.atan2(-(y2 - y1),-(x2 - x1)) * 180 / Math.PI;
};
com.tools.Tools.toPercent = function(current,total) {
	return current / total * 100;
};
com.tools.Tools.fromPercent = function(percent,total) {
	return percent * total / 100;
};
com.tools.Tools.removeObject = function(list,object) {
	var index = com.tools.Tools.indexOf(list,object);
	if(index != -1) {
		list.splice(index,1);
		return true;
	}
	return false;
};
com.tools.Tools.indexOf = function(list,object) {
	var _g1 = 0;
	var _g = list.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(list[i] == object) return i;
	}
	return -1;
};
com.tools.Tools.clearLayer = function(layer) {
	while(layer.get_numChildren() > 0) layer.removeChildAt(0);
};
com.tools.Tools.rotatePointByAngle = function(anchorX,anchorY,rotatedX,rotatedY,angleRad) {
	var cos = Math.cos(angleRad);
	var sin = Math.sin(angleRad);
	return new openfl.geom.Point(anchorX + (rotatedX - anchorX) * cos - (rotatedY - anchorY) * sin,anchorY + (rotatedX - anchorX) * sin + (rotatedY - anchorY) * cos);
};
com.tools.Tools.circleInRect = function(circleCenter,circleRadius,rect) {
	var contactResult = new openfl.geom.Point();
	if(circleCenter.x - circleRadius <= rect.x) contactResult.x = -1;
	if(circleCenter.x + circleRadius >= rect.x + rect.width) contactResult.x = 1;
	if(circleCenter.y - circleRadius <= rect.y) contactResult.y = -1;
	if(circleCenter.y + circleRadius >= rect.y + rect.height) contactResult.y = 1;
	return contactResult;
};
com.tools.Tools.pointInRect = function(rx,ry,rw,rh,rot,px,py) {
	var rotRad = rot;
	var dx = px - rx;
	var dy = py - ry;
	var h1 = Math.sqrt(dx * dx + dy * dy);
	var currA = Math.atan2(dy,dx);
	var newA = currA - rotRad;
	var x2 = Math.cos(newA) * h1;
	var y2 = Math.sin(newA) * h1;
	if(x2 > -0.5 * rw && x2 < 0.5 * rw && y2 > -0.5 * rh && y2 < 0.5 * rh) return true;
	return false;
};
com.tools.Tools.shuffle = function(array) {
	var n = array.length;
	while(n > 1) {
		n--;
		var k = Math.floor(Math.random() * (n + 1));
		var tmp = array[k];
		array[k] = array[n];
		array[n] = tmp;
	}
	return array;
};
com.tools.Tools.drawCircleLoad = function(graphics,color,alpha,currentValue,totalValue,x,y,radius) {
	if(radius == null) radius = 50;
	if(y == null) y = 0;
	if(x == null) x = 0;
	graphics.beginFill(color,alpha);
	graphics.moveTo(x,y);
	var angle = 0;
	var iter = 361 - 360 * (currentValue / totalValue) | 0;
	var _g = 0;
	while(_g < iter) {
		var i = _g++;
		angle = (-90 + i) * (Math.PI / 180);
		graphics.lineTo(x + radius * Math.cos(angle),y + radius * Math.sin(angle));
	}
};
var effects = {};
effects.ScatteringParts = function(layer,tile,_mass) {
	if(tile == null) tile = "";
	this.gravityY = 1;
	this.gravityX = 0;
	this.active = false;
	com.jdtiles.jda.TileSprite.call(this,layer,tile);
	this.mass = _mass;
};
$hxClasses["effects.ScatteringParts"] = effects.ScatteringParts;
effects.ScatteringParts.__name__ = ["effects","ScatteringParts"];
effects.ScatteringParts.__super__ = com.jdtiles.jda.TileSprite;
effects.ScatteringParts.prototype = $extend(com.jdtiles.jda.TileSprite.prototype,{
	start: function(contactX,contactY) {
		this.active = true;
		this.alpha = 1;
		this.set_rotationRad(0);
		this.speedR = com.tools.Tools.randTo(1,4) / 10;
		this.endY = this.y + 50;
		var angle = (30 + Math.random() * 30) * Math.PI / 180;
		var powerX = 12 / this.mass;
		var powerY = 12 / this.mass;
		this.directionX = powerX * Math.cos(angle);
		this.directionY = -powerY * Math.sin(angle);
	}
	,update: function(stepX) {
		if(this.active == true) {
			this.x += this.directionX;
			this.y += this.directionY;
			var _g = this;
			_g.set_rotationRad(_g.get_rotationRad() + this.speedR);
			this.directionX = this.directionX + this.gravityX;
			this.directionY = this.directionY + this.gravityY;
			if(this.y >= this.endY) {
				this.alpha -= 0.1;
				if(this.alpha <= 0) this.end();
			}
		}
		this.x -= stepX;
	}
	,end: function() {
		this.active = false;
		this.alpha = 0;
	}
	,__class__: effects.ScatteringParts
});
effects.ShieldEffect = function() {
	this.counter = 0;
};
$hxClasses["effects.ShieldEffect"] = effects.ShieldEffect;
effects.ShieldEffect.__name__ = ["effects","ShieldEffect"];
effects.ShieldEffect.prototype = {
	add: function(_x,_y) {
		if(this.grahic == null) {
			this.grahic = new com.jdtiles.jda.TileClip(scenes.additional.Game.instance.eManager,"shieldEffect");
			this.grahic.onComplete = $bind(this,this.hide);
			this.grahic.loop = false;
			scenes.additional.Game.instance.eManager.addChild(this.grahic);
		}
		this.grahic.x = _x;
		this.grahic.y = _y;
		this.grahic.alpha = 1;
		this.grahic.set_currentFrame(0);
	}
	,update: function(_x,_y) {
		this.counter++;
		if(this.counter % 4 == 0) this.grahic.set_scaleX(this.grahic.set_scaleY(1)); else if(this.counter % 3 == 0) this.grahic.set_scaleX(this.grahic.set_scaleY(0.96)); else this.grahic.set_scaleX(this.grahic.set_scaleY(0.92));
		this.grahic.x = _x;
		this.grahic.y = _y;
	}
	,startHideShield: function() {
		this.grahic.play();
	}
	,hide: function(_clip) {
		this.grahic.alpha = 0;
		scenes.additional.Game.instance.hero.set_currExtra(elements.HeroExtra.none);
	}
	,free: function() {
		this.grahic = null;
	}
	,__class__: effects.ShieldEffect
};
var elements = {};
elements.BasicElements = function() {
	this.deactiveX = 0;
	this.halfW = 0;
	this.active = false;
};
$hxClasses["elements.BasicElements"] = elements.BasicElements;
elements.BasicElements.__name__ = ["elements","BasicElements"];
elements.BasicElements.prototype = {
	create: function() {
	}
	,activate: function(data) {
	}
	,deactivate: function() {
	}
	,action: function() {
	}
	,update: function(stepX) {
	}
	,free: function() {
	}
	,__class__: elements.BasicElements
};
elements.Basket = function() {
	this.collected = false;
	elements.BasicElements.call(this);
	this.halfW = 25;
};
$hxClasses["elements.Basket"] = elements.Basket;
elements.Basket.__name__ = ["elements","Basket"];
elements.Basket.__super__ = elements.BasicElements;
elements.Basket.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "Basket";
	}
	,activate: function(data) {
		this.active = true;
		if(this.graphic == null) {
			this.graphic = new com.jdtiles.jda.TileClip(scenes.additional.Game.instance.eManager,this.name);
			scenes.additional.Game.instance.eManager.addChildAt(this.graphic,scenes.additional.Game.instance.getLastIndex());
		} else scenes.additional.Game.instance.eManager.setChildIndex(this.graphic,scenes.additional.Game.instance.getLastIndex() - 1);
		this.graphic.x = data[1] + scenes.additional.Game.instance.get_x() + this.halfW;
		this.graphic.y = data[2] + 9;
		this.graphic.alpha = 1;
		this.graphic.set_currentFrame(0);
		data = [];
		data = null;
		this.deactiveX = -this.graphic.get_halfwidth();
		this.collected = false;
	}
	,deactivate: function() {
		this.graphic.alpha = 0;
		this.active = false;
	}
	,collect: function() {
		com.sound.SoundManager.playSFX("pickUpPlace");
		scenes.LevelBuilder.getInstance().addOrange(3);
		this.graphic.set_currentFrame(1);
		this.collected = true;
	}
	,update: function(stepX) {
		this.graphic.x -= stepX;
		if(this.collected == false && com.tools.Tools.calcDistOfDots(this.graphic.x,this.graphic.y,scenes.additional.Game.instance.hero.graphic.x,scenes.additional.Game.instance.hero.graphic.y) <= 45) this.collect();
		if(this.graphic.x < this.deactiveX) this.deactivate();
	}
	,free: function() {
		this.graphic = null;
	}
	,__class__: elements.Basket
});
elements.Batut = function() {
	this.timeAnim = 10;
	this.counterAnim = 0;
	this.startAnim = false;
	this.power = 3500;
	elements.BasicElements.call(this);
	this.halfW = 50;
};
$hxClasses["elements.Batut"] = elements.Batut;
elements.Batut.__name__ = ["elements","Batut"];
elements.Batut.__super__ = elements.BasicElements;
elements.Batut.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "Batut";
		this.body = com.tools.NapeTools.createBox2((function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this)),90,20);
		this.body.get_userData().data = "Batut";
		this.body.get_userData().link = this;
		this.body.get_cbTypes().add(ContactListener.oneWayType);
	}
	,activate: function(data) {
		this.active = true;
		data[1] += this.halfW;
		this.body.get_position().setxy(data[1] - com.Variables.oW,data[2] - com.Variables.oH);
		if(this.graphic == null) {
			this.graphic = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.eManager,"BatutFon");
			scenes.additional.Game.instance.eManager.addChildAt(this.graphic,scenes.additional.Game.instance.getLastIndex());
			this.graphicAnim = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.eManager,"BatutFront");
			scenes.additional.Game.instance.eManager.addChildAt(this.graphicAnim,scenes.additional.Game.instance.getLastIndex());
		} else {
			scenes.additional.Game.instance.eManager.setChildIndex(this.graphic,scenes.additional.Game.instance.getLastIndex() - 1);
			scenes.additional.Game.instance.eManager.setChildIndex(this.graphicAnim,scenes.additional.Game.instance.getLastIndex() - 1);
		}
		this.startY = data[2] - 3;
		this.graphicAnim.x = data[1] + scenes.additional.Game.instance.get_x() + 8;
		this.graphicAnim.y = this.startY;
		this.graphicAnim.alpha = 1;
		this.graphic.x = this.graphicAnim.x + 15;
		this.graphic.y = this.graphicAnim.y + 25;
		this.graphic.alpha = 1;
		this.deactiveX = -this.graphic.get_halfwidth();
		data = [];
		data = null;
		this.body.set_space(com.World.space);
	}
	,deactivate: function() {
		this.active = false;
		this.graphic.alpha = 0;
		this.graphicAnim.alpha = 0;
		this.body.set_space(null);
	}
	,update: function(stepX) {
		this.graphic.x -= stepX;
		this.graphicAnim.x -= stepX;
		if(this.graphic.x < this.deactiveX) this.deactivate();
		if(this.startAnim == true) {
			this.counterAnim++;
			if(this.counterAnim == 1) {
				this.graphicAnim.set_scaleX(1.04);
				this.graphicAnim.set_scaleY(0.92);
				this.offY = 2.4;
			} else if(this.counterAnim == 2) {
				this.graphicAnim.set_scaleX(1.09);
				this.graphicAnim.set_scaleY(0.84);
				this.offY = 4.8;
			} else if(this.counterAnim == 3) {
				this.graphicAnim.set_scaleX(1.12);
				this.graphicAnim.set_scaleY(0.81);
				this.offY = 5.75;
			} else if(this.counterAnim == 4) {
				this.graphicAnim.set_scaleX(1.15);
				this.graphicAnim.set_scaleY(0.78);
				this.offY = 6.7;
			} else if(this.counterAnim == 5) {
				this.graphicAnim.set_scaleX(1);
				this.graphicAnim.set_scaleY(1.02);
				this.offY = 0.1;
			} else if(this.counterAnim == 6) {
				this.graphicAnim.set_scaleX(0.86);
				this.graphicAnim.set_scaleY(1.27);
				this.offY = -6.45;
			} else if(this.counterAnim == 7) {
				this.graphicAnim.set_scaleX(0.95);
				this.graphicAnim.set_scaleY(1.09);
				this.offY = -2.25;
			} else if(this.counterAnim == 8) {
				this.graphicAnim.set_scaleX(1.05);
				this.graphicAnim.set_scaleY(0.92);
				this.offY = 1.85;
			} else if(this.counterAnim == 9) {
				this.graphicAnim.set_scaleX(1.02);
				this.graphicAnim.set_scaleY(0.96);
				this.offY = 0.95;
			}
			if(this.counterAnim == this.timeAnim) {
				this.offY = 0;
				this.graphicAnim.set_scaleX(1);
				this.graphicAnim.set_scaleY(1);
				this.counterAnim = 0;
				this.startAnim = false;
			}
			this.graphicAnim.y = this.startY + this.offY;
		}
	}
	,onContact: function(contact,income) {
		if(contact == "Hero" && scenes.additional.Game.instance.hero.isState(elements.HeroState.run) == false && scenes.additional.Game.instance.hero.isState(elements.HeroState.slide) == false) {
			com.sound.SoundManager.playSFX("trampoline");
			scenes.additional.Game.instance.jumpOff = false;
			this.startAnim = true;
			scenes.additional.Game.instance.hero.setJump(this.power);
		}
	}
	,endContact: function(contact,income) {
	}
	,free: function() {
		this.graphic = null;
		this.graphicAnim = null;
		this.body = null;
	}
	,__class__: elements.Batut
});
elements.Bullet = function() {
	this.contact = false;
	this.counter = 0;
	this.speed = 5;
	elements.BasicElements.call(this);
};
$hxClasses["elements.Bullet"] = elements.Bullet;
elements.Bullet.__name__ = ["elements","Bullet"];
elements.Bullet.__super__ = elements.BasicElements;
elements.Bullet.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "Bullet";
	}
	,activate: function(data) {
		this.active = true;
		this.contact = false;
		if(this.graphic == null) {
			this.graphic = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.eManager,"bullet");
			scenes.additional.Game.instance.eManager.addChildAt(this.graphic,scenes.additional.Game.instance.getLastIndex());
		} else scenes.additional.Game.instance.eManager.setChildIndex(this.graphic,scenes.additional.Game.instance.getLastIndex() - 1);
		this.graphic.x = data[1] - 30;
		this.graphic.y = data[2] - 20;
		this.graphic.alpha = 1;
		this.graphic.set_scaleX(1.16);
		this.graphic.set_scaleY(0.89);
		this.deactiveX = -this.graphic.get_halfwidth();
		this.counter = 0;
		data = [];
		data = null;
		com.sound.SoundManager.playSFX("throwFlower");
	}
	,deactivate: function() {
		this.active = false;
		this.graphic.alpha = 0;
	}
	,update: function(stepX) {
		this.graphic.x -= stepX + this.speed;
		if(this.graphic.x < this.deactiveX) this.deactivate(); else if(com.tools.Tools.calcDistOfDots(this.graphic.x,this.graphic.y,scenes.additional.Game.instance.hero.graphic.x,scenes.additional.Game.instance.hero.graphic.y) <= 30 && scenes.additional.Game.instance.hero.isState(elements.HeroState.slide) == false && this.contact == false) {
			this.contact = true;
			scenes.additional.Game.instance.hero.onContact("Bullet",null,this);
		}
		this.counter++;
		if(this.counter > 1 && this.counter <= 6) {
			var _g = this.graphic;
			_g.set_scaleX(_g.get_scaleX() - 0.11);
			var _g1 = this.graphic;
			_g1.set_scaleY(_g1.get_scaleY() + 0.09);
		} else if(this.counter > 6 && this.counter <= 9) {
			var _g2 = this.graphic;
			_g2.set_scaleX(_g2.get_scaleX() + 0.14);
			var _g3 = this.graphic;
			_g3.set_scaleY(_g3.get_scaleY() - 0.12);
		} else if(this.counter == 10) {
			this.graphic.set_scaleX(1.16);
			this.graphic.set_scaleY(0.89);
			this.counter = 1;
		}
	}
	,free: function() {
		this.graphic = null;
	}
	,__class__: elements.Bullet
});
elements.Bush = function() {
	elements.BasicElements.call(this);
	this.halfW = 49;
};
$hxClasses["elements.Bush"] = elements.Bush;
elements.Bush.__name__ = ["elements","Bush"];
elements.Bush.__super__ = elements.BasicElements;
elements.Bush.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "Bush";
		this.body = com.tools.NapeTools.createBox2((function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this)),40,120);
		this.body.zpp_inner.wrap_shapes.at(0).set_sensorEnabled(true);
		this.body.get_userData().data = "DamageBush";
	}
	,activate: function(data) {
		this.active = true;
		data[1] += this.halfW;
		this.body.get_position().setxy(data[1] - com.Variables.oW,data[2] - com.Variables.oH);
		if(this.graphic == null) {
			this.graphic = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.eManager,"Bush");
			scenes.additional.Game.instance.eManager.addChildAt(this.graphic,scenes.additional.Game.instance.getLastIndex());
		} else scenes.additional.Game.instance.eManager.setChildIndex(this.graphic,scenes.additional.Game.instance.getLastIndex() - 1);
		this.graphic.x = data[1] + scenes.additional.Game.instance.get_x() + 5;
		this.graphic.y = data[2] - 10;
		this.graphic.alpha = 1;
		this.deactiveX = -this.graphic.get_halfwidth();
		data = [];
		data = null;
		this.body.set_space(com.World.space);
	}
	,deactivate: function() {
		this.active = false;
		this.graphic.alpha = 0;
		this.body.set_space(null);
	}
	,update: function(stepX) {
		this.graphic.x -= stepX;
		if(this.graphic.x < this.deactiveX) this.deactivate();
	}
	,free: function() {
		this.graphic = null;
		this.body = null;
	}
	,__class__: elements.Bush
});
elements.CageHelp = $hxClasses["elements.CageHelp"] = { __ename__ : true, __constructs__ : ["showing","stand","moveing"] };
elements.CageHelp.showing = ["showing",0];
elements.CageHelp.showing.toString = $estr;
elements.CageHelp.showing.__enum__ = elements.CageHelp;
elements.CageHelp.stand = ["stand",1];
elements.CageHelp.stand.toString = $estr;
elements.CageHelp.stand.__enum__ = elements.CageHelp;
elements.CageHelp.moveing = ["moveing",2];
elements.CageHelp.moveing.toString = $estr;
elements.CageHelp.moveing.__enum__ = elements.CageHelp;
elements.Cage = function() {
	this.activeHelp = true;
	this.distance = 0;
	this.freedom = false;
	elements.BasicElements.call(this);
	this.halfW = 50;
};
$hxClasses["elements.Cage"] = elements.Cage;
elements.Cage.__name__ = ["elements","Cage"];
elements.Cage.__super__ = elements.BasicElements;
elements.Cage.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "Cage";
		scenes.additional.Game.instance.eManager.birdCage = this;
	}
	,activate: function(data) {
		this.currHelp = elements.CageHelp.showing;
		this.activeHelp = true;
		this.active = true;
		if(this.graphic == null) {
			this.bird = new com.jdtiles.jda.TileClip(scenes.additional.Game.instance.eManager,"Bird");
			this.bird.breakTile("stand",0,0,false);
			this.bird.breakTile("fly",1,8,true,30);
			scenes.additional.Game.instance.eManager.addChildAt(this.bird,scenes.additional.Game.instance.getLastIndex());
			this.graphic = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.eManager,this.name);
			scenes.additional.Game.instance.eManager.addChildAt(this.graphic,scenes.additional.Game.instance.getLastIndex());
			this.door = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.eManager,"cageDoor");
			scenes.additional.Game.instance.eManager.addChildAt(this.door,scenes.additional.Game.instance.getLastIndex());
			this.birdHelp = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.eManager,"BirdHelp");
			scenes.additional.Game.instance.eManager.addChildAt(this.birdHelp,scenes.additional.Game.instance.getLastIndex());
		} else {
			scenes.additional.Game.instance.eManager.setChildIndex(this.bird,scenes.additional.Game.instance.getLastIndex() - 1);
			scenes.additional.Game.instance.eManager.setChildIndex(this.graphic,scenes.additional.Game.instance.getLastIndex() - 1);
			scenes.additional.Game.instance.eManager.setChildIndex(this.door,scenes.additional.Game.instance.getLastIndex() - 1);
			scenes.additional.Game.instance.eManager.setChildIndex(this.birdHelp,scenes.additional.Game.instance.getLastIndex() - 1);
		}
		var gx = data[1] + scenes.additional.Game.instance.get_x();
		this.graphic.x = gx + this.halfW;
		this.graphic.y = data[2];
		this.graphic.alpha = 0;
		this.bird.x = this.graphic.x - 3;
		this.bird.y = this.graphic.y - 15;
		this.bird.alpha = 0;
		this.bird.gotoAndStop(0);
		this.bird.set_currentAnim("stand");
		this.door.x = this.graphic.x + this.door.get_halfwidth() - 5;
		this.door.y = this.graphic.y - 35;
		this.door.alpha = 0;
		this.door.set_offsetX(-this.door.get_halfwidth() + 5);
		this.door.set_offsetY(-this.door.get_halfheight() + 5);
		this.door.set_rotation(0);
		this.birdHelp.x = gx + this.birdHelp.get_halfwidth();
		this.birdHelp.y = data[2] - 35;
		this.birdHelp.alpha = 1;
		this.freedom = false;
		this.distance = 0;
		this.deactiveX = -this.graphic.get_halfwidth();
		data = [];
		data = null;
	}
	,deactivate: function() {
		this.active = false;
		this.graphic.alpha = 0;
		this.door.alpha = 0;
		this.bird.alpha = 0;
		this.birdHelp.alpha = 0;
	}
	,show: function() {
		this.graphic.alpha = 1;
		this.bird.alpha = 1;
		this.door.alpha = 1;
	}
	,reIndexHelp: function() {
		if(this.activeHelp == true) scenes.additional.Game.instance.eManager.setChildIndex(this.birdHelp,scenes.additional.Game.instance.getLastIndex() - 1);
	}
	,update: function(stepX) {
		this.distance += stepX;
		if(this.distance > 500) {
			this.graphic.x -= stepX;
			this.door.x -= stepX;
			this.bird.x -= stepX;
			this.show();
		}
		if(this.currHelp == elements.CageHelp.showing) {
			this.rightCornerX = 700 + com.Variables.shiftX;
			this.birdHelp.x -= stepX;
			if(this.birdHelp.x <= this.rightCornerX) {
				this.birdHelp.x = this.rightCornerX;
				this.currHelp = elements.CageHelp.stand;
				com.sound.SoundManager.playSFX("BirdInCage");
			}
		} else if(this.currHelp == elements.CageHelp.stand) {
			this.rightCornerX = 700 + com.Variables.shiftX;
			this.birdHelp.x = this.rightCornerX;
			if(this.birdHelp.x >= this.graphic.x - 80) {
				this.birdHelp.alpha = 0;
				this.currHelp = elements.CageHelp.moveing;
				this.activeHelp = false;
			}
		} else if(this.currHelp == elements.CageHelp.moveing) {
			if(this.graphic.x < this.deactiveX) this.deactivate();
			if(this.freedom == true) {
				this.moveToTarget(900,-150,25);
				if(this.bird.y < -50) this.bird.alpha = 0;
			} else {
				var _g = 0;
				var _g1 = scenes.additional.Game.instance.hero.oranges.oranges;
				while(_g < _g1.length) {
					var i = _g1[_g];
					++_g;
					if(i.active == false) continue;
					if(this.graphic.x - 25 < i.x && this.graphic.y + 35 > i.y && this.graphic.y - 35 < i.y) {
						i.end();
						this.openCage();
					}
				}
				if(com.tools.Tools.calcDistOfDots(this.graphic.x,this.graphic.y,scenes.additional.Game.instance.hero.graphic.x,scenes.additional.Game.instance.hero.graphic.y) <= 50) this.openCage();
			}
		}
	}
	,openCage: function() {
		com.sound.SoundManager.playSFX("BirdFree");
		this.freedom = true;
		this.birdHelp.alpha = 0;
		motion.Actuate.tween(this.door,10,{ rotation : 120}).ease(motion.easing.Bounce.get_easeOut());
		this.bird.set_currentAnim("fly");
		this.bird.play();
		scenes.additional.Game.instance.birdFreedom += 1;
		scenes.LevelBuilder.getInstance().health.freeBird();
	}
	,moveToTarget: function(_x,_y,_speed) {
		this.bird.x += (_x - this.bird.x) / _speed;
		this.bird.y += (_y - this.bird.y) / _speed;
	}
	,free: function() {
		this.graphic = null;
		this.bird = null;
		this.door = null;
		this.birdHelp = null;
	}
	,__class__: elements.Cage
});
elements.Chest = function() {
	this.timeCreate = false;
	this.timer = 0;
	this.maxCount = 5;
	this.count = 0;
	this.diamondCreated = false;
	elements.BasicElements.call(this);
	this.halfW = 45;
};
$hxClasses["elements.Chest"] = elements.Chest;
elements.Chest.__name__ = ["elements","Chest"];
elements.Chest.__super__ = elements.BasicElements;
elements.Chest.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "Chest";
	}
	,activate: function(data) {
		this.active = true;
		if(this.graphic == null) {
			this.graphic = new com.jdtiles.jda.TileClip(scenes.additional.Game.instance.eManager,this.name);
			scenes.additional.Game.instance.eManager.addChildAt(this.graphic,scenes.additional.Game.instance.getLastIndex());
		} else scenes.additional.Game.instance.eManager.setChildIndex(this.graphic,scenes.additional.Game.instance.getLastIndex() - 1);
		this.graphic.x = data[1] + scenes.additional.Game.instance.get_x() + this.halfW;
		this.graphic.y = data[2] + 18;
		this.graphic.alpha = 1;
		this.graphic.loop = false;
		this.graphic.gotoAndStop(0);
		this.diamondCreated = false;
		this.timeCreate = false;
		this.count = 0;
		this.timer = 0;
		this.deactiveX = -this.graphic.get_halfwidth();
		data = [];
		data = null;
	}
	,deactivate: function() {
		this.active = false;
		this.graphic.alpha = 0;
	}
	,update: function(stepX) {
		this.graphic.x -= stepX;
		if(this.graphic.x < this.deactiveX) this.deactivate();
		if(com.tools.Tools.calcDistOfDots(this.graphic.x,this.graphic.y,scenes.additional.Game.instance.hero.graphic.x,scenes.additional.Game.instance.hero.graphic.y) <= 40 && this.diamondCreated == false) {
			this.diamondCreated = true;
			this.graphic.gotoAndStop(1);
			this.timeCreate = true;
		}
		if(this.timeCreate == true && this.count < this.maxCount) {
			this.timer++;
			if(this.timer > 3) {
				this.timer = 0;
				this.count++;
				this.addCrystals();
			}
		}
	}
	,addCrystals: function() {
		scenes.additional.Game.instance.eManager.addElement("Diamond",[1,this.graphic.x,this.graphic.y]);
	}
	,free: function() {
		this.graphic = null;
	}
	,__class__: elements.Chest
});
elements.Coconuts = function() {
	this.startShake = false;
	this.created = false;
	this.createTimer = 0;
	this.startY = -50;
	this.contact = false;
	elements.BasicElements.call(this);
	this.params = new Array();
	this.cocounts = new Array();
};
$hxClasses["elements.Coconuts"] = elements.Coconuts;
elements.Coconuts.__name__ = ["elements","Coconuts"];
elements.Coconuts.__super__ = elements.BasicElements;
elements.Coconuts.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "Coconuts";
		this.params = [[-4,0,0],[5,0,0],[28,-150,0],[37,-150,0],[11,-230,-22],[20,-230,-22]];
		var cocount;
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			cocount = new elements.Cocount(scenes.additional.Game.instance.eManager,"CoconutPart1",1);
			this.cocounts.push(cocount);
			cocount = new elements.Cocount(scenes.additional.Game.instance.eManager,"CoconutPart2",0.7);
			this.cocounts.push(cocount);
		}
		cocount = null;
	}
	,activate: function(data) {
		this.active = true;
		this.deactiveX = -30;
		this.startX = data[1] + scenes.additional.Game.instance.get_x();
		this.floor = data[2];
		this.created = false;
		this.createTimer = 0;
		this.startShake = false;
	}
	,update: function(stepX) {
		if(this.created == false) {
			this.startX -= stepX;
			this.createTimer += stepX;
			if(this.createTimer >= 100 && this.createTimer < 200 && this.startShake == false) {
				scenes.LevelBuilder.getInstance().startShaking();
				this.startShake = true;
			} else if(this.createTimer >= 200) {
				var _g = 0;
				while(_g < 6) {
					var i = _g++;
					this.cocounts[i].activate(this.startX + this.params[i][0],this.startY + this.params[i][1],this.floor + this.params[i][2]);
				}
				this.created = true;
			}
		} else {
			var _g1 = 0;
			var _g11 = this.cocounts;
			while(_g1 < _g11.length) {
				var element = _g11[_g1];
				++_g1;
				element.update(stepX);
			}
			if(this.cocounts[0].x < this.deactiveX) this.deactivate(); else if(this.contact == false && com.tools.Tools.calcDistOfDots(this.cocounts[2].x,this.cocounts[2].y,scenes.additional.Game.instance.hero.graphic.x,scenes.additional.Game.instance.hero.graphic.y) <= 40) {
				scenes.additional.Game.instance.hero.onContact("Scattering",null,this);
				this.contact = true;
			}
		}
	}
	,action: function() {
		var _g = 0;
		var _g1 = this.cocounts;
		while(_g < _g1.length) {
			var element = _g1[_g];
			++_g;
			element.start(scenes.additional.Game.instance.hero.graphic.x,scenes.additional.Game.instance.hero.graphic.y + scenes.additional.Game.instance.hero.graphic.get_halfheight());
		}
	}
	,deactivate: function() {
		this.active = false;
		this.contact = false;
		var _g = 0;
		var _g1 = this.cocounts;
		while(_g < _g1.length) {
			var element = _g1[_g];
			++_g;
			element.deactivate();
		}
	}
	,free: function() {
		this.params = [];
		this.params = null;
		this.cocounts = [];
		this.cocounts = null;
	}
	,__class__: elements.Coconuts
});
elements.Cocount = function(layer,tile,_mass) {
	if(tile == null) tile = "";
	this.fallEnd = false;
	this.fallSpeed = 15;
	this.created = false;
	effects.ScatteringParts.call(this,layer,tile,_mass);
};
$hxClasses["elements.Cocount"] = elements.Cocount;
elements.Cocount.__name__ = ["elements","Cocount"];
elements.Cocount.__super__ = effects.ScatteringParts;
elements.Cocount.prototype = $extend(effects.ScatteringParts.prototype,{
	activate: function(_x,_y,_floor) {
		this.fallEnd = false;
		if(this.created == false) {
			this.created = true;
			scenes.additional.Game.instance.eManager.addChildAt(this,scenes.additional.Game.instance.getLastIndex());
		} else scenes.additional.Game.instance.eManager.setChildIndex(this,scenes.additional.Game.instance.getLastIndex() - 1);
		this.set_rotationRad(0);
		this.x = _x;
		this.y = _y;
		this.alpha = 1;
		this.floor = _floor;
		this.fallSpeed = 15;
	}
	,deactivate: function() {
		this.end();
	}
	,update: function(stepX) {
		if(this.fallEnd == false) {
			this.fallSpeed += 1;
			this.y += this.fallSpeed;
			if(this.y > this.floor) {
				this.y = this.floor;
				this.fallEnd = true;
				com.sound.SoundManager.playSFX("coconutsLand" + com.tools.Tools.randTo(1,2));
			}
		}
		effects.ScatteringParts.prototype.update.call(this,stepX);
	}
	,__class__: elements.Cocount
});
elements.DamageEffect = function() {
	this.alphaMinus = 0.01;
	this.smallPause = 0;
	elements.BasicElements.call(this);
	this.halfW = 25;
};
$hxClasses["elements.DamageEffect"] = elements.DamageEffect;
elements.DamageEffect.__name__ = ["elements","DamageEffect"];
elements.DamageEffect.__super__ = elements.BasicElements;
elements.DamageEffect.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "DamageEffect";
	}
	,activate: function(data) {
		this.active = true;
		if(this.blow == null) {
			this.blow = new com.jdtiles.jda.TileClip(scenes.LevelBuilder.layer,"blow",25);
			scenes.LevelBuilder.layer.addChild(this.blow);
			this.heart = new com.jdtiles.jda.TileSprite(scenes.LevelBuilder.layer,"loseHeart");
			scenes.LevelBuilder.layer.addChild(this.heart);
		}
		this.blow.x = data[1];
		this.blow.y = data[2];
		this.blow.alpha = 1;
		this.blow.loop = false;
		this.blow.gotoAndPlay(0);
		this.blow.onComplete = $bind(this,this.hide);
		this.heart.x = data[1];
		this.heart.y = data[2];
		this.heart.alpha = 1;
		this.alphaMinus = 0.01;
	}
	,hide: function(clip) {
		this.blow.alpha = 0;
	}
	,update: function(stepX) {
		this.blow.x -= stepX;
		this.heart.x -= stepX;
		this.heart.y -= 3;
		this.smallPause++;
		if(this.smallPause >= 5) {
			this.heart.alpha -= 0.03;
			if(this.heart.alpha <= 0) this.deactivate();
		}
	}
	,deactivate: function() {
		this.active = false;
		this.blow.alpha = 0;
		this.heart.alpha = 0;
	}
	,free: function() {
		this.blow = null;
		this.heart = null;
	}
	,__class__: elements.DamageEffect
});
elements.Diamond = function() {
	this.startCollect = false;
	this.fromMonkey = false;
	this.fromChest = false;
	this.startFolow = false;
	this.heroRadius = 200;
	this.cost = 1;
	elements.BasicElements.call(this);
	this.halfW = 16;
};
$hxClasses["elements.Diamond"] = elements.Diamond;
elements.Diamond.__name__ = ["elements","Diamond"];
elements.Diamond.__super__ = elements.BasicElements;
elements.Diamond.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "Diamond";
	}
	,activate: function(data) {
		this.active = true;
		if(this.graphic == null) {
			this.graphic = new com.jdtiles.jda.TileClip(scenes.additional.Game.instance.eManager,this.name);
			scenes.additional.Game.instance.eManager.addChildAt(this.graphic,scenes.additional.Game.instance.getLastIndex());
		} else scenes.additional.Game.instance.eManager.setChildIndex(this.graphic,scenes.additional.Game.instance.getLastIndex() - 1);
		if(data[0] == 1) {
			this.fromChest = true;
			this.fromMonkey = false;
			this.graphic.gotoAndStop(1);
			this.cost = 2 + Std["int"](com.tools.DataManager.getInstance().getData("powerUpgrade3"));
			this.graphic.x = data[1];
			com.sound.SoundManager.playSFX("Collect" + com.tools.Tools.randTo(1,3));
			motion.Actuate.tween(this.graphic,12,{ x : 167 + 25 * scenes.additional.Game.instance.hero.maxhealth - com.Variables.shiftX, y : 40 - com.Variables.shiftY}).ease(motion.easing.Linear.get_easeNone()).onComplete($bind(this,this.collect));
		} else if(data[0] == 2) {
			this.fromMonkey = true;
			this.fromChest = false;
			this.graphic.gotoAndStop(1);
			this.cost = 2;
			this.graphic.x = data[1];
		} else {
			this.fromMonkey = false;
			this.fromChest = false;
			this.graphic.gotoAndStop(0);
			this.cost = 1;
			this.graphic.x = data[1] + scenes.additional.Game.instance.get_x() + this.halfW;
		}
		this.graphic.y = data[2];
		this.graphic.alpha = 1;
		this.graphic.loop = false;
		data = [];
		data = null;
		this.startCollect = false;
		this.startFolow = false;
		this.deactiveX = -this.graphic.get_halfwidth();
	}
	,collect: function() {
		scenes.LevelBuilder.getInstance().health.collectDiamond(this.cost);
		this.deactivate();
	}
	,update: function(stepX) {
		if(this.fromChest == true || this.startCollect == true) return;
		this.graphic.x -= stepX;
		this.distance = com.tools.Tools.calcDistOfDots(this.graphic.x,this.graphic.y,scenes.additional.Game.instance.hero.graphic.x,scenes.additional.Game.instance.hero.graphic.y);
		if(scenes.additional.Game.instance.magnetOn == true && this.distance <= this.heroRadius || this.startFolow == true) {
			this.startFolow = true;
			if(this.moveObject(this.graphic,scenes.additional.Game.instance.hero.graphic,20) == true) {
				this.startCollect = true;
				com.sound.SoundManager.playSFX("Collect" + com.tools.Tools.randTo(1,3));
				var path = new motion.MotionPath().bezier(167 + 25 * scenes.additional.Game.instance.hero.maxhealth - com.Variables.shiftX,40 - com.Variables.shiftY,this.graphic.x + 300,this.graphic.y - 150);
				motion.Actuate.motionPath(this.graphic,20,{ x : path.get_x(), y : path.get_y()}).ease(motion.easing.Linear.get_easeNone()).onComplete($bind(this,this.collect));
			}
		}
		if(this.startFolow == false) {
			if(this.fromMonkey == false) this.checkDouble();
			if(this.distance <= 60) this.startFolow = true;
		}
		if(this.graphic.x < this.deactiveX) this.deactivate();
	}
	,checkDouble: function() {
		if(scenes.additional.Game.instance.doubleOn == true && this.graphic.get_currentFrame() == 0) {
			this.graphic.gotoAndStop(1);
			this.cost = 2;
		} else if(scenes.additional.Game.instance.doubleOn == false && this.graphic.get_currentFrame() == 1) {
			this.graphic.gotoAndStop(0);
			this.cost = 1;
		}
	}
	,moveObject: function(obj,target,speed) {
		var dx = target.x - obj.x;
		var dy = target.y - obj.y;
		if(dx * dx + dy * dy < speed * speed) {
			obj.x = target.x;
			obj.y = target.y;
			return true;
		} else {
			var angleRads = Math.atan2(dy,dx);
			var vx = Math.cos(angleRads) * speed;
			var vy = Math.sin(angleRads) * speed;
			obj.x += vx;
			obj.y += vy;
		}
		return false;
	}
	,deactivate: function() {
		this.graphic.alpha = 0;
		this.active = false;
	}
	,free: function() {
		this.graphic = null;
	}
	,__class__: elements.Diamond
});
elements.Dodge = function() {
	this.alphaMinus = 0.01;
	this.smallPause = 0;
	elements.BasicElements.call(this);
	this.halfW = 25;
};
$hxClasses["elements.Dodge"] = elements.Dodge;
elements.Dodge.__name__ = ["elements","Dodge"];
elements.Dodge.__super__ = elements.BasicElements;
elements.Dodge.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "Dodge";
	}
	,activate: function(data) {
		this.active = true;
		if(this.text == null) {
			this.text = com.tools.Tools.addText(com.Variables.getText("dodge"),24,0,0,400,100,Main.color2);
			scenes.additional.Game.instance.eManager.view.addChild(this.text);
		}
		this.text.set_x(data[1] - 120);
		this.text.set_y(data[2] - 10);
		this.text.set_alpha(1);
		this.alphaMinus = 0.01;
	}
	,update: function(stepX) {
		var _g = this.text;
		_g.set_x(_g.get_x() - stepX);
		var _g1 = this.text;
		_g1.set_y(_g1.get_y() - 3);
		this.smallPause++;
		if(this.smallPause >= 5) {
			var _g2 = this.text;
			_g2.set_alpha(_g2.get_alpha() - 0.03);
			if(this.text.get_alpha() <= 0) this.deactivate();
		}
	}
	,deactivate: function() {
		this.active = false;
		this.text.set_alpha(0);
	}
	,free: function() {
		this.text = null;
	}
	,__class__: elements.Dodge
});
elements.Enemy1 = function() {
	this.thisIsStone = false;
	this.broke = false;
	this.rand = 0;
	elements.BasicElements.call(this);
	this.arrParts = new Array();
	this.halfW = 39;
};
$hxClasses["elements.Enemy1"] = elements.Enemy1;
elements.Enemy1.__name__ = ["elements","Enemy1"];
elements.Enemy1.__super__ = elements.BasicElements;
elements.Enemy1.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "Enemy1";
	}
	,activate: function(data) {
		this.active = true;
		this.broke = false;
		var gx = data[1] + scenes.additional.Game.instance.get_x() + this.halfW;
		var gy = data[2];
		if(this.graphic == null) {
			this.rand = com.tools.Tools.randTo(1,3);
			if(this.rand == 1) {
				this.thisIsStone = true;
				this.graphic = new com.jdtiles.jda.TileClip(scenes.additional.Game.instance.eManager,"Stone2");
				scenes.additional.Game.instance.eManager.addChildAt(this.graphic,scenes.additional.Game.instance.getLastIndex());
				this.graphic.y = gy - 5;
				this.addPart("Stone3",gx,this.graphic.y,1);
				this.addPart("Stone4",gx,this.graphic.y,0.8);
				this.addPart("Stone5",gx,this.graphic.y,0.7);
			} else if(this.rand == 2) {
				this.thisIsStone = true;
				this.graphic = new com.jdtiles.jda.TileClip(scenes.additional.Game.instance.eManager,"Stone1");
				scenes.additional.Game.instance.eManager.addChildAt(this.graphic,scenes.additional.Game.instance.getLastIndex());
				this.graphic.y = gy - 7;
				this.addPart("Stone3",gx,this.graphic.y,1);
				this.addPart("Stone4",gx,this.graphic.y,0.8);
				this.addPart("Stone5",gx,this.graphic.y,0.7);
			} else if(this.rand == 3) {
				this.thisIsStone = false;
				this.graphic = new com.jdtiles.jda.TileClip(scenes.additional.Game.instance.eManager,"Stump");
				scenes.additional.Game.instance.eManager.addChildAt(this.graphic,scenes.additional.Game.instance.getLastIndex());
				this.graphic.y = gy - 5;
				this.addPart("Bark1",gx,this.graphic.y,1);
				this.addPart("Bark2",gx,this.graphic.y,0.7);
				this.addPart("Bark3",gx,this.graphic.y,0.8);
			}
		} else {
			if(this.rand == 1) this.graphic.y = gy - 5; else if(this.rand == 2) this.graphic.y = gy - 7; else if(this.rand == 3) this.graphic.y = gy - 5;
			scenes.additional.Game.instance.eManager.setChildIndex(this.graphic,scenes.additional.Game.instance.getLastIndex() - 1);
			var _g1 = 0;
			var _g = this.arrParts.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.arrParts[i].x = gx;
				this.arrParts[i].y = this.graphic.y;
				scenes.additional.Game.instance.eManager.setChildIndex(this.arrParts[i],scenes.additional.Game.instance.getLastIndex() - 1);
			}
		}
		this.graphic.x = gx;
		this.graphic.set_currentFrame(0);
		this.graphic.alpha = 1;
		this.deactiveX = -this.graphic.get_halfwidth();
		data = [];
		data = null;
	}
	,addPart: function(name,x,y,mass) {
		var tempPart = new effects.ScatteringParts(scenes.additional.Game.instance.eManager,name,mass);
		tempPart.x = x;
		tempPart.y = y;
		tempPart.alpha = 0;
		scenes.additional.Game.instance.eManager.addChildAt(tempPart,scenes.additional.Game.instance.getLastIndex());
		this.arrParts.push(tempPart);
		tempPart = null;
	}
	,deactivate: function() {
		this.active = false;
		this.graphic.alpha = 0;
		var _g = 0;
		var _g1 = this.arrParts;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.end();
		}
	}
	,update: function(stepX) {
		this.graphic.x -= stepX;
		var _g = 0;
		var _g1 = this.arrParts;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.update(stepX);
		}
		if(this.graphic.x < this.deactiveX) this.deactivate();
		if(this.broke == false && com.tools.Tools.calcDistOfDots(this.graphic.x,this.graphic.y,scenes.additional.Game.instance.hero.graphic.x,scenes.additional.Game.instance.hero.graphic.y) <= 40) {
			this.broke = true;
			scenes.additional.Game.instance.hero.onContact("Scattering",null,this);
		}
	}
	,action: function() {
		if(this.thisIsStone == true) com.sound.SoundManager.playSFX("CrushStone" + com.tools.Tools.randTo(1,2)); else com.sound.SoundManager.playSFX("CrushWood" + com.tools.Tools.randTo(1,2));
		this.graphic.set_currentFrame(1);
		var _g = 0;
		var _g1 = this.arrParts;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.start(scenes.additional.Game.instance.hero.graphic.x,scenes.additional.Game.instance.hero.graphic.y + scenes.additional.Game.instance.hero.graphic.get_halfheight());
		}
	}
	,free: function() {
		this.graphic = null;
		this.arrParts = [];
		this.arrParts = null;
	}
	,__class__: elements.Enemy1
});
elements.Enemy2 = function() {
	elements.BasicElements.call(this);
	this.halfW = 25;
};
$hxClasses["elements.Enemy2"] = elements.Enemy2;
elements.Enemy2.__name__ = ["elements","Enemy2"];
elements.Enemy2.__super__ = elements.BasicElements;
elements.Enemy2.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "Enemy2";
		this.body = com.tools.NapeTools.createBox2((function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this)),50,80);
		this.body.get_userData().data = "FullDamage";
	}
	,activate: function(data) {
		this.active = true;
		data[1] += this.halfW;
		this.body.get_position().setxy(data[1] - com.Variables.oW,data[2] - com.Variables.oH);
		if(this.graphic == null) {
			this.graphic = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.eManager,"Enemy2_1");
			scenes.additional.Game.instance.eManager.addChildAt(this.graphic,scenes.additional.Game.instance.getLastIndex());
		} else scenes.additional.Game.instance.eManager.setChildIndex(this.graphic,scenes.additional.Game.instance.getLastIndex() - 1);
		this.graphic.x = data[1] + scenes.additional.Game.instance.get_x();
		this.graphic.y = data[2];
		this.graphic.alpha = 1;
		this.deactiveX = -this.graphic.get_halfwidth();
		data = [];
		data = null;
		this.body.set_space(com.World.space);
	}
	,deactivate: function() {
		this.active = false;
		this.graphic.alpha = 0;
		this.body.set_space(null);
	}
	,update: function(stepX) {
		this.graphic.x -= stepX;
		if(this.graphic.x < this.deactiveX) this.deactivate();
	}
	,free: function() {
		this.graphic = null;
		this.body = null;
	}
	,__class__: elements.Enemy2
});
elements.Flower = function() {
	this.startAnim = false;
	this.bulletTime = 0;
	this.timer = 999;
	this.reloadTime = 55;
	this.reload = true;
	elements.BasicElements.call(this);
	this.halfW = 40;
};
$hxClasses["elements.Flower"] = elements.Flower;
elements.Flower.__name__ = ["elements","Flower"];
elements.Flower.__super__ = elements.BasicElements;
elements.Flower.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "Flower";
	}
	,activate: function(data) {
		this.active = true;
		if(this.graphic == null) {
			this.graphic = new com.jdtiles.jda.TileClip(scenes.additional.Game.instance.eManager,this.name);
			this.graphic.loop = false;
			scenes.additional.Game.instance.eManager.addChildAt(this.graphic,scenes.additional.Game.instance.getLastIndex());
		} else scenes.additional.Game.instance.eManager.setChildIndex(this.graphic,scenes.additional.Game.instance.getLastIndex() - 1);
		this.graphic.x = data[1] + scenes.additional.Game.instance.get_x() + this.halfW;
		this.graphic.y = data[2] - 5;
		this.graphic.alpha = 1;
		this.deactiveX = -this.graphic.get_halfwidth();
		data = [];
		data = null;
	}
	,update: function(stepX) {
		this.graphic.x -= stepX;
		this.shootUpdate();
		if(this.graphic.x < this.deactiveX) this.deactivate();
	}
	,deactivate: function() {
		this.active = false;
		this.graphic.alpha = 0;
		this.timer = 999;
		this.bulletTime = 0;
		this.startAnim = false;
	}
	,shootUpdate: function() {
		if(this.startAnim == false) {
			this.timer++;
			if(this.timer > this.reloadTime) {
				this.timer = 0;
				this.graphic.play();
				this.startAnim = true;
			}
		} else {
			this.bulletTime++;
			if(this.bulletTime >= 6) {
				this.shoot();
				this.startAnim = false;
				this.bulletTime = 0;
			}
		}
	}
	,shoot: function() {
		scenes.additional.Game.instance.eManager.addElement("Bullet",[0,this.graphic.x,this.graphic.y]);
	}
	,free: function() {
		this.graphic = null;
	}
	,__class__: elements.Flower
});
elements.HeroState = $hxClasses["elements.HeroState"] = { __ename__ : true, __constructs__ : ["start","stand","run","jump","jumpDouble","jumpOff","dip","beat","blowOrange","startSlide","slide","dead","finish"] };
elements.HeroState.start = ["start",0];
elements.HeroState.start.toString = $estr;
elements.HeroState.start.__enum__ = elements.HeroState;
elements.HeroState.stand = ["stand",1];
elements.HeroState.stand.toString = $estr;
elements.HeroState.stand.__enum__ = elements.HeroState;
elements.HeroState.run = ["run",2];
elements.HeroState.run.toString = $estr;
elements.HeroState.run.__enum__ = elements.HeroState;
elements.HeroState.jump = ["jump",3];
elements.HeroState.jump.toString = $estr;
elements.HeroState.jump.__enum__ = elements.HeroState;
elements.HeroState.jumpDouble = ["jumpDouble",4];
elements.HeroState.jumpDouble.toString = $estr;
elements.HeroState.jumpDouble.__enum__ = elements.HeroState;
elements.HeroState.jumpOff = ["jumpOff",5];
elements.HeroState.jumpOff.toString = $estr;
elements.HeroState.jumpOff.__enum__ = elements.HeroState;
elements.HeroState.dip = ["dip",6];
elements.HeroState.dip.toString = $estr;
elements.HeroState.dip.__enum__ = elements.HeroState;
elements.HeroState.beat = ["beat",7];
elements.HeroState.beat.toString = $estr;
elements.HeroState.beat.__enum__ = elements.HeroState;
elements.HeroState.blowOrange = ["blowOrange",8];
elements.HeroState.blowOrange.toString = $estr;
elements.HeroState.blowOrange.__enum__ = elements.HeroState;
elements.HeroState.startSlide = ["startSlide",9];
elements.HeroState.startSlide.toString = $estr;
elements.HeroState.startSlide.__enum__ = elements.HeroState;
elements.HeroState.slide = ["slide",10];
elements.HeroState.slide.toString = $estr;
elements.HeroState.slide.__enum__ = elements.HeroState;
elements.HeroState.dead = ["dead",11];
elements.HeroState.dead.toString = $estr;
elements.HeroState.dead.__enum__ = elements.HeroState;
elements.HeroState.finish = ["finish",12];
elements.HeroState.finish.toString = $estr;
elements.HeroState.finish.__enum__ = elements.HeroState;
elements.HeroExtra = $hxClasses["elements.HeroExtra"] = { __ename__ : true, __constructs__ : ["none","damage1hp","damageFullHp","shield","defeat"] };
elements.HeroExtra.none = ["none",0];
elements.HeroExtra.none.toString = $estr;
elements.HeroExtra.none.__enum__ = elements.HeroExtra;
elements.HeroExtra.damage1hp = ["damage1hp",1];
elements.HeroExtra.damage1hp.toString = $estr;
elements.HeroExtra.damage1hp.__enum__ = elements.HeroExtra;
elements.HeroExtra.damageFullHp = ["damageFullHp",2];
elements.HeroExtra.damageFullHp.toString = $estr;
elements.HeroExtra.damageFullHp.__enum__ = elements.HeroExtra;
elements.HeroExtra.shield = ["shield",3];
elements.HeroExtra.shield.toString = $estr;
elements.HeroExtra.shield.__enum__ = elements.HeroExtra;
elements.HeroExtra.defeat = ["defeat",4];
elements.HeroExtra.defeat.toString = $estr;
elements.HeroExtra.defeat.__enum__ = elements.HeroExtra;
elements.HeroOnGround = $hxClasses["elements.HeroOnGround"] = { __ename__ : true, __constructs__ : ["floor","platform","air"] };
elements.HeroOnGround.floor = ["floor",0];
elements.HeroOnGround.floor.toString = $estr;
elements.HeroOnGround.floor.__enum__ = elements.HeroOnGround;
elements.HeroOnGround.platform = ["platform",1];
elements.HeroOnGround.platform.toString = $estr;
elements.HeroOnGround.platform.__enum__ = elements.HeroOnGround;
elements.HeroOnGround.air = ["air",2];
elements.HeroOnGround.air.toString = $estr;
elements.HeroOnGround.air.__enum__ = elements.HeroOnGround;
elements.HeroAdditional = $hxClasses["elements.HeroAdditional"] = { __ename__ : true, __constructs__ : ["none","damping","speedUp"] };
elements.HeroAdditional.none = ["none",0];
elements.HeroAdditional.none.toString = $estr;
elements.HeroAdditional.none.__enum__ = elements.HeroAdditional;
elements.HeroAdditional.damping = ["damping",1];
elements.HeroAdditional.damping.toString = $estr;
elements.HeroAdditional.damping.__enum__ = elements.HeroAdditional;
elements.HeroAdditional.speedUp = ["speedUp",2];
elements.HeroAdditional.speedUp.toString = $estr;
elements.HeroAdditional.speedUp.__enum__ = elements.HeroAdditional;
elements.Hero = function() {
	this.iCanJumpOff = false;
	this.iCanSlide = false;
	this.iCanJump = false;
	this.cannotBeat = false;
	this.dodgePercent = 0;
	this.canUseDoubleJump = 0;
	this.bodyX = 0;
	this.boolDamage = false;
	this.timeDamage = 32;
	this.counterDamage = 0;
	this.timeSlide = 18;
	this.counterSlide = 0;
	this.slideSpeed = 120;
	this.startSpeedRun = 235;
	this.startSpeedDamping = 150;
	this.doubleJumpActive = false;
	this.goDownImpHave = false;
	this.acceleration = 5;
	this.speedDamping = 0;
	this.maxhealth = 3;
	this.health = 3;
	this.moveBody = false;
	this.powerStartSlide = 1000;
	this.powerJumpOff = 600;
	this.powerJump = 2700;
};
$hxClasses["elements.Hero"] = elements.Hero;
elements.Hero.__name__ = ["elements","Hero"];
elements.Hero.prototype = {
	init: function() {
		this.maxhealth = 3 + Std["int"](com.tools.DataManager.getInstance().getData("heroUpgrade0"));
		this.health = this.maxhealth;
		this.startSpeedRun = 245 + 5 * Std["int"](com.tools.DataManager.getInstance().getData("heroUpgrade1"));
		this.dodgePercent = 7 * Std["int"](com.tools.DataManager.getInstance().getData("heroUpgrade2"));
		this.canUseDoubleJump = Std["int"](com.tools.DataManager.getInstance().getData("doubleJump"));
		if(com.tools.DataManager.getInstance().getData("iCanJump") != null) this.iCanJump = true;
		if(com.tools.DataManager.getInstance().getData("iCanSlide") != null) this.iCanSlide = true;
		if(com.tools.DataManager.getInstance().getData("iCanJumpOff") != null) this.iCanJumpOff = true;
		this.body = com.tools.NapeTools.createBox(com.World.space,(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
			return $r;
		}(this)),30,40,-190,380);
		this.block = new nape.shape.Polygon(nape.shape.Polygon.rect(-15,-45,30,30));
		this.body.zpp_inner.wrap_shapes.add(this.block);
		this.body.get_userData().data = "Hero";
		this.body.get_userData().link = this;
		this.body.set_allowRotation(false);
		this.body.setShapeMaterials(com.tools.NapeTools.SetShapeMaterials(1,0,0));
		this.body.set_mass(4.2);
		this.bodyFloor = com.tools.NapeTools.createBox(com.World.space,(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
			return $r;
		}(this)),100,10,this.body.get_position().get_x(),417);
		this.bodyFloor.get_userData().data = "PlatformFloor";
		this.graphic = new com.jdtiles.jda.TileClip(scenes.additional.Game.instance.eManager,"Hero");
		this.graphic.breakTile("stand",0,0,false);
		this.graphic.breakTile("run",0,9,true,15);
		this.graphic.breakTile("slide",12,12,false);
		this.graphic.breakTile("fall",11,11,false);
		this.graphic.breakTile("jump",10,10,false);
		this.graphic.breakTile("beat",13,20,true,15,false);
		this.graphic.breakTile("blowOrange",21,24,true,20,false);
		this.graphic.breakTile("blowOrange2",25,27,true,20,false);
		this.graphic.onComplete = $bind(this,this.animComplete);
		scenes.additional.Game.instance.eManager.addChild(this.graphic);
		this.set_currState(elements.HeroState.start);
		this.set_currExtra(elements.HeroExtra.none);
		this.set_currAdditional(elements.HeroAdditional.none);
		this.shield = new effects.ShieldEffect();
		this.oranges = new elements.Oranges();
	}
	,standTutorial: function() {
		if(this.get_currState() == elements.HeroState.slide) this.set_currState(elements.HeroState.run);
		this.graphic.set_currentAnim("stand");
		this.graphic.set_rotationRad(0);
	}
	,blowOrange: function() {
		if(this.get_currState() == elements.HeroState.start || this.get_currState() == elements.HeroState.stand || this.get_currState() == elements.HeroState.beat || this.get_currState() == elements.HeroState.dead) return;
		this.set_currState(elements.HeroState.blowOrange);
	}
	,control: function(value) {
		if(this.get_currState() == elements.HeroState.start || this.get_currState() == elements.HeroState.beat || this.get_currState() == elements.HeroState.dead) return;
		if(value == scenes.TypeControl.mouseUp && this.iCanJump == true) {
			if(this.get_currState() == elements.HeroState.stand) this.set_currState(elements.HeroState.run); else if(this.get_currState() == elements.HeroState.run || this.get_currState() == elements.HeroState.slide) this.setJump(this.powerJump); else if(this.doubleJumpActive == true && this.canUseDoubleJump == 1) this.set_currState(elements.HeroState.jumpDouble);
		} else if(value == scenes.TypeControl.slideRight && this.get_currState() != elements.HeroState.slide && this.iCanSlide == true) {
			if(this.get_currState() == elements.HeroState.run || this.get_currState() == elements.HeroState.blowOrange && this.currOnGround != elements.HeroOnGround.air) this.set_currState(elements.HeroState.slide); else {
				if(this.get_currState() == elements.HeroState.jump || this.get_currState() == elements.HeroState.jumpDouble) this.body.get_velocity().set_y(0);
				this.set_currState(elements.HeroState.startSlide);
			}
		} else if(value == scenes.TypeControl.slideDown && scenes.additional.Game.instance.jumpOff == false) {
			if(this.currOnGround == elements.HeroOnGround.floor) {
				if(this.iCanSlide == true) this.set_currState(elements.HeroState.slide);
			} else if(this.iCanJumpOff == true) this.set_currState(elements.HeroState.jumpOff);
		}
	}
	,update: function() {
		this.oranges.update();
		if(this.get_currAdditional() == elements.HeroAdditional.none) this.body.get_velocity().set_x(this.speed); else if(this.get_currAdditional() == elements.HeroAdditional.damping) {
			this.speedWithDamping = this.speed - this.speedDamping;
			if(this.speedWithDamping < 0) this.speedWithDamping = 0;
			this.body.get_velocity().set_x(this.speedWithDamping);
			this.speedDamping -= this.acceleration;
			if(this.speedDamping <= 0) this.set_currAdditional(elements.HeroAdditional.none);
		}
		this.bodyFloor.get_position().set_x(this.body.get_position().get_x());
		if(this.get_currState() == elements.HeroState.start) this.uSStart(); else if(this.get_currState() == elements.HeroState.jump || this.get_currState() == elements.HeroState.jumpOff) this.uSJump(); else if(this.get_currState() == elements.HeroState.jumpDouble) this.uSJumpDouble(); else if(this.get_currState() == elements.HeroState.slide) this.uSSlide(); else if(this.get_currState() == elements.HeroState.dead) this.uSDead();
		if(this.get_currExtra() == elements.HeroExtra.damage1hp && this.get_currState() != elements.HeroState.dead) this.uEDamage(); else if(this.get_currExtra() == elements.HeroExtra.shield) this.shield.update(this.graphic.x,this.graphic.y);
		if(this.graphic.x >= 1060) this.set_currState(elements.HeroState.finish);
	}
	,updateAW: function() {
		if(this.get_currState() == elements.HeroState.slide) this.graphic.y = this.body.get_position().get_y() + 18; else this.graphic.y = this.body.get_position().get_y() + 2;
		this.bodyX = this.body.get_position().get_x() + 145 + scenes.additional.Game.instance.get_x();
		if(this.get_currState() == elements.HeroState.slide || this.get_currState() == elements.HeroState.jumpDouble) this.bodyX -= 10; else if(this.bodyX < this.graphic.x && this.get_currState() != elements.HeroState.start) return;
		this.graphic.x = this.bodyX;
	}
	,uSStart: function() {
		if(this.graphic.x >= 295) this.set_currState(elements.HeroState.run);
	}
	,uSJump: function() {
		if(this.body.get_velocity().get_y() > 0) this.set_currState(elements.HeroState.dip);
	}
	,uSJumpDouble: function() {
		var _g = this.graphic;
		_g.set_rotationRad(_g.get_rotationRad() + 1);
		this.uSJump();
	}
	,uSSlide: function() {
		var _g = this.graphic;
		_g.set_rotationRad(_g.get_rotationRad() + 0.6);
		this.counterSlide++;
		if(this.counterSlide == this.timeSlide) this.set_currState(elements.HeroState.run);
	}
	,uSDead: function() {
		if(this.graphic.y >= 600) this.set_currExtra(elements.HeroExtra.defeat);
	}
	,uEDamage: function() {
		if(this.boolDamage == true) this.graphic.alpha += 0.25; else this.graphic.alpha -= 0.25;
		this.counterDamage++;
		if(this.counterDamage % 4 == 0) this.boolDamage = !this.boolDamage;
		if(this.counterDamage == this.timeDamage) this.set_currExtra(elements.HeroExtra.none);
	}
	,beat: function(monkey) {
		if(this.get_currExtra() == elements.HeroExtra.damage1hp || this.cannotBeat == true) {
			this.cannotBeat = false;
			return;
		}
		if(this.get_currState() == elements.HeroState.slide || this.get_currExtra() == elements.HeroExtra.shield) monkey.dead1(true); else {
			this.set_currState(elements.HeroState.beat);
			monkey.dead1();
		}
	}
	,get_currState: function() {
		return this._currState;
	}
	,set_currState: function(value) {
		if(this._currState == value || this._currState == elements.HeroState.dead) return value;
		if(this._currState == elements.HeroState.slide) this.block.translate(nape.geom.Vec2.get(0,-30,null));
		this._currState = value;
		this.graphic.set_rotationRad(0);
		if(this._currState == elements.HeroState.start) this.sSStart(); else if(this._currState == elements.HeroState.stand) this.sSStand(); else if(this._currState == elements.HeroState.run) this.sSRun(); else if(this._currState == elements.HeroState.jump) this.sSJump(); else if(this._currState == elements.HeroState.jumpDouble) this.sSJumpDouble(); else if(this._currState == elements.HeroState.jumpOff) this.sSJumpOff(); else if(this._currState == elements.HeroState.dip) this.sSDip(); else if(this._currState == elements.HeroState.blowOrange) this.sSBlowOrange(); else if(this._currState == elements.HeroState.beat) this.sSBeat(); else if(this._currState == elements.HeroState.startSlide) this.sSStartSlide(); else if(this._currState == elements.HeroState.slide) this.sSSlide(); else if(this._currState == elements.HeroState.finish) this.sSFinish(); else if(this._currState == elements.HeroState.dead) this.sSDead();
		return value;
	}
	,sSDead: function() {
		this.speed = 0;
		this.body.zpp_inner.wrap_shapes.at(0).set_sensorEnabled(true);
		this.body.zpp_inner.wrap_shapes.at(1).set_sensorEnabled(true);
		if(this.currOnGround == elements.HeroOnGround.air) this.applyImpuls(0,-1,1000); else this.applyImpuls(0,-1,2500);
		this.graphic.set_currentAnim("jump");
		scenes.LevelBuilder.getInstance().lose();
	}
	,sSBlowOrange: function() {
		this.graphic.set_currentAnim("blowOrange");
		if(this.currOnGround != elements.HeroOnGround.air) this.applyImpuls(0,-1,1000);
	}
	,sSStart: function() {
		this.speed = this.startSpeedRun;
		this.graphic.set_currentAnim("run");
	}
	,sSStand: function() {
		this.speed = 0;
		this.graphic.set_currentAnim("stand");
	}
	,sSRun: function() {
		this.doubleJumpActive = false;
		this.goDownImpHave = false;
		this.speed = this.startSpeedRun;
		this.graphic.set_currentAnim("run");
	}
	,sSJump: function() {
		com.sound.SoundManager.playSFX("heroJump");
		this.doubleJumpActive = true;
		this.speed = this.startSpeedRun;
		this.graphic.set_currentAnim("jump");
	}
	,sSJumpDouble: function() {
		com.sound.SoundManager.playSFX("heroDoubleJump");
		this.doubleJumpActive = false;
		this.body.get_velocity().set_y(0);
		this.applyImpuls(0,-1,this.powerJump);
		this.graphic.set_currentAnim("slide");
	}
	,sSJumpOff: function() {
		this.doubleJumpActive = false;
		scenes.additional.Game.instance.jumpOff = true;
		scenes.additional.Game.instance.ignorContact = true;
		if(this.currOnGround == elements.HeroOnGround.air) this.sSStartSlide(); else {
			this.body.get_velocity().set_y(0);
			this.graphic.set_currentAnim("jump");
			this.applyImpuls(0,-1,this.powerJumpOff);
		}
	}
	,sSDip: function() {
		this.speed = this.startSpeedRun;
		this.graphic.set_currentAnim("fall");
	}
	,sSBeat: function() {
		com.sound.SoundManager.playSFX("heroBeat");
		scenes.additional.Game.instance.jumpOff = false;
		scenes.additional.Game.instance.ignorContact = false;
		this.speed = 0;
		this.graphic.set_currentAnim("beat");
	}
	,sSStartSlide: function() {
		if(this.goDownImpHave == true) return;
		this.doubleJumpActive = false;
		this.goDownImpHave = true;
		if(this.body.get_velocity().get_y() < 0) this.body.get_velocity().set_y(0);
		this.applyImpuls(0,1,this.powerStartSlide);
		this.sSDip();
	}
	,sSSlide: function() {
		com.sound.SoundManager.playSFX("heroSlide");
		this.goDownImpHave = false;
		this.block.translate(nape.geom.Vec2.get(0,30,null));
		this.speed = this.startSpeedRun + this.slideSpeed;
		this.counterSlide = 0;
		this.graphic.set_currentAnim("slide");
	}
	,sSFinish: function() {
		this.body.get_velocity().setxy(0,0);
		this.speed = 0;
		this.graphic.stop();
		scenes.LevelBuilder.getInstance().levelComplete();
	}
	,get_currExtra: function() {
		return this._currExtra;
	}
	,set_currExtra: function(value) {
		if(this._currExtra == value || this.get_currState() == elements.HeroState.dead && value != elements.HeroExtra.defeat) return value;
		this._currExtra = value;
		if(this._currExtra == elements.HeroExtra.none) this.sENone(); else if(this._currExtra == elements.HeroExtra.damage1hp) this.sEDamage1hp(); else if(this._currExtra == elements.HeroExtra.damageFullHp) this.sEDamageFullHp(); else if(this._currExtra == elements.HeroExtra.defeat) this.sEDefeat(); else if(this._currExtra == elements.HeroExtra.shield) com.sound.SoundManager.playSFX("Shield");
		return value;
	}
	,sENone: function() {
		this.graphic.alpha = 1;
	}
	,sEDamage1hp: function() {
		this.set_currAdditional(elements.HeroAdditional.damping);
		com.sound.SoundManager.playSFX("heroDamage" + com.tools.Tools.randTo(1,2));
		this.counterDamage = 0;
		this.boolDamage = false;
		this.health -= 1;
		scenes.LevelBuilder.getInstance().health.loseHealth(this.health);
		scenes.additional.Game.instance.eManager.addElement("DamageEffect",[99,this.graphic.x - 70,this.graphic.y - 15]);
		if(this.health == 0) this.set_currState(elements.HeroState.dead);
	}
	,sEDamageFullHp: function() {
		com.sound.SoundManager.playSFX("heroDamage" + com.tools.Tools.randTo(1,2));
		this.health = 0;
		scenes.LevelBuilder.getInstance().health.loseHealth(this.health);
		this.set_currExtra(elements.HeroExtra.defeat);
	}
	,sEDefeat: function() {
		scenes.LevelBuilder.getInstance().levelDefeat();
	}
	,get_currAdditional: function() {
		return this._currAdditional;
	}
	,set_currAdditional: function(value) {
		this._currAdditional = value;
		if(this._currAdditional == elements.HeroAdditional.damping) this.speedDamping = this.startSpeedDamping;
		return value;
	}
	,animComplete: function(e) {
		if(e.get_currentAnim() == "beat") this.set_currState(elements.HeroState.run); else if(e.get_currentAnim() == "blowOrange") {
			com.sound.SoundManager.playSFX("throwOrange");
			this.oranges.blow(this.graphic.x + 20,this.body.get_position().get_y() - 10,10);
			e.set_currentAnim("blowOrange2");
		} else if(e.get_currentAnim() == "blowOrange2") {
			if(this.currOnGround == elements.HeroOnGround.air) this.set_currState(elements.HeroState.dip); else this.set_currState(elements.HeroState.run);
		}
	}
	,onContact: function(contact,income,incomeClass) {
		if(contact == "Platform" || contact == "PlatformFloor") {
			if(contact == "Platform") {
				if(scenes.additional.Game.instance.jumpOff == true || income != null && this.body.get_position().get_y() > ((function($this) {
					var $r;
					if(income.zpp_inner.wrap_pos == null) income.zpp_inner.setupPosition();
					$r = income.zpp_inner.wrap_pos;
					return $r;
				}(this))).get_y()) return;
				com.sound.SoundManager.playSFX("heroLand");
				this.currOnGround = elements.HeroOnGround.platform;
			} else if(contact == "PlatformFloor") {
				com.sound.SoundManager.playSFX("heroLand");
				this.currOnGround = elements.HeroOnGround.floor;
				scenes.additional.Game.instance.jumpOff = false;
			}
			if(this.get_currState() == elements.HeroState.dip) this.set_currState(elements.HeroState.run); else if(this.get_currState() == elements.HeroState.startSlide) this.set_currState(elements.HeroState.slide);
		} else if(contact == "MonkeyDoll" && this.get_currState() != elements.HeroState.beat && (js.Boot.__cast(((function($this) {
			var $r;
			if(income.zpp_inner_i.userData == null) income.zpp_inner_i.userData = { };
			$r = income.zpp_inner_i.userData;
			return $r;
		}(this))).link , elements.Monkey)).get_currState() != elements.MonkeyState.dead) {
			if(this.get_currState() == elements.HeroState.dip) {
				this.cannotBeat = true;
				this.setJump(this.powerJump);
				((function($this) {
					var $r;
					if(income.zpp_inner_i.userData == null) income.zpp_inner_i.userData = { };
					$r = income.zpp_inner_i.userData;
					return $r;
				}(this))).link.onContact("JumpOnHead");
			} else if(this.get_currState() == elements.HeroState.jump || this.get_currState() == elements.HeroState.jumpDouble) {
				if(this.body.get_position().get_y() - 20 > ((function($this) {
					var $r;
					if(income.zpp_inner.wrap_pos == null) income.zpp_inner.setupPosition();
					$r = income.zpp_inner.wrap_pos;
					return $r;
				}(this))).get_y()) {
					this.cannotBeat = true;
					((function($this) {
						var $r;
						if(income.zpp_inner_i.userData == null) income.zpp_inner_i.userData = { };
						$r = income.zpp_inner_i.userData;
						return $r;
					}(this))).link.onContact("Threw");
					this.body.get_velocity().set_y(0);
					this.set_currState(elements.HeroState.dip);
				}
			}
		}
		if(this.get_currExtra() == elements.HeroExtra.damage1hp) return; else if(this.get_currExtra() == elements.HeroExtra.shield) {
			if(contact == "Bullet") incomeClass.deactivate(); else if(contact == "Scattering") incomeClass.action();
		} else {
			if(contact == "Damage" || contact == "Bullet" || contact == "Scattering" || contact == "DamageBush") {
				if(com.tools.Tools.randTo(1,100) <= this.dodgePercent) {
					scenes.additional.Game.instance.eManager.addElement("Dodge",[99,this.graphic.x - 70,this.graphic.y - 15]);
					return;
				}
			}
			if(contact == "Damage") this.set_currExtra(elements.HeroExtra.damage1hp); else if(contact == "Bullet") {
				this.set_currExtra(elements.HeroExtra.damage1hp);
				incomeClass.deactivate();
			} else if(contact == "Scattering") {
				this.set_currExtra(elements.HeroExtra.damage1hp);
				incomeClass.action();
			} else if(contact == "DamageBush") {
				if(this.get_currState() == elements.HeroState.dip && this.body.get_position().get_y() > ((function($this) {
					var $r;
					if(income.zpp_inner.wrap_pos == null) income.zpp_inner.setupPosition();
					$r = income.zpp_inner.wrap_pos;
					return $r;
				}(this))).get_y() + 50) return;
				this.set_currExtra(elements.HeroExtra.damage1hp);
			} else if(contact == "FullDamage") this.set_currExtra(elements.HeroExtra.damageFullHp);
		}
	}
	,endContact: function(contact,income) {
		if(contact == "Platform" && income != null && this.body.get_position().get_y() < ((function($this) {
			var $r;
			if(income.zpp_inner.wrap_pos == null) income.zpp_inner.setupPosition();
			$r = income.zpp_inner.wrap_pos;
			return $r;
		}(this))).get_y()) {
			if(this.get_currState() == elements.HeroState.run || this.get_currState() == elements.HeroState.slide) this.set_currState(elements.HeroState.dip);
			this.currOnGround = elements.HeroOnGround.air;
		} else if(contact == "PlatformFloor") this.currOnGround = elements.HeroOnGround.air;
	}
	,setJump: function(power) {
		this.set_currState(elements.HeroState.jump);
		this.body.get_velocity().set_y(0);
		this.applyImpuls(0,-1,power);
	}
	,applyImpuls: function(directionX,directionY,power) {
		var imp = new nape.geom.Vec2(directionX,directionY);
		imp.set_length(power);
		this.body.applyImpulse(imp);
	}
	,addShiled: function() {
		this.shield.add(this.graphic.x,this.graphic.y);
		this.set_currExtra(elements.HeroExtra.shield);
	}
	,isState: function(value) {
		if(this.get_currState() == value) return true;
		return false;
	}
	,free: function() {
		this.bodyFloor = null;
		this.body = null;
		this.block = null;
		this.graphic = null;
		this.shield.free();
		this.shield = null;
		this.oranges.free();
		this.oranges = null;
	}
	,__class__: elements.Hero
	,__properties__: {set_currAdditional:"set_currAdditional",get_currAdditional:"get_currAdditional",set_currExtra:"set_currExtra",get_currExtra:"get_currExtra",set_currState:"set_currState",get_currState:"get_currState"}
};
elements.MonkeyState = $hxClasses["elements.MonkeyState"] = { __ename__ : true, __constructs__ : ["stand","zamah","attack1","attack2","dead"] };
elements.MonkeyState.stand = ["stand",0];
elements.MonkeyState.stand.toString = $estr;
elements.MonkeyState.stand.__enum__ = elements.MonkeyState;
elements.MonkeyState.zamah = ["zamah",1];
elements.MonkeyState.zamah.toString = $estr;
elements.MonkeyState.zamah.__enum__ = elements.MonkeyState;
elements.MonkeyState.attack1 = ["attack1",2];
elements.MonkeyState.attack1.toString = $estr;
elements.MonkeyState.attack1.__enum__ = elements.MonkeyState;
elements.MonkeyState.attack2 = ["attack2",3];
elements.MonkeyState.attack2.toString = $estr;
elements.MonkeyState.attack2.__enum__ = elements.MonkeyState;
elements.MonkeyState.dead = ["dead",4];
elements.MonkeyState.dead.toString = $estr;
elements.MonkeyState.dead.__enum__ = elements.MonkeyState;
elements.Monkey = function() {
	this._totalScaleY = 1;
	this._totalScaleX = 1;
	this.jumpedOnHead = false;
	this.gravityY = 1;
	this.flew = false;
	this.counter = 0;
	this.canDamage = false;
	elements.BasicElements.call(this);
	this.halfW = 40;
};
$hxClasses["elements.Monkey"] = elements.Monkey;
elements.Monkey.__name__ = ["elements","Monkey"];
elements.Monkey.__super__ = elements.BasicElements;
elements.Monkey.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "Monkey";
		this.body = com.tools.NapeTools.createBox2((function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this)),40,20);
		this.body.zpp_inner.wrap_shapes.at(0).set_sensorEnabled(true);
		this.body.get_userData().data = "";
		this.body.get_userData().link = this;
		this.bodyDoll = com.tools.NapeTools.createBox2((function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this)),30,70);
		this.bodyDoll.zpp_inner.wrap_shapes.at(0).set_sensorEnabled(true);
		this.bodyDoll.get_userData().data = "MonkeyDoll";
		this.bodyDoll.get_userData().link = this;
	}
	,activate: function(data) {
		this.active = true;
		data[1] += this.halfW;
		this.body.get_position().setxy(data[1] - 88 - com.Variables.oW,data[2] + 10 - com.Variables.oH);
		this.bodyDoll.get_position().setxy(data[1] + 5 - com.Variables.oW,data[2] - com.Variables.oH);
		if(this.graphic == null) {
			this.graphic = new com.jdtiles.jda.TileClip(scenes.additional.Game.instance.eManager,this.name);
			this.graphic.breakTile("stand",0,0,false);
			this.graphic.breakTile("zamah",0,6,true,15,false);
			this.graphic.breakTile("damage1",7,8,true,30,false);
			this.graphic.breakTile("damage2",9,13,true,30,false);
			this.graphic.breakTile("dead1",14,16,true,30,false);
			this.graphic.breakTile("dead2",17,21,true,25,false);
			this.graphic.onComplete = $bind(this,this.completeAnim);
			scenes.additional.Game.instance.eManager.addChildAt(this.graphic,scenes.additional.Game.instance.getLastIndex());
		} else scenes.additional.Game.instance.eManager.setChildIndex(this.graphic,scenes.additional.Game.instance.getLastIndex() - 1);
		this.graphic.x = data[1] + scenes.additional.Game.instance.get_x();
		this.startY = data[2] - 6;
		this.graphic.y = this.startY;
		this.graphic.alpha = 1;
		this.graphic.loop = false;
		this.deactiveX = -this.graphic.get_halfwidth();
		data = [];
		data = null;
		this.flew = false;
		this.canDamage = false;
		this.body.set_space(com.World.space);
		this.bodyDoll.set_space(com.World.space);
		this.counter = 0;
		this.set_currState(elements.MonkeyState.stand);
		this.jumpedOnHead = false;
	}
	,deactivate: function() {
		this.graphic.alpha = 0;
		this.active = false;
		this.body.set_space(null);
		this.bodyDoll.set_space(null);
	}
	,update: function(stepX) {
		this.graphic.x -= stepX;
		if(this.get_currState() == elements.MonkeyState.stand && this.graphic.x - scenes.additional.Game.instance.hero.graphic.x <= 320) this.set_currState(elements.MonkeyState.zamah); else if(this.get_currState() == elements.MonkeyState.zamah) {
			this.counter += stepX;
			if(this.counter >= 230) {
				this.set_currState(elements.MonkeyState.attack1);
				com.sound.SoundManager.playSFX("throwOrange");
			}
		} else if(this.get_currState() == elements.MonkeyState.dead) {
			this.counter++;
			if(this.counter == 9) this.graphic.set_currentAnim("dead2");
		}
		if(this.get_currState() != elements.MonkeyState.dead && this.graphic.x > scenes.additional.Game.instance.hero.graphic.x) {
			this.distance = com.tools.Tools.calcDistOfDots(this.graphic.x,this.graphic.y,scenes.additional.Game.instance.hero.graphic.x,scenes.additional.Game.instance.hero.graphic.y);
			if(this.graphic.x + 20 > scenes.additional.Game.instance.hero.graphic.x && this.distance <= 30) scenes.additional.Game.instance.hero.beat(this);
			var _g = 0;
			var _g1 = scenes.additional.Game.instance.hero.oranges.oranges;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i.active == false) continue;
				if(this.graphic.x - 15 < i.x && this.graphic.y + 40 > i.y && this.graphic.y - 40 < i.y) {
					i.end();
					this.dead1(true);
				}
			}
		}
		if(this.flew == true) {
			this.graphic.y += this.directionY;
			this.directionY = this.directionY + this.gravityY;
			if(this.graphic.y >= this.endY) {
				this.graphic.y = this.endY;
				this.flew = false;
			}
		}
		if(this.graphic.x < this.deactiveX) this.deactivate();
	}
	,dead1: function(_flew) {
		if(_flew == null) _flew = false;
		com.sound.SoundManager.playSFX("monkeyDead");
		scenes.additional.Game.instance.eManager.addElement("Diamond",[2,this.graphic.x,this.graphic.y]);
		this.startFlew(_flew);
		this.set_currState(elements.MonkeyState.dead);
		this.graphic.set_currentAnim("dead1");
	}
	,startFlew: function(_flew) {
		if(_flew == null) _flew = false;
		this.flew = _flew;
		if(this.flew == true) {
			this.endY = this.graphic.y;
			var angle = (30 + Math.random() * 30) * Math.PI / 180;
			var powerY = 10;
			this.directionY = -powerY * Math.sin(angle);
		}
	}
	,completeAnim: function(e) {
		if(this.get_currState() == elements.MonkeyState.attack1) {
			if(this.canDamage == true && scenes.additional.Game.instance.hero.get_currState() != elements.HeroState.slide) scenes.additional.Game.instance.hero.onContact("Damage");
			this.set_currState(elements.MonkeyState.attack2);
		}
	}
	,onContact: function(contact,income) {
		if(contact == "Hero" && this.canDamage == false) this.canDamage = true; else if(contact == "JumpOnHead" && this.jumpedOnHead == false) {
			this.jumpedOnHead = true;
			motion.Actuate.tween(this,4,{ totalScaleX : 1.2, totalScaleY : 0.8}).onComplete($bind(this,this.endTween));
		} else if(contact == "Threw") this.startFlew(true);
	}
	,endTween: function() {
		motion.Actuate.tween(this,4,{ totalScaleX : 0.9, totalScaleY : 1.1}).onComplete($bind(this,this.endTween2));
	}
	,endTween2: function() {
		motion.Actuate.tween(this,4,{ totalScaleX : 1, totalScaleY : 1});
	}
	,get_totalScaleX: function() {
		return this._totalScaleX;
	}
	,set_totalScaleX: function(value) {
		this._totalScaleX = value;
		this.graphic.set_scaleX(value);
		return value;
	}
	,get_totalScaleY: function() {
		return this._totalScaleY;
	}
	,set_totalScaleY: function(value) {
		this._totalScaleY = value;
		this.graphic.set_scaleY(value);
		this.graphic.y = this.startY + (1 - value) * 50;
		return value;
	}
	,endContact: function(contact,income) {
		if(contact == "Hero" && this.canDamage == true) this.canDamage = false;
	}
	,get_currState: function() {
		return this._currState;
	}
	,set_currState: function(value) {
		if(this._currState == value) return value;
		this._currState = value;
		var _g = this._currState;
		switch(_g[1]) {
		case 0:
			this.graphic.set_currentAnim("stand");
			break;
		case 1:
			this.graphic.set_currentAnim("zamah");
			break;
		case 2:
			this.graphic.set_currentAnim("damage1");
			break;
		case 3:
			this.graphic.set_currentAnim("damage2");
			break;
		case 4:
			this.counter = 0;
			break;
		}
		return value;
	}
	,free: function() {
		this.graphic = null;
		this.body = null;
		this.bodyDoll = null;
	}
	,__class__: elements.Monkey
	,__properties__: {set_totalScaleY:"set_totalScaleY",get_totalScaleY:"get_totalScaleY",set_totalScaleX:"set_totalScaleX",get_totalScaleX:"get_totalScaleX",set_currState:"set_currState",get_currState:"get_currState"}
});
elements.Monkey2 = function() {
	elements.Monkey.call(this);
	this.halfW = 57;
};
$hxClasses["elements.Monkey2"] = elements.Monkey2;
elements.Monkey2.__name__ = ["elements","Monkey2"];
elements.Monkey2.__super__ = elements.Monkey;
elements.Monkey2.prototype = $extend(elements.Monkey.prototype,{
	create: function() {
		this.name = "Monkey2";
		this.body = com.tools.NapeTools.createBox2((function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this)),40,20);
		this.body.zpp_inner.wrap_shapes.at(0).set_sensorEnabled(true);
		this.body.get_userData().data = "";
		this.body.get_userData().link = this;
		this.bodyDoll = com.tools.NapeTools.createBox2((function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this)),30,70);
		this.bodyDoll.zpp_inner.wrap_shapes.at(0).set_sensorEnabled(true);
		this.bodyDoll.get_userData().data = "MonkeyDoll";
		this.bodyDoll.get_userData().link = this;
	}
	,activate: function(data) {
		this.active = true;
		data[1] += this.halfW;
		this.body.get_position().setxy(data[1] - 88 - com.Variables.oW,data[2] + 10 - com.Variables.oH);
		this.bodyDoll.get_position().setxy(data[1] + 15 - com.Variables.oW,data[2] - com.Variables.oH);
		if(this.graphic == null) {
			this.graphic = new com.jdtiles.jda.TileClip(scenes.additional.Game.instance.eManager,this.name);
			this.graphic.breakTile("stand",0,0,false);
			this.graphic.breakTile("zamah",0,4,true,15,false);
			this.graphic.breakTile("damage1",5,6,true,30,false);
			this.graphic.breakTile("damage2",7,10,true,30,false);
			this.graphic.breakTile("dead1",11,13,true,30,false);
			this.graphic.breakTile("dead2",14,19,true,30,false);
			this.graphic.onComplete = $bind(this,this.completeAnim);
			scenes.additional.Game.instance.eManager.addChildAt(this.graphic,scenes.additional.Game.instance.getLastIndex());
		} else scenes.additional.Game.instance.eManager.setChildIndex(this.graphic,scenes.additional.Game.instance.getLastIndex() - 1);
		this.graphic.x = data[1] + scenes.additional.Game.instance.get_x();
		this.startY = data[2] - 4;
		this.graphic.y = this.startY;
		this.graphic.alpha = 1;
		this.graphic.loop = false;
		this.deactiveX = -this.graphic.get_halfwidth();
		data = [];
		data = null;
		this.flew = false;
		this.canDamage = false;
		this.body.set_space(com.World.space);
		this.bodyDoll.set_space(com.World.space);
		this.counter = 0;
		this.set_currState(elements.MonkeyState.stand);
		this.jumpedOnHead = false;
	}
	,deactivate: function() {
		this.graphic.alpha = 0;
		this.active = false;
		this.body.set_space(null);
		this.bodyDoll.set_space(null);
	}
	,update: function(stepX) {
		this.graphic.x -= stepX;
		if(this.get_currState() == elements.MonkeyState.stand && this.graphic.x - scenes.additional.Game.instance.hero.graphic.x <= 320) this.set_currState(elements.MonkeyState.zamah); else if(this.get_currState() == elements.MonkeyState.zamah) {
			this.counter += stepX;
			if(this.counter >= 220) {
				this.set_currState(elements.MonkeyState.attack1);
				com.sound.SoundManager.playSFX("throwOrange");
			}
		} else if(this.get_currState() == elements.MonkeyState.dead) {
			this.counter++;
			if(this.counter == 9) this.graphic.set_currentAnim("dead2");
		}
		if(this.get_currState() != elements.MonkeyState.dead && this.graphic.x > scenes.additional.Game.instance.hero.graphic.x) {
			this.distance = com.tools.Tools.calcDistOfDots(this.graphic.x,this.graphic.y,scenes.additional.Game.instance.hero.graphic.x,scenes.additional.Game.instance.hero.graphic.y);
			if(this.graphic.x + 30 > scenes.additional.Game.instance.hero.graphic.x && this.distance <= 30) scenes.additional.Game.instance.hero.beat(this);
			var _g = 0;
			var _g1 = scenes.additional.Game.instance.hero.oranges.oranges;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i.active == false) continue;
				if(this.graphic.x - 15 < i.x && this.graphic.y + 40 > i.y && this.graphic.y - 40 < i.y) {
					i.end();
					this.dead1(true);
				}
			}
		}
		if(this.flew == true) {
			this.graphic.y += this.directionY;
			this.directionY = this.directionY + this.gravityY;
			if(this.graphic.y >= this.endY) {
				this.graphic.y = this.endY;
				this.flew = false;
			}
		}
		if(this.graphic.x < this.deactiveX) this.deactivate();
	}
	,dead1: function(_flew) {
		if(_flew == null) _flew = false;
		com.sound.SoundManager.playSFX("monkeyDead");
		scenes.additional.Game.instance.eManager.addElement("Diamond",[2,this.graphic.x,this.graphic.y]);
		this.startFlew(_flew);
		this.set_currState(elements.MonkeyState.dead);
		this.graphic.set_currentAnim("dead1");
	}
	,startFlew: function(_flew) {
		if(_flew == null) _flew = false;
		this.flew = _flew;
		if(this.flew == true) {
			this.endY = this.graphic.y;
			var angle = (30 + Math.random() * 30) * Math.PI / 180;
			var powerY = 10;
			this.directionY = -powerY * Math.sin(angle);
		}
	}
	,completeAnim: function(e) {
		if(this.get_currState() == elements.MonkeyState.attack1) {
			if(this.canDamage == true) scenes.additional.Game.instance.hero.onContact("Damage");
			this.set_currState(elements.MonkeyState.attack2);
		}
	}
	,set_totalScaleY: function(value) {
		this._totalScaleY = value;
		this.graphic.set_scaleY(value);
		this.graphic.y = this.startY + (1 - value) * 50;
		return value;
	}
	,set_currState: function(value) {
		if(this._currState == value) return value;
		this._currState = value;
		var _g = this._currState;
		switch(_g[1]) {
		case 0:
			this.graphic.set_currentAnim("stand");
			break;
		case 1:
			this.graphic.set_currentAnim("zamah");
			break;
		case 2:
			this.graphic.set_currentAnim("damage1");
			break;
		case 3:
			this.graphic.set_currentAnim("damage2");
			break;
		case 4:
			this.counter = 0;
			break;
		}
		return value;
	}
	,free: function() {
		elements.Monkey.prototype.free.call(this);
	}
	,__class__: elements.Monkey2
});
elements.Oranges = function() {
	this.oranges = new Array();
};
$hxClasses["elements.Oranges"] = elements.Oranges;
elements.Oranges.__name__ = ["elements","Oranges"];
elements.Oranges.prototype = {
	blow: function(x,y,speedX) {
		scenes.LevelBuilder.getInstance().minusOrange();
		var _g = 0;
		var _g1 = this.oranges;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.active == false) {
				i.x = x;
				i.y = y;
				i.blow(speedX);
				return;
			}
		}
		var newOrange = new elements.Orange(scenes.additional.Game.instance.eManager,"orange");
		newOrange.x = x;
		newOrange.y = y;
		newOrange.blow(speedX);
		scenes.additional.Game.instance.eManager.addChild(newOrange);
		this.oranges.push(newOrange);
		newOrange = null;
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.oranges;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.active == true) i.update();
		}
	}
	,free: function() {
		this.oranges = [];
		this.oranges = null;
	}
	,__class__: elements.Oranges
};
elements.Orange = function(layer,tile) {
	this.active = false;
	this.endX = 1010;
	com.jdtiles.jda.TileSprite.call(this,layer,tile);
};
$hxClasses["elements.Orange"] = elements.Orange;
elements.Orange.__name__ = ["elements","Orange"];
elements.Orange.__super__ = com.jdtiles.jda.TileSprite;
elements.Orange.prototype = $extend(com.jdtiles.jda.TileSprite.prototype,{
	blow: function(_speed) {
		this.alpha = 1;
		this.active = true;
		this.speedX = _speed;
	}
	,update: function() {
		this.x += this.speedX;
		if(this.x >= this.endX) this.end();
	}
	,end: function() {
		this.alpha = 0;
		this.active = false;
	}
	,free: function() {
		com.jdtiles.jda.TileSprite.prototype.free.call(this);
	}
	,__class__: elements.Orange
});
elements.PickUpPlace = function() {
	this.type = 0;
	this.currentPower = "";
	this.powers = new Array();
	this.counter = 0;
	elements.BasicElements.call(this);
	this.halfW = 45;
};
$hxClasses["elements.PickUpPlace"] = elements.PickUpPlace;
elements.PickUpPlace.__name__ = ["elements","PickUpPlace"];
elements.PickUpPlace.__super__ = elements.BasicElements;
elements.PickUpPlace.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "PickUpPlace";
		this.powers = ["Magnet","Shield","DoubleD"];
	}
	,activate: function(data) {
		this.active = true;
		this.type = Math.floor(com.tools.Tools.randTo(0,this.powers.length - 1));
		this.currentPower = this.powers[this.type];
		if(this.graphicC1 == null) {
			this.graphicC1 = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.eManager,"powerUpBack");
			scenes.additional.Game.instance.eManager.addChildAt(this.graphicC1,scenes.additional.Game.instance.getLastIndex());
			this.graphicC2 = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.eManager,"powerUpBackAnim");
			scenes.additional.Game.instance.eManager.addChildAt(this.graphicC2,scenes.additional.Game.instance.getLastIndex());
			this.graphicC3 = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.eManager,"powerUpBackAnim");
			scenes.additional.Game.instance.eManager.addChildAt(this.graphicC3,scenes.additional.Game.instance.getLastIndex());
		} else {
			scenes.additional.Game.instance.eManager.setChildIndex(this.graphicC1,scenes.additional.Game.instance.getLastIndex() - 1);
			scenes.additional.Game.instance.eManager.setChildIndex(this.graphicC2,scenes.additional.Game.instance.getLastIndex() - 1);
			scenes.additional.Game.instance.eManager.setChildIndex(this.graphicC3,scenes.additional.Game.instance.getLastIndex() - 1);
		}
		this.graphic = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.eManager,this.currentPower);
		scenes.additional.Game.instance.eManager.addChildAt(this.graphic,scenes.additional.Game.instance.eManager.getChildIndex(scenes.additional.Game.instance.hero.graphic) - 1);
		this.graphic.x = data[1] + scenes.additional.Game.instance.get_x() + this.halfW;
		this.graphic.y = data[2];
		this.graphic.alpha = 1;
		this.graphicC1.x = this.graphicC2.x = this.graphicC3.x = this.graphic.x;
		this.graphicC1.y = this.graphicC2.y = this.graphicC3.y = this.graphic.y;
		this.graphicC1.alpha = this.graphicC2.alpha = 1;
		this.graphicC3.alpha = 0;
		this.graphicC3.set_scaleX(this.graphicC3.set_scaleY(0.91));
		this.counter = 0;
		this.deactiveX = -this.graphic.get_halfwidth();
		data = [];
		data = null;
	}
	,deactivate: function() {
		this.active = false;
		this.graphic.alpha = 0;
		this.graphicC1.alpha = this.graphicC2.alpha = this.graphicC3.alpha = 0;
	}
	,update: function(stepX) {
		this.graphic.x -= stepX;
		this.circlesUpdate(stepX);
		if(this.graphic.x < this.deactiveX) this.deactivate();
		if(com.tools.Tools.calcDistOfDots(this.graphic.x,this.graphic.y,scenes.additional.Game.instance.hero.graphic.x,scenes.additional.Game.instance.hero.graphic.y) <= 40) {
			this.addPowerUps();
			this.deactivate();
		}
	}
	,circlesUpdate: function(stepX) {
		this.graphicC1.x -= stepX;
		this.graphicC2.x -= stepX;
		this.graphicC3.x -= stepX;
		this.counter++;
		var _g = this.graphicC2;
		_g.set_scaleX(_g.get_scaleX() + 0.02);
		var _g1 = this.graphicC2;
		_g1.set_scaleY(_g1.get_scaleY() + 0.02);
		this.graphicC2.alpha -= 0.1;
		if(this.counter > 5 && this.counter < 10) {
			this.graphicC3.alpha = 1;
			var _g2 = this.graphicC3;
			_g2.set_scaleX(_g2.get_scaleX() + 0.02);
			var _g3 = this.graphicC3;
			_g3.set_scaleY(_g3.get_scaleY() + 0.02);
		} else if(this.counter == 10) {
			this.counter = 0;
			this.graphicC2.set_scaleX(this.graphicC2.set_scaleY(1));
			this.graphicC2.alpha = 1;
			this.graphicC3.alpha = 0;
			this.graphicC3.set_scaleX(this.graphicC3.set_scaleY(0.91));
		}
	}
	,addPowerUps: function() {
		com.sound.SoundManager.playSFX("pickUpPlace");
		scenes.additional.Game.instance.powerUp.addPowerUp(this.currentPower);
	}
	,free: function() {
		this.graphic = null;
		this.graphicC1 = null;
		this.graphicC2 = null;
		this.graphicC3 = null;
	}
	,__class__: elements.PickUpPlace
});
elements.Platform1 = function() {
	this.lastGraphicElement = -1;
	this.oldSize = 0;
	this.scale = 0;
	this.nativeW = 116;
	elements.BasicElements.call(this);
	this.oldSize = this.nativeW;
	this.graphic = new Array();
};
$hxClasses["elements.Platform1"] = elements.Platform1;
elements.Platform1.__name__ = ["elements","Platform1"];
elements.Platform1.__super__ = elements.BasicElements;
elements.Platform1.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "Platform1";
		this.body = com.tools.NapeTools.createBox2((function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this)),this.nativeW,20);
		this.body.get_userData().data = "Platform";
		this.body.get_cbTypes().add(ContactListener.oneWayType);
	}
	,activate: function(data) {
		this.active = true;
		this.currW = this.nativeW * data[3];
		this.halfW = this.currW / 2;
		this.scale = this.currW / this.oldSize;
		this.oldSize = this.currW;
		data[1] += this.halfW;
		this.body.get_position().setxy(data[1] - com.Variables.oW,data[2] - com.Variables.oH);
		this.body.scaleShapes(this.scale,1);
		var startX = data[1] + scenes.additional.Game.instance.get_x() - this.halfW + 42;
		var startY = data[2] + 43;
		var stepX = 56;
		var iter = Math.floor(this.currW / this.nativeW) + 1;
		var _g = 0;
		while(_g < iter) {
			var i = _g++;
			if(i == 0) this.addTile("ground0",startX,startY,1,0); else if(i == iter - 1) {
				this.lastGraphicElement = i;
				this.addTile("ground0",startX + 58 * (i - 1),startY,-1,0);
			} else this.addTile("ground" + com.tools.Tools.randTo(1,3),startX + (28 + 59 * (i - 1)),startY,1,0);
			startX += stepX;
		}
		this.deactiveX = -this.graphic[this.lastGraphicElement].get_halfwidth();
		data = [];
		data = null;
		this.body.set_space(com.World.space);
	}
	,addTile: function(_name,_x,_y,_sx,_index) {
		var _g = 0;
		var _g1 = this.graphic;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.alpha == 1) continue;
			i.alpha = 1;
			i.x = _x;
			i.y = _y;
			i.set_scaleX(_sx);
			i.set_tile(_name);
			scenes.additional.Game.instance.layer_4.setChildIndex(i,_index);
			return;
		}
		var temp = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.backgroundLayer,_name);
		temp.x = _x;
		temp.y = _y;
		temp.set_scaleX(_sx);
		scenes.additional.Game.instance.layer_4.addChildAt(temp,_index);
		this.graphic.push(temp);
		temp = null;
	}
	,deactivate: function() {
		this.body.set_space(null);
		var _g = 0;
		var _g1 = this.graphic;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.alpha = 0;
		}
		this.active = false;
	}
	,update: function(stepX) {
		var _g = 0;
		var _g1 = this.graphic;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.x -= stepX;
		}
		if(this.graphic[this.lastGraphicElement].x < this.deactiveX) this.deactivate();
	}
	,free: function() {
		this.graphic = [];
		this.graphic = null;
		this.body = null;
	}
	,__class__: elements.Platform1
});
elements.Platform2 = function() {
	this.lastGraphicElement = -1;
	this.oldSize = 0;
	this.scale = 0;
	this.nativeW = 250;
	elements.BasicElements.call(this);
	this.oldSize = this.nativeW;
	this.graphic = new Array();
};
$hxClasses["elements.Platform2"] = elements.Platform2;
elements.Platform2.__name__ = ["elements","Platform2"];
elements.Platform2.__super__ = elements.BasicElements;
elements.Platform2.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "Platform2";
		this.body = com.tools.NapeTools.createBox2((function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this)),this.nativeW,20);
		this.body.get_userData().data = "Platform";
		this.body.get_cbTypes().add(ContactListener.oneWayType);
	}
	,activate: function(data) {
		this.active = true;
		this.currW = this.nativeW * data[3];
		this.halfW = this.currW / 2;
		data[1] += this.halfW;
		this.scale = this.currW / this.oldSize;
		this.oldSize = this.currW;
		this.body.get_position().setxy(data[1] - com.Variables.oW,data[2] - com.Variables.oH);
		this.body.scaleShapes(this.scale,1);
		var startX = data[1] + scenes.additional.Game.instance.get_x() - this.halfW + 70;
		var startY = data[2] + 2;
		var stepX = 124;
		var iter = Math.floor(this.currW / 125);
		var _g = 0;
		while(_g < iter) {
			var i = _g++;
			if(i == 0) this.addTile("ground2_0",startX,startY,1,0); else if(i == iter - 1) {
				this.lastGraphicElement = i;
				this.addTile("ground2_0",startX,startY,-1,0);
			} else this.addTile("ground2_" + com.tools.Tools.randTo(1,2),startX,startY + 4,1,0);
			startX += stepX;
		}
		this.deactiveX = -this.graphic[this.lastGraphicElement].get_halfwidth();
		data = [];
		data = null;
		this.body.set_space(com.World.space);
	}
	,addTile: function(_name,_x,_y,_sx,_index) {
		var _g = 0;
		var _g1 = this.graphic;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.alpha == 1) continue;
			i.alpha = 1;
			i.x = _x;
			i.y = _y;
			i.set_scaleX(_sx);
			i.set_tile(_name);
			scenes.additional.Game.instance.layer_4.setChildIndex(i,_index);
			return;
		}
		var temp = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.backgroundLayer,_name);
		temp.x = _x;
		temp.y = _y;
		temp.set_scaleX(_sx);
		scenes.additional.Game.instance.layer_4.addChildAt(temp,_index);
		this.graphic.push(temp);
		temp = null;
	}
	,deactivate: function() {
		this.body.set_space(null);
		this.active = false;
		var _g = 0;
		var _g1 = this.graphic;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.alpha = 0;
		}
	}
	,update: function(stepX) {
		var _g = 0;
		var _g1 = this.graphic;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.x -= stepX;
		}
		if(this.graphic[this.lastGraphicElement].x < this.deactiveX) this.deactivate();
	}
	,free: function() {
		this.graphic = [];
		this.graphic = null;
		this.body = null;
	}
	,__class__: elements.Platform2
});
elements.RollingStone = function() {
	this.contact = false;
	this.speedR = 0.3;
	this.speedX = 10;
	elements.BasicElements.call(this);
	this.halfW = 30;
};
$hxClasses["elements.RollingStone"] = elements.RollingStone;
elements.RollingStone.__name__ = ["elements","RollingStone"];
elements.RollingStone.__super__ = elements.BasicElements;
elements.RollingStone.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "RollingStone";
		this.numChanel = scenes.additional.Game.instance.getChanelRollingStone();
	}
	,activate: function(data) {
		this.active = true;
		if(this.graphic == null) {
			this.graphic = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.eManager,this.name);
			this.graphic.set_offsetX(2);
			this.graphic.set_offsetY(3);
			scenes.additional.Game.instance.eManager.addChildAt(this.graphic,scenes.additional.Game.instance.getLastIndex());
		} else scenes.additional.Game.instance.eManager.setChildIndex(this.graphic,scenes.additional.Game.instance.getLastIndex() - 1);
		this.graphic.x = data[1] + scenes.additional.Game.instance.get_x() + this.halfW;
		this.graphic.y = data[2];
		this.graphic.alpha = 1;
		this.deactiveX = -this.graphic.get_halfwidth();
		this.contact = false;
		data = [];
		data = null;
		com.sound.SoundManager.playSFXRound("rollingStone",false,this.numChanel);
	}
	,deactivate: function() {
		this.graphic.alpha = 0;
		this.active = false;
		com.sound.SoundManager.stopSFX(this.numChanel);
	}
	,update: function(stepX) {
		this.graphic.x -= stepX + this.speedX;
		var _g = this.graphic;
		_g.set_rotationRad(_g.get_rotationRad() - this.speedR);
		if(this.graphic.x < this.deactiveX) this.deactivate();
		if(this.contact == false && com.tools.Tools.calcDistOfDots(this.graphic.x,this.graphic.y,scenes.additional.Game.instance.hero.graphic.x,scenes.additional.Game.instance.hero.graphic.y) <= 40) {
			this.contact = true;
			scenes.additional.Game.instance.hero.onContact("Damage");
		}
	}
	,free: function() {
		this.graphic = null;
	}
	,__class__: elements.RollingStone
});
elements.Tutorial = function() {
	this.tutorialComplete = false;
	this.tutComp2 = false;
	this.distance = 200;
	this.param = 0;
	this.pauseGame = false;
	elements.BasicElements.call(this);
	this.halfW = 100;
};
$hxClasses["elements.Tutorial"] = elements.Tutorial;
elements.Tutorial.__name__ = ["elements","Tutorial"];
elements.Tutorial.__super__ = elements.BasicElements;
elements.Tutorial.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "Tutorial";
	}
	,activate: function(data) {
		this.active = true;
		this.tutComp2 = false;
		if(this.graphicLeft == null) {
			this.graphicLeft = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.backgroundLayer,this.name);
			scenes.additional.Game.instance.layer_4.addChild(this.graphicLeft);
			this.graphicRight = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.backgroundLayer,this.name);
			this.graphicRight.set_scaleX(-1);
			scenes.additional.Game.instance.layer_4.addChild(this.graphicRight);
			this.graphicInfo = new com.jdtiles.jda.TileClip(scenes.additional.Game.instance.backgroundLayer,"infoTut");
			scenes.additional.Game.instance.layer_4.addChild(this.graphicInfo);
			this.hand = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.eManager,"hand");
			scenes.additional.Game.instance.eManager.addChild(this.hand);
			this.text = com.tools.Tools.addText("",16,0,0,200,100,Main.color1);
			scenes.additional.Game.instance.backgroundLayer.view.addChild(this.text);
		} else {
			scenes.additional.Game.instance.layer_4.setChildIndex(this.graphicLeft,scenes.additional.Game.instance.layer_4.get_numChildren() - 1);
			scenes.additional.Game.instance.layer_4.setChildIndex(this.graphicRight,scenes.additional.Game.instance.layer_4.get_numChildren() - 1);
			scenes.additional.Game.instance.layer_4.setChildIndex(this.graphicInfo,scenes.additional.Game.instance.layer_4.get_numChildren() - 1);
			scenes.additional.Game.instance.eManager.setChildIndex(this.hand,scenes.additional.Game.instance.eManager.get_numChildren() - 1);
		}
		this.hand.alpha = 0;
		this.graphicLeft.x = data[1] + scenes.additional.Game.instance.get_x() + 39;
		this.graphicRight.x = data[1] + scenes.additional.Game.instance.get_x() + 162;
		this.graphicInfo.x = data[1] + scenes.additional.Game.instance.get_x() + 100;
		this.graphicLeft.y = data[2];
		this.graphicLeft.alpha = 1;
		this.graphicRight.y = data[2];
		this.graphicRight.alpha = 1;
		this.param = data[3];
		this.graphicInfo.set_currentFrame(this.param - 1 | 0);
		this.graphicInfo.y = data[2] - 10;
		this.graphicInfo.alpha = 1;
		if(com.tools.DataManager.getInstance().getData("tutComp" + this.param) == null) this.tutorialComplete = false; else this.tutorialComplete = true;
		this.deactiveX = -65;
		if(this.param == 2) this.distance = 150; else if(this.param == 3) this.distance = 220; else if(this.param == 4) this.distance = 150; else if(this.param == 5) this.distance = 250; else if(this.param == 6 || this.param == 7) this.distance = 350; else if(this.param == 8) this.distance = -145;
		this.text.set_text(com.Variables.getText("tutorial" + this.param));
		this.text.set_x(data[1] + scenes.additional.Game.instance.get_x() + 2 + com.Variables.txtShiftX);
		if(this.param == 5 || this.param == 6) this.text.set_y(data[2] + 23 + com.Variables.txtShiftY); else this.text.set_y(data[2] + 35 + com.Variables.txtShiftY);
		this.text.set_alpha(1);
		data = [];
		data = null;
	}
	,deactivate: function() {
		this.active = false;
		this.graphicInfo.alpha = 0;
		this.graphicLeft.alpha = 0;
		this.graphicRight.alpha = 0;
		this.text.set_alpha(0);
		this.hand.alpha = 0;
		this.pauseGame = false;
	}
	,complete: function() {
		if(this.tutComp2 == true) return;
		this.tutComp2 = true;
		if(this.param == 1) {
			scenes.additional.Game.instance.hero.iCanJump = true;
			com.tools.DataManager.getInstance().saveData("iCanJump",1);
		} else if(this.param == 2) {
			scenes.additional.Game.instance.hero.iCanJumpOff = true;
			com.tools.DataManager.getInstance().saveData("iCanJumpOff",1);
		} else if(this.param == 3) {
			scenes.additional.Game.instance.hero.iCanSlide = true;
			com.tools.DataManager.getInstance().saveData("iCanSlide",1);
		} else if(this.param == 6) scenes.additional.Game.instance.hero.iCanJump = true;
		com.tools.DataManager.getInstance().saveData("tutComp" + this.param,1);
		this.param = 0;
		this.hand.alpha = 0;
		motion.Actuate.stop(this.hand,null,false,false);
	}
	,update: function(stepX) {
		this.graphicInfo.x -= stepX;
		this.graphicLeft.x -= stepX;
		this.graphicRight.x -= stepX;
		this.text.set_x(this.text.get_x() - stepX + com.Variables.txtShiftX);
		if(this.pauseGame == false && this.tutorialComplete == false && scenes.additional.Game.instance.hero.graphic.x >= this.graphicLeft.x - this.distance) {
			scenes.LevelBuilder.getInstance().tutorial = this;
			this.pauseGame = true;
			scenes.LevelBuilder.getInstance().tutorialActive = true;
			scenes.additional.Game.instance.hero.standTutorial();
			this.hand.alpha = 1;
			this.hand.set_scaleX(this.hand.set_scaleY(1));
			var _g = this.param;
			switch(_g) {
			case 1:case 8:
				this.startHand_1();
				break;
			case 2:
				this.startHand_2();
				break;
			case 3:case 5:
				this.startHand_3();
				break;
			case 7:
				this.startHand_7();
				break;
			case 4:case 6:
				this.hand.alpha = 0;
				break;
			}
		}
		if(this.graphicRight.x <= this.deactiveX) this.deactivate();
	}
	,startHand_1: function() {
		this.hand.x = this.graphicRight.x + 110;
		this.hand.y = this.graphicRight.y;
		motion.Actuate.tween(this.hand,15,{ scaleX : 0.9, scaleY : 0.9}).onComplete($bind(this,this.endHand_1));
	}
	,endHand_1: function() {
		motion.Actuate.tween(this.hand,15,{ scaleX : 1, scaleY : 1}).onComplete($bind(this,this.startHand_1));
	}
	,startHand_2: function() {
		this.hand.alpha = 1;
		this.hand.x = this.graphicRight.x + 110;
		this.hand.y = this.graphicRight.y;
		motion.Actuate.tween(this.hand,15,{ y : this.hand.y + 100}).onComplete($bind(this,this.endHand_2));
	}
	,endHand_2: function() {
		motion.Actuate.tween(this.hand,15,{ alpha : 1}).onComplete($bind(this,this.endHand_2_2));
	}
	,endHand_2_2: function() {
		motion.Actuate.tween(this.hand,15,{ alpha : 0}).onComplete($bind(this,this.startHand_2));
	}
	,startHand_3: function() {
		this.hand.alpha = 1;
		this.hand.x = 517;
		this.hand.y = 170;
		motion.Actuate.tween(this.hand,15,{ x : 620}).onComplete($bind(this,this.endHand_3));
	}
	,endHand_3: function() {
		motion.Actuate.tween(this.hand,15,{ alpha : 1}).onComplete($bind(this,this.endHand_3_2));
	}
	,endHand_3_2: function() {
		motion.Actuate.tween(this.hand,15,{ alpha : 0}).onComplete($bind(this,this.startHand_3));
	}
	,startHand_7: function() {
		this.hand.x = this.graphicLeft.x - 100;
		this.hand.y = this.graphicRight.y;
		motion.Actuate.tween(this.hand,15,{ scaleX : 0.9, scaleY : 0.9}).onComplete($bind(this,this.endHand_7));
	}
	,endHand_7: function() {
		motion.Actuate.tween(this.hand,15,{ scaleX : 1, scaleY : 1}).onComplete($bind(this,this.startHand_7));
	}
	,free: function() {
		this.graphicInfo = null;
		this.graphicLeft = null;
		this.graphicRight = null;
		this.text = null;
		this.hand = null;
	}
	,__class__: elements.Tutorial
});
elements.WalkingEnemy = function() {
	this.childX = 0;
	this.containerX = 0;
	this.speedX = 5;
	this.goToRight = true;
	this.contacted = false;
	elements.BasicElements.call(this);
};
$hxClasses["elements.WalkingEnemy"] = elements.WalkingEnemy;
elements.WalkingEnemy.__name__ = ["elements","WalkingEnemy"];
elements.WalkingEnemy.__super__ = elements.BasicElements;
elements.WalkingEnemy.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "WalkingEnemy";
	}
	,activate: function(data) {
		this.active = true;
		this.contacted = false;
		if(this.graphic == null) {
			this.graphic = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.eManager,"WalkingEnemy");
			scenes.additional.Game.instance.eManager.addChildAt(this.graphic,scenes.additional.Game.instance.getLastIndex());
		} else scenes.additional.Game.instance.eManager.setChildIndex(this.graphic,scenes.additional.Game.instance.getLastIndex() - 1);
		this.halfW = data[3];
		var gx = data[1] + scenes.additional.Game.instance.get_x();
		this.graphic.x = gx + this.halfW + data[5];
		this.graphic.y = data[2];
		this.containerX = gx + this.halfW + this.graphic.get_halfwidth();
		this.childX = data[5];
		this.rightEndX = this.halfW - this.graphic.get_halfwidth();
		this.leftEndX = -this.halfW;
		if(data[4] == 0) {
			this.goToRight = false;
			this.graphic.set_scaleX(-1);
		} else {
			this.goToRight = true;
			this.graphic.set_scaleX(1);
		}
		this.graphic.alpha = 1;
		data = [];
		data = null;
		this.deactiveX = -this.graphic.get_halfwidth();
	}
	,deactivate: function() {
		this.active = false;
		this.graphic.alpha = 0;
	}
	,update: function(stepX) {
		this.containerX -= stepX;
		if(this.goToRight == true) {
			this.childX += this.speedX;
			if(this.childX >= this.rightEndX) {
				this.childX = this.rightEndX;
				this.goToRight = false;
				this.graphic.set_scaleX(-1);
			}
		} else {
			this.childX -= this.speedX;
			if(this.childX <= this.leftEndX) {
				this.childX = this.leftEndX;
				this.goToRight = true;
				this.graphic.set_scaleX(1);
			}
		}
		this.graphic.x = this.containerX + this.childX;
		if(this.graphic.x < this.deactiveX) this.deactivate();
		if(this.contacted == false && com.tools.Tools.calcDistOfDots(this.graphic.x,this.graphic.y,scenes.additional.Game.instance.hero.graphic.x,scenes.additional.Game.instance.hero.graphic.y) <= 40) {
			this.contacted = true;
			scenes.additional.Game.instance.hero.onContact("Damage");
		}
	}
	,free: function() {
		this.graphic = null;
	}
	,__class__: elements.WalkingEnemy
});
elements.Wall = function() {
	elements.BasicElements.call(this);
	this.halfW = 25;
};
$hxClasses["elements.Wall"] = elements.Wall;
elements.Wall.__name__ = ["elements","Wall"];
elements.Wall.__super__ = elements.BasicElements;
elements.Wall.prototype = $extend(elements.BasicElements.prototype,{
	create: function() {
		this.name = "Wall";
		this.body = com.tools.NapeTools.createBox2((function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this)),50,140);
		this.body.zpp_inner.wrap_shapes.at(0).set_sensorEnabled(true);
		this.body.get_userData().data = "Damage";
	}
	,activate: function(data) {
		this.active = true;
		data[1] += this.halfW;
		this.body.get_position().setxy(data[1] - com.Variables.oW,data[2] - com.Variables.oH);
		if(this.graphic == null) {
			this.graphic = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.eManager,"Wall");
			scenes.additional.Game.instance.eManager.addChildAt(this.graphic,0);
			this.graphicRope = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.eManager,"rope");
			this.graphicRope.set_offsetY(-205);
			scenes.additional.Game.instance.eManager.addChildAt(this.graphicRope,0);
		} else {
			scenes.additional.Game.instance.eManager.setChildIndex(this.graphic,0);
			scenes.additional.Game.instance.eManager.setChildIndex(this.graphicRope,0);
		}
		this.graphic.x = data[1] + scenes.additional.Game.instance.get_x() + 7;
		this.graphic.y = data[2];
		this.graphic.alpha = 1;
		this.graphicRope.x = this.graphic.x;
		this.graphicRope.y = this.graphic.y;
		this.graphicRope.alpha = 1;
		this.deactiveX = -this.graphic.get_halfwidth();
		data = [];
		data = null;
		this.body.set_space(com.World.space);
	}
	,deactivate: function() {
		this.body.set_space(null);
		this.active = false;
		this.graphic.alpha = 0;
		this.graphicRope.alpha = 0;
	}
	,update: function(stepX) {
		this.graphic.x -= stepX;
		this.graphicRope.x -= stepX;
		if(this.graphic.x < this.deactiveX) this.deactivate();
	}
	,free: function() {
		this.graphic = null;
		this.graphicRope = null;
		this.body = null;
	}
	,__class__: elements.Wall
});
var haxe = {};
haxe.StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe.StackItem.CFunction = ["CFunction",0];
haxe.StackItem.CFunction.toString = $estr;
haxe.StackItem.CFunction.__enum__ = haxe.StackItem;
haxe.StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe.CallStack;
haxe.CallStack.__name__ = ["haxe","CallStack"];
haxe.CallStack.callStack = function() {
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe.StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe.StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	try {
		throw new Error();
	} catch( e ) {
		var a = haxe.CallStack.makeStack(e.stack);
		if(a != null) a.shift();
		Error.prepareStackTrace = oldValue;
		return a;
	}
};
haxe.CallStack.exceptionStack = function() {
	return [];
};
haxe.CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe.CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe.CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		if(m == null) b.b += "null"; else b.b += "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe.CallStack.itemToString(b,s1);
			b.b += " (";
		}
		if(file == null) b.b += "null"; else b.b += "" + file;
		b.b += " line ";
		if(line == null) b.b += "null"; else b.b += "" + line;
		if(s1 != null) b.b += ")";
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		if(cname == null) b.b += "null"; else b.b += "" + cname;
		b.b += ".";
		if(meth == null) b.b += "null"; else b.b += "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		if(n == null) b.b += "null"; else b.b += "" + n;
		break;
	}
};
haxe.CallStack.makeStack = function(s) {
	if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") stack.shift();
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe.StackItem.FilePos(meth == "Anonymous function"?haxe.StackItem.LocalFunction():meth == "Global code"?null:haxe.StackItem.Method(path.join("."),meth),file,line1));
			} else m.push(haxe.StackItem.Module(line));
		}
		return m;
	} else return s;
};
haxe.Log = function() { };
$hxClasses["haxe.Log"] = haxe.Log;
haxe.Log.__name__ = ["haxe","Log"];
haxe.Log.trace = function(v,infos) {
	js.Boot.__trace(v,infos);
};
haxe.Resource = function() { };
$hxClasses["haxe.Resource"] = haxe.Resource;
haxe.Resource.__name__ = ["haxe","Resource"];
haxe.Resource.content = null;
haxe.Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe.Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return x.str;
			var b = haxe.crypto.Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe.Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe.Timer;
haxe.Timer.__name__ = ["haxe","Timer"];
haxe.Timer.delay = function(f,time_ms) {
	var t = new haxe.Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe.Timer.measure = function(f,pos) {
	var t0 = haxe.Timer.stamp();
	var r = f();
	haxe.Log.trace(haxe.Timer.stamp() - t0 + "s",pos);
	return r;
};
haxe.Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe.Timer.prototype = {
	stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe.Timer
};
haxe.io = {};
haxe.io.Bytes = function(length,b) {
	this.length = length;
	this.b = b;
};
$hxClasses["haxe.io.Bytes"] = haxe.io.Bytes;
haxe.io.Bytes.__name__ = ["haxe","io","Bytes"];
haxe.io.Bytes.alloc = function(length) {
	var a = new Array();
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		a.push(0);
	}
	return new haxe.io.Bytes(length,a);
};
haxe.io.Bytes.ofString = function(s) {
	var a = new Array();
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe.io.Bytes(a.length,a);
};
haxe.io.Bytes.ofData = function(b) {
	return new haxe.io.Bytes(b.length,b);
};
haxe.io.Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw haxe.io.Error.OutsideBounds;
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe.io.Bytes
};
haxe.crypto = {};
haxe.crypto.Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe.crypto.Base64;
haxe.crypto.Base64.__name__ = ["haxe","crypto","Base64"];
haxe.crypto.Base64.decode = function(str,complement) {
	if(complement == null) complement = true;
	if(complement) while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	return new haxe.crypto.BaseCode(haxe.crypto.Base64.BYTES).decodeBytes(haxe.io.Bytes.ofString(str));
};
haxe.crypto.BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw "BaseCode : base length must be a power of two.";
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe.crypto.BaseCode;
haxe.crypto.BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe.crypto.BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = haxe.io.Bytes.alloc(size + (b.length * 8 % nbits == 0?0:1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,initTable: function() {
		var tbl = new Array();
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) this.initTable();
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = haxe.io.Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) throw "BaseCode : invalid encoded char";
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe.crypto.BaseCode
};
haxe.ds = {};
haxe.ds.BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe.ds.BalancedTree;
haxe.ds.BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe.ds.BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return node.value;
			if(c < 0) node = node.left; else node = node.right;
		}
		return null;
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return true; else if(c < 0) node = node.left; else node = node.right;
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) return new haxe.ds.TreeNode(null,k,v,null);
		var c = this.compare(k,node.key);
		if(c == 0) return new haxe.ds.TreeNode(node.left,k,v,node.right,node == null?0:node._height); else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl;
		if(l == null) hl = 0; else hl = l._height;
		var hr;
		if(r == null) hr = 0; else hr = r._height;
		if(hl > hr + 2) {
			if((function($this) {
				var $r;
				var _this = l.left;
				$r = _this == null?0:_this._height;
				return $r;
			}(this)) >= (function($this) {
				var $r;
				var _this1 = l.right;
				$r = _this1 == null?0:_this1._height;
				return $r;
			}(this))) return new haxe.ds.TreeNode(l.left,l.key,l.value,new haxe.ds.TreeNode(l.right,k,v,r)); else return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe.ds.TreeNode(l.right.right,k,v,r));
		} else if(hr > hl + 2) {
			if((function($this) {
				var $r;
				var _this2 = r.right;
				$r = _this2 == null?0:_this2._height;
				return $r;
			}(this)) > (function($this) {
				var $r;
				var _this3 = r.left;
				$r = _this3 == null?0:_this3._height;
				return $r;
			}(this))) return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l,k,v,r.left),r.key,r.value,r.right); else return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe.ds.TreeNode(r.left.right,r.key,r.value,r.right));
		} else return new haxe.ds.TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe.ds.BalancedTree
};
haxe.ds.TreeNode = function(l,k,v,r,h) {
	if(h == null) h = -1;
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) this._height = ((function($this) {
		var $r;
		var _this = $this.left;
		$r = _this == null?0:_this._height;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var _this1 = $this.right;
		$r = _this1 == null?0:_this1._height;
		return $r;
	}(this))?(function($this) {
		var $r;
		var _this2 = $this.left;
		$r = _this2 == null?0:_this2._height;
		return $r;
	}(this)):(function($this) {
		var $r;
		var _this3 = $this.right;
		$r = _this3 == null?0:_this3._height;
		return $r;
	}(this))) + 1; else this._height = h;
};
$hxClasses["haxe.ds.TreeNode"] = haxe.ds.TreeNode;
haxe.ds.TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe.ds.TreeNode.prototype = {
	__class__: haxe.ds.TreeNode
};
haxe.ds.EnumValueMap = function() {
	haxe.ds.BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe.ds.EnumValueMap;
haxe.ds.EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe.ds.EnumValueMap.__interfaces__ = [IMap];
haxe.ds.EnumValueMap.__super__ = haxe.ds.BalancedTree;
haxe.ds.EnumValueMap.prototype = $extend(haxe.ds.BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) return d;
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) return 0;
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) return ld;
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) return d;
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) return this.compare(v1,v2); else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) return this.compareArgs(v1,v2); else return Reflect.compare(v1,v2);
	}
	,__class__: haxe.ds.EnumValueMap
});
haxe.ds.IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe.ds.IntMap;
haxe.ds.IntMap.__name__ = ["haxe","ds","IntMap"];
haxe.ds.IntMap.__interfaces__ = [IMap];
haxe.ds.IntMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,__class__: haxe.ds.IntMap
};
haxe.ds.ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe.ds.ObjectMap;
haxe.ds.ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe.ds.ObjectMap.__interfaces__ = [IMap];
haxe.ds.ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe.ds.ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe.ds.ObjectMap
};
haxe.ds.StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe.ds.StringMap;
haxe.ds.StringMap.__name__ = ["haxe","ds","StringMap"];
haxe.ds.StringMap.__interfaces__ = [IMap];
haxe.ds.StringMap.prototype = {
	set: function(key,value) {
		this.h["$" + key] = value;
	}
	,get: function(key) {
		return this.h["$" + key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		key = "$" + key;
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key.substr(1));
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref["$" + i];
		}};
	}
	,__class__: haxe.ds.StringMap
};
haxe.ds._Vector = {};
haxe.ds._Vector.Vector_Impl_ = function() { };
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe.ds._Vector.Vector_Impl_;
haxe.ds._Vector.Vector_Impl_.__name__ = ["haxe","ds","_Vector","Vector_Impl_"];
haxe.ds._Vector.Vector_Impl_.blit = function(src,srcPos,dest,destPos,len) {
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		dest[destPos + i] = src[srcPos + i];
	}
};
haxe.ds._Vector.Vector_Impl_.toArray = function(this1) {
	var a = new Array();
	var len = this1.length;
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		a[i] = this1[i];
	}
	return a;
};
haxe.io.Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe.io.Eof;
haxe.io.Eof.__name__ = ["haxe","io","Eof"];
haxe.io.Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe.io.Eof
};
haxe.io.Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe.io.Error.Blocked = ["Blocked",0];
haxe.io.Error.Blocked.toString = $estr;
haxe.io.Error.Blocked.__enum__ = haxe.io.Error;
haxe.io.Error.Overflow = ["Overflow",1];
haxe.io.Error.Overflow.toString = $estr;
haxe.io.Error.Overflow.__enum__ = haxe.io.Error;
haxe.io.Error.OutsideBounds = ["OutsideBounds",2];
haxe.io.Error.OutsideBounds.toString = $estr;
haxe.io.Error.OutsideBounds.__enum__ = haxe.io.Error;
haxe.io.Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe.io.Error; $x.toString = $estr; return $x; };
haxe.io.Path = function(path) {
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe.io.Path;
haxe.io.Path.__name__ = ["haxe","io","Path"];
haxe.io.Path.withoutExtension = function(path) {
	var s = new haxe.io.Path(path);
	s.ext = null;
	return s.toString();
};
haxe.io.Path.prototype = {
	toString: function() {
		return (this.dir == null?"":this.dir + (this.backslash?"\\":"/")) + this.file + (this.ext == null?"":"." + this.ext);
	}
	,__class__: haxe.io.Path
};
haxe.xml = {};
haxe.xml._Fast = {};
haxe.xml._Fast.NodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeAccess"] = haxe.xml._Fast.NodeAccess;
haxe.xml._Fast.NodeAccess.__name__ = ["haxe","xml","_Fast","NodeAccess"];
haxe.xml._Fast.NodeAccess.prototype = {
	__class__: haxe.xml._Fast.NodeAccess
};
haxe.xml._Fast.AttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.AttribAccess"] = haxe.xml._Fast.AttribAccess;
haxe.xml._Fast.AttribAccess.__name__ = ["haxe","xml","_Fast","AttribAccess"];
haxe.xml._Fast.AttribAccess.prototype = {
	resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) throw "Cannot access document attribute " + name;
		var v = this.__x.get(name);
		if(v == null) throw this.__x.get_nodeName() + " is missing attribute " + name;
		return v;
	}
	,__class__: haxe.xml._Fast.AttribAccess
};
haxe.xml._Fast.HasAttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasAttribAccess"] = haxe.xml._Fast.HasAttribAccess;
haxe.xml._Fast.HasAttribAccess.__name__ = ["haxe","xml","_Fast","HasAttribAccess"];
haxe.xml._Fast.HasAttribAccess.prototype = {
	resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) throw "Cannot access document attribute " + name;
		return this.__x.exists(name);
	}
	,__class__: haxe.xml._Fast.HasAttribAccess
};
haxe.xml._Fast.HasNodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasNodeAccess"] = haxe.xml._Fast.HasNodeAccess;
haxe.xml._Fast.HasNodeAccess.__name__ = ["haxe","xml","_Fast","HasNodeAccess"];
haxe.xml._Fast.HasNodeAccess.prototype = {
	__class__: haxe.xml._Fast.HasNodeAccess
};
haxe.xml._Fast.NodeListAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeListAccess"] = haxe.xml._Fast.NodeListAccess;
haxe.xml._Fast.NodeListAccess.__name__ = ["haxe","xml","_Fast","NodeListAccess"];
haxe.xml._Fast.NodeListAccess.prototype = {
	resolve: function(name) {
		var l = new List();
		var $it0 = this.__x.elementsNamed(name);
		while( $it0.hasNext() ) {
			var x = $it0.next();
			l.add(new haxe.xml.Fast(x));
		}
		return l;
	}
	,__class__: haxe.xml._Fast.NodeListAccess
};
haxe.xml.Fast = function(x) {
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) throw "Invalid nodeType " + Std.string(x.nodeType);
	this.x = x;
	this.node = new haxe.xml._Fast.NodeAccess(x);
	this.nodes = new haxe.xml._Fast.NodeListAccess(x);
	this.att = new haxe.xml._Fast.AttribAccess(x);
	this.has = new haxe.xml._Fast.HasAttribAccess(x);
	this.hasNode = new haxe.xml._Fast.HasNodeAccess(x);
};
$hxClasses["haxe.xml.Fast"] = haxe.xml.Fast;
haxe.xml.Fast.__name__ = ["haxe","xml","Fast"];
haxe.xml.Fast.prototype = {
	__class__: haxe.xml.Fast
};
haxe.xml.Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe.xml.Parser;
haxe.xml.Parser.__name__ = ["haxe","xml","Parser"];
haxe.xml.Parser.parse = function(str) {
	var doc = Xml.createDocument();
	haxe.xml.Parser.doParse(str,0,doc);
	return doc;
};
haxe.xml.Parser.doParse = function(str,p,parent) {
	if(p == null) p = 0;
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 10:case 13:case 9:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			switch(c) {
			case 60:
				state = 0;
				next = 2;
				break;
			default:
				start = p;
				state = 13;
				continue;
			}
			break;
		case 13:
			if(c == 60) {
				var child = Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start));
				buf = new StringBuf();
				parent.addChild(child);
				nsubs++;
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf.addSub(str,start,p - start);
				state = 18;
				next = 13;
				start = p + 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") throw "Expected <![CDATA[";
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") throw "Expected <!DOCTYPE";
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw "Expected <!--"; else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 63:
				state = 14;
				start = p;
				break;
			case 47:
				if(parent == null) throw "Expected node name";
				start = p + 1;
				state = 0;
				next = 10;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) throw "Expected node name";
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				nsubs++;
				break;
			case 62:
				state = 9;
				nsubs++;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) throw "Expected attribute name";
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) throw "Duplicate attribute";
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			switch(c) {
			case 61:
				state = 0;
				next = 7;
				break;
			default:
				throw "Expected =";
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				state = 8;
				start = p;
				break;
			default:
				throw "Expected \"";
			}
			break;
		case 8:
			if(c == str.charCodeAt(start)) {
				var val = HxOverrides.substr(str,start + 1,p - start - 1);
				xml.set(aname,val);
				state = 0;
				next = 4;
			}
			break;
		case 9:
			p = haxe.xml.Parser.doParse(str,p,xml);
			start = p;
			state = 1;
			break;
		case 11:
			switch(c) {
			case 62:
				state = 1;
				break;
			default:
				throw "Expected >";
			}
			break;
		case 12:
			switch(c) {
			case 62:
				if(nsubs == 0) parent.addChild(Xml.createPCData(""));
				return p;
			default:
				throw "Expected >";
			}
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) throw "Expected node name";
				var v = HxOverrides.substr(str,start,p - start);
				if(v != parent.get_nodeName()) throw "Expected </" + parent.get_nodeName() + ">";
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) nbrackets++; else if(c == 93) nbrackets--; else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				state = 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				p++;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var i;
					if(s.charCodeAt(1) == 120) i = Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)); else i = Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.add(String.fromCharCode(i));
				} else if(!haxe.xml.Parser.escapes.exists(s)) buf.b += Std.string("&" + s + ";"); else buf.add(haxe.xml.Parser.escapes.get(s));
				start = p + 1;
				state = next;
			}
			break;
		}
		c = StringTools.fastCodeAt(str,++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) parent.addChild(Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start)));
		return p;
	}
	throw "Unexpected end";
};
var js = {};
js.Boot = function() { };
$hxClasses["js.Boot"] = js.Boot;
js.Boot.__name__ = ["js","Boot"];
js.Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js.Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js.Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js.Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js.Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js.Boot.__clear_trace = function() {
	var d = document.getElementById("haxe:trace");
	if(d != null) d.innerHTML = "";
};
js.Boot.isClass = function(o) {
	return o.__name__;
};
js.Boot.isEnum = function(e) {
	return e.__ename__;
};
js.Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js.Boot.__nativeClassName(o);
		if(name != null) return js.Boot.__resolveNativeClass(name);
		return null;
	}
};
js.Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) str += "," + js.Boot.__string_rec(o[i],s); else str += js.Boot.__string_rec(o[i],s);
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js.Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) str2 += ", \n";
		str2 += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
};
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js.Boot.__interfLoop(js.Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js.Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js.Boot.__cast = function(o,t) {
	if(js.Boot.__instanceof(o,t)) return o; else throw "Cannot cast " + Std.string(o) + " to " + Std.string(t);
};
js.Boot.__nativeClassName = function(o) {
	var name = js.Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js.Boot.__isNativeObj = function(o) {
	return js.Boot.__nativeClassName(o) != null;
};
js.Boot.__resolveNativeClass = function(name) {
	if(typeof window != "undefined") return window[name]; else return global[name];
};
var levels = {};
levels.LevelBase = function() {
	this.levelEndX = 0;
	this.elements = new Array();
	this.background = new Array();
};
$hxClasses["levels.LevelBase"] = levels.LevelBase;
levels.LevelBase.__name__ = ["levels","LevelBase"];
levels.LevelBase.prototype = {
	free: function() {
		this.elements = [];
		this.elements = null;
		this.background = [];
		this.background = null;
	}
	,__class__: levels.LevelBase
};
levels.Level1 = function() {
	levels.LevelBase.call(this);
	this.levelEndX = 9911;
	this.elements.push([3,706,400]);
	this.elements.push([3,757,400]);
	this.elements.push([3,807,400]);
	this.elements.push([3,1061,305]);
	this.elements.push([3,1112,305]);
	this.elements.push([3,1162,305]);
	this.elements.push([17,1222,328,1]);
	this.elements.push([0,1696,340,3]);
	this.elements.push([3,1804,295]);
	this.elements.push([3,1854,295]);
	this.elements.push([3,1904,295]);
	this.elements.push([17,2170,333,8]);
	this.elements.push([0,2436,340,8]);
	this.elements.push([2,2458,415]);
	this.elements.push([17,2981,226,2]);
	this.elements.push([5,3202,268]);
	this.elements.push([3,3209,400]);
	this.elements.push([3,3259,400]);
	this.elements.push([0,3873,340,4]);
	this.elements.push([3,3937,295]);
	this.elements.push([3,3987,295]);
	this.elements.push([3,4220,400]);
	this.elements.push([3,4270,400]);
	this.elements.push([0,4630,340,6]);
	this.elements.push([0,4671,235,4]);
	this.elements.push([3,4815,190]);
	this.elements.push([3,4865,190]);
	this.elements.push([3,4915,190]);
	this.elements.push([2,4940,416]);
	this.elements.push([3,5214,400]);
	this.elements.push([3,5264,400]);
	this.elements.push([3,5836,400]);
	this.elements.push([7,5852,305]);
	this.elements.push([3,5886,400]);
	this.elements.push([17,5941,329,3]);
	this.elements.push([0,6451,340,7]);
	this.elements.push([3,6610,200]);
	this.elements.push([2,6613,415]);
	this.elements.push([3,6660,200]);
	this.elements.push([3,6710,200]);
	this.elements.push([0,6932,235,2]);
	this.elements.push([6,7034,185]);
	this.elements.push([3,7082,400]);
	this.elements.push([3,7132,400]);
	this.elements.push([3,7183,400]);
	this.elements.push([2,7528,415]);
	this.elements.push([12,7564,397]);
	this.elements.push([2,7772,415]);
	this.elements.push([17,8486,327,4]);
	this.elements.push([0,8765,340,3]);
	this.elements.push([1,9129,235,1.5]);
	this.elements.push([2,9297,415]);
	this.elements.push([3,9416,90]);
	this.elements.push([3,9466,90]);
	this.elements.push([3,9516,90]);
	this.background.push([6,8,422,-1.19,-1.19,75]);
	this.background.push([6,67,392,1.42,1.42,0]);
	this.background.push([6,103,428,1,1,-46]);
	this.background.push([5,133,165,-1,1,0]);
	this.background.push([4,219,303,1,1,0]);
	this.background.push([6,292,398,1.42,1.42,0]);
	this.background.push([3,707,106,-0.85,0.85,-9]);
	this.background.push([3,732,190,-1,1,0]);
	this.background.push([3,799,27,-1,1,0]);
	this.background.push([3,843,123,-1,1,0]);
	this.background.push([1,850,236,1,1,0]);
	this.background.push([3,893,-14,-1,1,-17]);
	this.background.push([3,921,177,-1,1,0]);
	this.background.push([3,924,72,-1,1,-4]);
	this.background.push([2,958,387,1,1,0]);
	this.background.push([3,1032,96,-1,1,0]);
	this.background.push([3,1090,178,-1,1,0]);
	this.background.push([3,1093,13,-1,1,-4]);
	this.background.push([3,1096,93,-1,1,19]);
	this.background.push([3,1178,136,-1,1,19]);
	this.background.push([5,1850,155,-1,1,0]);
	this.background.push([4,1936,293,1,1,0]);
	this.background.push([6,2426,405,1.19,1.19,0]);
	this.background.push([6,2461,432,1,1,-46]);
	this.background.push([5,3504,220,0.82,0.82,0]);
	this.background.push([4,3564,332,-0.82,0.82,0]);
	this.background.push([6,4443,425,-1.19,-1.19,75]);
	this.background.push([6,4503,395,1.42,1.42,0]);
	this.background.push([6,4538,430,1,1,-46]);
	this.background.push([5,5548,155,-1,1,0]);
	this.background.push([4,5634,293,1,1,0]);
	this.background.push([6,6440,438,-1,1,46]);
	this.background.push([6,6479,403,-1.42,1.42,0]);
	this.background.push([6,6531,433,1.19,-1.19,-75]);
	this.background.push([5,6843,162,-1,1,0]);
	this.background.push([4,6929,300,1,1,0]);
	this.background.push([6,7165,400,1.42,1.42,0]);
};
$hxClasses["levels.Level1"] = levels.Level1;
levels.Level1.__name__ = ["levels","Level1"];
levels.Level1.__super__ = levels.LevelBase;
levels.Level1.prototype = $extend(levels.LevelBase.prototype,{
	__class__: levels.Level1
});
levels.Level10 = function() {
	levels.LevelBase.call(this);
	this.levelEndX = 24119;
	this.elements.push([5,873,371]);
	this.elements.push([2,1218,415]);
	this.elements.push([1,1295,235,3]);
	this.elements.push([3,1324,190]);
	this.elements.push([3,1374,190]);
	this.elements.push([3,1424,190]);
	this.elements.push([16,1547,180]);
	this.elements.push([13,1760,400]);
	this.elements.push([3,1905,190]);
	this.elements.push([3,1955,190]);
	this.elements.push([3,2005,190]);
	this.elements.push([7,2422,305]);
	this.elements.push([0,2636,340,6]);
	this.elements.push([3,2691,295]);
	this.elements.push([3,2741,295]);
	this.elements.push([3,2791,295]);
	this.elements.push([2,2863,414]);
	this.elements.push([7,2950,200]);
	this.elements.push([16,3198,278]);
	this.elements.push([3,3469,400]);
	this.elements.push([3,3519,400]);
	this.elements.push([3,3569,400]);
	this.elements.push([6,3892,397]);
	this.elements.push([3,4199,200]);
	this.elements.push([3,4249,200]);
	this.elements.push([12,4290,395]);
	this.elements.push([3,4299,200]);
	this.elements.push([5,4574,376]);
	this.elements.push([5,4905,376]);
	this.elements.push([16,5527,386]);
	this.elements.push([7,5660,305]);
	this.elements.push([13,6053,400]);
	this.elements.push([1,6481,235,1.5]);
	this.elements.push([10,6522,174]);
	this.elements.push([2,6753,204]);
	this.elements.push([2,6863,416]);
	this.elements.push([1,7112,235,1]);
	this.elements.push([3,7170,190]);
	this.elements.push([3,7220,190]);
	this.elements.push([3,7270,190]);
	this.elements.push([3,7505,400]);
	this.elements.push([3,7555,400]);
	this.elements.push([3,7605,400]);
	this.elements.push([6,7680,399]);
	this.elements.push([5,7958,372]);
	this.elements.push([0,8479,340,6]);
	this.elements.push([5,8519,269]);
	this.elements.push([16,8536,385]);
	this.elements.push([7,8978,200]);
	this.elements.push([6,9065,396]);
	this.elements.push([3,9134,204]);
	this.elements.push([3,9166,156]);
	this.elements.push([3,9198,108]);
	this.elements.push([3,9230,60]);
	this.elements.push([7,9613,305]);
	this.elements.push([3,9763,400]);
	this.elements.push([3,9813,400]);
	this.elements.push([3,9863,400]);
	this.elements.push([1,10145,235,2.5]);
	this.elements.push([15,10205,200]);
	this.elements.push([2,10293,413]);
	this.elements.push([3,10454,190]);
	this.elements.push([3,10504,190]);
	this.elements.push([3,10554,190]);
	this.elements.push([12,10720,187]);
	this.elements.push([1,10977,235,2.5]);
	this.elements.push([5,11007,374]);
	this.elements.push([16,11037,174]);
	this.elements.push([10,11477,388]);
	this.elements.push([3,11804,400]);
	this.elements.push([3,11854,400]);
	this.elements.push([3,11904,400]);
	this.elements.push([5,12139,374]);
	this.elements.push([4,12518,390]);
	this.elements.push([3,12605,257]);
	this.elements.push([3,12637,209]);
	this.elements.push([3,12669,161]);
	this.elements.push([1,12869,235,1.5]);
	this.elements.push([3,12979,190]);
	this.elements.push([3,13029,190]);
	this.elements.push([5,13133,165]);
	this.elements.push([16,13284,385]);
	this.elements.push([0,13572,340,7]);
	this.elements.push([2,13620,417]);
	this.elements.push([3,13750,200]);
	this.elements.push([3,13800,200]);
	this.elements.push([3,13850,200]);
	this.elements.push([7,14048,200]);
	this.elements.push([2,14076,417]);
	this.elements.push([3,14216,295]);
	this.elements.push([3,14266,295]);
	this.elements.push([3,14316,295]);
	this.elements.push([1,14667,340,4]);
	this.elements.push([14,15242,300]);
	this.elements.push([3,15327,295]);
	this.elements.push([3,15377,295]);
	this.elements.push([14,15388,403]);
	this.elements.push([3,15427,295]);
	this.elements.push([14,15502,300]);
	this.elements.push([4,15893,390]);
	this.elements.push([1,16215,235,3.5]);
	this.elements.push([7,16370,95]);
	this.elements.push([13,16407,400]);
	this.elements.push([3,16477,190]);
	this.elements.push([3,16527,190]);
	this.elements.push([7,16622,95]);
	this.elements.push([3,16624,400]);
	this.elements.push([3,16674,400]);
	this.elements.push([3,16729,190]);
	this.elements.push([3,16779,190]);
	this.elements.push([13,16869,400]);
	this.elements.push([7,16874,95]);
	this.elements.push([4,17195,390]);
	this.elements.push([5,17419,374]);
	this.elements.push([5,17522,374]);
	this.elements.push([0,17914,340,7]);
	this.elements.push([16,17993,382]);
	this.elements.push([16,18215,277]);
	this.elements.push([10,18400,281]);
	this.elements.push([5,18569,268]);
	this.elements.push([3,18878,400]);
	this.elements.push([3,18928,400]);
	this.elements.push([3,18978,400]);
	this.elements.push([3,19157,200]);
	this.elements.push([3,19207,200]);
	this.elements.push([3,19257,200]);
	this.elements.push([14,19564,406]);
	this.elements.push([14,19752,406]);
	this.elements.push([0,20087,340,7]);
	this.elements.push([8,20209,320]);
	this.elements.push([8,20307,320]);
	this.elements.push([3,20438,295]);
	this.elements.push([3,20488,295]);
	this.elements.push([3,20538,295]);
	this.elements.push([8,20671,320]);
	this.elements.push([12,20707,184]);
	this.elements.push([1,20955,235,2.5]);
	this.elements.push([16,20983,175]);
	this.elements.push([16,21357,379]);
	this.elements.push([16,21425,175]);
	this.elements.push([4,21850,390]);
	this.elements.push([3,21905,305]);
	this.elements.push([3,21937,257]);
	this.elements.push([3,21969,209]);
	this.elements.push([3,22001,161]);
	this.elements.push([1,22159,235,2]);
	this.elements.push([2,22447,420]);
	this.elements.push([3,22748,400]);
	this.elements.push([3,22798,400]);
	this.elements.push([3,22848,400]);
	this.elements.push([1,23041,235,2]);
	this.elements.push([2,23182,205]);
	this.elements.push([3,23624,90]);
	this.elements.push([3,23674,90]);
	this.elements.push([3,23724,90]);
	this.background.push([3,286,105,-0.85,0.85,-9]);
	this.background.push([3,311,189,-1,1,0]);
	this.background.push([3,377,25,-1,1,0]);
	this.background.push([3,421,121,-1,1,0]);
	this.background.push([1,430,234,1,1,0]);
	this.background.push([3,472,-15,-1,1,-17]);
	this.background.push([3,500,175,-1,1,0]);
	this.background.push([3,502,70,-1,1,-4]);
	this.background.push([2,538,385,1,1,0]);
	this.background.push([3,611,95,-1,1,0]);
	this.background.push([3,669,176,-1,1,0]);
	this.background.push([3,672,12,-1,1,-4]);
	this.background.push([3,675,91,-1,1,19]);
	this.background.push([3,757,134,-1,1,19]);
	this.background.push([5,1548,155,-1,1,0]);
	this.background.push([4,1634,293,1,1,0]);
	this.background.push([6,2426,405,1.19,1.19,0]);
	this.background.push([6,2461,432,1,1,-46]);
	this.background.push([6,4443,425,-1.19,-1.19,75]);
	this.background.push([6,4503,395,1.42,1.42,0]);
	this.background.push([6,4538,430,1,1,-46]);
	this.background.push([5,5548,155,-1,1,0]);
	this.background.push([4,5634,293,1,1,0]);
	this.background.push([5,10580,162,1,1,0]);
	this.background.push([4,10669,299,-1,1,0]);
	this.background.push([6,10731,405,1.12,1.12,0]);
	this.background.push([3,12090,115,-0.85,0.85,-9]);
	this.background.push([3,12115,199,-1,1,0]);
	this.background.push([3,12182,35,-1,1,0]);
	this.background.push([3,12226,131,-1,1,0]);
	this.background.push([1,12234,244,1,1,0]);
	this.background.push([3,12276,-5,-1,1,-17]);
	this.background.push([3,12304,185,-1,1,0]);
	this.background.push([3,12307,80,-1,1,-4]);
	this.background.push([2,12342,395,1,1,0]);
	this.background.push([3,12415,105,-1,1,0]);
	this.background.push([3,12473,187,-1,1,0]);
	this.background.push([3,12477,22,-1,1,-4]);
	this.background.push([3,12480,101,-1,1,19]);
	this.background.push([3,12562,145,-1,1,19]);
	this.background.push([6,13978,421,-1.19,-1.19,75]);
	this.background.push([6,14038,390,1.42,1.42,0]);
	this.background.push([6,14074,426,1,1,-46]);
	this.background.push([5,14171,163,-1,1,0]);
	this.background.push([4,14257,301,1,1,0]);
	this.background.push([6,14363,396,1.42,1.42,0]);
};
$hxClasses["levels.Level10"] = levels.Level10;
levels.Level10.__name__ = ["levels","Level10"];
levels.Level10.__super__ = levels.LevelBase;
levels.Level10.prototype = $extend(levels.LevelBase.prototype,{
	__class__: levels.Level10
});
levels.Level11 = function() {
	levels.LevelBase.call(this);
	this.levelEndX = 31822;
	this.elements.push([2,756,415]);
	this.elements.push([0,904,340,4]);
	this.elements.push([3,1228,295]);
	this.elements.push([3,1278,295]);
	this.elements.push([3,1328,295]);
	this.elements.push([0,1558,340,6]);
	this.elements.push([3,1621,400]);
	this.elements.push([3,1671,400]);
	this.elements.push([13,1722,400]);
	this.elements.push([2,1862,414]);
	this.elements.push([5,2111,270]);
	this.elements.push([16,2422,387]);
	this.elements.push([7,2691,305]);
	this.elements.push([3,2928,200]);
	this.elements.push([3,2978,200]);
	this.elements.push([3,3028,200]);
	this.elements.push([3,3238,400]);
	this.elements.push([3,3288,400]);
	this.elements.push([3,3338,400]);
	this.elements.push([6,3545,397]);
	this.elements.push([1,3786,235,1.5]);
	this.elements.push([2,3827,204]);
	this.elements.push([3,4158,90]);
	this.elements.push([3,4208,90]);
	this.elements.push([3,4258,90]);
	this.elements.push([13,4743,400]);
	this.elements.push([16,4872,386]);
	this.elements.push([7,5005,305]);
	this.elements.push([14,5615,412]);
	this.elements.push([3,5776,200]);
	this.elements.push([3,5826,200]);
	this.elements.push([14,5846,412]);
	this.elements.push([3,5876,200]);
	this.elements.push([2,6092,416]);
	this.elements.push([1,6110,235,1]);
	this.elements.push([6,6213,186]);
	this.elements.push([3,6349,400]);
	this.elements.push([3,6399,400]);
	this.elements.push([3,6449,400]);
	this.elements.push([12,6505,184]);
	this.elements.push([0,6591,340,6]);
	this.elements.push([5,6603,272]);
	this.elements.push([1,6856,235,1.5]);
	this.elements.push([2,6876,311]);
	this.elements.push([5,7123,165]);
	this.elements.push([3,7132,295]);
	this.elements.push([3,7182,295]);
	this.elements.push([3,7232,295]);
	this.elements.push([0,7592,340,6]);
	this.elements.push([3,7786,200]);
	this.elements.push([3,7836,200]);
	this.elements.push([6,7872,399]);
	this.elements.push([3,7886,200]);
	this.elements.push([3,8132,400]);
	this.elements.push([16,8169,178]);
	this.elements.push([1,8179,235,2]);
	this.elements.push([3,8182,400]);
	this.elements.push([3,8232,400]);
	this.elements.push([10,8407,177]);
	this.elements.push([2,8500,416]);
	this.elements.push([1,8887,235,2.5]);
	this.elements.push([2,8917,204]);
	this.elements.push([13,8974,400]);
	this.elements.push([7,9193,95]);
	this.elements.push([3,9236,190]);
	this.elements.push([3,9286,190]);
	this.elements.push([3,9336,190]);
	this.elements.push([3,9386,190]);
	this.elements.push([3,9436,190]);
	this.elements.push([7,9459,95]);
	this.elements.push([7,9839,305]);
	this.elements.push([3,10047,305]);
	this.elements.push([2,10048,416]);
	this.elements.push([3,10097,305]);
	this.elements.push([6,10413,397]);
	this.elements.push([4,10677,390]);
	this.elements.push([3,10763,257]);
	this.elements.push([3,10795,209]);
	this.elements.push([3,10827,161]);
	this.elements.push([1,11070,235,1.5]);
	this.elements.push([3,11081,190]);
	this.elements.push([3,11131,190]);
	this.elements.push([3,11181,190]);
	this.elements.push([0,11196,340,7]);
	this.elements.push([5,11340,160]);
	this.elements.push([3,11387,400]);
	this.elements.push([3,11437,400]);
	this.elements.push([2,11462,311]);
	this.elements.push([3,11487,400]);
	this.elements.push([16,11683,387]);
	this.elements.push([5,11809,270]);
	this.elements.push([3,12183,305]);
	this.elements.push([3,12233,305]);
	this.elements.push([3,12283,305]);
	this.elements.push([3,12486,200]);
	this.elements.push([3,12536,200]);
	this.elements.push([3,12586,200]);
	this.elements.push([8,12842,427]);
	this.elements.push([0,12992,340,7]);
	this.elements.push([3,13044,400]);
	this.elements.push([3,13094,400]);
	this.elements.push([8,13202,323]);
	this.elements.push([0,13281,235,4]);
	this.elements.push([2,13294,206]);
	this.elements.push([15,13404,306]);
	this.elements.push([2,13555,418]);
	this.elements.push([2,13626,311]);
	this.elements.push([8,13704,215]);
	this.elements.push([7,14046,305]);
	this.elements.push([1,14315,340,4]);
	this.elements.push([14,14890,300]);
	this.elements.push([3,14975,295]);
	this.elements.push([3,15025,295]);
	this.elements.push([14,15036,403]);
	this.elements.push([3,15075,295]);
	this.elements.push([14,15150,300]);
	this.elements.push([7,15641,305]);
	this.elements.push([3,15749,400]);
	this.elements.push([3,15799,400]);
	this.elements.push([7,15893,305]);
	this.elements.push([3,16005,400]);
	this.elements.push([3,16055,400]);
	this.elements.push([7,16145,305]);
	this.elements.push([5,16392,374]);
	this.elements.push([4,16544,390]);
	this.elements.push([0,16773,340,7]);
	this.elements.push([13,16812,293]);
	this.elements.push([3,17057,400]);
	this.elements.push([3,17107,400]);
	this.elements.push([2,17264,412]);
	this.elements.push([3,17452,400]);
	this.elements.push([3,17502,400]);
	this.elements.push([16,17839,382]);
	this.elements.push([16,18116,382]);
	this.elements.push([0,18550,340,7]);
	this.elements.push([13,18589,293]);
	this.elements.push([12,18640,291]);
	this.elements.push([3,18744,295]);
	this.elements.push([3,18794,295]);
	this.elements.push([3,18844,295]);
	this.elements.push([5,18985,267]);
	this.elements.push([14,19252,406]);
	this.elements.push([0,19657,340,7]);
	this.elements.push([8,19708,320]);
	this.elements.push([3,19795,295]);
	this.elements.push([3,19845,295]);
	this.elements.push([3,19895,295]);
	this.elements.push([8,19995,320]);
	this.elements.push([3,20307,400]);
	this.elements.push([3,20357,400]);
	this.elements.push([8,20399,320]);
	this.elements.push([3,20407,400]);
	this.elements.push([6,20733,397]);
	this.elements.push([1,20841,235,2.5]);
	this.elements.push([2,20849,204]);
	this.elements.push([16,21124,379]);
	this.elements.push([10,21136,178]);
	this.elements.push([6,21340,185]);
	this.elements.push([4,21736,390]);
	this.elements.push([3,21791,305]);
	this.elements.push([3,21823,257]);
	this.elements.push([3,21855,209]);
	this.elements.push([3,21887,161]);
	this.elements.push([5,22256,371]);
	this.elements.push([3,22597,200]);
	this.elements.push([3,22647,200]);
	this.elements.push([3,22697,200]);
	this.elements.push([0,23023,340,7]);
	this.elements.push([2,23043,416]);
	this.elements.push([16,23379,280]);
	this.elements.push([13,23407,401]);
	this.elements.push([1,23477,235,3.5]);
	this.elements.push([5,23486,164]);
	this.elements.push([2,23725,416]);
	this.elements.push([12,23729,187]);
	this.elements.push([16,23873,173]);
	this.elements.push([6,24233,398]);
	this.elements.push([5,24817,371]);
	this.elements.push([1,24818,235,2.5]);
	this.elements.push([2,25047,204]);
	this.elements.push([3,25056,400]);
	this.elements.push([3,25106,400]);
	this.elements.push([3,25156,400]);
	this.elements.push([3,25289,190]);
	this.elements.push([3,25339,190]);
	this.elements.push([3,25389,190]);
	this.elements.push([5,25846,372]);
	this.elements.push([13,26191,400]);
	this.elements.push([2,26326,414]);
	this.elements.push([7,26567,305]);
	this.elements.push([1,26862,235,2.5]);
	this.elements.push([13,27024,189]);
	this.elements.push([3,27140,190]);
	this.elements.push([2,27166,414]);
	this.elements.push([3,27190,190]);
	this.elements.push([3,27240,190]);
	this.elements.push([16,27372,173]);
	this.elements.push([3,27448,400]);
	this.elements.push([3,27498,400]);
	this.elements.push([3,27548,400]);
	this.elements.push([4,27809,390]);
	this.elements.push([0,28063,340,7]);
	this.elements.push([4,28150,295]);
	this.elements.push([5,28367,267]);
	this.elements.push([13,28700,295]);
	this.elements.push([3,28708,400]);
	this.elements.push([3,28758,400]);
	this.elements.push([3,28808,400]);
	this.elements.push([0,29191,340,3]);
	this.elements.push([3,29224,295]);
	this.elements.push([3,29274,295]);
	this.elements.push([3,29324,295]);
	this.elements.push([2,29425,312]);
	this.elements.push([3,29709,200]);
	this.elements.push([3,29759,200]);
	this.elements.push([3,29809,200]);
	this.elements.push([3,30037,200]);
	this.elements.push([3,30087,200]);
	this.elements.push([3,30137,200]);
	this.elements.push([0,30285,340,2]);
	this.elements.push([6,30416,292]);
	this.elements.push([1,31006,235,2.5]);
	this.elements.push([13,31027,401]);
	this.elements.push([3,31059,190]);
	this.elements.push([3,31109,190]);
	this.elements.push([16,31151,386]);
	this.elements.push([3,31159,190]);
	this.elements.push([13,31331,400]);
	this.elements.push([13,31451,400]);
	this.background.push([3,286,105,-0.85,0.85,-9]);
	this.background.push([3,311,189,-1,1,0]);
	this.background.push([3,377,25,-1,1,0]);
	this.background.push([3,421,121,-1,1,0]);
	this.background.push([1,430,234,1,1,0]);
	this.background.push([3,472,-15,-1,1,-17]);
	this.background.push([3,500,175,-1,1,0]);
	this.background.push([3,502,70,-1,1,-4]);
	this.background.push([2,538,385,1,1,0]);
	this.background.push([3,611,95,-1,1,0]);
	this.background.push([3,669,176,-1,1,0]);
	this.background.push([3,672,12,-1,1,-4]);
	this.background.push([3,675,91,-1,1,19]);
	this.background.push([3,757,134,-1,1,19]);
	this.background.push([5,1548,155,-1,1,0]);
	this.background.push([4,1634,293,1,1,0]);
	this.background.push([6,2426,405,1.19,1.19,0]);
	this.background.push([6,2461,432,1,1,-46]);
	this.background.push([6,4443,425,-1.19,-1.19,75]);
	this.background.push([6,4503,395,1.42,1.42,0]);
	this.background.push([6,4538,430,1,1,-46]);
	this.background.push([5,5548,155,-1,1,0]);
	this.background.push([4,5634,293,1,1,0]);
	this.background.push([5,10580,162,1,1,0]);
	this.background.push([4,10669,299,-1,1,0]);
	this.background.push([6,10731,405,1.12,1.12,0]);
	this.background.push([3,12090,115,-0.85,0.85,-9]);
	this.background.push([3,12115,199,-1,1,0]);
	this.background.push([3,12182,35,-1,1,0]);
	this.background.push([3,12226,131,-1,1,0]);
	this.background.push([1,12234,244,1,1,0]);
	this.background.push([3,12276,-5,-1,1,-17]);
	this.background.push([3,12304,185,-1,1,0]);
	this.background.push([3,12307,80,-1,1,-4]);
	this.background.push([2,12342,395,1,1,0]);
	this.background.push([3,12415,105,-1,1,0]);
	this.background.push([3,12473,187,-1,1,0]);
	this.background.push([3,12477,22,-1,1,-4]);
	this.background.push([3,12480,101,-1,1,19]);
	this.background.push([3,12562,145,-1,1,19]);
	this.background.push([6,13978,421,-1.19,-1.19,75]);
	this.background.push([6,14038,390,1.42,1.42,0]);
	this.background.push([6,14074,426,1,1,-46]);
	this.background.push([5,14171,163,-1,1,0]);
	this.background.push([4,14257,301,1,1,0]);
	this.background.push([6,14363,396,1.42,1.42,0]);
};
$hxClasses["levels.Level11"] = levels.Level11;
levels.Level11.__name__ = ["levels","Level11"];
levels.Level11.__super__ = levels.LevelBase;
levels.Level11.prototype = $extend(levels.LevelBase.prototype,{
	__class__: levels.Level11
});
levels.Level12 = function() {
	levels.LevelBase.call(this);
	this.levelEndX = 31477;
	this.elements.push([3,703,200]);
	this.elements.push([3,753,200]);
	this.elements.push([3,803,200]);
	this.elements.push([0,1024,340,4]);
	this.elements.push([13,1062,400]);
	this.elements.push([3,1144,295]);
	this.elements.push([3,1194,295]);
	this.elements.push([3,1244,295]);
	this.elements.push([13,1377,295]);
	this.elements.push([0,1738,340,6]);
	this.elements.push([3,1784,295]);
	this.elements.push([3,1834,295]);
	this.elements.push([3,1884,295]);
	this.elements.push([16,1978,281]);
	this.elements.push([3,2038,400]);
	this.elements.push([3,2088,400]);
	this.elements.push([3,2138,400]);
	this.elements.push([2,2301,416]);
	this.elements.push([5,2331,270]);
	this.elements.push([1,2663,235,2]);
	this.elements.push([2,2687,204]);
	this.elements.push([10,2915,176]);
	this.elements.push([2,3061,204]);
	this.elements.push([5,3232,375]);
	this.elements.push([3,3522,400]);
	this.elements.push([7,3560,305]);
	this.elements.push([3,3572,400]);
	this.elements.push([3,3622,400]);
	this.elements.push([5,3772,375]);
	this.elements.push([16,4132,386]);
	this.elements.push([3,4398,215]);
	this.elements.push([3,4448,215]);
	this.elements.push([3,4498,215]);
	this.elements.push([7,4705,305]);
	this.elements.push([0,5071,340,6]);
	this.elements.push([2,5101,310]);
	this.elements.push([2,5146,416]);
	this.elements.push([3,5312,215]);
	this.elements.push([3,5362,215]);
	this.elements.push([3,5412,215]);
	this.elements.push([16,5623,282]);
	this.elements.push([3,5624,400]);
	this.elements.push([3,5674,400]);
	this.elements.push([3,5724,400]);
	this.elements.push([6,5917,398]);
	this.elements.push([5,6217,373]);
	this.elements.push([1,6231,235,2.5]);
	this.elements.push([3,6424,400]);
	this.elements.push([3,6474,400]);
	this.elements.push([3,6524,400]);
	this.elements.push([5,6674,375]);
	this.elements.push([3,6805,140]);
	this.elements.push([3,6855,120]);
	this.elements.push([3,6905,100]);
	this.elements.push([2,7097,414]);
	this.elements.push([0,7352,340,6]);
	this.elements.push([3,7544,400]);
	this.elements.push([3,7594,400]);
	this.elements.push([3,7644,400]);
	this.elements.push([13,7713,400]);
	this.elements.push([6,7936,295]);
	this.elements.push([1,8367,235,2.5]);
	this.elements.push([5,8431,373]);
	this.elements.push([3,8436,190]);
	this.elements.push([3,8486,190]);
	this.elements.push([3,8536,190]);
	this.elements.push([2,8631,206]);
	this.elements.push([2,8827,414]);
	this.elements.push([3,8896,190]);
	this.elements.push([7,8939,95]);
	this.elements.push([3,8946,190]);
	this.elements.push([3,8996,190]);
	this.elements.push([13,9254,400]);
	this.elements.push([0,9612,340,6]);
	this.elements.push([2,9661,416]);
	this.elements.push([16,10017,387]);
	this.elements.push([16,10105,280]);
	this.elements.push([7,10241,200]);
	this.elements.push([4,10577,390]);
	this.elements.push([3,10663,257]);
	this.elements.push([3,10695,209]);
	this.elements.push([3,10727,161]);
	this.elements.push([5,10816,375]);
	this.elements.push([0,11128,340,3]);
	this.elements.push([2,11144,414]);
	this.elements.push([16,11336,282]);
	this.elements.push([0,11681,340,4]);
	this.elements.push([2,11693,311]);
	this.elements.push([3,11719,400]);
	this.elements.push([3,11769,400]);
	this.elements.push([3,11819,400]);
	this.elements.push([2,12048,414]);
	this.elements.push([5,12050,268]);
	this.elements.push([3,12386,200]);
	this.elements.push([3,12436,200]);
	this.elements.push([3,12486,200]);
	this.elements.push([14,12758,408]);
	this.elements.push([14,12838,408]);
	this.elements.push([14,12918,408]);
	this.elements.push([0,12992,340,7]);
	this.elements.push([0,13021,235,4]);
	this.elements.push([3,13024,400]);
	this.elements.push([3,13074,400]);
	this.elements.push([3,13340,180]);
	this.elements.push([2,13353,310]);
	this.elements.push([3,13390,180]);
	this.elements.push([15,13581,305]);
	this.elements.push([5,13691,268]);
	this.elements.push([7,13906,305]);
	this.elements.push([2,14095,416]);
	this.elements.push([13,14577,402]);
	this.elements.push([12,14628,396]);
	this.elements.push([13,14697,402]);
	this.elements.push([16,14932,387]);
	this.elements.push([1,15392,235,1.5]);
	this.elements.push([3,15422,200]);
	this.elements.push([2,15433,416]);
	this.elements.push([3,15472,200]);
	this.elements.push([2,15543,204]);
	this.elements.push([3,15662,200]);
	this.elements.push([3,15712,200]);
	this.elements.push([4,15836,390]);
	this.elements.push([0,16045,340,7]);
	this.elements.push([5,16060,273]);
	this.elements.push([3,16330,400]);
	this.elements.push([13,16364,295]);
	this.elements.push([3,16380,400]);
	this.elements.push([3,16430,400]);
	this.elements.push([2,16576,414]);
	this.elements.push([13,16757,295]);
	this.elements.push([6,17101,398]);
	this.elements.push([3,17422,200]);
	this.elements.push([3,17472,200]);
	this.elements.push([3,17522,200]);
	this.elements.push([16,17779,388]);
	this.elements.push([12,17800,291]);
	this.elements.push([0,18012,340,8]);
	this.elements.push([13,18049,293]);
	this.elements.push([5,18445,267]);
	this.elements.push([16,18779,391]);
	this.elements.push([16,18799,281]);
	this.elements.push([14,19452,406]);
	this.elements.push([8,19708,427]);
	this.elements.push([8,19901,427]);
	this.elements.push([8,19989,427]);
	this.elements.push([1,20211,235,2.5]);
	this.elements.push([2,20250,417]);
	this.elements.push([16,20391,177]);
	this.elements.push([3,20433,400]);
	this.elements.push([3,20483,400]);
	this.elements.push([3,20533,400]);
	this.elements.push([3,20644,190]);
	this.elements.push([6,20657,400]);
	this.elements.push([3,20694,190]);
	this.elements.push([3,20744,190]);
	this.elements.push([4,21138,390]);
	this.elements.push([3,21193,305]);
	this.elements.push([3,21225,257]);
	this.elements.push([3,21257,209]);
	this.elements.push([3,21289,161]);
	this.elements.push([0,21417,340,7]);
	this.elements.push([5,21614,267]);
	this.elements.push([3,21781,295]);
	this.elements.push([3,21831,295]);
	this.elements.push([3,21881,295]);
	this.elements.push([3,22071,400]);
	this.elements.push([3,22121,400]);
	this.elements.push([2,22121,313]);
	this.elements.push([3,22171,400]);
	this.elements.push([16,22517,392]);
	this.elements.push([2,22885,416]);
	this.elements.push([13,23187,401]);
	this.elements.push([1,23383,235,3.5]);
	this.elements.push([5,23414,374]);
	this.elements.push([16,23643,179]);
	this.elements.push([12,23660,186]);
	this.elements.push([2,23788,416]);
	this.elements.push([16,23872,177]);
	this.elements.push([3,23919,400]);
	this.elements.push([3,23969,400]);
	this.elements.push([3,24019,400]);
	this.elements.push([6,24233,398]);
	this.elements.push([0,24572,340,8]);
	this.elements.push([2,24598,417]);
	this.elements.push([3,24801,400]);
	this.elements.push([2,24807,310]);
	this.elements.push([3,24851,400]);
	this.elements.push([3,24901,400]);
	this.elements.push([5,25217,267]);
	this.elements.push([2,25281,417]);
	this.elements.push([4,25345,295]);
	this.elements.push([3,25404,208]);
	this.elements.push([3,25436,160]);
	this.elements.push([3,25468,112]);
	this.elements.push([4,25661,390]);
	this.elements.push([1,25822,235,2.5]);
	this.elements.push([13,26035,191]);
	this.elements.push([5,26226,371]);
	this.elements.push([16,26309,177]);
	this.elements.push([7,26661,305]);
	this.elements.push([3,26857,190]);
	this.elements.push([3,26907,190]);
	this.elements.push([3,26957,190]);
	this.elements.push([7,27134,305]);
	this.elements.push([2,27323,414]);
	this.elements.push([14,27843,410]);
	this.elements.push([14,27969,410]);
	this.elements.push([14,28221,410]);
	this.elements.push([14,28347,410]);
	this.elements.push([0,28498,340,3]);
	this.elements.push([3,28531,295]);
	this.elements.push([3,28581,295]);
	this.elements.push([3,28631,295]);
	this.elements.push([2,28732,312]);
	this.elements.push([1,28927,235,2.5]);
	this.elements.push([16,29144,179]);
	this.elements.push([3,29154,400]);
	this.elements.push([3,29204,400]);
	this.elements.push([3,29254,400]);
	this.elements.push([5,29590,373]);
	this.elements.push([5,29742,374]);
	this.elements.push([6,30203,397]);
	this.elements.push([3,30541,200]);
	this.elements.push([3,30591,200]);
	this.elements.push([3,30641,200]);
	this.elements.push([3,30982,200]);
	this.elements.push([3,31032,200]);
	this.elements.push([3,31082,200]);
	this.background.push([3,286,105,-0.85,0.85,-9]);
	this.background.push([3,311,189,-1,1,0]);
	this.background.push([3,377,25,-1,1,0]);
	this.background.push([3,421,121,-1,1,0]);
	this.background.push([1,430,234,1,1,0]);
	this.background.push([3,472,-15,-1,1,-17]);
	this.background.push([3,500,175,-1,1,0]);
	this.background.push([3,502,70,-1,1,-4]);
	this.background.push([2,538,385,1,1,0]);
	this.background.push([3,611,95,-1,1,0]);
	this.background.push([3,669,176,-1,1,0]);
	this.background.push([3,672,12,-1,1,-4]);
	this.background.push([3,675,91,-1,1,19]);
	this.background.push([3,757,134,-1,1,19]);
	this.background.push([5,1548,155,-1,1,0]);
	this.background.push([4,1634,293,1,1,0]);
	this.background.push([6,2426,405,1.19,1.19,0]);
	this.background.push([6,2461,432,1,1,-46]);
	this.background.push([6,4443,425,-1.19,-1.19,75]);
	this.background.push([6,4503,395,1.42,1.42,0]);
	this.background.push([6,4538,430,1,1,-46]);
	this.background.push([5,5548,155,-1,1,0]);
	this.background.push([4,5634,293,1,1,0]);
	this.background.push([5,10580,162,1,1,0]);
	this.background.push([4,10669,299,-1,1,0]);
	this.background.push([6,10731,405,1.12,1.12,0]);
	this.background.push([3,12090,115,-0.85,0.85,-9]);
	this.background.push([3,12115,199,-1,1,0]);
	this.background.push([3,12182,35,-1,1,0]);
	this.background.push([3,12226,131,-1,1,0]);
	this.background.push([1,12234,244,1,1,0]);
	this.background.push([3,12276,-5,-1,1,-17]);
	this.background.push([3,12304,185,-1,1,0]);
	this.background.push([3,12307,80,-1,1,-4]);
	this.background.push([2,12342,395,1,1,0]);
	this.background.push([3,12415,105,-1,1,0]);
	this.background.push([3,12473,187,-1,1,0]);
	this.background.push([3,12477,22,-1,1,-4]);
	this.background.push([3,12480,101,-1,1,19]);
	this.background.push([3,12562,145,-1,1,19]);
	this.background.push([6,13978,421,-1.19,-1.19,75]);
	this.background.push([6,14038,390,1.42,1.42,0]);
	this.background.push([6,14074,426,1,1,-46]);
	this.background.push([5,14171,163,-1,1,0]);
	this.background.push([4,14257,301,1,1,0]);
	this.background.push([6,14363,396,1.42,1.42,0]);
};
$hxClasses["levels.Level12"] = levels.Level12;
levels.Level12.__name__ = ["levels","Level12"];
levels.Level12.__super__ = levels.LevelBase;
levels.Level12.prototype = $extend(levels.LevelBase.prototype,{
	__class__: levels.Level12
});
levels.Level2 = function() {
	levels.LevelBase.call(this);
	this.levelEndX = 12092;
	this.elements.push([3,744,305]);
	this.elements.push([3,794,305]);
	this.elements.push([3,844,305]);
	this.elements.push([1,1066,340,1]);
	this.elements.push([3,1287,200]);
	this.elements.push([3,1337,200]);
	this.elements.push([3,1387,200]);
	this.elements.push([1,1557,235,1]);
	this.elements.push([13,1681,189]);
	this.elements.push([4,2071,390]);
	this.elements.push([3,2157,220]);
	this.elements.push([3,2182,170]);
	this.elements.push([3,2207,120]);
	this.elements.push([0,2599,340,7]);
	this.elements.push([3,2667,295]);
	this.elements.push([3,2717,295]);
	this.elements.push([3,2767,295]);
	this.elements.push([6,3123,291]);
	this.elements.push([3,3369,200]);
	this.elements.push([3,3419,200]);
	this.elements.push([3,3469,200]);
	this.elements.push([13,3835,398]);
	this.elements.push([17,3948,329,5]);
	this.elements.push([2,4451,416]);
	this.elements.push([12,4538,398]);
	this.elements.push([3,4779,410]);
	this.elements.push([7,4798,305]);
	this.elements.push([3,4829,410]);
	this.elements.push([6,5516,399]);
	this.elements.push([1,5745,340,2]);
	this.elements.push([3,5763,295]);
	this.elements.push([3,5813,295]);
	this.elements.push([3,5863,295]);
	this.elements.push([1,6168,235,2.5]);
	this.elements.push([10,6188,178]);
	this.elements.push([3,6412,90]);
	this.elements.push([3,6462,90]);
	this.elements.push([12,6564,187]);
	this.elements.push([3,6687,305]);
	this.elements.push([2,6715,415]);
	this.elements.push([3,6737,305]);
	this.elements.push([3,6787,305]);
	this.elements.push([1,6913,233,2]);
	this.elements.push([3,7301,400]);
	this.elements.push([13,7312,189]);
	this.elements.push([3,7351,400]);
	this.elements.push([3,7401,400]);
	this.elements.push([4,7726,390]);
	this.elements.push([3,7802,220]);
	this.elements.push([3,7827,170]);
	this.elements.push([3,7852,120]);
	this.elements.push([3,8181,305]);
	this.elements.push([3,8231,305]);
	this.elements.push([3,8281,305]);
	this.elements.push([7,8538,305]);
	this.elements.push([0,8847,340,6]);
	this.elements.push([2,8939,415]);
	this.elements.push([3,9152,400]);
	this.elements.push([3,9202,400]);
	this.elements.push([5,9229,268]);
	this.elements.push([3,9252,400]);
	this.elements.push([12,9531,398]);
	this.elements.push([1,9609,233,2]);
	this.elements.push([3,9659,190]);
	this.elements.push([3,9709,190]);
	this.elements.push([3,9759,190]);
	this.elements.push([2,9769,415]);
	this.elements.push([4,10503,390]);
	this.elements.push([3,10589,248]);
	this.elements.push([3,10614,198]);
	this.elements.push([3,10639,148]);
	this.elements.push([4,10783,390]);
	this.elements.push([1,10961,233,2]);
	this.elements.push([3,11036,190]);
	this.elements.push([3,11086,190]);
	this.elements.push([3,11136,190]);
	this.elements.push([2,11197,415]);
	this.elements.push([3,11597,394]);
	this.elements.push([3,11647,394]);
	this.elements.push([3,11697,394]);
	this.background.push([5,165,155,1,1,0]);
	this.background.push([4,251,293,1,1,0]);
	this.background.push([6,267,409,1,1,0]);
	this.background.push([5,475,147,-1.03,1.03,0]);
	this.background.push([4,563,288,1.03,1.03,0]);
	this.background.push([6,630,421,1,1,-41]);
	this.background.push([6,702,424,0.78,0.78,4]);
	this.background.push([5,922,155,1,1,0]);
	this.background.push([4,1011,293,-1,1,0]);
	this.background.push([5,1611,79,-1.27,1.27,0]);
	this.background.push([4,1721,253,1.27,1.27,0]);
	this.background.push([6,2195,405,1.19,1.19,0]);
	this.background.push([6,2230,432,1,1,-46]);
	this.background.push([5,3563,100,-1.19,1.19,0]);
	this.background.push([4,3666,264,1.19,1.19,0]);
	this.background.push([5,3711,147,-1.03,1.03,0]);
	this.background.push([4,3800,288,1.03,1.03,0]);
	this.background.push([6,4443,425,-1.19,-1.19,75]);
	this.background.push([6,4503,395,1.42,1.42,0]);
	this.background.push([6,4538,430,1,1,-46]);
	this.background.push([5,5548,155,-1,1,0]);
	this.background.push([4,5634,293,1,1,0]);
	this.background.push([6,6440,438,-1,1,46]);
	this.background.push([6,6479,403,-1.42,1.42,0]);
	this.background.push([6,6531,433,1.19,-1.19,-75]);
	this.background.push([3,6777,112,-0.85,0.85,-9]);
	this.background.push([3,6802,196,-1,1,0]);
	this.background.push([3,6868,32,-1,1,0]);
	this.background.push([3,6912,128,-1,1,0]);
	this.background.push([1,6921,241,1,1,0]);
	this.background.push([3,6963,-8,-1,1,-17]);
	this.background.push([3,6991,182,-1,1,0]);
	this.background.push([3,6993,77,-1,1,-4]);
	this.background.push([2,7028,392,1,1,0]);
	this.background.push([3,7102,102,-1,1,0]);
	this.background.push([3,7160,183,-1,1,0]);
	this.background.push([3,7163,19,-1,1,-4]);
	this.background.push([6,7165,400,1.42,1.42,0]);
	this.background.push([3,7166,98,-1,1,19]);
	this.background.push([3,7248,141,-1,1,19]);
	this.background.push([5,7896,162,1,1,0]);
	this.background.push([4,7985,299,-1,1,0]);
	this.background.push([6,8047,405,1.12,1.12,0]);
};
$hxClasses["levels.Level2"] = levels.Level2;
levels.Level2.__name__ = ["levels","Level2"];
levels.Level2.__super__ = levels.LevelBase;
levels.Level2.prototype = $extend(levels.LevelBase.prototype,{
	__class__: levels.Level2
});
levels.Level3 = function() {
	levels.LevelBase.call(this);
	this.levelEndX = 13000;
	this.elements.push([15,215,409]);
	this.elements.push([13,716,397]);
	this.elements.push([17,831,327,6]);
	this.elements.push([7,1545,305]);
	this.elements.push([3,1749,400]);
	this.elements.push([3,1799,400]);
	this.elements.push([3,1849,400]);
	this.elements.push([2,1937,415]);
	this.elements.push([0,2243,340,6]);
	this.elements.push([3,2263,295]);
	this.elements.push([3,2313,295]);
	this.elements.push([3,2363,295]);
	this.elements.push([5,2565,269]);
	this.elements.push([3,2921,200]);
	this.elements.push([3,2971,200]);
	this.elements.push([3,3021,200]);
	this.elements.push([0,3256,340,4]);
	this.elements.push([3,3295,295]);
	this.elements.push([3,3345,295]);
	this.elements.push([3,3395,295]);
	this.elements.push([3,3595,400]);
	this.elements.push([13,3598,295]);
	this.elements.push([3,3645,400]);
	this.elements.push([2,3949,415]);
	this.elements.push([0,4262,340,6]);
	this.elements.push([2,4290,312]);
	this.elements.push([3,4614,295]);
	this.elements.push([3,4664,295]);
	this.elements.push([3,4714,295]);
	this.elements.push([6,4763,397]);
	this.elements.push([12,4854,184]);
	this.elements.push([1,4974,235,2]);
	this.elements.push([2,5167,205]);
	this.elements.push([2,5365,416]);
	this.elements.push([3,5564,400]);
	this.elements.push([3,5614,400]);
	this.elements.push([3,5664,400]);
	this.elements.push([6,5981,397]);
	this.elements.push([4,6227,390]);
	this.elements.push([1,6360,235,2]);
	this.elements.push([3,6641,190]);
	this.elements.push([3,6691,190]);
	this.elements.push([3,6741,190]);
	this.elements.push([7,6796,90]);
	this.elements.push([4,6924,390]);
	this.elements.push([3,7020,256]);
	this.elements.push([3,7045,206]);
	this.elements.push([3,7070,156]);
	this.elements.push([12,7294,184]);
	this.elements.push([0,7359,340,8]);
	this.elements.push([2,7403,310]);
	this.elements.push([3,7441,400]);
	this.elements.push([3,7491,400]);
	this.elements.push([0,7638,236,3]);
	this.elements.push([2,7687,414]);
	this.elements.push([10,8152,389]);
	this.elements.push([3,8435,400]);
	this.elements.push([3,8485,400]);
	this.elements.push([3,8535,400]);
	this.elements.push([13,8614,402]);
	this.elements.push([4,9000,390]);
	this.elements.push([12,9041,186]);
	this.elements.push([3,9075,206]);
	this.elements.push([3,9100,156]);
	this.elements.push([1,9140,235,2]);
	this.elements.push([3,9458,305]);
	this.elements.push([2,9461,416]);
	this.elements.push([3,9508,305]);
	this.elements.push([7,9943,305]);
	this.elements.push([3,10142,305]);
	this.elements.push([3,10192,305]);
	this.elements.push([3,10242,305]);
	this.elements.push([7,10449,305]);
	this.elements.push([0,10797,340,8]);
	this.elements.push([3,10850,295]);
	this.elements.push([3,10900,295]);
	this.elements.push([3,10950,295]);
	this.elements.push([6,11256,290]);
	this.elements.push([3,11320,400]);
	this.elements.push([3,11370,400]);
	this.elements.push([13,11572,402]);
	this.elements.push([4,11868,390]);
	this.elements.push([1,12052,235,2]);
	this.elements.push([3,12073,190]);
	this.elements.push([3,12092,390]);
	this.elements.push([3,12123,190]);
	this.elements.push([3,12142,390]);
	this.elements.push([2,12242,204]);
	this.elements.push([3,12505,90]);
	this.elements.push([3,12555,90]);
	this.elements.push([3,12605,90]);
	this.background.push([6,96,420,-1.19,-1.19,75]);
	this.background.push([6,156,390,1.42,1.42,0]);
	this.background.push([6,191,425,1,1,-46]);
	this.background.push([5,275,213,0.82,0.82,0]);
	this.background.push([4,345,325,-0.82,0.82,0]);
	this.background.push([5,1134,245,0.82,0.82,0]);
	this.background.push([5,1193,155,-1,1,0]);
	this.background.push([4,1194,358,-0.82,0.82,0]);
	this.background.push([4,1279,293,1,1,0]);
	this.background.push([6,2069,405,1.19,1.19,0]);
	this.background.push([6,2104,432,1,1,-46]);
	this.background.push([3,3120,106,-0.85,0.85,-9]);
	this.background.push([3,3145,190,-1,1,0]);
	this.background.push([3,3212,27,-1,1,0]);
	this.background.push([3,3256,123,-1,1,0]);
	this.background.push([1,3264,236,1,1,0]);
	this.background.push([3,3307,-14,-1,1,-17]);
	this.background.push([3,3335,177,-1,1,0]);
	this.background.push([3,3337,72,-1,1,-4]);
	this.background.push([2,3371,387,1,1,0]);
	this.background.push([3,3445,96,-1,1,0]);
	this.background.push([3,3503,178,-1,1,0]);
	this.background.push([3,3507,13,-1,1,-4]);
	this.background.push([3,3510,93,-1,1,19]);
	this.background.push([3,3592,136,-1,1,19]);
	this.background.push([6,4443,425,-1.19,-1.19,75]);
	this.background.push([6,4503,395,1.42,1.42,0]);
	this.background.push([6,4538,430,1,1,-46]);
	this.background.push([5,5548,155,-1,1,0]);
	this.background.push([4,5634,293,1,1,0]);
	this.background.push([6,6440,438,-1,1,46]);
	this.background.push([6,6479,403,-1.42,1.42,0]);
	this.background.push([3,6504,112,-0.85,0.85,-9]);
	this.background.push([3,6529,196,-1,1,0]);
	this.background.push([6,6531,433,1.19,-1.19,-75]);
	this.background.push([3,6595,32,-1,1,0]);
	this.background.push([1,6623,250,1,1,0]);
	this.background.push([3,6639,128,-1,1,0]);
	this.background.push([3,6690,-8,-1,1,-17]);
	this.background.push([3,6718,182,-1,1,0]);
	this.background.push([3,6720,77,-1,1,-4]);
	this.background.push([2,6731,401,1,1,0]);
	this.background.push([3,6829,102,-1,1,0]);
	this.background.push([3,6887,183,-1,1,0]);
	this.background.push([3,6890,19,-1,1,-4]);
	this.background.push([3,6893,98,-1,1,19]);
	this.background.push([3,6975,141,-1,1,19]);
	this.background.push([6,7165,400,1.42,1.42,0]);
	this.background.push([5,10580,162,1,1,0]);
	this.background.push([4,10669,299,-1,1,0]);
	this.background.push([6,10731,405,1.12,1.12,0]);
	this.background.push([3,11410,115,-0.85,0.85,-9]);
	this.background.push([3,11435,199,-1,1,0]);
	this.background.push([3,11502,35,-1,1,0]);
	this.background.push([3,11546,131,-1,1,0]);
	this.background.push([1,11554,244,1,1,0]);
	this.background.push([3,11596,-5,-1,1,-17]);
	this.background.push([3,11624,185,-1,1,0]);
	this.background.push([3,11627,80,-1,1,-4]);
	this.background.push([2,11662,395,1,1,0]);
	this.background.push([3,11735,105,-1,1,0]);
	this.background.push([3,11793,187,-1,1,0]);
	this.background.push([3,11797,22,-1,1,-4]);
	this.background.push([3,11800,101,-1,1,19]);
	this.background.push([3,11882,145,-1,1,19]);
};
$hxClasses["levels.Level3"] = levels.Level3;
levels.Level3.__name__ = ["levels","Level3"];
levels.Level3.__super__ = levels.LevelBase;
levels.Level3.prototype = $extend(levels.LevelBase.prototype,{
	__class__: levels.Level3
});
levels.Level4 = function() {
	levels.LevelBase.call(this);
	this.levelEndX = 15802;
	this.elements.push([3,715,400]);
	this.elements.push([3,765,400]);
	this.elements.push([3,815,400]);
	this.elements.push([3,1031,200]);
	this.elements.push([3,1081,200]);
	this.elements.push([3,1131,200]);
	this.elements.push([17,1218,332,7]);
	this.elements.push([0,1808,340,4]);
	this.elements.push([3,1842,295]);
	this.elements.push([3,1892,295]);
	this.elements.push([3,2167,400]);
	this.elements.push([3,2217,400]);
	this.elements.push([3,2544,200]);
	this.elements.push([3,2594,200]);
	this.elements.push([3,2644,200]);
	this.elements.push([2,2936,415]);
	this.elements.push([7,3266,305]);
	this.elements.push([3,3460,400]);
	this.elements.push([3,3510,400]);
	this.elements.push([2,3586,415]);
	this.elements.push([0,4093,340,6]);
	this.elements.push([2,4125,312]);
	this.elements.push([3,4378,295]);
	this.elements.push([3,4428,295]);
	this.elements.push([3,4478,295]);
	this.elements.push([13,4669,295]);
	this.elements.push([12,4969,187]);
	this.elements.push([1,5102,235,2]);
	this.elements.push([3,5141,190]);
	this.elements.push([3,5193,190]);
	this.elements.push([3,5243,190]);
	this.elements.push([13,5401,400]);
	this.elements.push([7,5931,305]);
	this.elements.push([4,6337,390]);
	this.elements.push([3,6474,159]);
	this.elements.push([3,6499,109]);
	this.elements.push([3,6524,59]);
	this.elements.push([1,6953,235,4]);
	this.elements.push([2,7002,414]);
	this.elements.push([13,7165,191]);
	this.elements.push([10,7245,382]);
	this.elements.push([3,7383,190]);
	this.elements.push([3,7433,190]);
	this.elements.push([3,7483,190]);
	this.elements.push([13,7652,191]);
	this.elements.push([3,7829,400]);
	this.elements.push([3,7879,400]);
	this.elements.push([3,8444,200]);
	this.elements.push([6,8472,398]);
	this.elements.push([3,8494,200]);
	this.elements.push([3,8544,200]);
	this.elements.push([0,8805,340,8]);
	this.elements.push([2,8834,308]);
	this.elements.push([0,8937,236,2]);
	this.elements.push([3,8978,190]);
	this.elements.push([3,9028,190]);
	this.elements.push([3,9078,190]);
	this.elements.push([2,9113,413]);
	this.elements.push([13,9333,297]);
	this.elements.push([0,9429,236,2]);
	this.elements.push([15,9596,201]);
	this.elements.push([3,10054,400]);
	this.elements.push([7,10094,305]);
	this.elements.push([3,10104,400]);
	this.elements.push([3,10154,400]);
	this.elements.push([12,10327,180]);
	this.elements.push([1,10385,235,2.5]);
	this.elements.push([2,10409,413]);
	this.elements.push([13,10645,191]);
	this.elements.push([2,10655,413]);
	this.elements.push([3,11352,255]);
	this.elements.push([5,11402,372]);
	this.elements.push([3,11402,235]);
	this.elements.push([3,11452,215]);
	this.elements.push([0,11817,340,8]);
	this.elements.push([2,12018,309]);
	this.elements.push([3,12155,295]);
	this.elements.push([3,12205,295]);
	this.elements.push([2,12305,309]);
	this.elements.push([3,12442,295]);
	this.elements.push([3,12492,295]);
	this.elements.push([6,12499,398]);
	this.elements.push([2,12592,309]);
	this.elements.push([1,13072,235,2]);
	this.elements.push([13,13166,402]);
	this.elements.push([3,13166,190]);
	this.elements.push([3,13216,190]);
	this.elements.push([3,13266,190]);
	this.elements.push([5,13473,163]);
	this.elements.push([3,13488,400]);
	this.elements.push([3,13538,400]);
	this.elements.push([12,13762,395]);
	this.elements.push([13,14089,402]);
	this.elements.push([0,14447,340,5]);
	this.elements.push([6,14457,291]);
	this.elements.push([3,14643,295]);
	this.elements.push([3,14693,295]);
	this.elements.push([3,14743,295]);
	this.elements.push([5,14904,268]);
	this.elements.push([3,14919,400]);
	this.elements.push([3,14969,400]);
	this.elements.push([3,15307,200]);
	this.elements.push([3,15357,200]);
	this.elements.push([3,15407,200]);
	this.background.push([6,96,420,-1.19,-1.19,75]);
	this.background.push([6,156,390,1.42,1.42,0]);
	this.background.push([6,191,425,1,1,-46]);
	this.background.push([5,275,213,0.82,0.82,0]);
	this.background.push([4,345,325,-0.82,0.82,0]);
	this.background.push([5,1134,245,0.82,0.82,0]);
	this.background.push([5,1193,155,-1,1,0]);
	this.background.push([4,1194,358,-0.82,0.82,0]);
	this.background.push([4,1279,293,1,1,0]);
	this.background.push([6,2069,405,1.19,1.19,0]);
	this.background.push([6,2104,432,1,1,-46]);
	this.background.push([3,3120,106,-0.85,0.85,-9]);
	this.background.push([3,3145,190,-1,1,0]);
	this.background.push([3,3212,27,-1,1,0]);
	this.background.push([3,3256,123,-1,1,0]);
	this.background.push([1,3264,236,1,1,0]);
	this.background.push([3,3307,-14,-1,1,-17]);
	this.background.push([3,3335,177,-1,1,0]);
	this.background.push([3,3337,72,-1,1,-4]);
	this.background.push([2,3371,387,1,1,0]);
	this.background.push([3,3445,96,-1,1,0]);
	this.background.push([3,3503,178,-1,1,0]);
	this.background.push([3,3507,13,-1,1,-4]);
	this.background.push([3,3510,93,-1,1,19]);
	this.background.push([3,3592,136,-1,1,19]);
	this.background.push([6,4443,425,-1.19,-1.19,75]);
	this.background.push([6,4503,395,1.42,1.42,0]);
	this.background.push([6,4538,430,1,1,-46]);
	this.background.push([5,5548,155,-1,1,0]);
	this.background.push([4,5634,293,1,1,0]);
	this.background.push([6,6440,438,-1,1,46]);
	this.background.push([6,6479,403,-1.42,1.42,0]);
	this.background.push([3,6504,112,-0.85,0.85,-9]);
	this.background.push([3,6529,196,-1,1,0]);
	this.background.push([6,6531,433,1.19,-1.19,-75]);
	this.background.push([3,6595,32,-1,1,0]);
	this.background.push([1,6623,250,1,1,0]);
	this.background.push([3,6639,128,-1,1,0]);
	this.background.push([3,6690,-8,-1,1,-17]);
	this.background.push([3,6718,182,-1,1,0]);
	this.background.push([3,6720,77,-1,1,-4]);
	this.background.push([2,6731,401,1,1,0]);
	this.background.push([3,6829,102,-1,1,0]);
	this.background.push([3,6887,183,-1,1,0]);
	this.background.push([3,6890,19,-1,1,-4]);
	this.background.push([3,6893,98,-1,1,19]);
	this.background.push([3,6975,141,-1,1,19]);
	this.background.push([6,7165,400,1.42,1.42,0]);
	this.background.push([5,10580,162,1,1,0]);
	this.background.push([4,10669,299,-1,1,0]);
	this.background.push([6,10731,405,1.12,1.12,0]);
	this.background.push([3,11410,115,-0.85,0.85,-9]);
	this.background.push([3,11435,199,-1,1,0]);
	this.background.push([3,11502,35,-1,1,0]);
	this.background.push([3,11546,131,-1,1,0]);
	this.background.push([1,11554,244,1,1,0]);
	this.background.push([3,11596,-5,-1,1,-17]);
	this.background.push([3,11624,185,-1,1,0]);
	this.background.push([3,11627,80,-1,1,-4]);
	this.background.push([2,11662,395,1,1,0]);
	this.background.push([3,11735,105,-1,1,0]);
	this.background.push([3,11793,187,-1,1,0]);
	this.background.push([3,11797,22,-1,1,-4]);
	this.background.push([3,11800,101,-1,1,19]);
	this.background.push([3,11882,145,-1,1,19]);
};
$hxClasses["levels.Level4"] = levels.Level4;
levels.Level4.__name__ = ["levels","Level4"];
levels.Level4.__super__ = levels.LevelBase;
levels.Level4.prototype = $extend(levels.LevelBase.prototype,{
	__class__: levels.Level4
});
levels.Level5 = function() {
	levels.LevelBase.call(this);
	this.levelEndX = 14703;
	this.elements.push([3,680,190]);
	this.elements.push([3,730,190]);
	this.elements.push([3,780,190]);
	this.elements.push([3,1079,190]);
	this.elements.push([3,1129,190]);
	this.elements.push([3,1179,190]);
	this.elements.push([0,1521,340,8]);
	this.elements.push([2,1558,310]);
	this.elements.push([3,1734,295]);
	this.elements.push([3,1784,295]);
	this.elements.push([3,1834,295]);
	this.elements.push([5,1958,271]);
	this.elements.push([3,2085,400]);
	this.elements.push([3,2135,400]);
	this.elements.push([3,2185,400]);
	this.elements.push([3,2475,110]);
	this.elements.push([3,2525,90]);
	this.elements.push([3,2575,70]);
	this.elements.push([7,2920,305]);
	this.elements.push([13,3250,399]);
	this.elements.push([2,3614,413]);
	this.elements.push([1,3662,235,1.5]);
	this.elements.push([3,3702,190]);
	this.elements.push([3,3752,190]);
	this.elements.push([3,3802,190]);
	this.elements.push([15,3949,202]);
	this.elements.push([3,4124,400]);
	this.elements.push([3,4174,400]);
	this.elements.push([3,4224,400]);
	this.elements.push([0,4506,340,10]);
	this.elements.push([2,4533,311]);
	this.elements.push([0,4585,235,7]);
	this.elements.push([3,4611,190]);
	this.elements.push([3,4661,190]);
	this.elements.push([12,4824,395]);
	this.elements.push([2,4873,416]);
	this.elements.push([2,4912,312]);
	this.elements.push([5,5271,162]);
	this.elements.push([3,5724,110]);
	this.elements.push([3,5774,90]);
	this.elements.push([3,5824,70]);
	this.elements.push([12,6413,186]);
	this.elements.push([6,6498,395]);
	this.elements.push([1,6684,235,1.5]);
	this.elements.push([13,6699,191]);
	this.elements.push([3,7337,190]);
	this.elements.push([3,7387,190]);
	this.elements.push([3,7437,190]);
	this.elements.push([4,7834,390]);
	this.elements.push([3,7973,70]);
	this.elements.push([3,8023,70]);
	this.elements.push([3,8073,70]);
	this.elements.push([1,8123,340,1.5]);
	this.elements.push([3,8357,400]);
	this.elements.push([13,8372,295]);
	this.elements.push([3,8407,400]);
	this.elements.push([3,8457,400]);
	this.elements.push([10,8694,385]);
	this.elements.push([3,9044,305]);
	this.elements.push([13,9077,400]);
	this.elements.push([3,9094,305]);
	this.elements.push([2,9409,416]);
	this.elements.push([1,9479,235,3.5]);
	this.elements.push([3,9703,190]);
	this.elements.push([7,9717,95]);
	this.elements.push([3,9753,190]);
	this.elements.push([12,9770,394]);
	this.elements.push([3,9803,190]);
	this.elements.push([3,9853,190]);
	this.elements.push([3,9904,190]);
	this.elements.push([2,10065,205]);
	this.elements.push([2,10654,416]);
	this.elements.push([0,11005,340,7]);
	this.elements.push([5,11032,270]);
	this.elements.push([3,11255,295]);
	this.elements.push([3,11305,295]);
	this.elements.push([3,11355,295]);
	this.elements.push([13,11512,295]);
	this.elements.push([6,11662,397]);
	this.elements.push([7,12232,305]);
	this.elements.push([5,12532,375]);
	this.elements.push([3,12874,400]);
	this.elements.push([3,12924,400]);
	this.elements.push([1,12950,235,1.5]);
	this.elements.push([3,12974,400]);
	this.elements.push([2,13043,417]);
	this.elements.push([3,13325,70]);
	this.elements.push([3,13375,70]);
	this.elements.push([3,13425,70]);
	this.elements.push([0,13514,340,6]);
	this.elements.push([13,13531,295]);
	this.elements.push([2,13579,416]);
	this.elements.push([3,13874,400]);
	this.elements.push([3,13924,400]);
	this.elements.push([3,14208,110]);
	this.elements.push([3,14258,90]);
	this.elements.push([3,14308,70]);
	this.background.push([3,286,105,-0.85,0.85,-9]);
	this.background.push([3,311,189,-1,1,0]);
	this.background.push([3,377,25,-1,1,0]);
	this.background.push([3,421,121,-1,1,0]);
	this.background.push([1,430,234,1,1,0]);
	this.background.push([3,472,-15,-1,1,-17]);
	this.background.push([3,500,175,-1,1,0]);
	this.background.push([3,502,70,-1,1,-4]);
	this.background.push([2,538,385,1,1,0]);
	this.background.push([3,611,95,-1,1,0]);
	this.background.push([3,669,176,-1,1,0]);
	this.background.push([3,672,12,-1,1,-4]);
	this.background.push([3,675,91,-1,1,19]);
	this.background.push([3,757,134,-1,1,19]);
	this.background.push([5,1151,155,-1,1,0]);
	this.background.push([4,1229,293,1,1,0]);
	this.background.push([6,2426,405,1.19,1.19,0]);
	this.background.push([6,2461,432,1,1,-46]);
	this.background.push([5,3504,245,0.82,0.82,0]);
	this.background.push([5,3563,155,-1,1,0]);
	this.background.push([4,3564,358,-0.82,0.82,0]);
	this.background.push([4,3649,293,1,1,0]);
	this.background.push([6,4443,425,-1.19,-1.19,75]);
	this.background.push([6,4503,395,1.42,1.42,0]);
	this.background.push([6,4538,430,1,1,-46]);
	this.background.push([5,5548,155,-1,1,0]);
	this.background.push([4,5634,293,1,1,0]);
	this.background.push([6,6440,438,-1,1,46]);
	this.background.push([6,6479,403,-1.42,1.42,0]);
	this.background.push([3,6504,112,-0.85,0.85,-9]);
	this.background.push([3,6529,196,-1,1,0]);
	this.background.push([6,6531,433,1.19,-1.19,-75]);
	this.background.push([3,6595,32,-1,1,0]);
	this.background.push([3,6639,128,-1,1,0]);
	this.background.push([1,6648,241,1,1,0]);
	this.background.push([3,6690,-8,-1,1,-17]);
	this.background.push([3,6718,182,-1,1,0]);
	this.background.push([3,6720,77,-1,1,-4]);
	this.background.push([2,6755,392,1,1,0]);
	this.background.push([3,6829,102,-1,1,0]);
	this.background.push([3,6887,183,-1,1,0]);
	this.background.push([3,6890,19,-1,1,-4]);
	this.background.push([3,6893,98,-1,1,19]);
	this.background.push([3,6975,141,-1,1,19]);
	this.background.push([6,7165,400,1.42,1.42,0]);
	this.background.push([5,10580,162,1,1,0]);
	this.background.push([4,10669,299,-1,1,0]);
	this.background.push([6,10731,405,1.12,1.12,0]);
	this.background.push([3,12090,115,-0.85,0.85,-9]);
	this.background.push([3,12115,199,-1,1,0]);
	this.background.push([3,12182,35,-1,1,0]);
	this.background.push([3,12226,131,-1,1,0]);
	this.background.push([1,12234,244,1,1,0]);
	this.background.push([3,12276,-5,-1,1,-17]);
	this.background.push([3,12304,185,-1,1,0]);
	this.background.push([3,12307,80,-1,1,-4]);
	this.background.push([2,12342,395,1,1,0]);
	this.background.push([3,12415,105,-1,1,0]);
	this.background.push([3,12473,187,-1,1,0]);
	this.background.push([3,12477,22,-1,1,-4]);
	this.background.push([3,12480,101,-1,1,19]);
	this.background.push([3,12562,145,-1,1,19]);
	this.background.push([6,13978,421,-1.19,-1.19,75]);
	this.background.push([6,14038,390,1.42,1.42,0]);
	this.background.push([6,14074,426,1,1,-46]);
	this.background.push([5,14171,163,-1,1,0]);
	this.background.push([4,14257,301,1,1,0]);
	this.background.push([6,14363,396,1.42,1.42,0]);
};
$hxClasses["levels.Level5"] = levels.Level5;
levels.Level5.__name__ = ["levels","Level5"];
levels.Level5.__super__ = levels.LevelBase;
levels.Level5.prototype = $extend(levels.LevelBase.prototype,{
	__class__: levels.Level5
});
levels.Level6 = function() {
	levels.LevelBase.call(this);
	this.levelEndX = 20149;
	this.elements.push([13,755,400]);
	this.elements.push([3,1375,190]);
	this.elements.push([3,1425,190]);
	this.elements.push([3,1475,190]);
	this.elements.push([14,1500,410]);
	this.elements.push([14,1903,410]);
	this.elements.push([1,2041,235,1.5]);
	this.elements.push([5,2068,372]);
	this.elements.push([13,2301,189]);
	this.elements.push([3,2443,226]);
	this.elements.push([3,2485,251]);
	this.elements.push([3,2527,276]);
	this.elements.push([13,2802,400]);
	this.elements.push([7,3137,305]);
	this.elements.push([3,3469,305]);
	this.elements.push([3,3519,305]);
	this.elements.push([3,3569,305]);
	this.elements.push([0,3823,340,3]);
	this.elements.push([6,3844,292]);
	this.elements.push([3,4027,295]);
	this.elements.push([6,4036,396]);
	this.elements.push([3,4077,295]);
	this.elements.push([3,4127,295]);
	this.elements.push([8,4614,424]);
	this.elements.push([8,4976,424]);
	this.elements.push([8,5161,424]);
	this.elements.push([1,5498,340,4.5]);
	this.elements.push([1,5621,235,4]);
	this.elements.push([3,5723,190]);
	this.elements.push([3,5773,190]);
	this.elements.push([3,5823,190]);
	this.elements.push([3,6174,400]);
	this.elements.push([3,6224,400]);
	this.elements.push([14,6242,303]);
	this.elements.push([14,6427,404]);
	this.elements.push([14,6427,199]);
	this.elements.push([3,6631,106]);
	this.elements.push([3,6681,86]);
	this.elements.push([3,6731,65]);
	this.elements.push([7,7079,305]);
	this.elements.push([5,7374,373]);
	this.elements.push([1,7835,235,1.5]);
	this.elements.push([2,7890,413]);
	this.elements.push([10,7998,175]);
	this.elements.push([13,8098,191]);
	this.elements.push([0,8392,340,6]);
	this.elements.push([13,8454,400]);
	this.elements.push([3,8673,400]);
	this.elements.push([3,8723,400]);
	this.elements.push([3,8773,400]);
	this.elements.push([13,8938,400]);
	this.elements.push([15,8968,305]);
	this.elements.push([1,9160,235,3.5]);
	this.elements.push([7,9364,95]);
	this.elements.push([5,9406,370]);
	this.elements.push([3,9548,90]);
	this.elements.push([3,9598,90]);
	this.elements.push([3,9648,90]);
	this.elements.push([3,9902,400]);
	this.elements.push([2,9934,207]);
	this.elements.push([3,9952,400]);
	this.elements.push([3,10002,400]);
	this.elements.push([12,10279,98]);
	this.elements.push([4,10386,390]);
	this.elements.push([1,10638,150,1]);
	this.elements.push([2,11217,416]);
	this.elements.push([6,11782,397]);
	this.elements.push([0,11924,340,7]);
	this.elements.push([12,12074,186]);
	this.elements.push([1,12300,235,1.5]);
	this.elements.push([13,12314,192]);
	this.elements.push([2,12334,311]);
	this.elements.push([7,13104,305]);
	this.elements.push([3,13214,400]);
	this.elements.push([3,13264,400]);
	this.elements.push([3,13314,400]);
	this.elements.push([7,13399,305]);
	this.elements.push([0,13641,340,4]);
	this.elements.push([3,13671,295]);
	this.elements.push([3,13721,295]);
	this.elements.push([3,13771,295]);
	this.elements.push([8,13902,319]);
	this.elements.push([3,14201,400]);
	this.elements.push([3,14251,400]);
	this.elements.push([8,14328,423]);
	this.elements.push([0,14596,340,5]);
	this.elements.push([13,14794,401]);
	this.elements.push([7,14807,200]);
	this.elements.push([13,14948,400]);
	this.elements.push([3,15012,146]);
	this.elements.push([5,15060,270]);
	this.elements.push([3,15062,126]);
	this.elements.push([3,15112,106]);
	this.elements.push([1,15471,340,4]);
	this.elements.push([1,15646,235,2.5]);
	this.elements.push([3,15839,295]);
	this.elements.push([3,15889,295]);
	this.elements.push([3,15939,295]);
	this.elements.push([14,15939,409]);
	this.elements.push([14,16123,301]);
	this.elements.push([3,16204,400]);
	this.elements.push([3,16254,400]);
	this.elements.push([14,16298,199]);
	this.elements.push([3,16515,106]);
	this.elements.push([3,16565,86]);
	this.elements.push([3,16615,65]);
	this.elements.push([12,16908,291]);
	this.elements.push([4,16939,390]);
	this.elements.push([0,17161,340,3]);
	this.elements.push([2,17187,309]);
	this.elements.push([2,17209,413]);
	this.elements.push([1,17781,340,3]);
	this.elements.push([3,17818,295]);
	this.elements.push([3,17868,295]);
	this.elements.push([3,17918,295]);
	this.elements.push([8,18018,320]);
	this.elements.push([13,18195,295]);
	this.elements.push([13,18285,400]);
	this.elements.push([2,18835,416]);
	this.elements.push([3,18837,305]);
	this.elements.push([3,18887,305]);
	this.elements.push([0,19225,340,2]);
	this.elements.push([3,19452,229]);
	this.elements.push([3,19502,208]);
	this.elements.push([3,19552,188]);
	this.elements.push([3,19654,208]);
	this.elements.push([3,19704,187]);
	this.elements.push([3,19754,167]);
	this.background.push([3,286,105,-0.85,0.85,-9]);
	this.background.push([3,311,189,-1,1,0]);
	this.background.push([3,377,25,-1,1,0]);
	this.background.push([3,421,121,-1,1,0]);
	this.background.push([1,430,234,1,1,0]);
	this.background.push([3,472,-15,-1,1,-17]);
	this.background.push([3,500,175,-1,1,0]);
	this.background.push([3,502,70,-1,1,-4]);
	this.background.push([2,538,385,1,1,0]);
	this.background.push([3,611,95,-1,1,0]);
	this.background.push([3,669,176,-1,1,0]);
	this.background.push([3,672,12,-1,1,-4]);
	this.background.push([3,675,91,-1,1,19]);
	this.background.push([3,757,134,-1,1,19]);
	this.background.push([5,1151,155,-1,1,0]);
	this.background.push([4,1229,293,1,1,0]);
	this.background.push([6,2426,405,1.19,1.19,0]);
	this.background.push([6,2461,432,1,1,-46]);
	this.background.push([5,3217,245,0.82,0.82,0]);
	this.background.push([5,3239,66,-1.31,1.31,0]);
	this.background.push([4,3277,358,-0.82,0.82,0]);
	this.background.push([4,3352,246,1.31,1.31,0]);
	this.background.push([5,3376,100,-1.19,1.19,0]);
	this.background.push([4,3478,264,1.19,1.19,0]);
	this.background.push([5,3699,66,1.31,1.31,0]);
	this.background.push([4,3815,246,-1.31,1.31,0]);
	this.background.push([6,4443,425,-1.19,-1.19,75]);
	this.background.push([6,4503,395,1.42,1.42,0]);
	this.background.push([6,4538,430,1,1,-46]);
	this.background.push([5,5548,155,-1,1,0]);
	this.background.push([4,5634,293,1,1,0]);
	this.background.push([6,6440,438,-1,1,46]);
	this.background.push([6,6479,403,-1.42,1.42,0]);
	this.background.push([3,6504,112,-0.85,0.85,-9]);
	this.background.push([3,6529,196,-1,1,0]);
	this.background.push([6,6531,433,1.19,-1.19,-75]);
	this.background.push([3,6595,32,-1,1,0]);
	this.background.push([3,6639,128,-1,1,0]);
	this.background.push([1,6648,241,1,1,0]);
	this.background.push([3,6690,-8,-1,1,-17]);
	this.background.push([3,6718,182,-1,1,0]);
	this.background.push([3,6720,77,-1,1,-4]);
	this.background.push([2,6755,392,1,1,0]);
	this.background.push([3,6829,102,-1,1,0]);
	this.background.push([3,6887,183,-1,1,0]);
	this.background.push([3,6890,19,-1,1,-4]);
	this.background.push([3,6893,98,-1,1,19]);
	this.background.push([3,6975,141,-1,1,19]);
	this.background.push([6,7165,400,1.42,1.42,0]);
	this.background.push([5,9678,100,1.19,1.19,0]);
	this.background.push([4,9784,264,-1.19,1.19,0]);
	this.background.push([5,9787,66,1.31,1.31,0]);
	this.background.push([4,9903,246,-1.31,1.31,0]);
	this.background.push([5,9921,245,-0.82,0.82,0]);
	this.background.push([4,10005,358,0.82,0.82,0]);
	this.background.push([5,10086,159,-1.02,1.02,0]);
	this.background.push([5,10136,48,-1.41,1.41,0]);
	this.background.push([4,10174,300,1.02,1.02,0]);
	this.background.push([4,10257,242,1.41,1.41,0]);
	this.background.push([5,10905,162,1,1,0]);
	this.background.push([4,10994,299,-1,1,0]);
	this.background.push([6,11056,405,1.12,1.12,0]);
	this.background.push([5,12619,157,-1.02,1.02,0]);
	this.background.push([5,12669,46,-1.41,1.41,0]);
	this.background.push([4,12707,298,1.02,1.02,0]);
	this.background.push([4,12791,240,1.41,1.41,0]);
	this.background.push([3,13728,115,-0.85,0.85,-9]);
	this.background.push([3,13753,199,-1,1,0]);
	this.background.push([3,13820,35,-1,1,0]);
	this.background.push([3,13864,131,-1,1,0]);
	this.background.push([1,13872,244,1,1,0]);
	this.background.push([3,13914,-5,-1,1,-17]);
	this.background.push([3,13942,185,-1,1,0]);
	this.background.push([3,13945,80,-1,1,-4]);
	this.background.push([2,13980,395,1,1,0]);
	this.background.push([3,14053,105,-1,1,0]);
	this.background.push([3,14111,187,-1,1,0]);
	this.background.push([3,14115,22,-1,1,-4]);
	this.background.push([3,14118,101,-1,1,19]);
	this.background.push([3,14200,145,-1,1,19]);
};
$hxClasses["levels.Level6"] = levels.Level6;
levels.Level6.__name__ = ["levels","Level6"];
levels.Level6.__super__ = levels.LevelBase;
levels.Level6.prototype = $extend(levels.LevelBase.prototype,{
	__class__: levels.Level6
});
levels.Level7 = function() {
	levels.LevelBase.call(this);
	this.levelEndX = 24303;
	this.elements.push([5,812,371]);
	this.elements.push([1,1270,235,2]);
	this.elements.push([3,1365,190]);
	this.elements.push([3,1415,190]);
	this.elements.push([13,1447,400]);
	this.elements.push([3,1465,190]);
	this.elements.push([2,1665,205]);
	this.elements.push([0,2023,340,6]);
	this.elements.push([3,2160,295]);
	this.elements.push([3,2210,295]);
	this.elements.push([5,2319,266]);
	this.elements.push([3,2490,295]);
	this.elements.push([3,2540,295]);
	this.elements.push([2,2584,414]);
	this.elements.push([3,3073,190]);
	this.elements.push([3,3123,190]);
	this.elements.push([3,3173,190]);
	this.elements.push([2,3455,414]);
	this.elements.push([6,3920,394]);
	this.elements.push([0,4129,340,3]);
	this.elements.push([3,4254,200]);
	this.elements.push([3,4304,200]);
	this.elements.push([3,4354,200]);
	this.elements.push([1,4784,235,1.5]);
	this.elements.push([2,4895,414]);
	this.elements.push([3,4924,190]);
	this.elements.push([3,4974,190]);
	this.elements.push([3,5024,190]);
	this.elements.push([13,5291,398]);
	this.elements.push([1,5465,235,1.5]);
	this.elements.push([3,5489,190]);
	this.elements.push([3,5489,400]);
	this.elements.push([3,5539,400]);
	this.elements.push([3,5539,190]);
	this.elements.push([2,5634,205]);
	this.elements.push([3,5869,223]);
	this.elements.push([3,5911,248]);
	this.elements.push([3,5953,273]);
	this.elements.push([3,6289,400]);
	this.elements.push([7,6330,305]);
	this.elements.push([3,6339,400]);
	this.elements.push([3,6389,400]);
	this.elements.push([5,6652,369]);
	this.elements.push([12,6952,183]);
	this.elements.push([1,7061,235,2]);
	this.elements.push([2,7076,414]);
	this.elements.push([13,7208,190]);
	this.elements.push([3,7234,400]);
	this.elements.push([3,7284,400]);
	this.elements.push([3,7334,400]);
	this.elements.push([2,7493,414]);
	this.elements.push([3,7920,305]);
	this.elements.push([3,7970,305]);
	this.elements.push([3,8020,305]);
	this.elements.push([1,8361,235,2]);
	this.elements.push([14,8437,411]);
	this.elements.push([3,8533,190]);
	this.elements.push([3,8583,190]);
	this.elements.push([3,8633,190]);
	this.elements.push([14,8712,411]);
	this.elements.push([0,9202,340,3]);
	this.elements.push([13,9220,403]);
	this.elements.push([15,9262,305]);
	this.elements.push([3,9435,400]);
	this.elements.push([2,9442,310]);
	this.elements.push([3,9485,400]);
	this.elements.push([5,9857,371]);
	this.elements.push([3,10076,400]);
	this.elements.push([3,10126,400]);
	this.elements.push([3,10176,400]);
	this.elements.push([6,10401,394]);
	this.elements.push([2,10875,415]);
	this.elements.push([2,11004,412]);
	this.elements.push([1,11076,250,2]);
	this.elements.push([10,11224,384]);
	this.elements.push([13,11259,204]);
	this.elements.push([3,11453,190]);
	this.elements.push([3,11503,190]);
	this.elements.push([3,11695,305]);
	this.elements.push([3,11745,305]);
	this.elements.push([3,11795,305]);
	this.elements.push([4,12060,390]);
	this.elements.push([13,12362,400]);
	this.elements.push([4,12477,390]);
	this.elements.push([3,12532,305]);
	this.elements.push([3,12564,257]);
	this.elements.push([3,12596,209]);
	this.elements.push([3,12628,161]);
	this.elements.push([12,12762,182]);
	this.elements.push([1,13013,235,2.5]);
	this.elements.push([3,13037,400]);
	this.elements.push([2,13061,203]);
	this.elements.push([3,13087,400]);
	this.elements.push([3,13137,400]);
	this.elements.push([13,13498,188]);
	this.elements.push([6,13605,396]);
	this.elements.push([7,14061,305]);
	this.elements.push([3,14210,400]);
	this.elements.push([3,14260,400]);
	this.elements.push([3,14310,400]);
	this.elements.push([7,14454,305]);
	this.elements.push([0,14750,340,9]);
	this.elements.push([3,14777,295]);
	this.elements.push([3,14827,295]);
	this.elements.push([2,14913,309]);
	this.elements.push([0,15084,235,4]);
	this.elements.push([13,15102,190]);
	this.elements.push([6,15112,396]);
	this.elements.push([3,15251,190]);
	this.elements.push([3,15301,190]);
	this.elements.push([3,15351,190]);
	this.elements.push([13,15450,190]);
	this.elements.push([3,15633,400]);
	this.elements.push([3,15683,400]);
	this.elements.push([3,15733,400]);
	this.elements.push([14,16434,413]);
	this.elements.push([12,16587,397]);
	this.elements.push([14,16659,413]);
	this.elements.push([14,16773,413]);
	this.elements.push([1,16803,235,3]);
	this.elements.push([5,16847,374]);
	this.elements.push([15,16900,201]);
	this.elements.push([5,17334,374]);
	this.elements.push([7,17493,95]);
	this.elements.push([3,17595,220]);
	this.elements.push([3,17637,245]);
	this.elements.push([3,17679,270]);
	this.elements.push([4,18247,390]);
	this.elements.push([3,18341,160]);
	this.elements.push([3,18391,143]);
	this.elements.push([3,18441,125]);
	this.elements.push([13,18811,399]);
	this.elements.push([0,19166,340,3]);
	this.elements.push([2,19222,415]);
	this.elements.push([3,19278,295]);
	this.elements.push([3,19328,295]);
	this.elements.push([1,19694,235,1.5]);
	this.elements.push([10,19727,175]);
	this.elements.push([2,19767,416]);
	this.elements.push([2,19973,206]);
	this.elements.push([3,20043,400]);
	this.elements.push([3,20093,400]);
	this.elements.push([3,20143,400]);
	this.elements.push([1,20408,235,1.5]);
	this.elements.push([5,20427,373]);
	this.elements.push([3,20428,190]);
	this.elements.push([3,20478,190]);
	this.elements.push([3,20528,190]);
	this.elements.push([13,20691,191]);
	this.elements.push([3,20931,330]);
	this.elements.push([2,20935,417]);
	this.elements.push([3,20981,330]);
	this.elements.push([7,21325,305]);
	this.elements.push([3,21591,330]);
	this.elements.push([2,21593,417]);
	this.elements.push([3,21641,330]);
	this.elements.push([2,21971,417]);
	this.elements.push([0,22235,340,2]);
	this.elements.push([3,22241,400]);
	this.elements.push([3,22291,400]);
	this.elements.push([5,22558,369]);
	this.elements.push([5,22694,369]);
	this.elements.push([0,23078,340,3]);
	this.elements.push([13,23108,293]);
	this.elements.push([6,23371,397]);
	this.elements.push([1,23416,235,1.5]);
	this.elements.push([3,23808,90]);
	this.elements.push([3,23858,90]);
	this.elements.push([3,23908,90]);
	this.background.push([3,286,105,-0.85,0.85,-9]);
	this.background.push([3,311,189,-1,1,0]);
	this.background.push([3,377,25,-1,1,0]);
	this.background.push([3,421,121,-1,1,0]);
	this.background.push([1,430,234,1,1,0]);
	this.background.push([3,472,-15,-1,1,-17]);
	this.background.push([3,500,175,-1,1,0]);
	this.background.push([3,502,70,-1,1,-4]);
	this.background.push([2,538,385,1,1,0]);
	this.background.push([3,611,95,-1,1,0]);
	this.background.push([3,669,176,-1,1,0]);
	this.background.push([3,672,12,-1,1,-4]);
	this.background.push([3,675,91,-1,1,19]);
	this.background.push([3,757,134,-1,1,19]);
	this.background.push([5,1548,155,-1,1,0]);
	this.background.push([4,1634,293,1,1,0]);
	this.background.push([6,2426,405,1.19,1.19,0]);
	this.background.push([6,2461,432,1,1,-46]);
	this.background.push([6,4443,425,-1.19,-1.19,75]);
	this.background.push([6,4503,395,1.42,1.42,0]);
	this.background.push([6,4538,430,1,1,-46]);
	this.background.push([5,5548,155,-1,1,0]);
	this.background.push([4,5634,293,1,1,0]);
	this.background.push([5,10580,162,1,1,0]);
	this.background.push([4,10669,299,-1,1,0]);
	this.background.push([6,10731,405,1.12,1.12,0]);
	this.background.push([3,12090,115,-0.85,0.85,-9]);
	this.background.push([3,12115,199,-1,1,0]);
	this.background.push([3,12182,35,-1,1,0]);
	this.background.push([3,12226,131,-1,1,0]);
	this.background.push([1,12234,244,1,1,0]);
	this.background.push([3,12276,-5,-1,1,-17]);
	this.background.push([3,12304,185,-1,1,0]);
	this.background.push([3,12307,80,-1,1,-4]);
	this.background.push([2,12342,395,1,1,0]);
	this.background.push([3,12415,105,-1,1,0]);
	this.background.push([3,12473,187,-1,1,0]);
	this.background.push([3,12477,22,-1,1,-4]);
	this.background.push([3,12480,101,-1,1,19]);
	this.background.push([3,12562,145,-1,1,19]);
	this.background.push([6,13978,421,-1.19,-1.19,75]);
	this.background.push([6,14038,390,1.42,1.42,0]);
	this.background.push([6,14074,426,1,1,-46]);
	this.background.push([5,14171,163,-1,1,0]);
	this.background.push([4,14257,301,1,1,0]);
	this.background.push([6,14363,396,1.42,1.42,0]);
};
$hxClasses["levels.Level7"] = levels.Level7;
levels.Level7.__name__ = ["levels","Level7"];
levels.Level7.__super__ = levels.LevelBase;
levels.Level7.prototype = $extend(levels.LevelBase.prototype,{
	__class__: levels.Level7
});
levels.Level8 = function() {
	levels.LevelBase.call(this);
	this.levelEndX = 24645;
	this.elements.push([16,820,383]);
	this.elements.push([1,1245,235,2]);
	this.elements.push([3,1272,190]);
	this.elements.push([3,1322,190]);
	this.elements.push([3,1372,190]);
	this.elements.push([16,1592,174]);
	this.elements.push([2,1989,417]);
	this.elements.push([6,2461,398]);
	this.elements.push([5,2823,371]);
	this.elements.push([0,3114,340,6]);
	this.elements.push([3,3287,400]);
	this.elements.push([3,3337,400]);
	this.elements.push([5,3379,266]);
	this.elements.push([3,3387,400]);
	this.elements.push([6,3650,398]);
	this.elements.push([3,3761,190]);
	this.elements.push([3,3811,190]);
	this.elements.push([3,3861,190]);
	this.elements.push([2,4078,414]);
	this.elements.push([3,4466,400]);
	this.elements.push([7,4507,305]);
	this.elements.push([3,4516,400]);
	this.elements.push([3,4566,400]);
	this.elements.push([2,4698,414]);
	this.elements.push([7,5034,305]);
	this.elements.push([7,5313,305]);
	this.elements.push([1,5688,235,2]);
	this.elements.push([2,5727,418]);
	this.elements.push([3,5749,190]);
	this.elements.push([3,5799,190]);
	this.elements.push([3,5849,190]);
	this.elements.push([16,6049,177]);
	this.elements.push([3,6084,400]);
	this.elements.push([3,6134,400]);
	this.elements.push([0,6329,340,6]);
	this.elements.push([5,6349,270]);
	this.elements.push([13,6453,403]);
	this.elements.push([3,6575,407]);
	this.elements.push([3,6625,407]);
	this.elements.push([7,6801,200]);
	this.elements.push([3,6882,295]);
	this.elements.push([3,6932,295]);
	this.elements.push([3,6982,295]);
	this.elements.push([12,7078,183]);
	this.elements.push([1,7191,235,2]);
	this.elements.push([13,7245,190]);
	this.elements.push([2,7516,414]);
	this.elements.push([3,7674,400]);
	this.elements.push([3,7724,400]);
	this.elements.push([3,7774,400]);
	this.elements.push([2,7933,414]);
	this.elements.push([0,8607,340,2]);
	this.elements.push([14,8629,411]);
	this.elements.push([6,8727,293]);
	this.elements.push([14,8904,411]);
	this.elements.push([14,9159,411]);
	this.elements.push([14,9434,411]);
	this.elements.push([1,9454,235,2.5]);
	this.elements.push([15,9570,201]);
	this.elements.push([3,9896,400]);
	this.elements.push([6,9944,185]);
	this.elements.push([3,9946,400]);
	this.elements.push([3,9996,400]);
	this.elements.push([3,10330,200]);
	this.elements.push([3,10380,200]);
	this.elements.push([3,10430,200]);
	this.elements.push([16,10810,385]);
	this.elements.push([13,11221,400]);
	this.elements.push([5,11367,372]);
	this.elements.push([0,11703,340,6]);
	this.elements.push([13,11740,295]);
	this.elements.push([2,12029,417]);
	this.elements.push([3,12177,295]);
	this.elements.push([3,12227,295]);
	this.elements.push([3,12277,295]);
	this.elements.push([4,12700,390]);
	this.elements.push([12,12731,155]);
	this.elements.push([1,13067,207,1]);
	this.elements.push([3,13087,400]);
	this.elements.push([0,13135,340,3]);
	this.elements.push([3,13137,400]);
	this.elements.push([2,13150,309]);
	this.elements.push([3,13187,400]);
	this.elements.push([6,13766,396]);
	this.elements.push([1,13780,207,1]);
	this.elements.push([10,13796,151]);
	this.elements.push([13,13938,164]);
	this.elements.push([7,14346,305]);
	this.elements.push([5,14559,372]);
	this.elements.push([3,14774,400]);
	this.elements.push([3,14824,400]);
	this.elements.push([3,14874,400]);
	this.elements.push([6,15118,396]);
	this.elements.push([3,15313,201]);
	this.elements.push([3,15363,201]);
	this.elements.push([3,15413,201]);
	this.elements.push([13,15708,403]);
	this.elements.push([16,15934,385]);
	this.elements.push([1,16229,235,1]);
	this.elements.push([3,16439,90]);
	this.elements.push([3,16489,90]);
	this.elements.push([3,16539,90]);
	this.elements.push([3,16755,400]);
	this.elements.push([3,16805,400]);
	this.elements.push([3,16855,400]);
	this.elements.push([12,16946,289]);
	this.elements.push([8,17153,427]);
	this.elements.push([1,17311,340,1]);
	this.elements.push([8,17348,322]);
	this.elements.push([8,17865,421]);
	this.elements.push([4,18094,390]);
	this.elements.push([3,18149,305]);
	this.elements.push([3,18181,257]);
	this.elements.push([3,18213,209]);
	this.elements.push([3,18245,161]);
	this.elements.push([13,18508,401]);
	this.elements.push([0,18785,340,7]);
	this.elements.push([13,18820,297]);
	this.elements.push([3,19036,295]);
	this.elements.push([2,19067,416]);
	this.elements.push([3,19086,295]);
	this.elements.push([3,19136,295]);
	this.elements.push([2,19315,310]);
	this.elements.push([3,19449,400]);
	this.elements.push([3,19499,400]);
	this.elements.push([3,19549,400]);
	this.elements.push([1,19829,235,2.5]);
	this.elements.push([5,19863,375]);
	this.elements.push([2,20048,206]);
	this.elements.push([2,20145,416]);
	this.elements.push([10,20190,177]);
	this.elements.push([5,20345,164]);
	this.elements.push([3,20359,400]);
	this.elements.push([3,20409,400]);
	this.elements.push([3,20459,400]);
	this.elements.push([7,20773,305]);
	this.elements.push([3,20927,305]);
	this.elements.push([3,20977,305]);
	this.elements.push([3,21027,305]);
	this.elements.push([7,21161,305]);
	this.elements.push([0,21488,340,7]);
	this.elements.push([2,21568,417]);
	this.elements.push([3,21698,400]);
	this.elements.push([3,21748,400]);
	this.elements.push([2,21853,417]);
	this.elements.push([3,21977,400]);
	this.elements.push([3,22027,400]);
	this.elements.push([2,22101,417]);
	this.elements.push([1,22464,235,2.5]);
	this.elements.push([6,22624,191]);
	this.elements.push([16,22704,388]);
	this.elements.push([3,22853,190]);
	this.elements.push([3,22903,190]);
	this.elements.push([3,22953,190]);
	this.elements.push([4,23479,390]);
	this.elements.push([3,23534,305]);
	this.elements.push([3,23566,257]);
	this.elements.push([3,23598,209]);
	this.elements.push([3,23630,161]);
	this.elements.push([4,23789,390]);
	this.elements.push([4,24099,390]);
	this.elements.push([3,24154,305]);
	this.elements.push([3,24186,257]);
	this.elements.push([3,24218,209]);
	this.elements.push([3,24250,161]);
	this.background.push([3,286,105,-0.85,0.85,-9]);
	this.background.push([3,311,189,-1,1,0]);
	this.background.push([3,377,25,-1,1,0]);
	this.background.push([3,421,121,-1,1,0]);
	this.background.push([1,430,234,1,1,0]);
	this.background.push([3,472,-15,-1,1,-17]);
	this.background.push([3,500,175,-1,1,0]);
	this.background.push([3,502,70,-1,1,-4]);
	this.background.push([2,538,385,1,1,0]);
	this.background.push([3,611,95,-1,1,0]);
	this.background.push([3,669,176,-1,1,0]);
	this.background.push([3,672,12,-1,1,-4]);
	this.background.push([3,675,91,-1,1,19]);
	this.background.push([3,757,134,-1,1,19]);
	this.background.push([5,1548,155,-1,1,0]);
	this.background.push([4,1634,293,1,1,0]);
	this.background.push([6,2426,405,1.19,1.19,0]);
	this.background.push([6,2461,432,1,1,-46]);
	this.background.push([6,4443,425,-1.19,-1.19,75]);
	this.background.push([6,4503,395,1.42,1.42,0]);
	this.background.push([6,4538,430,1,1,-46]);
	this.background.push([5,5548,155,-1,1,0]);
	this.background.push([4,5634,293,1,1,0]);
	this.background.push([5,10580,162,1,1,0]);
	this.background.push([4,10669,299,-1,1,0]);
	this.background.push([6,10731,405,1.12,1.12,0]);
	this.background.push([3,12090,115,-0.85,0.85,-9]);
	this.background.push([3,12115,199,-1,1,0]);
	this.background.push([3,12182,35,-1,1,0]);
	this.background.push([3,12226,131,-1,1,0]);
	this.background.push([1,12234,244,1,1,0]);
	this.background.push([3,12276,-5,-1,1,-17]);
	this.background.push([3,12304,185,-1,1,0]);
	this.background.push([3,12307,80,-1,1,-4]);
	this.background.push([2,12342,395,1,1,0]);
	this.background.push([3,12415,105,-1,1,0]);
	this.background.push([3,12473,187,-1,1,0]);
	this.background.push([3,12477,22,-1,1,-4]);
	this.background.push([3,12480,101,-1,1,19]);
	this.background.push([3,12562,145,-1,1,19]);
	this.background.push([6,13978,421,-1.19,-1.19,75]);
	this.background.push([6,14038,390,1.42,1.42,0]);
	this.background.push([6,14074,426,1,1,-46]);
	this.background.push([5,14171,163,-1,1,0]);
	this.background.push([4,14257,301,1,1,0]);
	this.background.push([6,14363,396,1.42,1.42,0]);
};
$hxClasses["levels.Level8"] = levels.Level8;
levels.Level8.__name__ = ["levels","Level8"];
levels.Level8.__super__ = levels.LevelBase;
levels.Level8.prototype = $extend(levels.LevelBase.prototype,{
	__class__: levels.Level8
});
levels.Level9 = function() {
	levels.LevelBase.call(this);
	this.levelEndX = 23913;
	this.elements.push([3,817,200]);
	this.elements.push([3,867,200]);
	this.elements.push([3,917,200]);
	this.elements.push([8,1201,426]);
	this.elements.push([0,1306,340,5]);
	this.elements.push([3,1349,296]);
	this.elements.push([3,1399,296]);
	this.elements.push([3,1449,296]);
	this.elements.push([2,1560,308]);
	this.elements.push([3,1703,400]);
	this.elements.push([3,1753,400]);
	this.elements.push([3,1803,400]);
	this.elements.push([8,1982,426]);
	this.elements.push([16,2225,388]);
	this.elements.push([3,2475,400]);
	this.elements.push([3,2525,400]);
	this.elements.push([3,2575,400]);
	this.elements.push([0,2891,340,6]);
	this.elements.push([13,2904,295]);
	this.elements.push([2,2987,414]);
	this.elements.push([3,3104,295]);
	this.elements.push([3,3154,295]);
	this.elements.push([3,3204,295]);
	this.elements.push([3,3418,400]);
	this.elements.push([6,3458,289]);
	this.elements.push([3,3468,400]);
	this.elements.push([3,3518,400]);
	this.elements.push([12,3660,183]);
	this.elements.push([7,3850,305]);
	this.elements.push([1,4100,235,3]);
	this.elements.push([13,4220,403]);
	this.elements.push([2,4341,207]);
	this.elements.push([3,4525,190]);
	this.elements.push([3,4575,190]);
	this.elements.push([3,4625,190]);
	this.elements.push([10,4720,383]);
	this.elements.push([5,4733,165]);
	this.elements.push([0,5044,340,4]);
	this.elements.push([3,5070,295]);
	this.elements.push([3,5120,295]);
	this.elements.push([7,5229,200]);
	this.elements.push([3,5396,159]);
	this.elements.push([2,5417,310]);
	this.elements.push([3,5428,111]);
	this.elements.push([3,5460,63]);
	this.elements.push([2,5836,414]);
	this.elements.push([3,6101,200]);
	this.elements.push([3,6151,200]);
	this.elements.push([3,6201,200]);
	this.elements.push([0,6389,340,7]);
	this.elements.push([14,6914,305]);
	this.elements.push([14,7012,411]);
	this.elements.push([3,7030,400]);
	this.elements.push([3,7080,400]);
	this.elements.push([3,7130,400]);
	this.elements.push([14,7193,305]);
	this.elements.push([3,7410,200]);
	this.elements.push([3,7460,200]);
	this.elements.push([3,7510,200]);
	this.elements.push([13,7761,400]);
	this.elements.push([5,7907,372]);
	this.elements.push([3,8296,400]);
	this.elements.push([3,8346,400]);
	this.elements.push([3,8396,400]);
	this.elements.push([6,8471,399]);
	this.elements.push([1,8598,235,2.5]);
	this.elements.push([16,8630,175]);
	this.elements.push([5,8947,374]);
	this.elements.push([13,9102,191]);
	this.elements.push([7,9448,305]);
	this.elements.push([3,9598,400]);
	this.elements.push([3,9648,400]);
	this.elements.push([3,9698,400]);
	this.elements.push([0,9977,340,4]);
	this.elements.push([2,10004,310]);
	this.elements.push([2,10082,418]);
	this.elements.push([7,10298,200]);
	this.elements.push([13,10589,400]);
	this.elements.push([1,10845,235,2.5]);
	this.elements.push([12,10883,394]);
	this.elements.push([13,10885,191]);
	this.elements.push([5,11145,374]);
	this.elements.push([3,11589,400]);
	this.elements.push([3,11639,400]);
	this.elements.push([3,11689,400]);
	this.elements.push([1,11973,235,1]);
	this.elements.push([10,12048,176]);
	this.elements.push([5,12469,374]);
	this.elements.push([3,12761,400]);
	this.elements.push([3,12811,400]);
	this.elements.push([3,12861,400]);
	this.elements.push([6,12982,396]);
	this.elements.push([4,13376,390]);
	this.elements.push([3,13431,305]);
	this.elements.push([3,13463,257]);
	this.elements.push([3,13495,209]);
	this.elements.push([3,13527,161]);
	this.elements.push([16,13746,385]);
	this.elements.push([1,13925,235,1.5]);
	this.elements.push([15,14161,201]);
	this.elements.push([2,14221,417]);
	this.elements.push([3,14400,400]);
	this.elements.push([3,14450,400]);
	this.elements.push([3,14500,400]);
	this.elements.push([2,14627,417]);
	this.elements.push([3,14764,400]);
	this.elements.push([3,14814,400]);
	this.elements.push([2,14906,417]);
	this.elements.push([1,15066,235,1]);
	this.elements.push([3,15276,90]);
	this.elements.push([3,15326,90]);
	this.elements.push([3,15376,90]);
	this.elements.push([13,15813,403]);
	this.elements.push([7,15936,305]);
	this.elements.push([3,16144,200]);
	this.elements.push([3,16194,200]);
	this.elements.push([3,16244,200]);
	this.elements.push([4,16493,390]);
	this.elements.push([1,16687,235,1.5]);
	this.elements.push([3,16972,190]);
	this.elements.push([7,17012,95]);
	this.elements.push([3,17022,190]);
	this.elements.push([3,17072,190]);
	this.elements.push([3,17404,200]);
	this.elements.push([3,17454,200]);
	this.elements.push([3,17504,200]);
	this.elements.push([1,17947,340,2]);
	this.elements.push([2,17985,416]);
	this.elements.push([13,18183,400]);
	this.elements.push([5,18238,270]);
	this.elements.push([3,18289,400]);
	this.elements.push([3,18339,400]);
	this.elements.push([5,18341,270]);
	this.elements.push([3,18389,400]);
	this.elements.push([0,18832,340,7]);
	this.elements.push([12,18880,289]);
	this.elements.push([5,19155,268]);
	this.elements.push([5,19487,268]);
	this.elements.push([3,19502,400]);
	this.elements.push([3,19552,400]);
	this.elements.push([3,19602,400]);
	this.elements.push([7,19924,305]);
	this.elements.push([14,20533,411]);
	this.elements.push([1,20985,235,2.5]);
	this.elements.push([14,21037,411]);
	this.elements.push([3,21059,190]);
	this.elements.push([3,21109,190]);
	this.elements.push([3,21159,190]);
	this.elements.push([16,21280,175]);
	this.elements.push([4,21779,390]);
	this.elements.push([3,21834,305]);
	this.elements.push([3,21866,257]);
	this.elements.push([3,21898,209]);
	this.elements.push([3,21930,161]);
	this.elements.push([7,22192,305]);
	this.elements.push([8,22445,424]);
	this.elements.push([6,22760,397]);
	this.elements.push([1,22937,235,2]);
	this.elements.push([3,23084,190]);
	this.elements.push([3,23134,190]);
	this.elements.push([3,23184,190]);
	this.elements.push([3,23418,90]);
	this.elements.push([3,23468,90]);
	this.elements.push([3,23518,90]);
	this.background.push([3,286,105,-0.85,0.85,-9]);
	this.background.push([3,311,189,-1,1,0]);
	this.background.push([3,377,25,-1,1,0]);
	this.background.push([3,421,121,-1,1,0]);
	this.background.push([1,430,234,1,1,0]);
	this.background.push([3,472,-15,-1,1,-17]);
	this.background.push([3,500,175,-1,1,0]);
	this.background.push([3,502,70,-1,1,-4]);
	this.background.push([2,538,385,1,1,0]);
	this.background.push([3,611,95,-1,1,0]);
	this.background.push([3,669,176,-1,1,0]);
	this.background.push([3,672,12,-1,1,-4]);
	this.background.push([3,675,91,-1,1,19]);
	this.background.push([3,757,134,-1,1,19]);
	this.background.push([5,1548,155,-1,1,0]);
	this.background.push([4,1634,293,1,1,0]);
	this.background.push([6,2426,405,1.19,1.19,0]);
	this.background.push([6,2461,432,1,1,-46]);
	this.background.push([6,4443,425,-1.19,-1.19,75]);
	this.background.push([6,4503,395,1.42,1.42,0]);
	this.background.push([6,4538,430,1,1,-46]);
	this.background.push([5,5548,155,-1,1,0]);
	this.background.push([4,5634,293,1,1,0]);
	this.background.push([5,10580,162,1,1,0]);
	this.background.push([4,10669,299,-1,1,0]);
	this.background.push([6,10731,405,1.12,1.12,0]);
	this.background.push([3,12090,115,-0.85,0.85,-9]);
	this.background.push([3,12115,199,-1,1,0]);
	this.background.push([3,12182,35,-1,1,0]);
	this.background.push([3,12226,131,-1,1,0]);
	this.background.push([1,12234,244,1,1,0]);
	this.background.push([3,12276,-5,-1,1,-17]);
	this.background.push([3,12304,185,-1,1,0]);
	this.background.push([3,12307,80,-1,1,-4]);
	this.background.push([2,12342,395,1,1,0]);
	this.background.push([3,12415,105,-1,1,0]);
	this.background.push([3,12473,187,-1,1,0]);
	this.background.push([3,12477,22,-1,1,-4]);
	this.background.push([3,12480,101,-1,1,19]);
	this.background.push([3,12562,145,-1,1,19]);
	this.background.push([6,13978,421,-1.19,-1.19,75]);
	this.background.push([6,14038,390,1.42,1.42,0]);
	this.background.push([6,14074,426,1,1,-46]);
	this.background.push([5,14171,163,-1,1,0]);
	this.background.push([4,14257,301,1,1,0]);
	this.background.push([6,14363,396,1.42,1.42,0]);
};
$hxClasses["levels.Level9"] = levels.Level9;
levels.Level9.__name__ = ["levels","Level9"];
levels.Level9.__super__ = levels.LevelBase;
levels.Level9.prototype = $extend(levels.LevelBase.prototype,{
	__class__: levels.Level9
});
lime.AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe.ds.StringMap();
	this.font = new haxe.ds.StringMap();
	this.image = new haxe.ds.StringMap();
};
$hxClasses["lime.AssetCache"] = lime.AssetCache;
lime.AssetCache.__name__ = ["lime","AssetCache"];
lime.AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe.ds.StringMap();
			this.font = new haxe.ds.StringMap();
			this.image = new haxe.ds.StringMap();
		} else {
			var keys = this.audio.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.audio.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.image.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.image.remove(key2);
			}
		}
	}
	,__class__: lime.AssetCache
};
lime.Assets = function() { };
$hxClasses["lime.Assets"] = lime.Assets;
lime.Assets.__name__ = ["lime","Assets"];
lime.Assets.exists = function(id,type) {
	lime.Assets.initialize();
	if(type == null) type = "BINARY";
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) return library.exists(symbolName,type);
	return false;
};
lime.Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.audio.exists(id)) {
		var audio = lime.Assets.cache.audio.get(id);
		if(lime.Assets.isValidAudio(audio)) return audio;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(library.isLocal(symbolName,"SOUND")) {
				var audio1 = library.getAudioBuffer(symbolName);
				if(useCache && lime.Assets.cache.enabled) lime.Assets.cache.audio.set(id,audio1);
				return audio1;
			} else null;
		} else null;
	} else null;
	return null;
};
lime.Assets.getBytes = function(id) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			if(library.isLocal(symbolName,"BINARY")) return library.getBytes(symbolName); else null;
		} else null;
	} else null;
	return null;
};
lime.Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.font.exists(id)) return lime.Assets.cache.font.get(id);
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime.Assets.cache.enabled) lime.Assets.cache.font.set(id,font);
				return font;
			} else null;
		} else null;
	} else null;
	return null;
};
lime.Assets.getImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.image.exists(id)) {
		var image = lime.Assets.cache.image.get(id);
		if(lime.Assets.isValidImage(image)) return image;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime.Assets.cache.enabled) lime.Assets.cache.image.set(id,image1);
				return image1;
			} else null;
		} else null;
	} else null;
	return null;
};
lime.Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime.Assets.libraries.get(name);
};
lime.Assets.getPath = function(id) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) return library.getPath(symbolName); else null;
	} else null;
	return null;
};
lime.Assets.getText = function(id) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) return library.getText(symbolName); else null;
		} else null;
	} else null;
	return null;
};
lime.Assets.initialize = function() {
	if(!lime.Assets.initialized) {
		lime.Assets.registerLibrary("default",new DefaultAssetLibrary());
		lime.Assets.initialized = true;
	}
};
lime.Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled) {
		if(type == "IMAGE" || type == null) {
			if(lime.Assets.cache.image.exists(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(lime.Assets.cache.font.exists(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(lime.Assets.cache.audio.exists(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
lime.Assets.isValidAudio = function(buffer) {
	return buffer != null;
	return true;
};
lime.Assets.isValidImage = function(buffer) {
	return true;
};
lime.Assets.list = function(type) {
	lime.Assets.initialize();
	var items = [];
	var $it0 = lime.Assets.libraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var libraryItems = library.list(type);
		if(libraryItems != null) items = items.concat(libraryItems);
	}
	return items;
};
lime.Assets.loadAudioBuffer = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.audio.exists(id)) {
		var audio = lime.Assets.cache.audio.get(id);
		if(lime.Assets.isValidAudio(audio)) {
			handler(audio);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(useCache && lime.Assets.cache.enabled) library.loadAudioBuffer(symbolName,function(audio1) {
				var value = audio1;
				lime.Assets.cache.audio.set(id,value);
				handler(audio1);
			}); else library.loadAudioBuffer(symbolName,handler);
			return;
		} else null;
	} else null;
	handler(null);
};
lime.Assets.loadBytes = function(id,handler) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			library.loadBytes(symbolName,handler);
			return;
		} else null;
	} else null;
	handler(null);
};
lime.Assets.loadImage = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.image.exists(id)) {
		var image = lime.Assets.cache.image.get(id);
		if(lime.Assets.isValidImage(image)) {
			handler(image);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(useCache && lime.Assets.cache.enabled) library.loadImage(symbolName,function(image1) {
				lime.Assets.cache.image.set(id,image1);
				handler(image1);
			}); else library.loadImage(symbolName,handler);
			return;
		} else null;
	} else null;
	handler(null);
};
lime.Assets.loadLibrary = function(name,handler) {
	lime.Assets.initialize();
	var data = lime.Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var info = JSON.parse(data);
		var library = Type.createInstance(Type.resolveClass(info.type),info.args);
		lime.Assets.libraries.set(name,library);
		library.eventCallback = lime.Assets.library_onEvent;
		library.load(handler);
	} else null;
};
lime.Assets.loadText = function(id,handler) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			library.loadText(symbolName,handler);
			return;
		} else null;
	} else null;
	handler(null);
};
lime.Assets.registerLibrary = function(name,library) {
	if(lime.Assets.libraries.exists(name)) lime.Assets.unloadLibrary(name);
	if(library != null) library.eventCallback = lime.Assets.library_onEvent;
	lime.Assets.libraries.set(name,library);
};
lime.Assets.unloadLibrary = function(name) {
	lime.Assets.initialize();
	var library = lime.Assets.libraries.get(name);
	if(library != null) {
		lime.Assets.cache.clear(name + ":");
		library.eventCallback = null;
	}
	lime.Assets.libraries.remove(name);
};
lime.Assets.library_onEvent = function(library,type) {
	if(type == "change") lime.Assets.cache.clear();
};
lime._Assets = {};
lime._Assets.AssetType_Impl_ = function() { };
$hxClasses["lime._Assets.AssetType_Impl_"] = lime._Assets.AssetType_Impl_;
lime._Assets.AssetType_Impl_.__name__ = ["lime","_Assets","AssetType_Impl_"];
lime._backend = {};
lime._backend.html5 = {};
lime._backend.html5.HTML5Application = function(parent) {
	this.parent = parent;
	lime.audio.AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime._backend.html5.HTML5Application;
lime._backend.html5.HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime._backend.html5.HTML5Application.prototype = {
	convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) return keyCode + 32;
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 144:
			return 1073741907;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 36:
			return 1073741898;
		case 35:
			return 1073741901;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		}
		return keyCode;
	}
	,create: function(config) {
		this.parent.config = config;
		if(config != null) {
			var $window = new lime.ui.Window(config);
			var renderer = new lime.graphics.Renderer($window);
			this.parent.addWindow($window);
			this.parent.addRenderer(renderer);
			this.parent.init(renderer.context);
		}
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);

			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame']
										   || window[vendors[x]+'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); },
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};

			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.cacheTime = new Date().getTime();
		this.handleUpdateEvent();
		return 0;
	}
	,handleKeyEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var _g = event.keyCode;
			switch(_g) {
			case 32:case 37:case 38:case 39:case 40:
				event.preventDefault();
				break;
			}
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier;
			modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") {
				var listeners = this.parent.windows[0].onKeyDown.listeners;
				var repeat = this.parent.windows[0].onKeyDown.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](keyCode,modifier);
					if(!repeat[i]) {
						this.parent.windows[0].onKeyDown.remove(listeners[i]);
						length--;
					} else i++;
				}
			} else {
				var listeners1 = this.parent.windows[0].onKeyUp.listeners;
				var repeat1 = this.parent.windows[0].onKeyUp.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1](keyCode,modifier);
					if(!repeat1[i1]) {
						this.parent.windows[0].onKeyUp.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
			}
		}
	}
	,handleUpdateEvent: function(__) {
		var currentTime = new Date().getTime();
		var deltaTime = currentTime - this.cacheTime;
		this.cacheTime = currentTime;
		var listeners = this.parent.onUpdate.listeners;
		var repeat = this.parent.onUpdate.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](deltaTime | 0);
			if(!repeat[i]) {
				this.parent.onUpdate.remove(listeners[i]);
				length--;
			} else i++;
		}
		if(this.parent.renderers[0] != null) {
			var listeners1 = this.parent.renderers[0].onRender.listeners;
			var repeat1 = this.parent.renderers[0].onRender.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](this.parent.renderers[0].context);
				if(!repeat1[i1]) {
					this.parent.renderers[0].onRender.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			this.parent.renderers[0].flip();
		}
		window.requestAnimationFrame($bind(this,this.handleUpdateEvent));
	}
	,handleWindowEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "focus":
				var listeners = this.parent.windows[0].onWindowFocusIn.listeners;
				var repeat = this.parent.windows[0].onWindowFocusIn.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i]();
					if(!repeat[i]) {
						this.parent.windows[0].onWindowFocusIn.remove(listeners[i]);
						length--;
					} else i++;
				}
				var listeners1 = this.parent.windows[0].onWindowActivate.listeners;
				var repeat1 = this.parent.windows[0].onWindowActivate.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1]();
					if(!repeat1[i1]) {
						this.parent.windows[0].onWindowActivate.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
				break;
			case "blur":
				var listeners2 = this.parent.windows[0].onWindowFocusOut.listeners;
				var repeat2 = this.parent.windows[0].onWindowFocusOut.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2]();
					if(!repeat2[i2]) {
						this.parent.windows[0].onWindowFocusOut.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
				var listeners3 = this.parent.windows[0].onWindowDeactivate.listeners;
				var repeat3 = this.parent.windows[0].onWindowDeactivate.repeat;
				var length3 = listeners3.length;
				var i3 = 0;
				while(i3 < length3) {
					listeners3[i3]();
					if(!repeat3[i3]) {
						this.parent.windows[0].onWindowDeactivate.remove(listeners3[i3]);
						length3--;
					} else i3++;
				}
				break;
			case "resize":
				var cacheWidth = this.parent.windows[0].__width;
				var cacheHeight = this.parent.windows[0].__height;
				this.parent.windows[0].backend.handleResize();
				if(this.parent.windows[0].__width != cacheWidth || this.parent.windows[0].__height != cacheHeight) {
					var listeners4 = this.parent.windows[0].onWindowResize.listeners;
					var repeat4 = this.parent.windows[0].onWindowResize.repeat;
					var length4 = listeners4.length;
					var i4 = 0;
					while(i4 < length4) {
						listeners4[i4](this.parent.windows[0].__width,this.parent.windows[0].__height);
						if(!repeat4[i4]) {
							this.parent.windows[0].onWindowResize.remove(listeners4[i4]);
							length4--;
						} else i4++;
					}
				}
				break;
			case "beforeunload":
				var listeners5 = this.parent.windows[0].onWindowClose.listeners;
				var repeat5 = this.parent.windows[0].onWindowClose.repeat;
				var length5 = listeners5.length;
				var i5 = 0;
				while(i5 < length5) {
					listeners5[i5]();
					if(!repeat5[i5]) {
						this.parent.windows[0].onWindowClose.remove(listeners5[i5]);
						length5--;
					} else i5++;
				}
				break;
			}
		}
	}
	,__class__: lime._backend.html5.HTML5Application
};
lime._backend.html5.HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime._backend.html5.HTML5Mouse;
lime._backend.html5.HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime._backend.html5.HTML5Mouse.__cursor = null;
lime._backend.html5.HTML5Mouse.__hidden = null;
lime._backend.html5.HTML5Mouse.hide = function() {
	if(!lime._backend.html5.HTML5Mouse.__hidden) {
		lime._backend.html5.HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime.app.Application.current.windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime._backend.html5.HTML5Mouse.show = function() {
	if(lime._backend.html5.HTML5Mouse.__hidden) {
		lime._backend.html5.HTML5Mouse.__hidden = false;
		var cacheValue = lime._backend.html5.HTML5Mouse.__cursor;
		lime._backend.html5.HTML5Mouse.__cursor = null;
		lime._backend.html5.HTML5Mouse.set_cursor(cacheValue);
	}
};
lime._backend.html5.HTML5Mouse.get_cursor = function() {
	if(lime._backend.html5.HTML5Mouse.__cursor == null) return lime.ui.MouseCursor.DEFAULT;
	return lime._backend.html5.HTML5Mouse.__cursor;
};
lime._backend.html5.HTML5Mouse.set_cursor = function(value) {
	if(lime._backend.html5.HTML5Mouse.__cursor != value) {
		if(!lime._backend.html5.HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime.app.Application.current.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				switch(value[1]) {
				case 0:
					$window.backend.element.style.cursor = "default";
					break;
				case 1:
					$window.backend.element.style.cursor = "crosshair";
					break;
				case 3:
					$window.backend.element.style.cursor = "move";
					break;
				case 4:
					$window.backend.element.style.cursor = "pointer";
					break;
				case 5:
					$window.backend.element.style.cursor = "nesw-resize";
					break;
				case 6:
					$window.backend.element.style.cursor = "ns-resize";
					break;
				case 7:
					$window.backend.element.style.cursor = "nwse-resize";
					break;
				case 8:
					$window.backend.element.style.cursor = "ew-resize";
					break;
				case 9:
					$window.backend.element.style.cursor = "text";
					break;
				case 10:
					$window.backend.element.style.cursor = "wait";
					break;
				case 11:
					$window.backend.element.style.cursor = "wait";
					break;
				default:
					$window.backend.element.style.cursor = "auto";
				}
			}
		}
		lime._backend.html5.HTML5Mouse.__cursor = value;
	}
	return lime._backend.html5.HTML5Mouse.__cursor;
};
lime._backend.html5.HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime._backend.html5.HTML5Renderer;
lime._backend.html5.HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime._backend.html5.HTML5Renderer.prototype = {
	create: function() {
		this.createContext();
		{
			var _g = this.parent.context;
			switch(_g[1]) {
			case 0:
				this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
				this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
				break;
			default:
			}
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) this.parent.context = lime.graphics.RenderContext.DOM(this.parent.window.backend.div); else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(webgl == null) this.parent.context = lime.graphics.RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d")); else {
				lime.graphics.opengl.GL.context = webgl;
				this.parent.context = lime.graphics.RenderContext.OPENGL(lime.graphics.opengl.GL.context);
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			var listeners = this.parent.onRenderContextLost.listeners;
			var repeat = this.parent.onRenderContextLost.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i]();
				if(!repeat[i]) {
					this.parent.onRenderContextLost.remove(listeners[i]);
					length--;
				} else i++;
			}
			break;
		case "webglcontextrestored":
			this.createContext();
			var listeners1 = this.parent.onRenderContextRestored.listeners;
			var repeat1 = this.parent.onRenderContextRestored.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](this.parent.context);
				if(!repeat1[i1]) {
					this.parent.onRenderContextRestored.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			break;
		default:
		}
	}
	,render: function() {
	}
	,__class__: lime._backend.html5.HTML5Renderer
};
lime._backend.html5.HTML5Window = function(parent) {
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) this.element = parent.config.element;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime._backend.html5.HTML5Window;
lime._backend.html5.HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime._backend.html5.HTML5Window.prototype = {
	close: function() {
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		if(js.Boot.__instanceof(this.element,HTMLCanvasElement)) this.canvas = this.element; else this.canvas = window.document.createElement("canvas");
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = this.parent.__width;
			this.canvas.height = this.parent.__height;
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) this.element.appendChild(this.canvas);
			} else this.element.appendChild(this.div);
			var events = ["mousedown","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				var listeners = this.parent.onMouseDown.listeners;
				var repeat = this.parent.onMouseDown.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](x,y,event.button);
					if(!repeat[i]) {
						this.parent.onMouseDown.remove(listeners[i]);
						length--;
					} else i++;
				}
				break;
			case "mouseup":
				var listeners1 = this.parent.onMouseUp.listeners;
				var repeat1 = this.parent.onMouseUp.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1](x,y,event.button);
					if(!repeat1[i1]) {
						this.parent.onMouseUp.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
				break;
			case "mousemove":
				var listeners2 = this.parent.onMouseMove.listeners;
				var repeat2 = this.parent.onMouseMove.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2](x,y,event.button);
					if(!repeat2[i2]) {
						this.parent.onMouseMove.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
				break;
			default:
			}
		} else {
			var listeners3 = this.parent.onMouseWheel.listeners;
			var repeat3 = this.parent.onMouseWheel.repeat;
			var length3 = listeners3.length;
			var i3 = 0;
			while(i3 < length3) {
				listeners3[i3](event.deltaX,-event.deltaY);
				if(!repeat3[i3]) {
					this.parent.onMouseWheel.remove(listeners3[i3]);
					length3--;
				} else i3++;
			}
		}
	}
	,handleResize: function() {
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = this.element.clientWidth;
							this.canvas.height = this.element.clientHeight;
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.element.clientWidth / this.setWidth;
				var scaleY = this.element.clientHeight / this.setHeight;
				var currentRatio = scaleX / scaleY;
				var targetRatio = Math.min(scaleX,scaleY);
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = this.setWidth * targetRatio + "px";
						this.canvas.style.height = this.setHeight * targetRatio + "px";
						this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.div.style.width = this.setWidth * targetRatio + "px";
					this.div.style.height = this.setHeight * targetRatio + "px";
					this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
					this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var touch = event.changedTouches[0];
		var id = touch.identifier;
		var x = 0.0;
		var y = 0.0;
		if(this.element != null) {
			if(this.canvas != null) {
				var rect = this.canvas.getBoundingClientRect();
				x = (touch.clientX - rect.left) * (this.parent.__width / rect.width);
				y = (touch.clientY - rect.top) * (this.parent.__height / rect.height);
			} else if(this.div != null) {
				var rect1 = this.div.getBoundingClientRect();
				x = touch.clientX - rect1.left;
				y = touch.clientY - rect1.top;
			} else {
				var rect2 = this.element.getBoundingClientRect();
				x = (touch.clientX - rect2.left) * (this.parent.__width / rect2.width);
				y = (touch.clientY - rect2.top) * (this.parent.__height / rect2.height);
			}
		} else {
			x = touch.clientX;
			y = touch.clientY;
		}
		var _g = event.type;
		switch(_g) {
		case "touchstart":
			var listeners = this.parent.onTouchStart.listeners;
			var repeat = this.parent.onTouchStart.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i](x,y,id);
				if(!repeat[i]) {
					this.parent.onTouchStart.remove(listeners[i]);
					length--;
				} else i++;
			}
			break;
		case "touchmove":
			var listeners1 = this.parent.onTouchMove.listeners;
			var repeat1 = this.parent.onTouchMove.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](x,y,id);
				if(!repeat1[i1]) {
					this.parent.onTouchMove.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			break;
		case "touchend":
			var listeners2 = this.parent.onTouchEnd.listeners;
			var repeat2 = this.parent.onTouchEnd.repeat;
			var length2 = listeners2.length;
			var i2 = 0;
			while(i2 < length2) {
				listeners2[i2](x,y,id);
				if(!repeat2[i2]) {
					this.parent.onTouchEnd.remove(listeners2[i2]);
					length2--;
				} else i2++;
			}
			break;
		default:
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setFullscreen: function(value) {
		return false;
	}
	,setIcon: function(image) {
	}
	,setMinimized: function(value) {
		return false;
	}
	,__class__: lime._backend.html5.HTML5Window
};
lime.app = {};
lime.app.IModule = function() { };
$hxClasses["lime.app.IModule"] = lime.app.IModule;
lime.app.IModule.__name__ = ["lime","app","IModule"];
lime.app.IModule.prototype = {
	__class__: lime.app.IModule
};
lime.app.Module = function() {
};
$hxClasses["lime.app.Module"] = lime.app.Module;
lime.app.Module.__name__ = ["lime","app","Module"];
lime.app.Module.__interfaces__ = [lime.app.IModule];
lime.app.Module.prototype = {
	init: function(context) {
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y,button) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTouchEnd: function(x,y,id) {
	}
	,onTouchMove: function(x,y,id) {
	}
	,onTouchStart: function(x,y,id) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowMinimize: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__class__: lime.app.Module
};
lime.app.Application = function() {
	this.onUpdate = new lime.app.Event();
	lime.app.Module.call(this);
	if(lime.app.Application.current == null) lime.app.Application.current = this;
	this.modules = new Array();
	this.renderers = new Array();
	this.windows = new Array();
	this.backend = new lime._backend.html5.HTML5Application(this);
	this.onUpdate.add($bind(this,this.update));
};
$hxClasses["lime.app.Application"] = lime.app.Application;
lime.app.Application.__name__ = ["lime","app","Application"];
lime.app.Application.current = null;
lime.app.Application.__super__ = lime.app.Module;
lime.app.Application.prototype = $extend(lime.app.Module.prototype,{
	addModule: function(module) {
		this.modules.push(module);
		if(this.initialized && this.renderers[0] != null) module.init(this.renderers[0].context);
	}
	,addRenderer: function(renderer) {
		renderer.onRender.add($bind(this,this.render));
		renderer.onRenderContextLost.add($bind(this,this.onRenderContextLost));
		renderer.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
		this.renderers.push(renderer);
	}
	,addWindow: function(window) {
		this.windows.push(window);
		window.onGamepadAxisMove.add($bind(this,this.onGamepadAxisMove));
		window.onGamepadButtonDown.add($bind(this,this.onGamepadButtonDown));
		window.onGamepadButtonUp.add($bind(this,this.onGamepadButtonUp));
		window.onGamepadConnect.add($bind(this,this.onGamepadConnect));
		window.onGamepadDisconnect.add($bind(this,this.onGamepadDisconnect));
		window.onKeyDown.add($bind(this,this.onKeyDown));
		window.onKeyUp.add($bind(this,this.onKeyUp));
		window.onMouseDown.add($bind(this,this.onMouseDown));
		window.onMouseMove.add($bind(this,this.onMouseMove));
		window.onMouseUp.add($bind(this,this.onMouseUp));
		window.onMouseWheel.add($bind(this,this.onMouseWheel));
		window.onTouchStart.add($bind(this,this.onTouchStart));
		window.onTouchMove.add($bind(this,this.onTouchMove));
		window.onTouchEnd.add($bind(this,this.onTouchEnd));
		window.onWindowActivate.add($bind(this,this.onWindowActivate));
		window.onWindowClose.add($bind(this,this.onWindowClose));
		window.onWindowDeactivate.add($bind(this,this.onWindowDeactivate));
		window.onWindowFocusIn.add($bind(this,this.onWindowFocusIn));
		window.onWindowFocusOut.add($bind(this,this.onWindowFocusOut));
		window.onWindowFullscreen.add($bind(this,this.onWindowFullscreen));
		window.onWindowMinimize.add($bind(this,this.onWindowMinimize));
		window.onWindowMove.add($bind(this,this.onWindowMove));
		window.onWindowResize.add($bind(this,this.onWindowResize));
		window.onWindowRestore.add($bind(this,this.onWindowRestore));
		window.create(this);
	}
	,create: function(config) {
		this.backend.create(config);
	}
	,exec: function() {
		lime.app.Application.current = this;
		return this.backend.exec();
	}
	,init: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.init(context);
		}
		this.initialized = true;
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadAxisMove(gamepad,axis,value);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonDown(gamepad,button);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonUp(gamepad,button);
		}
	}
	,onGamepadConnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadConnect(gamepad);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadDisconnect(gamepad);
		}
	}
	,onKeyDown: function(keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyDown(keyCode,modifier);
		}
	}
	,onKeyUp: function(keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyUp(keyCode,modifier);
		}
	}
	,onMouseDown: function(x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseDown(x,y,button);
		}
	}
	,onMouseMove: function(x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMove(x,y,button);
		}
	}
	,onMouseUp: function(x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseUp(x,y,button);
		}
	}
	,onMouseWheel: function(deltaX,deltaY) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseWheel(deltaX,deltaY);
		}
	}
	,onRenderContextLost: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextLost();
		}
	}
	,onRenderContextRestored: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextRestored(context);
		}
	}
	,onTouchEnd: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchEnd(x,y,id);
		}
	}
	,onTouchMove: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchMove(x,y,id);
		}
	}
	,onTouchStart: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchStart(x,y,id);
		}
	}
	,onWindowActivate: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowActivate();
		}
	}
	,onWindowClose: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowClose();
		}
	}
	,onWindowDeactivate: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDeactivate();
		}
	}
	,onWindowFocusIn: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusIn();
		}
	}
	,onWindowFocusOut: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusOut();
		}
	}
	,onWindowFullscreen: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFullscreen();
		}
	}
	,onWindowMinimize: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMinimize();
		}
	}
	,onWindowMove: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMove(x,y);
		}
	}
	,onWindowResize: function(width,height) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowResize(width,height);
		}
	}
	,onWindowRestore: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowRestore();
		}
	}
	,removeModule: function(module) {
		HxOverrides.remove(this.modules,module);
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && HxOverrides.indexOf(this.renderers,renderer,0) > -1) HxOverrides.remove(this.renderers,renderer);
	}
	,removeWindow: function(window) {
		if(window != null && HxOverrides.indexOf(this.windows,window,0) > -1) {
			window.close();
			HxOverrides.remove(this.windows,window);
		}
	}
	,render: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.render(context);
		}
	}
	,update: function(deltaTime) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.update(deltaTime);
		}
	}
	,get_renderer: function() {
		return this.renderers[0];
	}
	,get_window: function() {
		return this.windows[0];
	}
	,__class__: lime.app.Application
	,__properties__: {get_window:"get_window",get_renderer:"get_renderer"}
});
lime.app.Event = function() {
	this.listeners = new Array();
	this.priorities = new Array();
	this.repeat = new Array();
};
$hxClasses["lime.app.Event"] = lime.app.Event;
lime.app.Event.__name__ = ["lime","app","Event"];
lime.app.Event.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,remove: function(listener) {
		var index = HxOverrides.indexOf(this.listeners,listener,0);
		if(index > -1) {
			this.listeners.splice(index,1);
			this.priorities.splice(index,1);
			this.repeat.splice(index,1);
		}
	}
	,__class__: lime.app.Event
};
lime.app.Preloader = function() {
	this.total = 0;
	this.loaded = 0;
};
$hxClasses["lime.app.Preloader"] = lime.app.Preloader;
lime.app.Preloader.__name__ = ["lime","app","Preloader"];
lime.app.Preloader.prototype = {
	create: function(config) {
	}
	,load: function(urls,types) {
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "IMAGE":
				var image = new Image();
				lime.app.Preloader.images.set(url,image);
				image.onload = $bind(this,this.image_onLoad);
				image.src = url;
				this.total++;
				break;
			case "BINARY":
				var loader = new lime.net.URLLoader();
				loader.set_dataFormat(lime.net.URLLoaderDataFormat.BINARY);
				lime.app.Preloader.loaders.set(url,loader);
				this.total++;
				break;
			case "TEXT":
				var loader1 = new lime.net.URLLoader();
				lime.app.Preloader.loaders.set(url,loader1);
				this.total++;
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			default:
			}
		}
		var $it0 = lime.app.Preloader.loaders.keys();
		while( $it0.hasNext() ) {
			var url1 = $it0.next();
			var loader2 = lime.app.Preloader.loaders.get(url1);
			loader2.onComplete.add($bind(this,this.loader_onComplete));
			loader2.load(new lime.net.URLRequest(url1));
		}
		if(this.total == 0) this.start();
	}
	,loadFont: function(font) {
		var _g = this;
		if(window.document.fonts && window.document.fonts.load) window.document.fonts.load("1em '" + font + "'").then(function(_) {
			_g.loaded++;
			_g.update(_g.loaded,_g.total);
			if(_g.loaded == _g.total) _g.start();
		}); else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					_g.loaded++;
					if(interval != null) window.clearInterval(interval);
					node.parentNode.removeChild(node);
					node = null;
					_g.update(_g.loaded,_g.total);
					if(_g.loaded == _g.total) _g.start();
					return true;
				}
				return false;
			};
			if(!checkFont()) interval = window.setInterval(checkFont,50);
		}
	}
	,start: function() {
		if(this.onComplete != null) this.onComplete();
	}
	,update: function(loaded,total) {
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,loader_onComplete: function(loader) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: lime.app.Preloader
};
lime.audio = {};
lime.audio.ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime.audio.ALAudioContext;
lime.audio.ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
lime.audio.ALAudioContext.prototype = {
	bufferData: function(buffer,format,data,size,freq) {
		lime.audio.openal.AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime.audio.openal.AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime.audio.openal.AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime.audio.openal.AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime.audio.openal.AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime.audio.openal.AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime.audio.openal.AL.bufferiv(buffer,param,values);
	}
	,deleteBuffer: function(buffer) {
		lime.audio.openal.AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime.audio.openal.AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime.audio.openal.AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime.audio.openal.AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime.audio.openal.AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime.audio.openal.AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime.audio.openal.AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime.audio.openal.AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime.audio.openal.AL.enable(capability);
	}
	,genSource: function() {
		return lime.audio.openal.AL.genSource();
	}
	,genSources: function(n) {
		return lime.audio.openal.AL.genSources(n);
	}
	,genBuffer: function() {
		return lime.audio.openal.AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime.audio.openal.AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime.audio.openal.AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime.audio.openal.AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime.audio.openal.AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime.audio.openal.AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime.audio.openal.AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime.audio.openal.AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime.audio.openal.AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime.audio.openal.AL.getError();
	}
	,getErrorString: function() {
		return lime.audio.openal.AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime.audio.openal.AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime.audio.openal.AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime.audio.openal.AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime.audio.openal.AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime.audio.openal.AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime.audio.openal.AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime.audio.openal.AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime.audio.openal.AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime.audio.openal.AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime.audio.openal.AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param) {
		return lime.audio.openal.AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime.audio.openal.AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime.audio.openal.AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime.audio.openal.AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime.audio.openal.AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime.audio.openal.AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime.audio.openal.AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime.audio.openal.AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime.audio.openal.AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime.audio.openal.AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime.audio.openal.AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime.audio.openal.AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime.audio.openal.AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime.audio.openal.AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime.audio.openal.AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime.audio.openal.AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime.audio.openal.AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime.audio.openal.AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime.audio.openal.AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime.audio.openal.AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime.audio.openal.AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime.audio.openal.AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime.audio.openal.AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime.audio.openal.AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime.audio.openal.AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime.audio.openal.AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime.audio.openal.AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime.audio.openal.AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime.audio.openal.AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime.audio.openal.AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime.audio.openal.AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime.audio.openal.AL.speedOfSound(value);
	}
	,__class__: lime.audio.ALAudioContext
};
lime.audio.ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime.audio.ALCAudioContext;
lime.audio.ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
lime.audio.ALCAudioContext.prototype = {
	closeDevice: function(device) {
		return lime.audio.openal.ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime.audio.openal.ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime.audio.openal.ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime.audio.openal.ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime.audio.openal.ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime.audio.openal.ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime.audio.openal.ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime.audio.openal.ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime.audio.openal.ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime.audio.openal.ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime.audio.openal.ALC.processContext(context);
	}
	,suspendContext: function(context) {
		lime.audio.openal.ALC.suspendContext(context);
	}
	,__class__: lime.audio.ALCAudioContext
};
lime.audio.AudioBuffer = function() {
	this.id = 0;
};
$hxClasses["lime.audio.AudioBuffer"] = lime.audio.AudioBuffer;
lime.audio.AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
lime.audio.AudioBuffer.fromBytes = function(bytes) {
	return null;
};
lime.audio.AudioBuffer.fromFile = function(path) {
	return null;
};
lime.audio.AudioBuffer.fromURL = function(url,handler) {
};
lime.audio.AudioBuffer.prototype = {
	dispose: function() {
	}
	,__class__: lime.audio.AudioBuffer
};
lime.audio.AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : true, __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime.audio.AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime.audio.AudioManager;
lime.audio.AudioManager.__name__ = ["lime","audio","AudioManager"];
lime.audio.AudioManager.context = null;
lime.audio.AudioManager.init = function(context) {
	if(lime.audio.AudioManager.context == null) {
		if(context == null) try {
			window.AudioContext = window.AudioContext || window.webkitAudioContext;;
			lime.audio.AudioManager.context = lime.audio.AudioContext.WEB(new AudioContext ());
		} catch( e ) {
			lime.audio.AudioManager.context = lime.audio.AudioContext.HTML5(new lime.audio.HTML5AudioContext());
		} else lime.audio.AudioManager.context = context;
	}
};
lime.audio.AudioManager.resume = function() {
	if(lime.audio.AudioManager.context != null) {
		var _g = lime.audio.AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.processContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime.audio.AudioManager.shutdown = function() {
	if(lime.audio.AudioManager.context != null) {
		var _g = lime.audio.AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				alc.closeDevice(device);
			}
			break;
		default:
		}
	}
};
lime.audio.AudioManager.suspend = function() {
	if(lime.audio.AudioManager.context != null) {
		var _g = lime.audio.AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.suspendContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime.audio.AudioSource = function(buffer) {
	this.onComplete = new lime.app.Event();
	this.buffer = buffer;
	this.id = 0;
	this.pauseTime = 0;
	if(buffer != null) this.init();
};
$hxClasses["lime.audio.AudioSource"] = lime.audio.AudioSource;
lime.audio.AudioSource.__name__ = ["lime","audio","AudioSource"];
lime.audio.AudioSource.prototype = {
	init: function() {
		{
			var _g = lime.audio.AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if((function($this) {
					var $r;
					var $int = $this.buffer.id;
					$r = $int < 0?4294967296.0 + $int:$int + 0.0;
					return $r;
				}(this)) == 0) {
					this.buffer.id = al.genBuffer();
					var format = 0;
					if(this.buffer.channels == 1) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_MONO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_MONO16;
					} else if(this.buffer.channels == 2) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_STEREO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_STEREO16;
					}
					al.bufferData(this.buffer.id,format,this.buffer.data,this.buffer.data.length,this.buffer.sampleRate);
				}
				this.id = al.genSource();
				al.sourcei(this.id,al.BUFFER,this.buffer.id);
				break;
			default:
			}
		}
	}
	,play: function() {
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,get_gain: function() {
		return 1;
	}
	,set_gain: function(value) {
		return 1;
	}
	,get_timeOffset: function() {
		return 0;
	}
	,set_timeOffset: function(value) {
		return 0;
	}
	,__class__: lime.audio.AudioSource
	,__properties__: {set_timeOffset:"set_timeOffset",get_timeOffset:"get_timeOffset",set_gain:"set_gain",get_gain:"get_gain"}
};
lime.audio.FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime.audio.FlashAudioContext;
lime.audio.FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
lime.audio.FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) startPosition = -1;
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		return null;
	}
	,__class__: lime.audio.FlashAudioContext
};
lime.audio.HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime.audio.HTML5AudioContext;
lime.audio.HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime.audio.HTML5AudioContext.prototype = {
	canPlayType: function(buffer,type) {
		if(buffer.src != null) return buffer.src.canPlayType(type);
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime.audio.AudioBuffer();
		buffer.src = new Audio();
		buffer.src.src = urlString;
		return buffer;
	}
	,getAudioDecodedByteCount: function(buffer) {
		if(buffer.src != null) return buffer.src.audioDecodedByteCount;
		return 0;
	}
	,getAutoplay: function(buffer) {
		if(buffer.src != null) return buffer.src.autoplay;
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.src != null) return buffer.src.buffered;
		return null;
	}
	,getController: function(buffer) {
		if(buffer.src != null) return buffer.src.controller;
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.currentSrc;
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.src != null) return buffer.src.currentTime;
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.defaultPlaybackRate;
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.src != null) return buffer.src.duration;
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.src != null) return buffer.src.ended;
		return false;
	}
	,getError: function(buffer) {
		if(buffer.src != null) return buffer.src.error;
		return null;
	}
	,getInitialTime: function(buffer) {
		if(buffer.src != null) return buffer.src.initialTime;
		return 0;
	}
	,getLoop: function(buffer) {
		if(buffer.src != null) return buffer.src.loop;
		return false;
	}
	,getMediaGroup: function(buffer) {
		if(buffer.src != null) return buffer.src.mediaGroup;
		return null;
	}
	,getMuted: function(buffer) {
		if(buffer.src != null) return buffer.src.muted;
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.src != null) return buffer.src.networkState;
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.src != null) return buffer.src.paused;
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.src != null) return buffer.src.played;
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.src != null) return buffer.src.preload;
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.src != null) return buffer.src.readyState;
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.src != null) return buffer.src.seekable;
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.src != null) return buffer.src.seeking;
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.src;
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.src != null) return buffer.src.volume;
		return 1;
	}
	,load: function(buffer) {
		if(buffer.src != null) return buffer.src.load();
	}
	,pause: function(buffer) {
		if(buffer.src != null) return buffer.src.pause();
	}
	,play: function(buffer) {
		if(buffer.src != null) return buffer.src.play();
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.src != null) buffer.src.autoplay = value;
	}
	,setController: function(buffer,value) {
		if(buffer.src != null) buffer.src.controller = value;
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.src != null) buffer.src.currentTime = value;
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.defaultPlaybackRate = value;
	}
	,setLoop: function(buffer,value) {
		if(buffer.src != null) buffer.src.loop = value;
	}
	,setMediaGroup: function(buffer,value) {
		if(buffer.src != null) buffer.src.mediaGroup = value;
	}
	,setMuted: function(buffer,value) {
		if(buffer.src != null) buffer.src.muted = value;
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.playbackRate = value;
	}
	,setPreload: function(buffer,value) {
		if(buffer.src != null) buffer.src.preload = value;
	}
	,setSrc: function(buffer,value) {
		if(buffer.src != null) buffer.src.src = value;
	}
	,setVolume: function(buffer,value) {
		if(buffer.src != null) buffer.src.volume = value;
	}
	,__class__: lime.audio.HTML5AudioContext
};
lime.audio.openal = {};
lime.audio.openal.AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime.audio.openal.AL;
lime.audio.openal.AL.__name__ = ["lime","audio","openal","AL"];
lime.audio.openal.AL.bufferData = function(buffer,format,data,size,freq) {
};
lime.audio.openal.AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime.audio.openal.AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime.audio.openal.AL.bufferf = function(buffer,param,value) {
};
lime.audio.openal.AL.bufferfv = function(buffer,param,values) {
};
lime.audio.openal.AL.bufferi = function(buffer,param,value) {
};
lime.audio.openal.AL.bufferiv = function(buffer,param,values) {
};
lime.audio.openal.AL.deleteBuffer = function(buffer) {
};
lime.audio.openal.AL.deleteBuffers = function(buffers) {
};
lime.audio.openal.AL.deleteSource = function(source) {
};
lime.audio.openal.AL.deleteSources = function(sources) {
};
lime.audio.openal.AL.disable = function(capability) {
};
lime.audio.openal.AL.distanceModel = function(distanceModel) {
};
lime.audio.openal.AL.dopplerFactor = function(value) {
};
lime.audio.openal.AL.dopplerVelocity = function(value) {
};
lime.audio.openal.AL.enable = function(capability) {
};
lime.audio.openal.AL.genSource = function() {
	return 0;
};
lime.audio.openal.AL.genSources = function(n) {
	return null;
};
lime.audio.openal.AL.genBuffer = function() {
	return 0;
};
lime.audio.openal.AL.genBuffers = function(n) {
	return null;
};
lime.audio.openal.AL.getBoolean = function(param) {
	return false;
};
lime.audio.openal.AL.getBooleanv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime.audio.openal.AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime.audio.openal.AL.getBufferf = function(buffer,param) {
	return 0;
};
lime.audio.openal.AL.getBufferfv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getBufferi = function(buffer,param) {
	return 0;
};
lime.audio.openal.AL.getBufferiv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getDouble = function(param) {
	return 0;
};
lime.audio.openal.AL.getDoublev = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getEnumValue = function(ename) {
	return 0;
};
lime.audio.openal.AL.getError = function() {
	return 0;
};
lime.audio.openal.AL.getErrorString = function() {
	var _g = lime.audio.openal.AL.getError();
	switch(_g) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime.audio.openal.AL.getFloat = function(param) {
	return 0;
};
lime.audio.openal.AL.getFloatv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getInteger = function(param) {
	return 0;
};
lime.audio.openal.AL.getIntegerv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getListener3f = function(param) {
	return null;
};
lime.audio.openal.AL.getListener3i = function(param) {
	return null;
};
lime.audio.openal.AL.getListenerf = function(param) {
	return 0;
};
lime.audio.openal.AL.getListenerfv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getListeneri = function(param) {
	return 0;
};
lime.audio.openal.AL.getListeneriv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getProcAddress = function(fname) {
	return null;
};
lime.audio.openal.AL.getSource3f = function(source,param) {
	return null;
};
lime.audio.openal.AL.getSourcef = function(source,param) {
	return 0;
};
lime.audio.openal.AL.getSource3i = function(source,param) {
	return null;
};
lime.audio.openal.AL.getSourcefv = function(source,param) {
	return null;
};
lime.audio.openal.AL.getSourcei = function(source,param) {
	return 0;
};
lime.audio.openal.AL.getSourceiv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getString = function(param) {
	return null;
};
lime.audio.openal.AL.isBuffer = function(buffer) {
	return false;
};
lime.audio.openal.AL.isEnabled = function(capability) {
	return false;
};
lime.audio.openal.AL.isExtensionPresent = function(extname) {
	return false;
};
lime.audio.openal.AL.isSource = function(source) {
	return false;
};
lime.audio.openal.AL.listener3f = function(param,value1,value2,value3) {
};
lime.audio.openal.AL.listener3i = function(param,value1,value2,value3) {
};
lime.audio.openal.AL.listenerf = function(param,value) {
};
lime.audio.openal.AL.listenerfv = function(param,values) {
};
lime.audio.openal.AL.listeneri = function(param,value) {
};
lime.audio.openal.AL.listeneriv = function(param,values) {
};
lime.audio.openal.AL.source3f = function(source,param,value1,value2,value3) {
};
lime.audio.openal.AL.source3i = function(source,param,value1,value2,value3) {
};
lime.audio.openal.AL.sourcef = function(source,param,value) {
};
lime.audio.openal.AL.sourcefv = function(source,param,values) {
};
lime.audio.openal.AL.sourcei = function(source,param,value) {
};
lime.audio.openal.AL.sourceiv = function(source,param,values) {
};
lime.audio.openal.AL.sourcePlay = function(source) {
};
lime.audio.openal.AL.sourcePlayv = function(sources) {
};
lime.audio.openal.AL.sourceStop = function(source) {
};
lime.audio.openal.AL.sourceStopv = function(sources) {
};
lime.audio.openal.AL.sourceRewind = function(source) {
};
lime.audio.openal.AL.sourceRewindv = function(sources) {
};
lime.audio.openal.AL.sourcePause = function(source) {
};
lime.audio.openal.AL.sourcePausev = function(sources) {
};
lime.audio.openal.AL.sourceQueueBuffer = function(source,buffer) {
};
lime.audio.openal.AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime.audio.openal.AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime.audio.openal.AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime.audio.openal.AL.speedOfSound = function(value) {
};
lime.audio.openal.ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime.audio.openal.ALC;
lime.audio.openal.ALC.__name__ = ["lime","audio","openal","ALC"];
lime.audio.openal.ALC.closeDevice = function(device) {
	return false;
};
lime.audio.openal.ALC.createContext = function(device,attrlist) {
	return null;
};
lime.audio.openal.ALC.destroyContext = function(context) {
};
lime.audio.openal.ALC.getContextsDevice = function(context) {
	return null;
};
lime.audio.openal.ALC.getCurrentContext = function() {
	return null;
};
lime.audio.openal.ALC.getError = function(device) {
	return 0;
};
lime.audio.openal.ALC.getErrorString = function(device) {
	var _g = lime.audio.openal.ALC.getError(device);
	switch(_g) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime.audio.openal.ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime.audio.openal.ALC.getString = function(device,param) {
	return null;
};
lime.audio.openal.ALC.makeContextCurrent = function(context) {
	return false;
};
lime.audio.openal.ALC.openDevice = function(deviceName) {
	return null;
};
lime.audio.openal.ALC.processContext = function(context) {
};
lime.audio.openal.ALC.suspendContext = function(context) {
};
lime.audio.openal._ALContext = {};
lime.audio.openal._ALContext.ALContext_Impl_ = function() { };
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime.audio.openal._ALContext.ALContext_Impl_;
lime.audio.openal._ALContext.ALContext_Impl_.__name__ = ["lime","audio","openal","_ALContext","ALContext_Impl_"];
lime.audio.openal._ALContext.ALContext_Impl_._new = function(handle) {
	return handle;
};
lime.audio.openal._ALDevice = {};
lime.audio.openal._ALDevice.ALDevice_Impl_ = function() { };
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime.audio.openal._ALDevice.ALDevice_Impl_;
lime.audio.openal._ALDevice.ALDevice_Impl_.__name__ = ["lime","audio","openal","_ALDevice","ALDevice_Impl_"];
lime.audio.openal._ALDevice.ALDevice_Impl_._new = function(handle) {
	return handle;
};
lime.graphics = {};
lime.graphics.ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime.graphics.ConsoleRenderContext;
lime.graphics.ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime.graphics.ConsoleRenderContext.prototype = {
	clear: function() {
	}
	,clearColor: function(r,g,b,a) {
	}
	,clearDepth: function(depth) {
	}
	,clearStencil: function(stencil) {
	}
	,__class__: lime.graphics.ConsoleRenderContext
};
lime.graphics.FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime.graphics.FlashRenderContext;
lime.graphics.FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime.graphics.FlashRenderContext.prototype = {
	addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime.graphics.FlashRenderContext
};
lime.graphics.Font = function(fontName) {
	lime.text.Font.call(this,fontName);
};
$hxClasses["lime.graphics.Font"] = lime.graphics.Font;
lime.graphics.Font.__name__ = ["lime","graphics","Font"];
lime.graphics.Font.__super__ = lime.text.Font;
lime.graphics.Font.prototype = $extend(lime.text.Font.prototype,{
	get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: lime.graphics.Font
	,__properties__: $extend(lime.text.Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
lime.graphics.Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) height = -1;
	if(width == null) width = -1;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	if(type == null) {
		if(lime.app.Application.current != null && lime.app.Application.current.renderers[0] != null) {
			var _g = lime.app.Application.current.renderers[0].context;
			switch(_g[1]) {
			case 2:case 1:
				this.type = lime.graphics.ImageType.CANVAS;
				break;
			case 3:
				this.type = lime.graphics.ImageType.FLASH;
				break;
			default:
				this.type = lime.graphics.ImageType.DATA;
			}
		} else this.type = lime.graphics.ImageType.DATA;
	} else this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 0:
				this.buffer = new lime.graphics.ImageBuffer(null,width,height);
				lime.graphics.utils.ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) this.fillRect(new lime.math.Rectangle(0,0,width,height),color);
				break;
			case 1:
				this.buffer = new lime.graphics.ImageBuffer(new Uint8Array(width * height * 4),width,height);
				if(color != null) this.fillRect(new lime.math.Rectangle(0,0,width,height),color);
				break;
			case 2:
				break;
			default:
			}
		}
	} else this.__fromImageBuffer(buffer);
};
$hxClasses["lime.graphics.Image"] = lime.graphics.Image;
lime.graphics.Image.__name__ = ["lime","graphics","Image"];
lime.graphics.Image.__base64Encoder = null;
lime.graphics.Image.fromBase64 = function(base64,type,onload) {
	var image = new lime.graphics.Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime.graphics.Image.fromBitmapData = function(bitmapData) {
	var buffer = new lime.graphics.ImageBuffer(null,bitmapData.width,bitmapData.height);
	buffer.__srcBitmapData = bitmapData;
	return new lime.graphics.Image(buffer);
};
lime.graphics.Image.fromBytes = function(bytes,onload) {
	var image = new lime.graphics.Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime.graphics.Image.fromCanvas = function(canvas) {
	var buffer = new lime.graphics.ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	return new lime.graphics.Image(buffer);
};
lime.graphics.Image.fromFile = function(path,onload,onerror) {
	var image = new lime.graphics.Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime.graphics.Image.fromImageElement = function(image) {
	var buffer = new lime.graphics.ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	return new lime.graphics.Image(buffer);
};
lime.graphics.Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime.graphics.Image.__base64Encoder == null) lime.graphics.Image.__base64Encoder = new haxe.crypto.BaseCode(haxe.io.Bytes.ofString(lime.graphics.Image.__base64Chars));
	return lime.graphics.Image.__base64Encoder.encodeBytes(haxe.io.Bytes.ofData(bytes.byteView)).toString() + extension;
};
lime.graphics.Image.__isJPG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 255 && bytes.readUnsignedByte() == 216;
};
lime.graphics.Image.__isPNG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 137 && bytes.readUnsignedByte() == 80 && bytes.readUnsignedByte() == 78 && bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 13 && bytes.readUnsignedByte() == 10 && bytes.readUnsignedByte() == 26 && bytes.readUnsignedByte() == 10;
};
lime.graphics.Image.__isGIF = function(bytes) {
	bytes.position = 0;
	if(bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 73 && bytes.readUnsignedByte() == 70 && bytes.readUnsignedByte() == 56) {
		var b = bytes.readUnsignedByte();
		return (b == 55 || b == 57) && bytes.readUnsignedByte() == 97;
	}
	return false;
};
lime.graphics.Image.prototype = {
	clone: function() {
		var image = new lime.graphics.Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		return image;
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime.math._ColorMatrix.ColorMatrix_Impl_.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) return;
		if(destChannel == lime.graphics.ImageChannel.ALPHA && !this.get_transparent()) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(this.buffer == null || sourceImage == null) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this);
			lime.graphics.utils.ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageCanvasUtil.convertToData(sourceImage);
			lime.graphics.utils.ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) quality = 90;
		if(format == null) format = "png";
		return null;
	}
	,fillRect: function(rect,color) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.fillRect(this,rect,color);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.fillRect(this,rect,color);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),color);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.floodFill(this,x,y,color);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.floodFill(this,x,y,color);
			break;
		case 2:
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,color);
			break;
		default:
		}
	}
	,getPixel: function(x,y) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime.graphics.utils.ImageCanvasUtil.getPixel(this,x,y);
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			return lime.graphics.utils.ImageDataUtil.getPixel(this,x,y);
		case 2:
			return this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime.graphics.utils.ImageCanvasUtil.getPixel32(this,x,y);
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			return lime.graphics.utils.ImageDataUtil.getPixel32(this,x,y);
		case 2:
			return this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
		default:
			return 0;
		}
	}
	,getPixels: function(rect) {
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime.graphics.utils.ImageCanvasUtil.getPixels(this,rect);
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			return lime.graphics.utils.ImageDataUtil.getPixels(this,rect);
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.getPixels(rect.__toFlashRectangle());
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this);
			lime.graphics.utils.ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageCanvasUtil.convertToData(sourceImage);
			lime.graphics.utils.ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return null;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime.graphics.utils.ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,setPixel: function(x,y,color) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.setPixel(this,x,y,color);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.setPixel(this,x,y,color);
			break;
		case 2:
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,color);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.setPixel32(this,x,y,color);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.setPixel32(this,x,y,color);
			break;
		case 2:
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,color);
			break;
		default:
		}
	}
	,setPixels: function(rect,byteArray) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.setPixels(this,rect,byteArray);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.setPixels(this,rect,byteArray);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.setPixels(rect.__toFlashRectangle(),byteArray);
			break;
		default:
		}
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_g.buffer = new lime.graphics.ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.offsetX = 0;
			_g.offsetY = 0;
			_g.width = _g.buffer.width;
			_g.height = _g.buffer.height;
			if(onload != null) onload(_g);
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime.graphics.Image.__isPNG(bytes)) type = "image/png"; else if(lime.graphics.Image.__isJPG(bytes)) type = "image/jpeg"; else if(lime.graphics.Image.__isGIF(bytes)) type = "image/gif"; else throw "Image tried to read a PNG/JPG ByteArray, but found an invalid header.";
		this.__fromBase64(lime.graphics.Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		var image = new Image();
		image.onload = function(_) {
			_g.buffer = new lime.graphics.ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.width = image.width;
			_g.height = image.height;
			if(onload != null) onload(_g);
		};
		image.onerror = function(_1) {
			if(onerror != null) onerror();
		};
		image.src = path;
		if(image.complete) {
		}
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) this.width = buffer.width;
			if(this.height == -1) this.height = buffer.height;
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this);
			lime.graphics.utils.ImageCanvasUtil.sync(this);
			lime.graphics.utils.ImageCanvasUtil.createImageData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_powerOfTwo: function() {
		return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				lime.graphics.utils.ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime.graphics.utils.ImageCanvasUtil.convertToData(this);
				lime.graphics.utils.ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 1:
				lime.graphics.utils.ImageCanvasUtil.convertToData(this);
				lime.graphics.utils.ImageDataUtil.unmultiplyAlpha(this);
				break;
			default:
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime.math.Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		return this.buffer.transparent = value;
	}
	,__class__: lime.graphics.Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_data:"set_data",get_data:"get_data"}
};
lime.graphics.ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : true, __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime.graphics.ImageChannel.RED = ["RED",0];
lime.graphics.ImageChannel.RED.toString = $estr;
lime.graphics.ImageChannel.RED.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageChannel.GREEN = ["GREEN",1];
lime.graphics.ImageChannel.GREEN.toString = $estr;
lime.graphics.ImageChannel.GREEN.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageChannel.BLUE = ["BLUE",2];
lime.graphics.ImageChannel.BLUE.toString = $estr;
lime.graphics.ImageChannel.BLUE.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageChannel.ALPHA = ["ALPHA",3];
lime.graphics.ImageChannel.ALPHA.toString = $estr;
lime.graphics.ImageChannel.ALPHA.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageBuffer = function(data,width,height,bitsPerPixel) {
	if(bitsPerPixel == null) bitsPerPixel = 4;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime.graphics.ImageBuffer;
lime.graphics.ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime.graphics.ImageBuffer.prototype = {
	clone: function() {
		var buffer = new lime.graphics.ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			buffer.data = new Uint8Array(this.data.byteLength);
			var copy = new Uint8Array(this.data);
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else buffer.__srcImage = this.__srcImage;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) return this.__srcImage;
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js.Boot.__instanceof(value,Image)) this.__srcImage = value; else if(js.Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,__class__: lime.graphics.ImageBuffer
	,__properties__: {set_src:"set_src",get_src:"get_src"}
};
lime.graphics.ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : true, __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime.graphics.ImageType.CANVAS = ["CANVAS",0];
lime.graphics.ImageType.CANVAS.toString = $estr;
lime.graphics.ImageType.CANVAS.__enum__ = lime.graphics.ImageType;
lime.graphics.ImageType.DATA = ["DATA",1];
lime.graphics.ImageType.DATA.toString = $estr;
lime.graphics.ImageType.DATA.__enum__ = lime.graphics.ImageType;
lime.graphics.ImageType.FLASH = ["FLASH",2];
lime.graphics.ImageType.FLASH.toString = $estr;
lime.graphics.ImageType.FLASH.__enum__ = lime.graphics.ImageType;
lime.graphics.ImageType.CUSTOM = ["CUSTOM",3];
lime.graphics.ImageType.CUSTOM.toString = $estr;
lime.graphics.ImageType.CUSTOM.__enum__ = lime.graphics.ImageType;
lime.graphics.RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : true, __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CONSOLE","CUSTOM"] };
lime.graphics.RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",4,context]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",5,data]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.Renderer = function(window) {
	this.onRender = new lime.app.Event();
	this.onRenderContextRestored = new lime.app.Event();
	this.onRenderContextLost = new lime.app.Event();
	this.window = window;
	this.backend = new lime._backend.html5.HTML5Renderer(this);
	this.window.currentRenderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime.graphics.Renderer;
lime.graphics.Renderer.__name__ = ["lime","graphics","Renderer"];
lime.graphics.Renderer.prototype = {
	create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime.graphics.Renderer
};
lime.graphics.cairo = {};
lime.graphics.cairo.Cairo = function(surface) {
	if(surface != null) {
	}
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime.graphics.cairo.Cairo;
lime.graphics.cairo.Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime.graphics.cairo.Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"}
lime.graphics.cairo.Cairo.version = null;
lime.graphics.cairo.Cairo.versionString = null;
lime.graphics.cairo.Cairo.get_version = function() {
	return 0;
};
lime.graphics.cairo.Cairo.get_versionString = function() {
	return "";
};
lime.graphics.cairo.Cairo.prototype = {
	recreate: function(surface) {
	}
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,destroy: function() {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,reference: function() {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setFontFace: function(face) {
	}
	,setFontSize: function(size) {
	}
	,getFontOptions: function() {
		return 0;
	}
	,setFontOptions: function(value) {
		return value;
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,transform: function(matrix) {
	}
	,rotate: function(amount) {
	}
	,scale: function(x,y) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_referenceCount: function() {
		return 0;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime.graphics.cairo.Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",get_referenceCount:"get_referenceCount",set_operator:"set_operator",get_operator:"get_operator",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
lime.graphics.cairo._CairoAntialias = {};
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_"] = lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_;
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_.__name__ = ["lime","graphics","cairo","_CairoAntialias","CairoAntialias_Impl_"];
lime.graphics.cairo._CairoContent = {};
lime.graphics.cairo._CairoContent.CairoContent_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoContent.CairoContent_Impl_"] = lime.graphics.cairo._CairoContent.CairoContent_Impl_;
lime.graphics.cairo._CairoContent.CairoContent_Impl_.__name__ = ["lime","graphics","cairo","_CairoContent","CairoContent_Impl_"];
lime.graphics.cairo._CairoExtend = {};
lime.graphics.cairo._CairoExtend.CairoExtend_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoExtend.CairoExtend_Impl_"] = lime.graphics.cairo._CairoExtend.CairoExtend_Impl_;
lime.graphics.cairo._CairoExtend.CairoExtend_Impl_.__name__ = ["lime","graphics","cairo","_CairoExtend","CairoExtend_Impl_"];
lime.graphics.cairo._CairoFillRule = {};
lime.graphics.cairo._CairoFillRule.CairoFillRule_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoFillRule.CairoFillRule_Impl_"] = lime.graphics.cairo._CairoFillRule.CairoFillRule_Impl_;
lime.graphics.cairo._CairoFillRule.CairoFillRule_Impl_.__name__ = ["lime","graphics","cairo","_CairoFillRule","CairoFillRule_Impl_"];
lime.graphics.cairo._CairoFilter = {};
lime.graphics.cairo._CairoFilter.CairoFilter_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoFilter.CairoFilter_Impl_"] = lime.graphics.cairo._CairoFilter.CairoFilter_Impl_;
lime.graphics.cairo._CairoFilter.CairoFilter_Impl_.__name__ = ["lime","graphics","cairo","_CairoFilter","CairoFilter_Impl_"];
lime.graphics.cairo.CairoFont = function(font) {
};
$hxClasses["lime.graphics.cairo.CairoFont"] = lime.graphics.cairo.CairoFont;
lime.graphics.cairo.CairoFont.__name__ = ["lime","graphics","cairo","CairoFont"];
lime.graphics.cairo.CairoFont.prototype = {
	destroy: function() {
	}
	,__class__: lime.graphics.cairo.CairoFont
};
lime.graphics.cairo.CairoFontOptions = function(handle) {
	this.handle = handle;
};
$hxClasses["lime.graphics.cairo.CairoFontOptions"] = lime.graphics.cairo.CairoFontOptions;
lime.graphics.cairo.CairoFontOptions.__name__ = ["lime","graphics","cairo","CairoFontOptions"];
lime.graphics.cairo.CairoFontOptions.prototype = {
	get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_subpixelOrder: function() {
		return 0;
	}
	,set_subpixelOrder: function(value) {
		return value;
	}
	,get_hintStyle: function() {
		return 0;
	}
	,set_hintStyle: function(value) {
		return value;
	}
	,get_hintMetrics: function() {
		return 0;
	}
	,set_hintMetrics: function(value) {
		return value;
	}
	,__class__: lime.graphics.cairo.CairoFontOptions
	,__properties__: {set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
lime.graphics.cairo._CairoFormat = {};
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoFormat.CairoFormat_Impl_"] = lime.graphics.cairo._CairoFormat.CairoFormat_Impl_;
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_.__name__ = ["lime","graphics","cairo","_CairoFormat","CairoFormat_Impl_"];
lime.graphics.cairo._CairoHintMetrics = {};
lime.graphics.cairo._CairoHintMetrics.CairoHintMetrics_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoHintMetrics.CairoHintMetrics_Impl_"] = lime.graphics.cairo._CairoHintMetrics.CairoHintMetrics_Impl_;
lime.graphics.cairo._CairoHintMetrics.CairoHintMetrics_Impl_.__name__ = ["lime","graphics","cairo","_CairoHintMetrics","CairoHintMetrics_Impl_"];
lime.graphics.cairo._CairoHintStyle = {};
lime.graphics.cairo._CairoHintStyle.CairoHintStyle_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoHintStyle.CairoHintStyle_Impl_"] = lime.graphics.cairo._CairoHintStyle.CairoHintStyle_Impl_;
lime.graphics.cairo._CairoHintStyle.CairoHintStyle_Impl_.__name__ = ["lime","graphics","cairo","_CairoHintStyle","CairoHintStyle_Impl_"];
lime.graphics.cairo._CairoLineCap = {};
lime.graphics.cairo._CairoLineCap.CairoLineCap_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoLineCap.CairoLineCap_Impl_"] = lime.graphics.cairo._CairoLineCap.CairoLineCap_Impl_;
lime.graphics.cairo._CairoLineCap.CairoLineCap_Impl_.__name__ = ["lime","graphics","cairo","_CairoLineCap","CairoLineCap_Impl_"];
lime.graphics.cairo._CairoLineJoin = {};
lime.graphics.cairo._CairoLineJoin.CairoLineJoin_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoLineJoin.CairoLineJoin_Impl_"] = lime.graphics.cairo._CairoLineJoin.CairoLineJoin_Impl_;
lime.graphics.cairo._CairoLineJoin.CairoLineJoin_Impl_.__name__ = ["lime","graphics","cairo","_CairoLineJoin","CairoLineJoin_Impl_"];
lime.graphics.cairo._CairoOperator = {};
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoOperator.CairoOperator_Impl_"] = lime.graphics.cairo._CairoOperator.CairoOperator_Impl_;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.__name__ = ["lime","graphics","cairo","_CairoOperator","CairoOperator_Impl_"];
lime.graphics.cairo._CairoPattern = {};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime.graphics.cairo._CairoPattern.CairoPattern_Impl_;
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.__name__ = ["lime","graphics","cairo","_CairoPattern","CairoPattern_Impl_"];
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"}
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_._new = function(handle) {
	return handle;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.createForSurface = function(surface) {
	return 0;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.createRGB = function(r,g,b) {
	return 0;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.createRGBA = function(r,g,b,a) {
	return 0;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.destroy = function(this1) {
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.get_colorStopCount = function(this1) {
	return 0;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.get_extend = function(this1) {
	return 0;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.set_extend = function(this1,value) {
	return value;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.get_filter = function(this1) {
	return 0;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.set_filter = function(this1,value) {
	return value;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.get_matrix = function(this1) {
	return null;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.set_matrix = function(this1,value) {
	return value;
};
lime.graphics.cairo._CairoStatus = {};
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoStatus.CairoStatus_Impl_"] = lime.graphics.cairo._CairoStatus.CairoStatus_Impl_;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.__name__ = ["lime","graphics","cairo","_CairoStatus","CairoStatus_Impl_"];
lime.graphics.cairo._CairoSubpixelOrder = {};
lime.graphics.cairo._CairoSubpixelOrder.CairoSubpixelOrder_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoSubpixelOrder.CairoSubpixelOrder_Impl_"] = lime.graphics.cairo._CairoSubpixelOrder.CairoSubpixelOrder_Impl_;
lime.graphics.cairo._CairoSubpixelOrder.CairoSubpixelOrder_Impl_.__name__ = ["lime","graphics","cairo","_CairoSubpixelOrder","CairoSubpixelOrder_Impl_"];
lime.graphics.cairo._CairoSurface = {};
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime.graphics.cairo._CairoSurface.CairoSurface_Impl_;
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.__properties__ = {get_width:"get_width",get_height:"get_height"}
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_._new = function(format,width,height) {
	return 0;
};
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.createForData = function(data,format,width,height,stride) {
	return 0;
};
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.destroy = function(this1) {
};
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.flush = function(this1) {
};
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.fromImage = function(image) {
	return null;
};
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.get_height = function(this1) {
	return 0;
};
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.get_width = function(this1) {
	return 0;
};
lime.graphics.format = {};
lime.graphics.format.BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime.graphics.format.BMP;
lime.graphics.format.BMP.__name__ = ["lime","graphics","format","BMP"];
lime.graphics.format.BMP.encode = function(image,type) {
	if(type == null) type = lime.graphics.format.BMPType.RGB;
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	switch(type[1]) {
	case 1:
		infoHeaderLength = 108;
		break;
	case 2:
		fileHeaderLength = 0;
		pixelValuesLength += image.width * image.height;
		break;
	default:
	}
	var data = new lime.utils.ByteArray(fileHeaderLength + infoHeaderLength + pixelValuesLength);
	if(fileHeaderLength > 0) {
		data.writeByte(66);
		data.writeByte(77);
		data.writeInt(data.length);
		data.writeInt(0);
		data.writeInt(fileHeaderLength + infoHeaderLength);
	}
	data.writeInt(infoHeaderLength);
	data.writeInt(image.width);
	if(type == lime.graphics.format.BMPType.ICO) data.writeInt(image.height * 2); else data.writeInt(image.height);
	data.writeShort(1);
	data.writeShort(32);
	switch(type[1]) {
	case 1:
		data.writeInt(3);
		break;
	default:
		data.writeInt(0);
	}
	data.writeInt(pixelValuesLength);
	data.writeInt(11824);
	data.writeInt(11824);
	data.writeInt(0);
	data.writeInt(0);
	if(type == lime.graphics.format.BMPType.BITFIELD) {
		data.writeInt(16711680);
		data.writeInt(65280);
		data.writeInt(255);
		data.writeInt(-16777216);
		data.writeByte(32);
		data.writeByte(110);
		data.writeByte(105);
		data.writeByte(87);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
	}
	var pixels = image.getPixels(new lime.math.Rectangle(0,0,image.width,image.height));
	var a;
	var r;
	var g;
	var b;
	if(type != lime.graphics.format.BMPType.ICO) {
		var _g1 = 0;
		var _g = image.height;
		while(_g1 < _g) {
			var y = _g1++;
			pixels.position = (image.height - 1 - y) * 4 * image.width;
			var _g3 = 0;
			var _g2 = image.width;
			while(_g3 < _g2) {
				var x = _g3++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
			}
		}
	} else {
		var andMask = new lime.utils.ByteArray(image.width * image.height);
		var _g11 = 0;
		var _g4 = image.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			pixels.position = (image.height - 1 - y1) * 4 * image.width;
			var _g31 = 0;
			var _g21 = image.width;
			while(_g31 < _g21) {
				var x1 = _g31++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
				andMask.writeByte(0);
			}
		}
		data.writeBytes(andMask);
	}
	return data;
};
lime.graphics.format.BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : true, __constructs__ : ["RGB","BITFIELD","ICO"] };
lime.graphics.format.BMPType.RGB = ["RGB",0];
lime.graphics.format.BMPType.RGB.toString = $estr;
lime.graphics.format.BMPType.RGB.__enum__ = lime.graphics.format.BMPType;
lime.graphics.format.BMPType.BITFIELD = ["BITFIELD",1];
lime.graphics.format.BMPType.BITFIELD.toString = $estr;
lime.graphics.format.BMPType.BITFIELD.__enum__ = lime.graphics.format.BMPType;
lime.graphics.format.BMPType.ICO = ["ICO",2];
lime.graphics.format.BMPType.ICO.toString = $estr;
lime.graphics.format.BMPType.ICO.__enum__ = lime.graphics.format.BMPType;
lime.graphics.format.JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime.graphics.format.JPEG;
lime.graphics.format.JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime.graphics.format.JPEG.encode = function(image,quality) {
	return null;
};
lime.graphics.format.PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime.graphics.format.PNG;
lime.graphics.format.PNG.__name__ = ["lime","graphics","format","PNG"];
lime.graphics.format.PNG.encode = function(image) {
	return null;
};
lime.graphics.opengl = {};
lime.graphics.opengl.GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime.graphics.opengl.GL;
lime.graphics.opengl.GL.__name__ = ["lime","graphics","opengl","GL"];
lime.graphics.opengl.GL.__properties__ = {get_version:"get_version"}
lime.graphics.opengl.GL.version = null;
lime.graphics.opengl.GL.context = null;
lime.graphics.opengl.GL.activeTexture = function(texture) {
	lime.graphics.opengl.GL.context.activeTexture(texture);
};
lime.graphics.opengl.GL.attachShader = function(program,shader) {
	lime.graphics.opengl.GL.context.attachShader(program,shader);
};
lime.graphics.opengl.GL.bindAttribLocation = function(program,index,name) {
	lime.graphics.opengl.GL.context.bindAttribLocation(program,index,name);
};
lime.graphics.opengl.GL.bindBuffer = function(target,buffer) {
	lime.graphics.opengl.GL.context.bindBuffer(target,buffer);
};
lime.graphics.opengl.GL.bindFramebuffer = function(target,framebuffer) {
	lime.graphics.opengl.GL.context.bindFramebuffer(target,framebuffer);
};
lime.graphics.opengl.GL.bindRenderbuffer = function(target,renderbuffer) {
	lime.graphics.opengl.GL.context.bindRenderbuffer(target,renderbuffer);
};
lime.graphics.opengl.GL.bindTexture = function(target,texture) {
	lime.graphics.opengl.GL.context.bindTexture(target,texture);
};
lime.graphics.opengl.GL.blendColor = function(red,green,blue,alpha) {
	lime.graphics.opengl.GL.context.blendColor(red,green,blue,alpha);
};
lime.graphics.opengl.GL.blendEquation = function(mode) {
	lime.graphics.opengl.GL.context.blendEquation(mode);
};
lime.graphics.opengl.GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime.graphics.opengl.GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime.graphics.opengl.GL.blendFunc = function(sfactor,dfactor) {
	lime.graphics.opengl.GL.context.blendFunc(sfactor,dfactor);
};
lime.graphics.opengl.GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime.graphics.opengl.GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime.graphics.opengl.GL.bufferData = function(target,data,usage) {
	lime.graphics.opengl.GL.context.bufferData(target,data,usage);
};
lime.graphics.opengl.GL.bufferSubData = function(target,offset,data) {
	lime.graphics.opengl.GL.context.bufferSubData(target,offset,data);
};
lime.graphics.opengl.GL.checkFramebufferStatus = function(target) {
	return lime.graphics.opengl.GL.context.checkFramebufferStatus(target);
};
lime.graphics.opengl.GL.clear = function(mask) {
	lime.graphics.opengl.GL.context.clear(mask);
};
lime.graphics.opengl.GL.clearColor = function(red,green,blue,alpha) {
	lime.graphics.opengl.GL.context.clearColor(red,green,blue,alpha);
};
lime.graphics.opengl.GL.clearDepth = function(depth) {
	lime.graphics.opengl.GL.context.clearDepth(depth);
};
lime.graphics.opengl.GL.clearStencil = function(s) {
	lime.graphics.opengl.GL.context.clearStencil(s);
};
lime.graphics.opengl.GL.colorMask = function(red,green,blue,alpha) {
	lime.graphics.opengl.GL.context.colorMask(red,green,blue,alpha);
};
lime.graphics.opengl.GL.compileShader = function(shader) {
	lime.graphics.opengl.GL.context.compileShader(shader);
};
lime.graphics.opengl.GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime.graphics.opengl.GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime.graphics.opengl.GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime.graphics.opengl.GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime.graphics.opengl.GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime.graphics.opengl.GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime.graphics.opengl.GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime.graphics.opengl.GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime.graphics.opengl.GL.createBuffer = function() {
	return lime.graphics.opengl.GL.context.createBuffer();
};
lime.graphics.opengl.GL.createFramebuffer = function() {
	return lime.graphics.opengl.GL.context.createFramebuffer();
};
lime.graphics.opengl.GL.createProgram = function() {
	return lime.graphics.opengl.GL.context.createProgram();
};
lime.graphics.opengl.GL.createRenderbuffer = function() {
	return lime.graphics.opengl.GL.context.createRenderbuffer();
};
lime.graphics.opengl.GL.createShader = function(type) {
	return lime.graphics.opengl.GL.context.createShader(type);
};
lime.graphics.opengl.GL.createTexture = function() {
	return lime.graphics.opengl.GL.context.createTexture();
};
lime.graphics.opengl.GL.cullFace = function(mode) {
	lime.graphics.opengl.GL.context.cullFace(mode);
};
lime.graphics.opengl.GL.deleteBuffer = function(buffer) {
	lime.graphics.opengl.GL.context.deleteBuffer(buffer);
};
lime.graphics.opengl.GL.deleteFramebuffer = function(framebuffer) {
	lime.graphics.opengl.GL.context.deleteFramebuffer(framebuffer);
};
lime.graphics.opengl.GL.deleteProgram = function(program) {
	lime.graphics.opengl.GL.context.deleteProgram(program);
};
lime.graphics.opengl.GL.deleteRenderbuffer = function(renderbuffer) {
	lime.graphics.opengl.GL.context.deleteRenderbuffer(renderbuffer);
};
lime.graphics.opengl.GL.deleteShader = function(shader) {
	lime.graphics.opengl.GL.context.deleteShader(shader);
};
lime.graphics.opengl.GL.deleteTexture = function(texture) {
	lime.graphics.opengl.GL.context.deleteTexture(texture);
};
lime.graphics.opengl.GL.depthFunc = function(func) {
	lime.graphics.opengl.GL.context.depthFunc(func);
};
lime.graphics.opengl.GL.depthMask = function(flag) {
	lime.graphics.opengl.GL.context.depthMask(flag);
};
lime.graphics.opengl.GL.depthRange = function(zNear,zFar) {
	lime.graphics.opengl.GL.context.depthRange(zNear,zFar);
};
lime.graphics.opengl.GL.detachShader = function(program,shader) {
	lime.graphics.opengl.GL.context.detachShader(program,shader);
};
lime.graphics.opengl.GL.disable = function(cap) {
	lime.graphics.opengl.GL.context.disable(cap);
};
lime.graphics.opengl.GL.disableVertexAttribArray = function(index) {
	lime.graphics.opengl.GL.context.disableVertexAttribArray(index);
};
lime.graphics.opengl.GL.drawArrays = function(mode,first,count) {
	lime.graphics.opengl.GL.context.drawArrays(mode,first,count);
};
lime.graphics.opengl.GL.drawElements = function(mode,count,type,offset) {
	lime.graphics.opengl.GL.context.drawElements(mode,count,type,offset);
};
lime.graphics.opengl.GL.enable = function(cap) {
	lime.graphics.opengl.GL.context.enable(cap);
};
lime.graphics.opengl.GL.enableVertexAttribArray = function(index) {
	lime.graphics.opengl.GL.context.enableVertexAttribArray(index);
};
lime.graphics.opengl.GL.finish = function() {
	lime.graphics.opengl.GL.context.finish();
};
lime.graphics.opengl.GL.flush = function() {
	lime.graphics.opengl.GL.context.flush();
};
lime.graphics.opengl.GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime.graphics.opengl.GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime.graphics.opengl.GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime.graphics.opengl.GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime.graphics.opengl.GL.frontFace = function(mode) {
	lime.graphics.opengl.GL.context.frontFace(mode);
};
lime.graphics.opengl.GL.generateMipmap = function(target) {
	lime.graphics.opengl.GL.context.generateMipmap(target);
};
lime.graphics.opengl.GL.getActiveAttrib = function(program,index) {
	return lime.graphics.opengl.GL.context.getActiveAttrib(program,index);
};
lime.graphics.opengl.GL.getActiveUniform = function(program,index) {
	return lime.graphics.opengl.GL.context.getActiveUniform(program,index);
};
lime.graphics.opengl.GL.getAttachedShaders = function(program) {
	return lime.graphics.opengl.GL.context.getAttachedShaders(program);
};
lime.graphics.opengl.GL.getAttribLocation = function(program,name) {
	return lime.graphics.opengl.GL.context.getAttribLocation(program,name);
};
lime.graphics.opengl.GL.getBufferParameter = function(target,pname) {
	return lime.graphics.opengl.GL.context.getBufferParameter(target,pname);
};
lime.graphics.opengl.GL.getContextAttributes = function() {
	return lime.graphics.opengl.GL.context.getContextAttributes();
};
lime.graphics.opengl.GL.getError = function() {
	return lime.graphics.opengl.GL.context.getError();
};
lime.graphics.opengl.GL.getExtension = function(name) {
	return lime.graphics.opengl.GL.context.getExtension(name);
};
lime.graphics.opengl.GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime.graphics.opengl.GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime.graphics.opengl.GL.getParameter = function(pname) {
	return lime.graphics.opengl.GL.context.getParameter(pname);
};
lime.graphics.opengl.GL.getProgramInfoLog = function(program) {
	return lime.graphics.opengl.GL.context.getProgramInfoLog(program);
};
lime.graphics.opengl.GL.getProgramParameter = function(program,pname) {
	return lime.graphics.opengl.GL.context.getProgramParameter(program,pname);
};
lime.graphics.opengl.GL.getRenderbufferParameter = function(target,pname) {
	return lime.graphics.opengl.GL.context.getRenderbufferParameter(target,pname);
};
lime.graphics.opengl.GL.getShaderInfoLog = function(shader) {
	return lime.graphics.opengl.GL.context.getShaderInfoLog(shader);
};
lime.graphics.opengl.GL.getShaderParameter = function(shader,pname) {
	return lime.graphics.opengl.GL.context.getShaderParameter(shader,pname);
};
lime.graphics.opengl.GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime.graphics.opengl.GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime.graphics.opengl.GL.getShaderSource = function(shader) {
	return lime.graphics.opengl.GL.context.getShaderSource(shader);
};
lime.graphics.opengl.GL.getSupportedExtensions = function() {
	return lime.graphics.opengl.GL.context.getSupportedExtensions();
};
lime.graphics.opengl.GL.getTexParameter = function(target,pname) {
	return lime.graphics.opengl.GL.context.getTexParameter(target,pname);
};
lime.graphics.opengl.GL.getUniform = function(program,location) {
	return lime.graphics.opengl.GL.context.getUniform(program,location);
};
lime.graphics.opengl.GL.getUniformLocation = function(program,name) {
	return lime.graphics.opengl.GL.context.getUniformLocation(program,name);
};
lime.graphics.opengl.GL.getVertexAttrib = function(index,pname) {
	return lime.graphics.opengl.GL.context.getVertexAttrib(index,pname);
};
lime.graphics.opengl.GL.getVertexAttribOffset = function(index,pname) {
	return lime.graphics.opengl.GL.context.getVertexAttribOffset(index,pname);
};
lime.graphics.opengl.GL.hint = function(target,mode) {
	lime.graphics.opengl.GL.context.hint(target,mode);
};
lime.graphics.opengl.GL.isBuffer = function(buffer) {
	return lime.graphics.opengl.GL.context.isBuffer(buffer);
};
lime.graphics.opengl.GL.isContextLost = function() {
	return lime.graphics.opengl.GL.context.isContextLost();
};
lime.graphics.opengl.GL.isEnabled = function(cap) {
	return lime.graphics.opengl.GL.context.isEnabled(cap);
};
lime.graphics.opengl.GL.isFramebuffer = function(framebuffer) {
	return lime.graphics.opengl.GL.context.isFramebuffer(framebuffer);
};
lime.graphics.opengl.GL.isProgram = function(program) {
	return lime.graphics.opengl.GL.context.isProgram(program);
};
lime.graphics.opengl.GL.isRenderbuffer = function(renderbuffer) {
	return lime.graphics.opengl.GL.context.isRenderbuffer(renderbuffer);
};
lime.graphics.opengl.GL.isShader = function(shader) {
	return lime.graphics.opengl.GL.context.isShader(shader);
};
lime.graphics.opengl.GL.isTexture = function(texture) {
	return lime.graphics.opengl.GL.context.isTexture(texture);
};
lime.graphics.opengl.GL.lineWidth = function(width) {
	lime.graphics.opengl.GL.context.lineWidth(width);
};
lime.graphics.opengl.GL.linkProgram = function(program) {
	lime.graphics.opengl.GL.context.linkProgram(program);
};
lime.graphics.opengl.GL.pixelStorei = function(pname,param) {
	lime.graphics.opengl.GL.context.pixelStorei(pname,param);
};
lime.graphics.opengl.GL.polygonOffset = function(factor,units) {
	lime.graphics.opengl.GL.context.polygonOffset(factor,units);
};
lime.graphics.opengl.GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime.graphics.opengl.GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime.graphics.opengl.GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime.graphics.opengl.GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime.graphics.opengl.GL.sampleCoverage = function(value,invert) {
	lime.graphics.opengl.GL.context.sampleCoverage(value,invert);
};
lime.graphics.opengl.GL.scissor = function(x,y,width,height) {
	lime.graphics.opengl.GL.context.scissor(x,y,width,height);
};
lime.graphics.opengl.GL.shaderSource = function(shader,source) {
	lime.graphics.opengl.GL.context.shaderSource(shader,source);
};
lime.graphics.opengl.GL.stencilFunc = function(func,ref,mask) {
	lime.graphics.opengl.GL.context.stencilFunc(func,ref,mask);
};
lime.graphics.opengl.GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime.graphics.opengl.GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime.graphics.opengl.GL.stencilMask = function(mask) {
	lime.graphics.opengl.GL.context.stencilMask(mask);
};
lime.graphics.opengl.GL.stencilMaskSeparate = function(face,mask) {
	lime.graphics.opengl.GL.context.stencilMaskSeparate(face,mask);
};
lime.graphics.opengl.GL.stencilOp = function(fail,zfail,zpass) {
	lime.graphics.opengl.GL.context.stencilOp(fail,zfail,zpass);
};
lime.graphics.opengl.GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime.graphics.opengl.GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime.graphics.opengl.GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime.graphics.opengl.GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime.graphics.opengl.GL.texParameterf = function(target,pname,param) {
	lime.graphics.opengl.GL.context.texParameterf(target,pname,param);
};
lime.graphics.opengl.GL.texParameteri = function(target,pname,param) {
	lime.graphics.opengl.GL.context.texParameteri(target,pname,param);
};
lime.graphics.opengl.GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime.graphics.opengl.GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime.graphics.opengl.GL.uniform1f = function(location,x) {
	lime.graphics.opengl.GL.context.uniform1f(location,x);
};
lime.graphics.opengl.GL.uniform1fv = function(location,x) {
	lime.graphics.opengl.GL.context.uniform1fv(location,x);
};
lime.graphics.opengl.GL.uniform1i = function(location,x) {
	lime.graphics.opengl.GL.context.uniform1i(location,x);
};
lime.graphics.opengl.GL.uniform1iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform1iv(location,v);
};
lime.graphics.opengl.GL.uniform2f = function(location,x,y) {
	lime.graphics.opengl.GL.context.uniform2f(location,x,y);
};
lime.graphics.opengl.GL.uniform2fv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform2fv(location,v);
};
lime.graphics.opengl.GL.uniform2i = function(location,x,y) {
	lime.graphics.opengl.GL.context.uniform2i(location,x,y);
};
lime.graphics.opengl.GL.uniform2iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform2iv(location,v);
};
lime.graphics.opengl.GL.uniform3f = function(location,x,y,z) {
	lime.graphics.opengl.GL.context.uniform3f(location,x,y,z);
};
lime.graphics.opengl.GL.uniform3fv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform3fv(location,v);
};
lime.graphics.opengl.GL.uniform3i = function(location,x,y,z) {
	lime.graphics.opengl.GL.context.uniform3i(location,x,y,z);
};
lime.graphics.opengl.GL.uniform3iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform3iv(location,v);
};
lime.graphics.opengl.GL.uniform4f = function(location,x,y,z,w) {
	lime.graphics.opengl.GL.context.uniform4f(location,x,y,z,w);
};
lime.graphics.opengl.GL.uniform4fv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform4fv(location,v);
};
lime.graphics.opengl.GL.uniform4i = function(location,x,y,z,w) {
	lime.graphics.opengl.GL.context.uniform4i(location,x,y,z,w);
};
lime.graphics.opengl.GL.uniform4iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform4iv(location,v);
};
lime.graphics.opengl.GL.uniformMatrix2fv = function(location,transpose,v) {
	lime.graphics.opengl.GL.context.uniformMatrix2fv(location,transpose,v);
};
lime.graphics.opengl.GL.uniformMatrix3fv = function(location,transpose,v) {
	lime.graphics.opengl.GL.context.uniformMatrix3fv(location,transpose,v);
};
lime.graphics.opengl.GL.uniformMatrix4fv = function(location,transpose,v) {
	lime.graphics.opengl.GL.context.uniformMatrix4fv(location,transpose,v);
};
lime.graphics.opengl.GL.useProgram = function(program) {
	lime.graphics.opengl.GL.context.useProgram(program);
};
lime.graphics.opengl.GL.validateProgram = function(program) {
	lime.graphics.opengl.GL.context.validateProgram(program);
};
lime.graphics.opengl.GL.vertexAttrib1f = function(indx,x) {
	lime.graphics.opengl.GL.context.vertexAttrib1f(indx,x);
};
lime.graphics.opengl.GL.vertexAttrib1fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib1fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttrib2f = function(indx,x,y) {
	lime.graphics.opengl.GL.context.vertexAttrib2f(indx,x,y);
};
lime.graphics.opengl.GL.vertexAttrib2fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib2fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttrib3f = function(indx,x,y,z) {
	lime.graphics.opengl.GL.context.vertexAttrib3f(indx,x,y,z);
};
lime.graphics.opengl.GL.vertexAttrib3fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib3fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime.graphics.opengl.GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime.graphics.opengl.GL.vertexAttrib4fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib4fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime.graphics.opengl.GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime.graphics.opengl.GL.viewport = function(x,y,width,height) {
	lime.graphics.opengl.GL.context.viewport(x,y,width,height);
};
lime.graphics.opengl.GL.get_version = function() {
	return 2;
};
lime.graphics.utils = {};
lime.graphics.utils.ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime.graphics.utils.ImageCanvasUtil;
lime.graphics.utils.ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime.graphics.utils.ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime.graphics.utils.ImageCanvasUtil.convertToCanvas = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime.graphics.utils.ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	}
};
lime.graphics.utils.ImageCanvasUtil.convertToData = function(image) {
	if(image.buffer.data == null) {
		lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
		lime.graphics.utils.ImageCanvasUtil.sync(image);
		lime.graphics.utils.ImageCanvasUtil.createImageData(image);
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
};
lime.graphics.utils.ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.createImageData(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime.graphics.utils.ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime.math.Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime.math.Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime.math.Vector2(sourceRect.x,sourceRect.y),lime.graphics.ImageChannel.ALPHA,lime.graphics.ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime.graphics.utils.ImageCanvasUtil.sync(image);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
	}
	lime.graphics.utils.ImageCanvasUtil.sync(sourceImage);
	if(sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
};
lime.graphics.utils.ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque","true");
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.webkitImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime.graphics.utils.ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.data == null) {
		buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		buffer.data = new Uint8Array(buffer.__srcImageData.data.buffer);
	}
};
lime.graphics.utils.ImageCanvasUtil.fillRect = function(image,rect,color) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.sync(image);
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && (color & -16777216) == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	var a;
	if(image.get_transparent()) a = (color & -16777216) >>> 24; else a = 255;
	var r = (color & 16711680) >>> 16;
	var g = (color & 65280) >>> 8;
	var b = color & 255;
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
};
lime.graphics.utils.ImageCanvasUtil.floodFill = function(image,x,y,color) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.floodFill(image,x,y,color);
};
lime.graphics.utils.ImageCanvasUtil.getPixel = function(image,x,y) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	return lime.graphics.utils.ImageDataUtil.getPixel(image,x,y);
};
lime.graphics.utils.ImageCanvasUtil.getPixel32 = function(image,x,y) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	return lime.graphics.utils.ImageDataUtil.getPixel32(image,x,y);
};
lime.graphics.utils.ImageCanvasUtil.getPixels = function(image,rect) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	return lime.graphics.utils.ImageDataUtil.getPixels(image,rect);
};
lime.graphics.utils.ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.createImageData(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime.graphics.utils.ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime.graphics.utils.ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime.graphics.utils.ImageCanvasUtil.sync(image);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime.graphics.utils.ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
};
lime.graphics.utils.ImageCanvasUtil.setPixel = function(image,x,y,color) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.setPixel(image,x,y,color);
};
lime.graphics.utils.ImageCanvasUtil.setPixel32 = function(image,x,y,color) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.setPixel32(image,x,y,color);
};
lime.graphics.utils.ImageCanvasUtil.setPixels = function(image,rect,byteArray) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.setPixels(image,rect,byteArray);
};
lime.graphics.utils.ImageCanvasUtil.sync = function(image) {
	if(image.dirty && image.type != lime.graphics.ImageType.DATA) {
		image.buffer.__srcContext.putImageData(image.buffer.__srcImageData,0,0);
		image.buffer.data = null;
		image.dirty = false;
	}
};
lime.graphics.utils.ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime.graphics.utils.ImageDataUtil;
lime.graphics.utils.ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime.graphics.utils.ImageDataUtil.__alpha16 = null;
lime.graphics.utils.ImageDataUtil.__clamp = null;
lime.graphics.utils.ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	var stride = image.buffer.width * 4;
	var offset;
	var rowStart = Std["int"](rect.get_top() + image.offsetY);
	var rowEnd = Std["int"](rect.get_bottom() + image.offsetY);
	var columnStart = Std["int"](rect.get_left() + image.offsetX);
	var columnEnd = Std["int"](rect.get_right() + image.offsetX);
	var r;
	var g;
	var b;
	var a;
	var ex = 0;
	var _g = rowStart;
	while(_g < rowEnd) {
		var row = _g++;
		var _g1 = columnStart;
		while(_g1 < columnEnd) {
			var column = _g1++;
			offset = row * stride + column * 4;
			a = data[offset + 3] * colorMatrix[18] + colorMatrix[19] * 255 | 0;
			if(a > 255) ex = a - 255; else ex = 0;
			b = data[offset + 2] * colorMatrix[12] + colorMatrix[14] * 255 + ex | 0;
			if(b > 255) ex = b - 255; else ex = 0;
			g = data[offset + 1] * colorMatrix[6] + colorMatrix[9] * 255 + ex | 0;
			if(g > 255) ex = g - 255; else ex = 0;
			r = data[offset] * colorMatrix[0] + colorMatrix[4] * 255 + ex | 0;
			if(r > 255) data[offset] = 255; else data[offset] = r;
			if(g > 255) data[offset + 1] = 255; else data[offset + 1] = g;
			if(b > 255) data[offset + 2] = 255; else data[offset + 2] = b;
			if(a > 255) data[offset + 3] = 255; else data[offset + 3] = a;
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcStride = sourceImage.buffer.width * 4 | 0;
	var srcPosition = (sourceRect.x + sourceImage.offsetX) * 4 + srcStride * (sourceRect.y + sourceImage.offsetY) + srcIdx | 0;
	var srcRowOffset = srcStride - (4 * (sourceRect.width + sourceImage.offsetX) | 0);
	var srcRowEnd = 4 * (sourceRect.x + sourceImage.offsetX + sourceRect.width) | 0;
	var srcData = sourceImage.buffer.data;
	var destStride = image.buffer.width * 4 | 0;
	var destPosition = (destPoint.x + image.offsetX) * 4 + destStride * (destPoint.y + image.offsetY) + destIdx | 0;
	var destRowOffset = destStride - (4 * (sourceRect.width + image.offsetX) | 0);
	var destRowEnd = 4 * (destPoint.x + image.offsetX + sourceRect.width) | 0;
	var destData = image.buffer.data;
	var length = sourceRect.width * sourceRect.height | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		destData[destPosition] = srcData[srcPosition];
		srcPosition += 4;
		destPosition += 4;
		if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
		if(destPosition % destStride > destRowEnd) destPosition += destRowOffset;
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime.math.Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime.math.Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime.math.Vector2(sourceRect.x,sourceRect.y),lime.graphics.ImageChannel.ALPHA,lime.graphics.ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	var rowOffset = destPoint.y + image.offsetY - sourceRect.y - sourceImage.offsetY | 0;
	var columnOffset = destPoint.x + image.offsetX - sourceRect.x - sourceImage.offsetY | 0;
	var sourceData = sourceImage.buffer.data;
	var sourceStride = sourceImage.buffer.width * 4;
	var sourceOffset = 0;
	var data = image.buffer.data;
	var stride = image.buffer.width * 4;
	var offset = 0;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
		var _g = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
			var _g2 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				offset = (row + rowOffset) * stride + (column + columnOffset) * 4;
				data[offset] = sourceData[sourceOffset];
				data[offset + 1] = sourceData[sourceOffset + 1];
				data[offset + 2] = sourceData[sourceOffset + 2];
				data[offset + 3] = sourceData[sourceOffset + 3];
			}
		}
	} else {
		var sourceAlpha;
		var oneMinusSourceAlpha;
		var _g11 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
		var _g4 = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
		while(_g11 < _g4) {
			var row1 = _g11++;
			var _g31 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
			var _g21 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
			while(_g31 < _g21) {
				var column1 = _g31++;
				sourceOffset = row1 * sourceStride + column1 * 4;
				offset = (row1 + rowOffset) * stride + (column1 + columnOffset) * 4;
				sourceAlpha = sourceData[sourceOffset + 3] / 255;
				oneMinusSourceAlpha = 1 - sourceAlpha;
				data[offset] = lime.graphics.utils.ImageDataUtil.__clamp[sourceData[sourceOffset] + data[offset] * oneMinusSourceAlpha | 0];
				data[offset + 1] = lime.graphics.utils.ImageDataUtil.__clamp[sourceData[sourceOffset + 1] + data[offset + 1] * oneMinusSourceAlpha | 0];
				data[offset + 2] = lime.graphics.utils.ImageDataUtil.__clamp[sourceData[sourceOffset + 2] + data[offset + 2] * oneMinusSourceAlpha | 0];
				data[offset + 3] = lime.graphics.utils.ImageDataUtil.__clamp[sourceData[sourceOffset + 3] + data[offset + 3] * oneMinusSourceAlpha | 0];
			}
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.fillRect = function(image,rect,color) {
	var a;
	if(image.get_transparent()) a = (color & -16777216) >>> 24; else a = 255;
	var r = (color & 16711680) >>> 16;
	var g = (color & 65280) >>> 8;
	var b = color & 255;
	var rgba = r | g << 8 | b << 16 | a << 24;
	var data = image.buffer.data;
	if(rect.width == image.buffer.width && rect.height == image.buffer.height && rect.x == 0 && rect.y == 0 && image.offsetX == 0 && image.offsetY == 0) {
		var length = image.buffer.width * image.buffer.height;
		var j = 0;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			j = i * 4;
			data[j] = r;
			data[j + 1] = g;
			data[j + 2] = b;
			data[j + 3] = a;
		}
	} else {
		var stride = image.buffer.width * 4;
		var offset;
		var rowStart = rect.y + image.offsetY | 0;
		var rowEnd = Std["int"](rect.get_bottom() + image.offsetY);
		var columnStart = rect.x + image.offsetX | 0;
		var columnEnd = Std["int"](rect.get_right() + image.offsetX);
		var _g1 = rowStart;
		while(_g1 < rowEnd) {
			var row = _g1++;
			var _g11 = columnStart;
			while(_g11 < columnEnd) {
				var column = _g11++;
				offset = row * stride + column * 4;
				data[offset] = r;
				data[offset + 1] = g;
				data[offset + 2] = b;
				data[offset + 3] = a;
			}
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.floodFill = function(image,x,y,color) {
	var data = image.buffer.data;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	var hitColorR = data[offset];
	var hitColorG = data[offset + 1];
	var hitColorB = data[offset + 2];
	var hitColorA;
	if(image.get_transparent()) hitColorA = data[offset + 3]; else hitColorA = 255;
	var r = (color & 16711680) >>> 16;
	var g = (color & 65280) >>> 8;
	var b = color & 255;
	var a;
	if(image.get_transparent()) a = (color & -16777216) >>> 24; else a = 255;
	if(hitColorR == r && hitColorG == g && hitColorB == b && hitColorA == a) return;
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = new Array();
	queue.push(x);
	queue.push(y);
	while(queue.length > 0) {
		var curPointY = queue.pop();
		var curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var nextPointX = curPointX + dx[i];
			var nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) continue;
			var nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			if(data[nextPointOffset] == hitColorR && data[nextPointOffset + 1] == hitColorG && data[nextPointOffset + 2] == hitColorB && data[nextPointOffset + 3] == hitColorA) {
				data[nextPointOffset] = r;
				data[nextPointOffset + 1] = g;
				data[nextPointOffset + 2] = b;
				data[nextPointOffset + 3] = a;
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.getPixel = function(image,x,y) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.get_premultiplied()) {
		var unmultiply = 255.0 / data[offset + 3];
		return lime.graphics.utils.ImageDataUtil.__clamp[data[offset] * unmultiply | 0] << 16 | lime.graphics.utils.ImageDataUtil.__clamp[data[offset + 1] * unmultiply | 0] << 8 | lime.graphics.utils.ImageDataUtil.__clamp[data[offset + 2] * unmultiply | 0];
	} else return data[offset] << 16 | data[offset + 1] << 8 | data[offset + 2];
};
lime.graphics.utils.ImageDataUtil.getPixel32 = function(image,x,y) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var a;
	if(image.get_transparent()) a = data[offset + 3]; else a = 255;
	if(image.get_premultiplied() && a != 0) {
		var unmultiply = 255.0 / a;
		return a << 24 | (function($this) {
			var $r;
			var index = Math.round(data[offset] * unmultiply);
			$r = lime.graphics.utils.ImageDataUtil.__clamp[index];
			return $r;
		}(this)) << 16 | lime.graphics.utils.ImageDataUtil.__clamp[data[offset + 1] * unmultiply | 0] << 8 | lime.graphics.utils.ImageDataUtil.__clamp[data[offset + 2] * unmultiply | 0];
	} else return a << 24 | data[offset] << 16 | data[offset + 1] << 8 | data[offset + 2];
};
lime.graphics.utils.ImageDataUtil.getPixels = function(image,rect) {
	var byteArray = new lime.utils.ByteArray(image.width * image.height * 4);
	var srcData = image.buffer.data;
	var srcStride = image.buffer.width * 4 | 0;
	var srcPosition = rect.x * 4 + srcStride * rect.y | 0;
	var srcRowOffset = srcStride - (4 * rect.width | 0);
	var srcRowEnd = 4 * (rect.x + rect.width) | 0;
	var length = rect.width * rect.height | 0;
	byteArray.set_length(length * 4);
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		byteArray.__set(i * 4 + 1,srcData[srcPosition++]);
		byteArray.__set(i * 4 + 2,srcData[srcPosition++]);
		byteArray.__set(i * 4 + 3,srcData[srcPosition++]);
		byteArray.__set(i * 4,srcData[srcPosition++]);
		if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
	}
	byteArray.position = 0;
	return byteArray;
};
lime.graphics.utils.ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	var rowOffset = destPoint.y + image.offsetY - sourceRect.y - sourceImage.offsetY | 0;
	var columnOffset = destPoint.x + image.offsetX - sourceRect.x - sourceImage.offsetY | 0;
	var sourceData = sourceImage.buffer.data;
	var sourceStride = sourceImage.buffer.width * 4;
	var sourceOffset = 0;
	var data = image.buffer.data;
	var stride = image.buffer.width * 4;
	var offset = 0;
	var _g1 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
	var _g = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
	while(_g1 < _g) {
		var row = _g1++;
		var _g3 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
		var _g2 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
		while(_g3 < _g2) {
			var column = _g3++;
			sourceOffset = row * sourceStride + column * 4;
			offset = (row + rowOffset) * stride + (column + columnOffset) * 4;
			data[offset] = (sourceData[offset] * redMultiplier + data[offset] * (256 - redMultiplier)) / 256 | 0;
			data[offset + 1] = (sourceData[offset + 1] * greenMultiplier + data[offset + 1] * (256 - greenMultiplier)) / 256 | 0;
			data[offset + 2] = (sourceData[offset + 2] * blueMultiplier + data[offset + 2] * (256 - blueMultiplier)) / 256 | 0;
			data[offset + 3] = (sourceData[offset + 3] * alphaMultiplier + data[offset + 3] * (256 - alphaMultiplier)) / 256 | 0;
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		index = i * 4;
		var a161 = lime.graphics.utils.ImageDataUtil.__alpha16[data[index + 3]];
		data[index] = data[index] * a161 >> 16;
		data[index + 1] = data[index + 1] * a161 >> 16;
		data[index + 2] = data[index + 2] * a161 >> 16;
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var newBuffer = new lime.graphics.ImageBuffer(new Uint8Array(newWidth * newHeight * 4),newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	while(_g < newHeight) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < newWidth) {
			var x = _g1++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
			if(sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
			if(sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (data[sourceIndex] * uOpposite + data[sourceIndexX] * uRatio) * vOpposite + (data[sourceIndexY] * uOpposite + data[sourceIndexXY] * uRatio) * vRatio | 0;
			newData[index + 1] = (data[sourceIndex + 1] * uOpposite + data[sourceIndexX + 1] * uRatio) * vOpposite + (data[sourceIndexY + 1] * uOpposite + data[sourceIndexXY + 1] * uRatio) * vRatio | 0;
			newData[index + 2] = (data[sourceIndex + 2] * uOpposite + data[sourceIndexX + 2] * uRatio) * vOpposite + (data[sourceIndexY + 2] * uOpposite + data[sourceIndexXY + 2] * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime.graphics.utils.ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var newData = new Uint8Array(newWidth * newHeight * 4);
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime.graphics.utils.ImageDataUtil.setPixel = function(image,x,y,color) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	data[offset] = (color & 16711680) >>> 16;
	data[offset + 1] = (color & 65280) >>> 8;
	data[offset + 2] = color & 255;
	if(image.get_transparent()) data[offset + 3] = 255;
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.setPixel32 = function(image,x,y,color) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var a;
	if(image.get_transparent()) a = (color & -16777216) >>> 24; else a = 255;
	if(image.get_transparent() && image.get_premultiplied()) {
		var a16 = lime.graphics.utils.ImageDataUtil.__alpha16[a];
		data[offset] = ((color & 16711680) >>> 16) * a16 >> 16;
		data[offset + 1] = ((color & 65280) >>> 8) * a16 >> 16;
		data[offset + 2] = (color & 255) * a16 >> 16;
		data[offset + 3] = a;
	} else {
		data[offset] = (color & 16711680) >>> 16;
		data[offset + 1] = (color & 65280) >>> 8;
		data[offset + 2] = color & 255;
		data[offset + 3] = a;
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.setPixels = function(image,rect,byteArray) {
	var len = Math.round(rect.width * rect.height);
	var data = image.buffer.data;
	var offset = Math.round(image.buffer.width * (rect.y + image.offsetX) + (rect.x + image.offsetY));
	var pos = offset * 4;
	var boundR = Math.round(rect.x + rect.width + image.offsetX);
	var width = image.buffer.width;
	var color;
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		if(pos % (width * 4) >= boundR * 4) pos += (width - boundR) * 4;
		color = byteArray.readUnsignedInt();
		data[pos++] = (color & 16711680) >>> 16;
		data[pos++] = (color & 65280) >>> 8;
		data[pos++] = color & 255;
		data[pos++] = (color & -16777216) >>> 24;
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	var index;
	var a;
	var unmultiply;
	var length = data.length / 4 | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		index = i * 4;
		a = data[index + 3];
		if(a != 0) {
			unmultiply = 255.0 / a;
			data[index] = lime.graphics.utils.ImageDataUtil.__clamp[data[index] * unmultiply | 0];
			data[index + 1] = lime.graphics.utils.ImageDataUtil.__clamp[data[index + 1] * unmultiply | 0];
			data[index + 2] = lime.graphics.utils.ImageDataUtil.__clamp[data[index + 2] * unmultiply | 0];
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
};
lime.math = {};
lime.math._ColorMatrix = {};
lime.math._ColorMatrix.ColorMatrix_Impl_ = function() { };
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime.math._ColorMatrix.ColorMatrix_Impl_;
lime.math._ColorMatrix.ColorMatrix_Impl_.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime.math._ColorMatrix.ColorMatrix_Impl_.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime.math._ColorMatrix.ColorMatrix_Impl_._new = function(data) {
	var this1;
	if(data != null && data.length == 20) this1 = data; else this1 = new Float32Array(lime.math._ColorMatrix.ColorMatrix_Impl_.__identity);
	return this1;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.clone = function(this1) {
	return lime.math._ColorMatrix.ColorMatrix_Impl_._new(new Float32Array(this1));
};
lime.math._ColorMatrix.ColorMatrix_Impl_.concat = function(this1,second) {
	var _g = this1;
	var value = _g[0] + second[0];
	_g[0] = value;
	value;
	var _g1 = this1;
	var value1 = _g1[6] + second[6];
	_g1[6] = value1;
	value1;
	var _g2 = this1;
	var value2 = _g2[12] + second[12];
	_g2[12] = value2;
	value2;
	var _g3 = this1;
	var value3 = _g3[18] + second[18];
	_g3[18] = value3;
	value3;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.copyFrom = function(this1,other) {
	this1.set(other);
};
lime.math._ColorMatrix.ColorMatrix_Impl_.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.__toFlashColorTransform = function(this1) {
	return null;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_alphaMultiplier = function(this1,value) {
	this1[18] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_alphaOffset = function(this1,value) {
	this1[19] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_blueMultiplier = function(this1,value) {
	this1[12] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_blueOffset = function(this1,value) {
	this1[14] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_color = function(this1,value) {
	var value1 = value >> 16 & 255;
	this1[4] = value1 / 255;
	value1;
	var value2 = value >> 8 & 255;
	this1[9] = value2 / 255;
	value2;
	var value3 = value & 255;
	this1[14] = value3 / 255;
	value3;
	this1[0] = 0;
	0;
	this1[6] = 0;
	0;
	this1[12] = 0;
	0;
	return lime.math._ColorMatrix.ColorMatrix_Impl_.get_color(this1);
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_greenMultiplier = function(this1,value) {
	this1[6] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_greenOffset = function(this1,value) {
	this1[9] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_redMultiplier = function(this1) {
	return this1[0];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_redMultiplier = function(this1,value) {
	this1[0] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_redOffset = function(this1,value) {
	this1[4] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get = function(this1,index) {
	return this1[index];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
lime.math.Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime.math.Matrix3;
lime.math.Matrix3.__name__ = ["lime","math","Matrix3"];
lime.math.Matrix3.prototype = {
	clone: function() {
		return new lime.math.Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d;
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime.math.Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime.math.Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime.math.Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		var m = new lime.math.Matrix3();
		m.tx = dx;
		m.ty = dy;
		this.concat(m);
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime.math.Matrix3
};
lime.math._Matrix4 = {};
lime.math._Matrix4.Matrix4_Impl_ = function() { };
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime.math._Matrix4.Matrix4_Impl_;
lime.math._Matrix4.Matrix4_Impl_.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime.math._Matrix4.Matrix4_Impl_.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
lime.math._Matrix4.Matrix4_Impl_._new = function(data) {
	var this1;
	if(data != null && data.length == 16) this1 = data; else this1 = new Float32Array(lime.math._Matrix4.Matrix4_Impl_.__identity);
	return this1;
};
lime.math._Matrix4.Matrix4_Impl_.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,0);
	var m221 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,4);
	var m231 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,8);
	var m241 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,12);
	var m212 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,1);
	var m222 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,5);
	var m232 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,9);
	var m242 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,13);
	var m213 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,2);
	var m223 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,6);
	var m233 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,10);
	var m243 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,14);
	var m214 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,3);
	var m224 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,7);
	var m234 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,11);
	var m244 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime.math._Matrix4.Matrix4_Impl_.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime.math._Matrix4.Matrix4_Impl_.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime.math._Matrix4.Matrix4_Impl_.appendTranslation(m,p.x,p.y,p.z);
	}
	lime.math._Matrix4.Matrix4_Impl_.append(this1,m);
};
lime.math._Matrix4.Matrix4_Impl_.appendScale = function(this1,xScale,yScale,zScale) {
	lime.math._Matrix4.Matrix4_Impl_.append(this1,lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
};
lime.math._Matrix4.Matrix4_Impl_.appendTranslation = function(this1,x,y,z) {
	this1[12] = this1[12] + x;
	this1[13] = this1[13] + y;
	this1[14] = this1[14] + z;
};
lime.math._Matrix4.Matrix4_Impl_.clone = function(this1) {
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array(this1));
};
lime.math._Matrix4.Matrix4_Impl_.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw "Error, Column " + column + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		throw "Error, Column " + column + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.copyFrom = function(this1,other) {
	this1.set(other);
};
lime.math._Matrix4.Matrix4_Impl_.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
	var l = array.length - index;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		this1[c] = array[c + index];
	}
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
};
lime.math._Matrix4.Matrix4_Impl_.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
	var l = this1.length;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		array[c + index] = this1[c];
	}
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
};
lime.math._Matrix4.Matrix4_Impl_.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw "Error, Row " + Std.string((function($this) {
			var $r;
			var $int = row;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this))) + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1]));
};
lime.math._Matrix4.Matrix4_Impl_.createABCD = function(a,b,c,d,tx,ty) {
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1]));
};
lime.math._Matrix4.Matrix4_Impl_.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1]));
};
lime.math._Matrix4.Matrix4_Impl_.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		throw "Error, Row " + row + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.copyToMatrix4 = function(this1,other) {
	(js.Boot.__cast(other , Float32Array)).set(this1);
};
lime.math._Matrix4.Matrix4_Impl_.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime.math.Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime.math._Matrix4.Matrix4_Impl_.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime.math._Matrix4.Matrix4_Impl_.interpolate = function(thisMat,toMat,percent) {
	var m = lime.math._Matrix4.Matrix4_Impl_._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime.math._Matrix4.Matrix4_Impl_.set(m,i,lime.math._Matrix4.Matrix4_Impl_.get(thisMat,i) + (lime.math._Matrix4.Matrix4_Impl_.get(toMat,i) - lime.math._Matrix4.Matrix4_Impl_.get(thisMat,i)) * percent);
	}
	return m;
};
lime.math._Matrix4.Matrix4_Impl_.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] = this1[i] + (lime.math._Matrix4.Matrix4_Impl_.get(toMat,i) - this1[i]) * percent;
	}
};
lime.math._Matrix4.Matrix4_Impl_.invert = function(this1) {
	var d = lime.math._Matrix4.Matrix4_Impl_.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime.math._Matrix4.Matrix4_Impl_.pointAt = function(this1,pos,at,up) {
	if(at == null) at = new lime.math.Vector4(0,0,-1);
	if(up == null) up = new lime.math.Vector4(0,-1,0);
	var dir = new lime.math.Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime.math.Vector4(up.x,up.y,up.z,up.w);
	var right;
	dir.normalize();
	vup.normalize();
	var dir2 = new lime.math.Vector4(dir.x,dir.y,dir.z,dir.w);
	dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
	vup = new lime.math.Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new lime.math.Vector4(-dir.y,dir.x,0); else vup = new lime.math.Vector4(1,0,0);
	right = new lime.math.Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	right.normalize();
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime.math._Matrix4.Matrix4_Impl_.prepend = function(this1,rhs) {
	var m111 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,0);
	var m121 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,4);
	var m131 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,8);
	var m141 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,12);
	var m112 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,1);
	var m122 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,5);
	var m132 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,9);
	var m142 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,13);
	var m113 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,2);
	var m123 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,6);
	var m133 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,10);
	var m143 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,14);
	var m114 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,3);
	var m124 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,7);
	var m134 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,11);
	var m144 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime.math._Matrix4.Matrix4_Impl_.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime.math._Matrix4.Matrix4_Impl_.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime.math._Matrix4.Matrix4_Impl_.appendTranslation(m,p.x,p.y,p.z);
	}
	lime.math._Matrix4.Matrix4_Impl_.prepend(this1,m);
};
lime.math._Matrix4.Matrix4_Impl_.prependScale = function(this1,xScale,yScale,zScale) {
	lime.math._Matrix4.Matrix4_Impl_.prepend(this1,lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
};
lime.math._Matrix4.Matrix4_Impl_.prependTranslation = function(this1,x,y,z) {
	var m = lime.math._Matrix4.Matrix4_Impl_._new();
	lime.math._Matrix4.Matrix4_Impl_.set_position(m,new lime.math.Vector4(x,y,z));
	lime.math._Matrix4.Matrix4_Impl_.prepend(this1,m);
};
lime.math._Matrix4.Matrix4_Impl_.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime.math.Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime.math._Matrix4.Matrix4_Impl_.transformVectors = function(this1,ain,aout) {
	var i = 0;
	while(i + 3 <= ain.length) {
		var x = ain[i];
		var y = ain[i + 1];
		var z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime.math._Matrix4.Matrix4_Impl_.transpose = function(this1) {
	var othis = new Float32Array(this1);
	this1[1] = othis[4];
	this1[2] = othis[8];
	this1[3] = othis[12];
	this1[4] = othis[1];
	this1[6] = othis[9];
	this1[7] = othis[13];
	this1[8] = othis[2];
	this1[9] = othis[6];
	this1[11] = othis[14];
	this1[12] = othis[3];
	this1[13] = othis[7];
	this1[14] = othis[11];
};
lime.math._Matrix4.Matrix4_Impl_.getAxisRotation = function(x,y,z,degrees) {
	var m = lime.math._Matrix4.Matrix4_Impl_._new();
	var a1 = new lime.math.Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime.math._Matrix4.Matrix4_Impl_.set(m,0,c + a1.x * a1.x * t);
	lime.math._Matrix4.Matrix4_Impl_.set(m,5,c + a1.y * a1.y * t);
	lime.math._Matrix4.Matrix4_Impl_.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime.math._Matrix4.Matrix4_Impl_.set(m,4,tmp1 + tmp2);
	lime.math._Matrix4.Matrix4_Impl_.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime.math._Matrix4.Matrix4_Impl_.set(m,8,tmp1 - tmp2);
	lime.math._Matrix4.Matrix4_Impl_.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime.math._Matrix4.Matrix4_Impl_.set(m,9,tmp1 + tmp2);
	lime.math._Matrix4.Matrix4_Impl_.set(m,6,tmp1 - tmp2);
	return m;
};
lime.math._Matrix4.Matrix4_Impl_.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime.math._Matrix4.Matrix4_Impl_.get_position = function(this1) {
	return new lime.math.Vector4(this1[12],this1[13],this1[14]);
};
lime.math._Matrix4.Matrix4_Impl_.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime.math._Matrix4.Matrix4_Impl_.get = function(this1,index) {
	return this1[index];
};
lime.math._Matrix4.Matrix4_Impl_.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
lime.math.Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime.math.Rectangle;
lime.math.Rectangle.__name__ = ["lime","math","Rectangle"];
lime.math.Rectangle.prototype = {
	clone: function() {
		return new lime.math.Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new lime.math.Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new lime.math.Rectangle();
		return new lime.math.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = tx0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new lime.math.Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new lime.math.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) this.x = x;
		if(this.y > y) this.y = y;
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime.math.Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime.math.Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime.math.Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime.math.Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
lime.math.Vector2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime.math.Vector2;
lime.math.Vector2.__name__ = ["lime","math","Vector2"];
lime.math.Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime.math.Vector2.interpolate = function(pt1,pt2,f) {
	return new lime.math.Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime.math.Vector2.polar = function(len,angle) {
	return new lime.math.Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime.math.Vector2.prototype = {
	add: function(v) {
		return new lime.math.Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime.math.Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime.math.Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime.math.Vector2
	,__properties__: {get_length:"get_length"}
};
lime.math.Vector4 = function(x,y,z,w) {
	if(w == null) w = 0.;
	if(z == null) z = 0.;
	if(y == null) y = 0.;
	if(x == null) x = 0.;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime.math.Vector4;
lime.math.Vector4.__name__ = ["lime","math","Vector4"];
lime.math.Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime.math.Vector4.X_AXIS = null;
lime.math.Vector4.Y_AXIS = null;
lime.math.Vector4.Z_AXIS = null;
lime.math.Vector4.angleBetween = function(a,b) {
	var a0 = new lime.math.Vector4(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new lime.math.Vector4(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime.math.Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime.math.Vector4.get_X_AXIS = function() {
	return new lime.math.Vector4(1,0,0);
};
lime.math.Vector4.get_Y_AXIS = function() {
	return new lime.math.Vector4(0,1,0);
};
lime.math.Vector4.get_Z_AXIS = function() {
	return new lime.math.Vector4(0,0,1);
};
lime.math.Vector4.prototype = {
	add: function(a) {
		return new lime.math.Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime.math.Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime.math.Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime.math.Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime.math.Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
lime.net = {};
lime.net.URLLoader = function(request) {
	this.onSecurityError = new lime.app.Event();
	this.onProgress = new lime.app.Event();
	this.onOpen = new lime.app.Event();
	this.onIOError = new lime.app.Event();
	this.onHTTPStatus = new lime.app.Event();
	this.onComplete = new lime.app.Event();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(lime.net.URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["lime.net.URLLoader"] = lime.net.URLLoader;
lime.net.URLLoader.__name__ = ["lime","net","URLLoader"];
lime.net.URLLoader.prototype = {
	close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var _g = this;
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.__onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) {
				var listeners = self.onHTTPStatus.listeners;
				var repeat = self.onHTTPStatus.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](_g,s);
					if(!repeat[i]) {
						self.onHTTPStatus.remove(listeners[i]);
						length--;
					} else i++;
				}
			}
			if(s != null && s >= 200 && s < 400) self.__onData(subject.response); else if(s == null) {
				var listeners1 = self.onIOError.listeners;
				var repeat1 = self.onIOError.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1](_g,"Failed to connect or resolve host");
					if(!repeat1[i1]) {
						self.onIOError.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
			} else if(s == 12029) {
				var listeners2 = self.onIOError.listeners;
				var repeat2 = self.onIOError.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2](_g,"Failed to connect to host");
					if(!repeat2[i2]) {
						self.onIOError.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
			} else if(s == 12007) {
				var listeners3 = self.onIOError.listeners;
				var repeat3 = self.onIOError.repeat;
				var length3 = listeners3.length;
				var i3 = 0;
				while(i3 < length3) {
					listeners3[i3](_g,"Unknown host");
					if(!repeat3[i3]) {
						self.onIOError.remove(listeners3[i3]);
						length3--;
					} else i3++;
				}
			} else if(s == 0) {
				var listeners4 = self.onIOError.listeners;
				var repeat4 = self.onIOError.repeat;
				var length4 = listeners4.length;
				var i4 = 0;
				while(i4 < length4) {
					listeners4[i4](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat4[i4]) {
						self.onIOError.remove(listeners4[i4]);
						length4--;
					} else i4++;
				}
				var listeners5 = self.onSecurityError.listeners;
				var repeat5 = self.onSecurityError.repeat;
				var length5 = listeners5.length;
				var i5 = 0;
				while(i5 < length5) {
					listeners5[i5](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat5[i5]) {
						self.onSecurityError.remove(listeners5[i5]);
						length5--;
					} else i5++;
				}
			} else {
				var listeners6 = self.onIOError.listeners;
				var repeat6 = self.onIOError.repeat;
				var length6 = listeners6.length;
				var i6 = 0;
				while(i6 < length6) {
					listeners6[i6](_g,"Http Error #" + subject.status);
					if(!repeat6[i6]) {
						self.onIOError.remove(listeners6[i6]);
						length6--;
					} else i6++;
				}
			}
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js.Boot.__instanceof(data,lime.utils.ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js.Boot.__instanceof(data,lime.net.URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open("GET",url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(js.Boot.__cast(method , String),url,true);
		} catch( e ) {
			var listeners = this.onIOError.listeners;
			var repeat = this.onIOError.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i](this,e.toString());
				if(!repeat[i]) {
					this.onIOError.remove(listeners[i]);
					length--;
				} else i++;
			}
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		var listeners1 = this.onOpen.listeners;
		var repeat1 = this.onOpen.repeat;
		var length1 = listeners1.length;
		var i1 = 0;
		while(i1 < length1) {
			listeners1[i1](this);
			if(!repeat1[i1]) {
				this.onOpen.remove(listeners1[i1]);
				length1--;
			} else i1++;
		}
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,__onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime.utils.ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var listeners = this.onComplete.listeners;
		var repeat = this.onComplete.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](this);
			if(!repeat[i]) {
				this.onComplete.remove(listeners[i]);
				length--;
			} else i++;
		}
	}
	,__onProgress: function(event) {
		this.bytesLoaded = event.loaded;
		this.bytesTotal = event.total;
		var listeners = this.onProgress.listeners;
		var repeat = this.onProgress.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](this,this.bytesLoaded,this.bytesTotal);
			if(!repeat[i]) {
				this.onProgress.remove(listeners[i]);
				length--;
			} else i++;
		}
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == lime.net.URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = lime.net.URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: lime.net.URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
};
lime.net.URLLoaderDataFormat = $hxClasses["lime.net.URLLoaderDataFormat"] = { __ename__ : true, __constructs__ : ["BINARY","TEXT","VARIABLES"] };
lime.net.URLLoaderDataFormat.BINARY = ["BINARY",0];
lime.net.URLLoaderDataFormat.BINARY.toString = $estr;
lime.net.URLLoaderDataFormat.BINARY.__enum__ = lime.net.URLLoaderDataFormat;
lime.net.URLLoaderDataFormat.TEXT = ["TEXT",1];
lime.net.URLLoaderDataFormat.TEXT.toString = $estr;
lime.net.URLLoaderDataFormat.TEXT.__enum__ = lime.net.URLLoaderDataFormat;
lime.net.URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
lime.net.URLLoaderDataFormat.VARIABLES.toString = $estr;
lime.net.URLLoaderDataFormat.VARIABLES.__enum__ = lime.net.URLLoaderDataFormat;
lime.net.URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["lime.net.URLRequest"] = lime.net.URLRequest;
lime.net.URLRequest.__name__ = ["lime","net","URLRequest"];
lime.net.URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js.Boot.__instanceof(this.data,lime.utils.ByteArray)) {
			res = res.slice();
			res.push(new lime.net.URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: lime.net.URLRequest
};
lime.net.URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.URLRequestHeader"] = lime.net.URLRequestHeader;
lime.net.URLRequestHeader.__name__ = ["lime","net","URLRequestHeader"];
lime.net.URLRequestHeader.prototype = {
	__class__: lime.net.URLRequestHeader
};
lime.net._URLRequestMethod = {};
lime.net._URLRequestMethod.URLRequestMethod_Impl_ = function() { };
$hxClasses["lime.net._URLRequestMethod.URLRequestMethod_Impl_"] = lime.net._URLRequestMethod.URLRequestMethod_Impl_;
lime.net._URLRequestMethod.URLRequestMethod_Impl_.__name__ = ["lime","net","_URLRequestMethod","URLRequestMethod_Impl_"];
lime.net.URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["lime.net.URLVariables"] = lime.net.URLVariables;
lime.net.URLVariables.__name__ = ["lime","net","URLVariables"];
lime.net.URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = new Array();
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: lime.net.URLVariables
};
lime.system = {};
lime.system.System = function() { };
$hxClasses["lime.system.System"] = lime.system.System;
lime.system.System.__name__ = ["lime","system","System"];
lime.system.System.__properties__ = {get_userDirectory:"get_userDirectory",get_fontsDirectory:"get_fontsDirectory",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory"}
lime.system.System.applicationDirectory = null;
lime.system.System.applicationStorageDirectory = null;
lime.system.System.desktopDirectory = null;
lime.system.System.disableCFFI = null;
lime.system.System.documentsDirectory = null;
lime.system.System.fontsDirectory = null;
lime.system.System.userDirectory = null;
lime.system.System.embed = $hx_exports.lime.embed = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") htmlElement = window.document.getElementById(js.Boot.__cast(element , String)); else if(element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
	}
	if(width == null) width = 0;
	if(height == null) height = 0;
	ApplicationMain.config.background = color;
	ApplicationMain.config.element = htmlElement;
	ApplicationMain.config.width = width;
	ApplicationMain.config.height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
lime.system.System.findHaxeLib = function(library) {
	return "";
};
lime.system.System.getTimer = function() {
	return new Date().getTime();
};
lime.system.System.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	if(lime.system.System.disableCFFI) return Reflect.makeVarArgs(function(__) {
		return { };
	});
	if(lazy) {
	}
	var result = null;
	return result;
};
lime.system.System.sysName = function() {
	return null;
};
lime.system.System.tryLoad = function(name,library,func,args) {
	return null;
};
lime.system.System.loaderTrace = function(message) {
};
lime.system.System.get_applicationDirectory = function() {
	return null;
};
lime.system.System.get_applicationStorageDirectory = function() {
	var company = "MyCompany";
	var file = "MyApplication";
	if(lime.app.Application.current != null && lime.app.Application.current.config != null) {
		if(lime.app.Application.current.config.company != null) company = lime.app.Application.current.config.company;
		if(lime.app.Application.current.config.file != null) file = lime.app.Application.current.config.file;
	}
	return null;
};
lime.system.System.get_desktopDirectory = function() {
	return null;
};
lime.system.System.get_documentsDirectory = function() {
	return null;
};
lime.system.System.get_fontsDirectory = function() {
	return null;
};
lime.system.System.get_userDirectory = function() {
	return null;
};
lime.system._System = {};
lime.system._System.SystemDirectory_Impl_ = function() { };
$hxClasses["lime.system._System.SystemDirectory_Impl_"] = lime.system._System.SystemDirectory_Impl_;
lime.system._System.SystemDirectory_Impl_.__name__ = ["lime","system","_System","SystemDirectory_Impl_"];
lime.text._Glyph = {};
lime.text._Glyph.Glyph_Impl_ = function() { };
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime.text._Glyph.Glyph_Impl_;
lime.text._Glyph.Glyph_Impl_.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime.text._Glyph.Glyph_Impl_._new = function(i) {
	return i;
};
lime.text.GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime.text.GlyphMetrics;
lime.text.GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime.text.GlyphMetrics.prototype = {
	__class__: lime.text.GlyphMetrics
};
lime.ui = {};
lime.ui.Gamepad = function(id) {
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime.ui.Gamepad;
lime.ui.Gamepad.__name__ = ["lime","ui","Gamepad"];
lime.ui.Gamepad.prototype = {
	get_guid: function() {
		return null;
	}
	,get_name: function() {
		return null;
	}
	,__class__: lime.ui.Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
lime.ui._GamepadAxis = {};
lime.ui._GamepadAxis.GamepadAxis_Impl_ = function() { };
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime.ui._GamepadAxis.GamepadAxis_Impl_;
lime.ui._GamepadAxis.GamepadAxis_Impl_.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime.ui._GamepadAxis.GamepadAxis_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
lime.ui._GamepadButton = {};
lime.ui._GamepadButton.GamepadButton_Impl_ = function() { };
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime.ui._GamepadButton.GamepadButton_Impl_;
lime.ui._GamepadButton.GamepadButton_Impl_.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime.ui._GamepadButton.GamepadButton_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
lime.ui._KeyCode = {};
lime.ui._KeyCode.KeyCode_Impl_ = function() { };
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime.ui._KeyCode.KeyCode_Impl_;
lime.ui._KeyCode.KeyCode_Impl_.__name__ = ["lime","ui","_KeyCode","KeyCode_Impl_"];
lime.ui._KeyModifier = {};
lime.ui._KeyModifier.KeyModifier_Impl_ = function() { };
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime.ui._KeyModifier.KeyModifier_Impl_;
lime.ui._KeyModifier.KeyModifier_Impl_.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime.ui._KeyModifier.KeyModifier_Impl_.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"}
lime.ui._KeyModifier.KeyModifier_Impl_.get_altKey = function(this1) {
	return (this1 & 256) > 0 || (this1 & 512) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_altKey = function(this1,value) {
	if(value) this1 |= 768; else this1 &= 268435455 - 768;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_capsLock = function(this1) {
	return (this1 & 8192) > 0 || (this1 & 8192) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_capsLock = function(this1,value) {
	if(value) this1 |= 8192; else this1 &= 268435455 - 8192;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_ctrlKey = function(this1) {
	return (this1 & 64) > 0 || (this1 & 128) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_ctrlKey = function(this1,value) {
	if(value) this1 |= 192; else this1 &= 268435455 - 192;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_metaKey = function(this1) {
	return (this1 & 1024) > 0 || (this1 & 2048) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_metaKey = function(this1,value) {
	if(value) this1 |= 3072; else this1 &= 268435455 - 3072;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_numLock = function(this1) {
	return (this1 & 4096) > 0 || (this1 & 4096) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_numLock = function(this1,value) {
	if(value) this1 |= 4096; else this1 &= 268435455 - 4096;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_shiftKey = function(this1) {
	return (this1 & 1) > 0 || (this1 & 2) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_shiftKey = function(this1,value) {
	if(value) this1 |= 3; else this1 &= 268435455 - 3;
	return value;
};
lime.ui.Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime.ui.Mouse;
lime.ui.Mouse.__name__ = ["lime","ui","Mouse"];
lime.ui.Mouse.__properties__ = {set_cursor:"set_cursor",get_cursor:"get_cursor"}
lime.ui.Mouse.hide = function() {
	lime._backend.html5.HTML5Mouse.hide();
};
lime.ui.Mouse.show = function() {
	lime._backend.html5.HTML5Mouse.show();
};
lime.ui.Mouse.get_cursor = function() {
	return lime._backend.html5.HTML5Mouse.get_cursor();
};
lime.ui.Mouse.set_cursor = function(value) {
	return lime._backend.html5.HTML5Mouse.set_cursor(value);
};
lime.ui.MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : true, __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime.ui.MouseCursor.ARROW = ["ARROW",0];
lime.ui.MouseCursor.ARROW.toString = $estr;
lime.ui.MouseCursor.ARROW.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime.ui.MouseCursor.CROSSHAIR.toString = $estr;
lime.ui.MouseCursor.CROSSHAIR.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.DEFAULT = ["DEFAULT",2];
lime.ui.MouseCursor.DEFAULT.toString = $estr;
lime.ui.MouseCursor.DEFAULT.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.MOVE = ["MOVE",3];
lime.ui.MouseCursor.MOVE.toString = $estr;
lime.ui.MouseCursor.MOVE.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.POINTER = ["POINTER",4];
lime.ui.MouseCursor.POINTER.toString = $estr;
lime.ui.MouseCursor.POINTER.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime.ui.MouseCursor.RESIZE_NESW.toString = $estr;
lime.ui.MouseCursor.RESIZE_NESW.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime.ui.MouseCursor.RESIZE_NS.toString = $estr;
lime.ui.MouseCursor.RESIZE_NS.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime.ui.MouseCursor.RESIZE_NWSE.toString = $estr;
lime.ui.MouseCursor.RESIZE_NWSE.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime.ui.MouseCursor.RESIZE_WE.toString = $estr;
lime.ui.MouseCursor.RESIZE_WE.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.TEXT = ["TEXT",9];
lime.ui.MouseCursor.TEXT.toString = $estr;
lime.ui.MouseCursor.TEXT.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.WAIT = ["WAIT",10];
lime.ui.MouseCursor.WAIT.toString = $estr;
lime.ui.MouseCursor.WAIT.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime.ui.MouseCursor.WAIT_ARROW.toString = $estr;
lime.ui.MouseCursor.WAIT_ARROW.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.CUSTOM = ["CUSTOM",12];
lime.ui.MouseCursor.CUSTOM.toString = $estr;
lime.ui.MouseCursor.CUSTOM.__enum__ = lime.ui.MouseCursor;
lime.ui.Window = function(config) {
	this.onWindowRestore = new lime.app.Event();
	this.onWindowResize = new lime.app.Event();
	this.onWindowMove = new lime.app.Event();
	this.onWindowMinimize = new lime.app.Event();
	this.onWindowFullscreen = new lime.app.Event();
	this.onWindowFocusOut = new lime.app.Event();
	this.onWindowFocusIn = new lime.app.Event();
	this.onWindowDeactivate = new lime.app.Event();
	this.onWindowClose = new lime.app.Event();
	this.onWindowActivate = new lime.app.Event();
	this.onTouchStart = new lime.app.Event();
	this.onTouchMove = new lime.app.Event();
	this.onTouchEnd = new lime.app.Event();
	this.onMouseWheel = new lime.app.Event();
	this.onMouseUp = new lime.app.Event();
	this.onMouseMove = new lime.app.Event();
	this.onMouseDown = new lime.app.Event();
	this.onKeyUp = new lime.app.Event();
	this.onKeyDown = new lime.app.Event();
	this.onGamepadDisconnect = new lime.app.Event();
	this.onGamepadConnect = new lime.app.Event();
	this.onGamepadButtonUp = new lime.app.Event();
	this.onGamepadButtonDown = new lime.app.Event();
	this.onGamepadAxisMove = new lime.app.Event();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__x = 0;
	this.__y = 0;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) this.__width = config.width;
		if(Object.prototype.hasOwnProperty.call(config,"height")) this.__height = config.height;
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) this.__fullscreen = config.fullscreen;
	}
	this.backend = new lime._backend.html5.HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime.ui.Window;
lime.ui.Window.__name__ = ["lime","ui","Window"];
lime.ui.Window.prototype = {
	close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.backend.create(application);
		if(this.currentRenderer != null) this.currentRenderer.create();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) return;
		this.backend.setIcon(image);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime.ui.Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_minimized:"set_minimized",get_minimized:"get_minimized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen"}
};
lime.utils = {};
lime.utils.ByteArray = function(size) {
	if(size == null) size = 0;
	this.littleEndian = false;
	this.allocated = 0;
	this.position = 0;
	this.length = 0;
	if(size > 0) this.allocated = size;
	this.___resizeBuffer(this.allocated);
	this.set_length(this.allocated);
};
$hxClasses["lime.utils.ByteArray"] = lime.utils.ByteArray;
lime.utils.ByteArray.__name__ = ["lime","utils","ByteArray"];
lime.utils.ByteArray.fromBytes = function(bytes) {
	var result = new lime.utils.ByteArray();
	result.byteView = new Uint8Array(bytes.b);
	result.set_length(result.byteView.length);
	result.allocated = result.length;
	return result;
};
lime.utils.ByteArray.readFile = function(path) {
	return null;
};
lime.utils.ByteArray.__ofBuffer = function(buffer) {
	var bytes = new lime.utils.ByteArray();
	bytes.set_length(bytes.allocated = buffer.byteLength);
	bytes.data = new DataView(buffer);
	bytes.byteView = new Uint8Array(buffer);
	return bytes;
};
lime.utils.ByteArray.prototype = {
	clear: function() {
		if(this.allocated < 0) this.___resizeBuffer(this.allocated = Std["int"](Math.max(0,this.allocated * 2))); else if(this.allocated > 0) this.___resizeBuffer(this.allocated = 0);
		this.length = 0;
		0;
		this.position = 0;
	}
	,compress: function(algorithm) {
	}
	,deflate: function() {
		this.compress(lime.utils.CompressionAlgorithm.DEFLATE);
	}
	,inflate: function() {
		this.uncompress(lime.utils.CompressionAlgorithm.DEFLATE);
	}
	,readBoolean: function() {
		return this.readByte() != 0;
	}
	,readByte: function() {
		var data = this.data;
		return data.getInt8(this.position++);
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(offset < 0 || length < 0) throw "Read error - Out of bounds";
		if(length == 0) length = this.length - this.position;
		var lengthToEnsure = offset + length;
		if(bytes.length < lengthToEnsure) {
			if(bytes.allocated < lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = Std["int"](Math.max(lengthToEnsure,bytes.allocated * 2))); else if(bytes.allocated > lengthToEnsure * 2) bytes.___resizeBuffer(bytes.allocated = lengthToEnsure);
			bytes.length = lengthToEnsure;
			lengthToEnsure;
		}
		bytes.byteView.set(this.byteView.subarray(this.position,this.position + length),offset);
		bytes.position = offset;
		this.position += length;
		if(bytes.position + length > bytes.length) bytes.set_length(bytes.position + length);
	}
	,readDouble: function() {
		var $double = this.data.getFloat64(this.position,this.littleEndian);
		this.position += 8;
		return $double;
	}
	,readFloat: function() {
		var $float = this.data.getFloat32(this.position,this.littleEndian);
		this.position += 4;
		return $float;
	}
	,readInt: function() {
		var $int = this.data.getInt32(this.position,this.littleEndian);
		this.position += 4;
		return $int;
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var $short = this.data.getInt16(this.position,this.littleEndian);
		this.position += 2;
		return $short;
	}
	,readUnsignedByte: function() {
		var data = this.data;
		return data.getUint8(this.position++);
	}
	,readUnsignedInt: function() {
		var uInt = this.data.getUint32(this.position,this.littleEndian);
		this.position += 4;
		return uInt;
	}
	,readUnsignedShort: function() {
		var uShort = this.data.getUint16(this.position,this.littleEndian);
		this.position += 2;
		return uShort;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(len) {
		var value = "";
		var max = this.position + len;
		while(this.position < max) {
			var data = this.data;
			var c = data.getUint8(this.position++);
			if(c < 128) {
				if(c == 0) break;
				value += String.fromCharCode(c);
			} else if(c < 224) value += String.fromCharCode((c & 63) << 6 | data.getUint8(this.position++) & 127); else if(c < 240) {
				var c2 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 31) << 12 | (c2 & 127) << 6 | data.getUint8(this.position++) & 127);
			} else {
				var c21 = data.getUint8(this.position++);
				var c3 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 15) << 18 | (c21 & 127) << 12 | c3 << 6 & 127 | data.getUint8(this.position++) & 127);
			}
		}
		return value;
	}
	,toString: function() {
		var cachePosition = this.position;
		this.position = 0;
		var value = this.readUTFBytes(this.length);
		this.position = cachePosition;
		return value;
	}
	,uncompress: function(algorithm) {
		null;
	}
	,write_uncheck: function($byte) {
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		var lengthToEnsure = this.position + 1;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		var data = this.data;
		data.setInt8(this.position,value);
		this.position += 1;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(bytes.length == 0) return;
		if((function($this) {
			var $r;
			var aNeg = 0 < 0;
			var bNeg = offset < 0;
			$r = aNeg != bNeg?aNeg:0 > offset;
			return $r;
		}(this)) || (function($this) {
			var $r;
			var aNeg1 = 0 < 0;
			var bNeg1 = length < 0;
			$r = aNeg1 != bNeg1?aNeg1:0 > length;
			return $r;
		}(this))) throw "Write error - Out of bounds";
		if((function($this) {
			var $r;
			var $int = length;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 0) length = bytes.length;
		var lengthToEnsure = this.position + length;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.byteView.set(bytes.byteView.subarray(offset,offset + length),this.position);
		this.position = this.position + length;
	}
	,writeDouble: function(x) {
		var lengthToEnsure = this.position + 8;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat64(this.position,x,this.littleEndian);
		this.position += 8;
	}
	,writeFile: function(path) {
	}
	,writeFloat: function(x) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat32(this.position,x,this.littleEndian);
		this.position += 4;
	}
	,writeInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUnsignedInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeUnsignedShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUTF: function(value) {
		this.writeUnsignedShort(this.__getUTFBytesCount(value));
		this.writeUTFBytes(value);
	}
	,writeUTFBytes: function(value) {
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) this.writeByte(c); else if(c <= 2047) {
				this.writeByte(192 | c >> 6);
				this.writeByte(128 | c & 63);
			} else if(c <= 65535) {
				this.writeByte(224 | c >> 12);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			} else {
				this.writeByte(240 | c >> 18);
				this.writeByte(128 | c >> 12 & 63);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			}
		}
	}
	,__fromBytes: function(bytes) {
		this.byteView = new Uint8Array(bytes.b);
		this.set_length(this.byteView.length);
		this.allocated = this.length;
	}
	,__get: function(pos) {
		return this.data.getInt8(pos);
	}
	,__getBuffer: function() {
		return this.data.buffer;
	}
	,__getUTFBytesCount: function(value) {
		var count = 0;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) count += 1; else if(c <= 2047) count += 2; else if(c <= 65535) count += 3; else count += 4;
		}
		return count;
	}
	,___resizeBuffer: function(len) {
		var oldByteView = this.byteView;
		var newByteView = new Uint8Array(len);
		if(oldByteView != null) {
			if(oldByteView.length <= len) newByteView.set(oldByteView); else newByteView.set(oldByteView.subarray(0,len));
		}
		this.byteView = newByteView;
		this.data = new DataView(newByteView.buffer);
	}
	,__set: function(pos,v) {
		this.data.setUint8(pos,v);
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		if(this.littleEndian) return "littleEndian"; else return "bigEndian";
	}
	,set_endian: function(endian) {
		this.littleEndian = endian == "littleEndian";
		return endian;
	}
	,set_length: function(value) {
		if(this.allocated < value) this.___resizeBuffer(this.allocated = Std["int"](Math.max(value,this.allocated * 2))); else if(this.allocated > value * 2) this.___resizeBuffer(this.allocated = value);
		this.length = value;
		return value;
	}
	,__class__: lime.utils.ByteArray
	,__properties__: {set_length:"set_length",set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
lime.utils.CompressionAlgorithm = $hxClasses["lime.utils.CompressionAlgorithm"] = { __ename__ : true, __constructs__ : ["DEFLATE","ZLIB","LZMA","GZIP"] };
lime.utils.CompressionAlgorithm.DEFLATE = ["DEFLATE",0];
lime.utils.CompressionAlgorithm.DEFLATE.toString = $estr;
lime.utils.CompressionAlgorithm.DEFLATE.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.CompressionAlgorithm.ZLIB = ["ZLIB",1];
lime.utils.CompressionAlgorithm.ZLIB.toString = $estr;
lime.utils.CompressionAlgorithm.ZLIB.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.CompressionAlgorithm.LZMA = ["LZMA",2];
lime.utils.CompressionAlgorithm.LZMA.toString = $estr;
lime.utils.CompressionAlgorithm.LZMA.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.CompressionAlgorithm.GZIP = ["GZIP",3];
lime.utils.CompressionAlgorithm.GZIP.toString = $estr;
lime.utils.CompressionAlgorithm.GZIP.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime.utils.GLUtils;
lime.utils.GLUtils.__name__ = ["lime","utils","GLUtils"];
lime.utils.GLUtils.compileShader = function(source,type) {
	var shader = lime.graphics.opengl.GL.context.createShader(type);
	lime.graphics.opengl.GL.context.shaderSource(shader,source);
	lime.graphics.opengl.GL.context.compileShader(shader);
	if(lime.graphics.opengl.GL.context.getShaderParameter(shader,35713) == 0) switch(type) {
	case 35633:
		throw "Error compiling vertex shader";
		break;
	case 35632:
		throw "Error compiling fragment shader";
		break;
	default:
		throw "Error compiling unknown shader type";
	}
	return shader;
};
lime.utils.GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime.utils.GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime.utils.GLUtils.compileShader(fragmentSource,35632);
	var program = lime.graphics.opengl.GL.context.createProgram();
	lime.graphics.opengl.GL.context.attachShader(program,vertexShader);
	lime.graphics.opengl.GL.context.attachShader(program,fragmentShader);
	lime.graphics.opengl.GL.context.linkProgram(program);
	if(lime.graphics.opengl.GL.context.getProgramParameter(program,35714) == 0) throw "Unable to initialize the shader program.";
	return program;
};
lime.utils.IDataInput = function() { };
$hxClasses["lime.utils.IDataInput"] = lime.utils.IDataInput;
lime.utils.IDataInput.__name__ = ["lime","utils","IDataInput"];
lime.utils.IDataInput.prototype = {
	__class__: lime.utils.IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
lime.utils.IMemoryRange = function() { };
$hxClasses["lime.utils.IMemoryRange"] = lime.utils.IMemoryRange;
lime.utils.IMemoryRange.__name__ = ["lime","utils","IMemoryRange"];
lime.utils.IMemoryRange.prototype = {
	__class__: lime.utils.IMemoryRange
};
var motion = {};
motion.actuators = {};
motion.actuators.IGenericActuator = function() { };
$hxClasses["motion.actuators.IGenericActuator"] = motion.actuators.IGenericActuator;
motion.actuators.IGenericActuator.__name__ = ["motion","actuators","IGenericActuator"];
motion.actuators.IGenericActuator.prototype = {
	__class__: motion.actuators.IGenericActuator
};
motion.actuators.GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion.Actuate.defaultEase;
};
$hxClasses["motion.actuators.GenericActuator"] = motion.actuators.GenericActuator;
motion.actuators.GenericActuator.__name__ = ["motion","actuators","GenericActuator"];
motion.actuators.GenericActuator.__interfaces__ = [motion.actuators.IGenericActuator];
motion.actuators.GenericActuator.prototype = {
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) Reflect.setField(this.target,i,Reflect.field(this.properties,i)); else Reflect.setProperty(this.target,i,Reflect.field(this.properties,i));
		}
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) params = [];
		return method.apply(method,params);
	}
	,change: function() {
		if(this._onUpdate != null) this.callMethod(this._onUpdate,this._onUpdateParams);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) this.callMethod(this._onComplete,this._onCompleteParams);
		}
		motion.Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) this._onCompleteParams = []; else this._onCompleteParams = parameters;
		if(this.duration == 0) this.complete();
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) this._onRepeatParams = []; else this._onRepeatParams = parameters;
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) this._onPauseParams = []; else this._onPauseParams = parameters;
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) this._onResumeParams = []; else this._onResumeParams = parameters;
		return this;
	}
	,pause: function() {
		if(this._onPause != null) this.callMethod(this._onPause,this._onPauseParams);
	}
	,reflect: function(value) {
		if(value == null) value = true;
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) times = -1;
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) this.callMethod(this._onResume,this._onResumeParams);
	}
	,reverse: function(value) {
		if(value == null) value = true;
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) value = true;
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) value = true;
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,updateEnterFrame: function() {
	}
	,__class__: motion.actuators.GenericActuator
};
motion.actuators.SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = new Array();
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.currentFrame = 0;
	motion.actuators.GenericActuator.call(this,target,duration,properties);
	if(!motion.actuators.SimpleActuator.addedEvent) {
		motion.actuators.SimpleActuator.addedEvent = true;
		motion.Actuate.updateSimpleActuator = this;
	}
};
$hxClasses["motion.actuators.SimpleActuator"] = motion.actuators.SimpleActuator;
motion.actuators.SimpleActuator.__name__ = ["motion","actuators","SimpleActuator"];
motion.actuators.SimpleActuator.__super__ = motion.actuators.GenericActuator;
motion.actuators.SimpleActuator.prototype = $extend(motion.actuators.GenericActuator.prototype,{
	setField_motion_actuators_SimpleActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",this.cacheVisible);
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) value = Reflect.field(target,propertyName); else value = Reflect.getProperty(target,propertyName);
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i) && !(this.target.__properties__ && this.target.__properties__["set_" + i])) start = Reflect.field(this.target,i); else {
				isField = false;
				start = Reflect.getProperty(this.target,i);
			}
			if(typeof(start) == "number") {
				var value = this.getField(this.properties,i);
				if(start == null) start = 0;
				if(value == null) value = 0;
				details = new motion.actuators.PropertyDetails(this.target,i,start,value - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && js.Boot.__instanceof(this.target,openfl.display.DisplayObject);
		if(this.toggleVisible && this.properties.alpha != 0 && !this.getField(this.target,"visible")) {
			this.setVisible = true;
			this.cacheVisible = this.getField(this.target,"visible");
			this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",true);
		}
		motion.actuators.SimpleActuator.actuators.push(this);
		++motion.actuators.SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion.actuators.GenericActuator.prototype.pause.call(this);
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			motion.actuators.GenericActuator.prototype.resume.call(this);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) details.target[details.propertyName] = value; else Reflect.setProperty(details.target,details.propertyName,value);
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			this.currentFrame = 0;
			if(properties == null) {
				this.active = false;
				if(complete) this.apply();
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) this.apply();
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function() {
		if(!this.paused) {
			var details;
			var easing;
			this.currentFrame++;
			var tweenPosition = this.currentFrame / this.duration;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g1 = 0;
				var _g = this.detailsLength;
				while(_g1 < _g) {
					var i = _g1++;
					details = this.propertyDetails[i];
					this.setProperty(details,details.start + details.change * easing);
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g11 = 0;
				var _g2 = this.detailsLength;
				while(_g11 < _g2) {
					var i1 = _g11++;
					details = this.propertyDetails[i1];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) rotation -= 360; else if(rotation < -180) rotation += 360;
						endValue = details.start + rotation * easing;
					} else endValue = details.start + details.change * easing;
					if(!this._snapping) {
						if(details.isField) details.target[details.propertyName] = endValue; else Reflect.setProperty(details.target,details.propertyName,endValue);
					} else this.setProperty(details,Math.round(endValue));
				}
			}
			if(tweenPosition == 1) {
				this.currentFrame = 0;
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,updateEnterFrame: function() {
		var actuator;
		var j = 0;
		var _g1 = 0;
		var _g = motion.actuators.SimpleActuator.actuatorsLength;
		while(_g1 < _g) {
			var i = _g1++;
			actuator = motion.actuators.SimpleActuator.actuators[j];
			if(actuator != null && actuator.active) {
				actuator.update();
				j++;
			} else {
				motion.actuators.SimpleActuator.actuators.splice(j,1);
				--motion.actuators.SimpleActuator.actuatorsLength;
			}
		}
	}
	,__class__: motion.actuators.SimpleActuator
});
motion.easing = {};
motion.easing.Linear = function() { };
$hxClasses["motion.easing.Linear"] = motion.easing.Linear;
motion.easing.Linear.__name__ = ["motion","easing","Linear"];
motion.easing.Linear.__properties__ = {get_easeNone:"get_easeNone"}
motion.easing.Linear.get_easeNone = function() {
	return new motion.easing.LinearEaseNone();
};
motion.easing.IEasing = function() { };
$hxClasses["motion.easing.IEasing"] = motion.easing.IEasing;
motion.easing.IEasing.__name__ = ["motion","easing","IEasing"];
motion.easing.IEasing.prototype = {
	__class__: motion.easing.IEasing
};
motion.easing.LinearEaseNone = function() {
};
$hxClasses["motion.easing.LinearEaseNone"] = motion.easing.LinearEaseNone;
motion.easing.LinearEaseNone.__name__ = ["motion","easing","LinearEaseNone"];
motion.easing.LinearEaseNone.__interfaces__ = [motion.easing.IEasing];
motion.easing.LinearEaseNone.prototype = {
	calculate: function(k) {
		return k;
	}
	,ease: function(t,b,c,d) {
		return c * t / d + b;
	}
	,__class__: motion.easing.LinearEaseNone
};
motion.Actuate = function() { };
$hxClasses["motion.Actuate"] = motion.Actuate;
motion.Actuate.__name__ = ["motion","Actuate"];
motion.Actuate.updateSimpleActuator = null;
motion.Actuate.updateEnterFrame = function() {
	if(motion.Actuate.updateSimpleActuator == null) return;
	motion.Actuate.updateSimpleActuator.updateEnterFrame();
};
motion.Actuate.apply = function(target,properties,customActuator) {
	motion.Actuate.stop(target,properties);
	if(customActuator == null) customActuator = motion.Actuate.defaultActuator;
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion.Actuate.effects = function(target,duration,overwrite) {
	if(overwrite == null) overwrite = true;
	return new motion._Actuate.EffectsOptions(target,duration,overwrite);
};
motion.Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) allowCreation = true;
	if(!(motion.Actuate.targetLibraries.h.__keys__[target.__id__] != null) && allowCreation) motion.Actuate.targetLibraries.set(target,new Array());
	return motion.Actuate.targetLibraries.h[target.__id__];
};
motion.Actuate.isActive = function() {
	var result = false;
	var $it0 = motion.Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		result = true;
		break;
	}
	return result;
};
motion.Actuate.motionPath = function(target,duration,properties,overwrite) {
	if(overwrite == null) overwrite = true;
	return motion.Actuate.tween(target,duration,properties,overwrite,motion.actuators.MotionPathActuator);
};
motion.Actuate.pause = function(target) {
	if(js.Boot.__instanceof(target,motion.actuators.IGenericActuator)) {
		var actuator = target;
		actuator.pause();
	} else {
		var library = motion.Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.pause();
			}
		}
	}
};
motion.Actuate.pauseAll = function() {
	var $it0 = motion.Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.pause();
		}
	}
};
motion.Actuate.reset = function() {
	var $it0 = motion.Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var i = library.length - 1;
		while(i >= 0) {
			library[i].stop(null,false,false);
			i--;
		}
	}
	motion.Actuate.targetLibraries = new haxe.ds.ObjectMap();
};
motion.Actuate.resume = function(target) {
	if(js.Boot.__instanceof(target,motion.actuators.IGenericActuator)) {
		var actuator = target;
		actuator.resume();
	} else {
		var library = motion.Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.resume();
			}
		}
	}
};
motion.Actuate.resumeAll = function() {
	var $it0 = motion.Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.resume();
		}
	}
};
motion.Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) sendEvent = true;
	if(complete == null) complete = false;
	if(target != null) {
		if(js.Boot.__instanceof(target,motion.actuators.IGenericActuator)) {
			var actuator = target;
			actuator.stop(null,complete,sendEvent);
		} else {
			var library = motion.Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					Reflect.setField(temp,properties,null);
					properties = temp;
				} else if((properties instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1;
					_g1 = js.Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						Reflect.setField(temp1,property,null);
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					i--;
				}
			}
		}
	}
};
motion.Actuate.timer = function(duration,customActuator) {
	return motion.Actuate.tween(new motion._Actuate.TweenTimer(0),duration,new motion._Actuate.TweenTimer(1),false,customActuator);
};
motion.Actuate.transform = function(target,duration,overwrite) {
	if(overwrite == null) overwrite = true;
	if(duration == null) duration = 0;
	return new motion._Actuate.TransformOptions(target,duration,overwrite);
};
motion.Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) overwrite = true;
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) customActuator = motion.Actuate.defaultActuator;
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion.Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					i--;
				}
				library = motion.Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else return motion.Actuate.apply(target,properties,customActuator);
	}
	return null;
};
motion.Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion.Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(motion.Actuate.targetLibraries.h[target.__id__],actuator);
		if(motion.Actuate.targetLibraries.h[target.__id__].length == 0) motion.Actuate.targetLibraries.remove(target);
	}
};
motion.Actuate.update = function(target,duration,start,end,overwrite) {
	if(overwrite == null) overwrite = true;
	var properties = { start : start, end : end};
	return motion.Actuate.tween(target,duration,properties,overwrite,motion.actuators.MethodActuator);
};
motion._Actuate = {};
motion._Actuate.EffectsOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.EffectsOptions"] = motion._Actuate.EffectsOptions;
motion._Actuate.EffectsOptions.__name__ = ["motion","_Actuate","EffectsOptions"];
motion._Actuate.EffectsOptions.prototype = {
	filter: function(reference,properties) {
		properties.filter = reference;
		return motion.Actuate.tween(this.target,this.duration,properties,this.overwrite,motion.actuators.FilterActuator);
	}
	,__class__: motion._Actuate.EffectsOptions
};
motion._Actuate.TransformOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.TransformOptions"] = motion._Actuate.TransformOptions;
motion._Actuate.TransformOptions.__name__ = ["motion","_Actuate","TransformOptions"];
motion._Actuate.TransformOptions.prototype = {
	color: function(value,strength,alpha) {
		if(strength == null) strength = 1;
		if(value == null) value = 0;
		var properties = { colorValue : value, colorStrength : strength};
		if(alpha != null) properties.colorAlpha = alpha;
		return motion.Actuate.tween(this.target,this.duration,properties,this.overwrite,motion.actuators.TransformActuator);
	}
	,sound: function(volume,pan) {
		var properties = { };
		if(volume != null) properties.soundVolume = volume;
		if(pan != null) properties.soundPan = pan;
		return motion.Actuate.tween(this.target,this.duration,properties,this.overwrite,motion.actuators.TransformActuator);
	}
	,__class__: motion._Actuate.TransformOptions
};
motion._Actuate.TweenTimer = function(progress) {
	this.progress = progress;
};
$hxClasses["motion._Actuate.TweenTimer"] = motion._Actuate.TweenTimer;
motion._Actuate.TweenTimer.__name__ = ["motion","_Actuate","TweenTimer"];
motion._Actuate.TweenTimer.prototype = {
	__class__: motion._Actuate.TweenTimer
};
motion.MotionPath = function() {
	this._x = new motion.ComponentPath();
	this._y = new motion.ComponentPath();
	this._rotation = null;
};
$hxClasses["motion.MotionPath"] = motion.MotionPath;
motion.MotionPath.__name__ = ["motion","MotionPath"];
motion.MotionPath.prototype = {
	bezier: function(x,y,controlX,controlY,strength) {
		if(strength == null) strength = 1;
		this._x.addPath(new motion.BezierPath(x,controlX,strength));
		this._y.addPath(new motion.BezierPath(y,controlY,strength));
		return this;
	}
	,line: function(x,y,strength) {
		if(strength == null) strength = 1;
		this._x.addPath(new motion.LinearPath(x,strength));
		this._y.addPath(new motion.LinearPath(y,strength));
		return this;
	}
	,get_rotation: function() {
		if(this._rotation == null) this._rotation = new motion.RotationPath(this._x,this._y);
		return this._rotation;
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,__class__: motion.MotionPath
	,__properties__: {get_y:"get_y",get_x:"get_x",get_rotation:"get_rotation"}
};
motion.IComponentPath = function() { };
$hxClasses["motion.IComponentPath"] = motion.IComponentPath;
motion.IComponentPath.__name__ = ["motion","IComponentPath"];
motion.IComponentPath.prototype = {
	__class__: motion.IComponentPath
};
motion.ComponentPath = function() {
	this.paths = new Array();
	this.start = 0;
	this.totalStrength = 0;
};
$hxClasses["motion.ComponentPath"] = motion.ComponentPath;
motion.ComponentPath.__name__ = ["motion","ComponentPath"];
motion.ComponentPath.__interfaces__ = [motion.IComponentPath];
motion.ComponentPath.prototype = {
	addPath: function(path) {
		this.paths.push(path);
		this.totalStrength += path.strength;
	}
	,calculate: function(k) {
		if(this.paths.length == 1) return this.paths[0].calculate(this.start,k); else {
			var ratio = k * this.totalStrength;
			var lastEnd = this.start;
			var _g = 0;
			var _g1 = this.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				if(ratio > path.strength) {
					ratio -= path.strength;
					lastEnd = path.end;
				} else return path.calculate(lastEnd,ratio / path.strength);
			}
		}
		return 0;
	}
	,get_end: function() {
		if(this.paths.length > 0) {
			var path = this.paths[this.paths.length - 1];
			return path.end;
		} else return this.start;
	}
	,__class__: motion.ComponentPath
	,__properties__: {get_end:"get_end"}
};
motion.BezierPath = function(end,control,strength) {
	this.end = end;
	this.control = control;
	this.strength = strength;
};
$hxClasses["motion.BezierPath"] = motion.BezierPath;
motion.BezierPath.__name__ = ["motion","BezierPath"];
motion.BezierPath.prototype = {
	calculate: function(start,k) {
		return (1 - k) * (1 - k) * start + 2 * (1 - k) * k * this.control + k * k * this.end;
	}
	,__class__: motion.BezierPath
};
motion.LinearPath = function(end,strength) {
	motion.BezierPath.call(this,end,0,strength);
};
$hxClasses["motion.LinearPath"] = motion.LinearPath;
motion.LinearPath.__name__ = ["motion","LinearPath"];
motion.LinearPath.__super__ = motion.BezierPath;
motion.LinearPath.prototype = $extend(motion.BezierPath.prototype,{
	calculate: function(start,k) {
		return start + k * (this.end - start);
	}
	,__class__: motion.LinearPath
});
motion.RotationPath = function(x,y) {
	this.step = 0.01;
	this._x = x;
	this._y = y;
	this.offset = 0;
	this.start = this.calculate(0.0);
};
$hxClasses["motion.RotationPath"] = motion.RotationPath;
motion.RotationPath.__name__ = ["motion","RotationPath"];
motion.RotationPath.__interfaces__ = [motion.IComponentPath];
motion.RotationPath.prototype = {
	calculate: function(k) {
		var dX = this._x.calculate(k) - this._x.calculate(k + this.step);
		var dY = this._y.calculate(k) - this._y.calculate(k + this.step);
		var angle = Math.atan2(dY,dX) * (180 / Math.PI);
		angle = (angle + this.offset) % 360;
		return angle;
	}
	,get_end: function() {
		return this.calculate(1.0);
	}
	,__class__: motion.RotationPath
	,__properties__: {get_end:"get_end"}
};
motion.actuators.FilterActuator = function(target,duration,properties) {
	this.filterIndex = -1;
	motion.actuators.SimpleActuator.call(this,target,duration,properties);
	if(js.Boot.__instanceof(properties.filter,Class)) {
		this.filterClass = properties.filter;
		if(target.get_filters().length == 0) target.set_filters([Type.createInstance(this.filterClass,[])]);
		var _g = 0;
		var _g1 = target.get_filters();
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			if(js.Boot.__instanceof(filter,this.filterClass)) this.filter = filter;
		}
	} else {
		this.filterIndex = properties.filter;
		this.filter = target.get_filters()[this.filterIndex];
	}
};
$hxClasses["motion.actuators.FilterActuator"] = motion.actuators.FilterActuator;
motion.actuators.FilterActuator.__name__ = ["motion","actuators","FilterActuator"];
motion.actuators.FilterActuator.__super__ = motion.actuators.SimpleActuator;
motion.actuators.FilterActuator.prototype = $extend(motion.actuators.SimpleActuator.prototype,{
	setField_openfl_display_DisplayObject: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") Reflect.setField(this.filter,propertyName,Reflect.field(this.properties,propertyName));
		}
		var filters = this.getField(this.target,"filters");
		Reflect.setField(filters,this.properties.filter,this.filter);
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				start = this.getField(this.filter,propertyName);
				details = new motion.actuators.PropertyDetails(this.filter,propertyName,start,Reflect.field(this.properties,propertyName) - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function() {
		motion.actuators.SimpleActuator.prototype.update.call(this);
		var filters = this.target.get_filters();
		if(this.filterIndex > -1) Reflect.setField(filters,this.properties.filter,this.filter); else {
			var _g1 = 0;
			var _g = filters.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(js.Boot.__instanceof(filters[i],this.filterClass)) filters[i] = this.filter;
			}
		}
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,__class__: motion.actuators.FilterActuator
});
motion.actuators.MethodActuator = function(target,duration,properties) {
	this.currentParameters = new Array();
	this.tweenProperties = { };
	motion.actuators.SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) this.properties.start = new Array();
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) this.properties.end = this.properties.start;
	var _g1 = 0;
	var _g = this.properties.start.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.currentParameters.push(this.properties.start[i]);
	}
};
$hxClasses["motion.actuators.MethodActuator"] = motion.actuators.MethodActuator;
motion.actuators.MethodActuator.__name__ = ["motion","actuators","MethodActuator"];
motion.actuators.MethodActuator.__super__ = motion.actuators.SimpleActuator;
motion.actuators.MethodActuator.prototype = $extend(motion.actuators.SimpleActuator.prototype,{
	apply: function() {
		this.callMethod(this.target,this.properties.end);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
		}
		this.callMethod(this.target,this.currentParameters);
		motion.actuators.SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || ((start | 0) === start)) {
				details = new motion.actuators.PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function() {
		motion.actuators.SimpleActuator.prototype.update.call(this);
		if(this.active && !this.paused) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			this.callMethod(this.target,this.currentParameters);
		}
	}
	,__class__: motion.actuators.MethodActuator
});
motion.actuators.MotionPathActuator = function(target,duration,properties) {
	motion.actuators.SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.MotionPathActuator"] = motion.actuators.MotionPathActuator;
motion.actuators.MotionPathActuator.__name__ = ["motion","actuators","MotionPathActuator"];
motion.actuators.MotionPathActuator.__super__ = motion.actuators.SimpleActuator;
motion.actuators.MotionPathActuator.prototype = $extend(motion.actuators.SimpleActuator.prototype,{
	setField_motion_actuators_MotionPathActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) Reflect.setField(this.target,propertyName,(js.Boot.__cast(Reflect.field(this.properties,propertyName) , motion.IComponentPath)).get_end()); else Reflect.setProperty(this.target,propertyName,(js.Boot.__cast(Reflect.field(this.properties,propertyName) , motion.IComponentPath)).get_end());
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js.Boot.__cast(Reflect.field(this.properties,propertyName) , motion.IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) path.start = Reflect.field(this.target,propertyName); else {
					isField = false;
					path.start = Reflect.getProperty(this.target,propertyName);
				}
				details = new motion.actuators.PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function() {
		if(!this.paused) {
			var details;
			var easing;
			this.currentFrame++;
			var tweenPosition = this.currentFrame / this.duration;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) Reflect.setField(details1.target,details1.propertyName,(js.Boot.__cast(details1 , motion.actuators.PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details1.target,details1.propertyName,(js.Boot.__cast(details1 , motion.actuators.PropertyPathDetails)).path.calculate(easing));
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) Reflect.setField(details2.target,details2.propertyName,(js.Boot.__cast(details2 , motion.actuators.PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details2.target,details2.propertyName,(js.Boot.__cast(details2 , motion.actuators.PropertyPathDetails)).path.calculate(easing));
					} else if(details2.isField) Reflect.setField(details2.target,details2.propertyName,Math.round((js.Boot.__cast(details2 , motion.actuators.PropertyPathDetails)).path.calculate(easing))); else Reflect.setProperty(details2.target,details2.propertyName,Math.round((js.Boot.__cast(details2 , motion.actuators.PropertyPathDetails)).path.calculate(easing)));
				}
			}
			if(tweenPosition == 1) {
				this.currentFrame = 0;
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_MotionPathActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: motion.actuators.MotionPathActuator
});
motion.actuators.PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) isField = true;
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
$hxClasses["motion.actuators.PropertyDetails"] = motion.actuators.PropertyDetails;
motion.actuators.PropertyDetails.__name__ = ["motion","actuators","PropertyDetails"];
motion.actuators.PropertyDetails.prototype = {
	__class__: motion.actuators.PropertyDetails
};
motion.actuators.PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) isField = true;
	motion.actuators.PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
$hxClasses["motion.actuators.PropertyPathDetails"] = motion.actuators.PropertyPathDetails;
motion.actuators.PropertyPathDetails.__name__ = ["motion","actuators","PropertyPathDetails"];
motion.actuators.PropertyPathDetails.__super__ = motion.actuators.PropertyDetails;
motion.actuators.PropertyPathDetails.prototype = $extend(motion.actuators.PropertyDetails.prototype,{
	__class__: motion.actuators.PropertyPathDetails
});
motion.actuators.TransformActuator = function(target,duration,properties) {
	motion.actuators.SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.TransformActuator"] = motion.actuators.TransformActuator;
motion.actuators.TransformActuator.__name__ = ["motion","actuators","TransformActuator"];
motion.actuators.TransformActuator.__super__ = motion.actuators.SimpleActuator;
motion.actuators.TransformActuator.prototype = $extend(motion.actuators.SimpleActuator.prototype,{
	setField_openfl_geom_Transform: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_TransformActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,apply: function() {
		this.initialize();
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.endColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.endSoundTransform);
	}
	,initialize: function() {
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorValue") && js.Boot.__instanceof(this.target,openfl.display.DisplayObject)) this.initializeColor();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume") || Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) this.initializeSound();
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,initializeColor: function() {
		this.endColorTransform = new openfl.geom.ColorTransform();
		var color = this.properties.colorValue;
		var strength = this.properties.colorStrength;
		if(strength < 1) {
			var multiplier;
			var offset;
			if(strength < 0.5) {
				multiplier = 1;
				offset = strength * 2;
			} else {
				multiplier = 1 - (strength - 0.5) * 2;
				offset = 1;
			}
			this.endColorTransform.redMultiplier = multiplier;
			this.endColorTransform.greenMultiplier = multiplier;
			this.endColorTransform.blueMultiplier = multiplier;
			this.endColorTransform.redOffset = offset * (color >> 16 & 255);
			this.endColorTransform.greenOffset = offset * (color >> 8 & 255);
			this.endColorTransform.blueOffset = offset * (color & 255);
		} else {
			this.endColorTransform.redMultiplier = 0;
			this.endColorTransform.greenMultiplier = 0;
			this.endColorTransform.blueMultiplier = 0;
			this.endColorTransform.redOffset = color >> 16 & 255;
			this.endColorTransform.greenOffset = color >> 8 & 255;
			this.endColorTransform.blueOffset = color & 255;
		}
		var propertyNames = ["redMultiplier","greenMultiplier","blueMultiplier","redOffset","greenOffset","blueOffset"];
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorAlpha")) {
			this.endColorTransform.alphaMultiplier = this.properties.colorAlpha;
			propertyNames.push("alphaMultiplier");
		} else this.endColorTransform.alphaMultiplier = this.getField(this.target,"alpha");
		var transform = this.getField(this.target,"transform");
		var begin = this.getField(transform,"colorTransform");
		this.tweenColorTransform = new openfl.geom.ColorTransform();
		var details;
		var start;
		var _g = 0;
		while(_g < propertyNames.length) {
			var propertyName = propertyNames[_g];
			++_g;
			start = this.getField(begin,propertyName);
			details = new motion.actuators.PropertyDetails(this.tweenColorTransform,propertyName,start,this.getField(this.endColorTransform,propertyName) - start);
			this.propertyDetails.push(details);
		}
	}
	,initializeSound: function() {
		if(this.getField(this.target,"soundTransform") == null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",new openfl.media.SoundTransform());
		var start = this.getField(this.target,"soundTransform");
		this.endSoundTransform = this.getField(this.target,"soundTransform");
		this.tweenSoundTransform = new openfl.media.SoundTransform();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume")) {
			this.endSoundTransform.volume = this.properties.soundVolume;
			this.propertyDetails.push(new motion.actuators.PropertyDetails(this.tweenSoundTransform,"volume",start.volume,this.endSoundTransform.volume - start.volume));
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.endSoundTransform.pan = this.properties.soundPan;
			this.propertyDetails.push(new motion.actuators.PropertyDetails(this.tweenSoundTransform,"pan",start.pan,this.endSoundTransform.pan - start.pan));
		}
	}
	,update: function() {
		motion.actuators.SimpleActuator.prototype.update.call(this);
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.tweenColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.tweenSoundTransform);
	}
	,__class__: motion.actuators.TransformActuator
});
motion.easing.Bounce = function() { };
$hxClasses["motion.easing.Bounce"] = motion.easing.Bounce;
motion.easing.Bounce.__name__ = ["motion","easing","Bounce"];
motion.easing.Bounce.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion.easing.Bounce.get_easeIn = function() {
	return new motion.easing.BounceEaseIn();
};
motion.easing.Bounce.get_easeInOut = function() {
	return new motion.easing.BounceEaseInOut();
};
motion.easing.Bounce.get_easeOut = function() {
	return new motion.easing.BounceEaseOut();
};
motion.easing.BounceEaseIn = function() {
};
$hxClasses["motion.easing.BounceEaseIn"] = motion.easing.BounceEaseIn;
motion.easing.BounceEaseIn.__name__ = ["motion","easing","BounceEaseIn"];
motion.easing.BounceEaseIn.__interfaces__ = [motion.easing.IEasing];
motion.easing.BounceEaseIn._ease = function(t,b,c,d) {
	return c - motion.easing.BounceEaseOut._ease(d - t,0,c,d) + b;
};
motion.easing.BounceEaseIn.prototype = {
	calculate: function(k) {
		return 1 - motion.easing.BounceEaseOut._ease(1 - k,0,1,1);
	}
	,ease: function(t,b,c,d) {
		return c - motion.easing.BounceEaseOut._ease(d - t,0,c,d) + b;
	}
	,__class__: motion.easing.BounceEaseIn
};
motion.easing.BounceEaseInOut = function() {
};
$hxClasses["motion.easing.BounceEaseInOut"] = motion.easing.BounceEaseInOut;
motion.easing.BounceEaseInOut.__name__ = ["motion","easing","BounceEaseInOut"];
motion.easing.BounceEaseInOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.BounceEaseInOut.prototype = {
	calculate: function(k) {
		if(k < .5) return (1 - motion.easing.BounceEaseOut._ease(1 - k * 2,0,1,1)) * .5; else return motion.easing.BounceEaseOut._ease(k * 2 - 1,0,1,1) * .5 + .5;
	}
	,ease: function(t,b,c,d) {
		if(t < d / 2) return (c - motion.easing.BounceEaseOut._ease(d - t * 2,0,c,d)) * .5 + b; else return motion.easing.BounceEaseOut._ease(t * 2 - d,0,c,d) * .5 + c * .5 + b;
	}
	,__class__: motion.easing.BounceEaseInOut
};
motion.easing.BounceEaseOut = function() {
};
$hxClasses["motion.easing.BounceEaseOut"] = motion.easing.BounceEaseOut;
motion.easing.BounceEaseOut.__name__ = ["motion","easing","BounceEaseOut"];
motion.easing.BounceEaseOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.BounceEaseOut._ease = function(t,b,c,d) {
	if((t /= d) < 0.36363636363636365) return c * (7.5625 * t * t) + b; else if(t < 0.72727272727272729) return c * (7.5625 * (t -= 0.54545454545454541) * t + .75) + b; else if(t < 0.90909090909090906) return c * (7.5625 * (t -= 0.81818181818181823) * t + .9375) + b; else return c * (7.5625 * (t -= 0.95454545454545459) * t + .984375) + b;
};
motion.easing.BounceEaseOut.prototype = {
	calculate: function(k) {
		return motion.easing.BounceEaseOut._ease(k,0,1,1);
	}
	,ease: function(t,b,c,d) {
		return motion.easing.BounceEaseOut._ease(t,b,c,d);
	}
	,__class__: motion.easing.BounceEaseOut
};
motion.easing.Cubic = function() { };
$hxClasses["motion.easing.Cubic"] = motion.easing.Cubic;
motion.easing.Cubic.__name__ = ["motion","easing","Cubic"];
motion.easing.Cubic.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion.easing.Cubic.get_easeIn = function() {
	return new motion.easing.CubicEaseIn();
};
motion.easing.Cubic.get_easeInOut = function() {
	return new motion.easing.CubicEaseInOut();
};
motion.easing.Cubic.get_easeOut = function() {
	return new motion.easing.CubicEaseOut();
};
motion.easing.CubicEaseIn = function() {
};
$hxClasses["motion.easing.CubicEaseIn"] = motion.easing.CubicEaseIn;
motion.easing.CubicEaseIn.__name__ = ["motion","easing","CubicEaseIn"];
motion.easing.CubicEaseIn.__interfaces__ = [motion.easing.IEasing];
motion.easing.CubicEaseIn.prototype = {
	calculate: function(k) {
		return k * k * k;
	}
	,ease: function(t,b,c,d) {
		return c * (t /= d) * t * t + b;
	}
	,__class__: motion.easing.CubicEaseIn
};
motion.easing.CubicEaseInOut = function() {
};
$hxClasses["motion.easing.CubicEaseInOut"] = motion.easing.CubicEaseInOut;
motion.easing.CubicEaseInOut.__name__ = ["motion","easing","CubicEaseInOut"];
motion.easing.CubicEaseInOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.CubicEaseInOut.prototype = {
	calculate: function(k) {
		if((k /= 0.5) < 1) return 0.5 * k * k * k; else return 0.5 * ((k -= 2) * k * k + 2);
	}
	,ease: function(t,b,c,d) {
		if((t /= d / 2) < 1) return c / 2 * t * t * t + b; else return c / 2 * ((t -= 2) * t * t + 2) + b;
	}
	,__class__: motion.easing.CubicEaseInOut
};
motion.easing.CubicEaseOut = function() {
};
$hxClasses["motion.easing.CubicEaseOut"] = motion.easing.CubicEaseOut;
motion.easing.CubicEaseOut.__name__ = ["motion","easing","CubicEaseOut"];
motion.easing.CubicEaseOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.CubicEaseOut.prototype = {
	calculate: function(k) {
		return --k * k * k + 1;
	}
	,ease: function(t,b,c,d) {
		return c * ((t = t / d - 1) * t * t + 1) + b;
	}
	,__class__: motion.easing.CubicEaseOut
};
motion.easing.Elastic = function() { };
$hxClasses["motion.easing.Elastic"] = motion.easing.Elastic;
motion.easing.Elastic.__name__ = ["motion","easing","Elastic"];
motion.easing.Elastic.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion.easing.Elastic.get_easeIn = function() {
	return new motion.easing.ElasticEaseIn(0.1,0.4);
};
motion.easing.Elastic.get_easeInOut = function() {
	return new motion.easing.ElasticEaseInOut(0.1,0.4);
};
motion.easing.Elastic.get_easeOut = function() {
	return new motion.easing.ElasticEaseOut(0.1,0.4);
};
motion.easing.ElasticEaseIn = function(a,p) {
	this.a = a;
	this.p = p;
};
$hxClasses["motion.easing.ElasticEaseIn"] = motion.easing.ElasticEaseIn;
motion.easing.ElasticEaseIn.__name__ = ["motion","easing","ElasticEaseIn"];
motion.easing.ElasticEaseIn.__interfaces__ = [motion.easing.IEasing];
motion.easing.ElasticEaseIn.prototype = {
	calculate: function(k) {
		if(k == 0) return 0;
		if(k == 1) return 1;
		var s;
		if(this.a < 1) {
			this.a = 1;
			s = this.p / 4;
		} else s = this.p / (2 * Math.PI) * Math.asin(1 / this.a);
		return -(this.a * Math.pow(2,10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / this.p));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b;
		if((t /= d) == 1) return b + c;
		var s;
		if(this.a < Math.abs(c)) {
			this.a = c;
			s = this.p / 4;
		} else s = this.p / (2 * Math.PI) * Math.asin(c / this.a);
		return -(this.a * Math.pow(2,10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / this.p)) + b;
	}
	,__class__: motion.easing.ElasticEaseIn
};
motion.easing.ElasticEaseInOut = function(a,p) {
	this.a = a;
	this.p = p;
};
$hxClasses["motion.easing.ElasticEaseInOut"] = motion.easing.ElasticEaseInOut;
motion.easing.ElasticEaseInOut.__name__ = ["motion","easing","ElasticEaseInOut"];
motion.easing.ElasticEaseInOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.ElasticEaseInOut.prototype = {
	calculate: function(k) {
		if(k == 0) return 0;
		if((k /= 0.5) == 2) return 1;
		var p = 0.44999999999999996;
		var a = 1;
		var s = p / 4;
		if(k < 1) return -0.5 * (Math.pow(2,10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
		return Math.pow(2,-10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b;
		if((t /= d / 2) == 2) return b + c;
		var s;
		if(this.a < Math.abs(c)) {
			this.a = c;
			s = this.p / 4;
		} else s = this.p / (2 * Math.PI) * Math.asin(c / this.a);
		if(t < 1) return -0.5 * (this.a * Math.pow(2,10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / this.p)) + b;
		return this.a * Math.pow(2,-10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / this.p) * 0.5 + c + b;
	}
	,__class__: motion.easing.ElasticEaseInOut
};
motion.easing.ElasticEaseOut = function(a,p) {
	this.a = a;
	this.p = p;
};
$hxClasses["motion.easing.ElasticEaseOut"] = motion.easing.ElasticEaseOut;
motion.easing.ElasticEaseOut.__name__ = ["motion","easing","ElasticEaseOut"];
motion.easing.ElasticEaseOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.ElasticEaseOut.prototype = {
	calculate: function(k) {
		if(k == 0) return 0;
		if(k == 1) return 1;
		var s;
		if(this.a < 1) {
			this.a = 1;
			s = this.p / 4;
		} else s = this.p / (2 * Math.PI) * Math.asin(1 / this.a);
		return this.a * Math.pow(2,-10 * k) * Math.sin((k - s) * (2 * Math.PI) / this.p) + 1;
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b;
		if((t /= d) == 1) return b + c;
		var s;
		if(this.a < Math.abs(c)) {
			this.a = c;
			s = this.p / 4;
		} else s = this.p / (2 * Math.PI) * Math.asin(c / this.a);
		return this.a * Math.pow(2,-10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / this.p) + c + b;
	}
	,__class__: motion.easing.ElasticEaseOut
};
motion.easing.Expo = function() { };
$hxClasses["motion.easing.Expo"] = motion.easing.Expo;
motion.easing.Expo.__name__ = ["motion","easing","Expo"];
motion.easing.Expo.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion.easing.Expo.get_easeIn = function() {
	return new motion.easing.ExpoEaseIn();
};
motion.easing.Expo.get_easeInOut = function() {
	return new motion.easing.ExpoEaseInOut();
};
motion.easing.Expo.get_easeOut = function() {
	return new motion.easing.ExpoEaseOut();
};
motion.easing.ExpoEaseIn = function() {
};
$hxClasses["motion.easing.ExpoEaseIn"] = motion.easing.ExpoEaseIn;
motion.easing.ExpoEaseIn.__name__ = ["motion","easing","ExpoEaseIn"];
motion.easing.ExpoEaseIn.__interfaces__ = [motion.easing.IEasing];
motion.easing.ExpoEaseIn.prototype = {
	calculate: function(k) {
		if(k == 0) return 0; else return Math.pow(2,10 * (k - 1));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b; else return c * Math.pow(2,10 * (t / d - 1)) + b;
	}
	,__class__: motion.easing.ExpoEaseIn
};
motion.easing.ExpoEaseInOut = function() {
};
$hxClasses["motion.easing.ExpoEaseInOut"] = motion.easing.ExpoEaseInOut;
motion.easing.ExpoEaseInOut.__name__ = ["motion","easing","ExpoEaseInOut"];
motion.easing.ExpoEaseInOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.ExpoEaseInOut.prototype = {
	calculate: function(k) {
		if(k == 0) return 0;
		if(k == 1) return 1;
		if((k /= 0.5) < 1.0) return 0.5 * Math.pow(2,10 * (k - 1));
		return 0.5 * (2 - Math.pow(2,-10 * --k));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b;
		if(t == d) return b + c;
		if((t /= d / 2.0) < 1.0) return c / 2 * Math.pow(2,10 * (t - 1)) + b;
		return c / 2 * (2 - Math.pow(2,-10 * --t)) + b;
	}
	,__class__: motion.easing.ExpoEaseInOut
};
motion.easing.ExpoEaseOut = function() {
};
$hxClasses["motion.easing.ExpoEaseOut"] = motion.easing.ExpoEaseOut;
motion.easing.ExpoEaseOut.__name__ = ["motion","easing","ExpoEaseOut"];
motion.easing.ExpoEaseOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) return 1; else return 1 - Math.pow(2,-10 * k);
	}
	,ease: function(t,b,c,d) {
		if(t == d) return b + c; else return c * (1 - Math.pow(2,-10 * t / d)) + b;
	}
	,__class__: motion.easing.ExpoEaseOut
};
motion.easing.Quart = function() { };
$hxClasses["motion.easing.Quart"] = motion.easing.Quart;
motion.easing.Quart.__name__ = ["motion","easing","Quart"];
motion.easing.Quart.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion.easing.Quart.get_easeIn = function() {
	return new motion.easing.QuartEaseIn();
};
motion.easing.Quart.get_easeInOut = function() {
	return new motion.easing.QuartEaseInOut();
};
motion.easing.Quart.get_easeOut = function() {
	return new motion.easing.QuartEaseOut();
};
motion.easing.QuartEaseIn = function() {
};
$hxClasses["motion.easing.QuartEaseIn"] = motion.easing.QuartEaseIn;
motion.easing.QuartEaseIn.__name__ = ["motion","easing","QuartEaseIn"];
motion.easing.QuartEaseIn.__interfaces__ = [motion.easing.IEasing];
motion.easing.QuartEaseIn.prototype = {
	calculate: function(k) {
		return k * k * k * k;
	}
	,ease: function(t,b,c,d) {
		return c * (t /= d) * t * t * t + b;
	}
	,__class__: motion.easing.QuartEaseIn
};
motion.easing.QuartEaseInOut = function() {
};
$hxClasses["motion.easing.QuartEaseInOut"] = motion.easing.QuartEaseInOut;
motion.easing.QuartEaseInOut.__name__ = ["motion","easing","QuartEaseInOut"];
motion.easing.QuartEaseInOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.QuartEaseInOut.prototype = {
	calculate: function(k) {
		if((k *= 2) < 1) return 0.5 * k * k * k * k;
		return -0.5 * ((k -= 2) * k * k * k - 2);
	}
	,ease: function(t,b,c,d) {
		if((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;
		return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
	}
	,__class__: motion.easing.QuartEaseInOut
};
motion.easing.QuartEaseOut = function() {
};
$hxClasses["motion.easing.QuartEaseOut"] = motion.easing.QuartEaseOut;
motion.easing.QuartEaseOut.__name__ = ["motion","easing","QuartEaseOut"];
motion.easing.QuartEaseOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.QuartEaseOut.prototype = {
	calculate: function(k) {
		return -(--k * k * k * k - 1);
	}
	,ease: function(t,b,c,d) {
		return -c * ((t = t / d - 1) * t * t * t - 1) + b;
	}
	,__class__: motion.easing.QuartEaseOut
};
var nape = {};
nape.Config = function() {
};
$hxClasses["nape.Config"] = nape.Config;
nape.Config.__name__ = ["nape","Config"];
nape.Config.prototype = {
	__class__: nape.Config
};
nape.callbacks = {};
nape.callbacks.Callback = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.callbacks.Callback"] = nape.callbacks.Callback;
nape.callbacks.Callback.__name__ = ["nape","callbacks","Callback"];
nape.callbacks.Callback.prototype = {
	get_event: function() {
		return zpp_nape.callbacks.ZPP_Listener.events[this.zpp_inner.event];
	}
	,get_listener: function() {
		return this.zpp_inner.listener.outer;
	}
	,toString: function() {
		return "";
	}
	,__class__: nape.callbacks.Callback
	,__properties__: {get_listener:"get_listener",get_event:"get_event"}
};
nape.callbacks.BodyCallback = function() {
	nape.callbacks.Callback.call(this);
};
$hxClasses["nape.callbacks.BodyCallback"] = nape.callbacks.BodyCallback;
nape.callbacks.BodyCallback.__name__ = ["nape","callbacks","BodyCallback"];
nape.callbacks.BodyCallback.__super__ = nape.callbacks.Callback;
nape.callbacks.BodyCallback.prototype = $extend(nape.callbacks.Callback.prototype,{
	get_body: function() {
		return this.zpp_inner.body.outer;
	}
	,toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP"][this.zpp_inner.event - zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE];
		ret += ":" + this.zpp_inner.body.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape.callbacks.BodyCallback
	,__properties__: $extend(nape.callbacks.Callback.prototype.__properties__,{get_body:"get_body"})
});
nape.callbacks.Listener = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.callbacks.Listener"] = nape.callbacks.Listener;
nape.callbacks.Listener.__name__ = ["nape","callbacks","Listener"];
nape.callbacks.Listener.prototype = {
	get_type: function() {
		return zpp_nape.callbacks.ZPP_Listener.types[this.zpp_inner.type];
	}
	,get_event: function() {
		return zpp_nape.callbacks.ZPP_Listener.events[this.zpp_inner.event];
	}
	,set_event: function(event) {
		if(zpp_nape.callbacks.ZPP_Listener.events[this.zpp_inner.event] != event) {
			var xevent;
			if(event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
				return $r;
			}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN; else if(event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
				return $r;
			}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING; else if(event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
				return $r;
			}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_END; else if(event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
				return $r;
			}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP; else if(event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
				return $r;
			}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE; else if(event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_PRE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_PRE = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_PRE;
				return $r;
			}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_PRE; else xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK;
			this.zpp_inner.swapEvent(xevent);
		}
		return zpp_nape.callbacks.ZPP_Listener.events[this.zpp_inner.event];
	}
	,get_precedence: function() {
		return this.zpp_inner.precedence;
	}
	,set_precedence: function(precedence) {
		if(this.zpp_inner.precedence != precedence) {
			this.zpp_inner.precedence = precedence;
			this.zpp_inner.invalidate_precedence();
		}
		return this.zpp_inner.precedence;
	}
	,get_space: function() {
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,set_space: function(space) {
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if(this.zpp_inner.space != null) this.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(this);
			if(space != null) space.zpp_inner.wrap_listeners.add(this); else this.zpp_inner.space = null;
		}
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,toString: function() {
		var event = ["BEGIN","END","WAKE","SLEEP","BREAK","PRE","ONGOING"][this.zpp_inner.event];
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ListenerType_BODY) {
			var body = this.zpp_inner.body;
			return "BodyListener{" + event + "::" + Std.string(body.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ListenerType_CONSTRAINT) {
			var con = this.zpp_inner.constraint;
			return "ConstraintListener{" + event + "::" + Std.string(con.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else {
			var con1 = this.zpp_inner.interaction;
			var itype;
			var _g = con1.itype;
			switch(_g) {
			case zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION:
				itype = "COLLISION";
				break;
			case zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR:
				itype = "SENSOR";
				break;
			case zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID:
				itype = "FLUID";
				break;
			default:
				itype = "ALL";
			}
			return (this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ListenerType_INTERACTION?"InteractionListener{" + event + "#" + itype + "::" + Std.string(con1.outer_zni.zpp_inner_zn.options1.outer) + ":" + Std.string(con1.outer_zni.zpp_inner_zn.options2.outer) + "}":"PreListener{" + itype + "::" + Std.string(con1.outer_znp.zpp_inner_zn.options1.outer) + ":" + Std.string(con1.outer_znp.zpp_inner_zn.options2.outer) + "}") + " precedence=" + this.zpp_inner.precedence;
		}
	}
	,__class__: nape.callbacks.Listener
	,__properties__: {set_space:"set_space",get_space:"get_space",set_precedence:"set_precedence",get_precedence:"get_precedence",set_event:"set_event",get_event:"get_event",get_type:"get_type"}
};
nape.callbacks.BodyListener = function(event,options,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	nape.callbacks.Listener.call(this);
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP; else {
	}
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_BodyListener(zpp_nape.callbacks.ZPP_OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
$hxClasses["nape.callbacks.BodyListener"] = nape.callbacks.BodyListener;
nape.callbacks.BodyListener.__name__ = ["nape","callbacks","BodyListener"];
nape.callbacks.BodyListener.__super__ = nape.callbacks.Listener;
nape.callbacks.BodyListener.prototype = $extend(nape.callbacks.Listener.prototype,{
	get_options: function() {
		return this.zpp_inner_zn.options.outer;
	}
	,set_options: function(options) {
		this.zpp_inner_zn.options.set(options.zpp_inner);
		return this.zpp_inner_zn.options.outer;
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handler;
	}
	,set_handler: function(handler) {
		this.zpp_inner_zn.handler = handler;
		return this.zpp_inner_zn.handler;
	}
	,__class__: nape.callbacks.BodyListener
	,__properties__: $extend(nape.callbacks.Listener.prototype.__properties__,{set_handler:"set_handler",get_handler:"get_handler",set_options:"set_options",get_options:"get_options"})
});
nape.callbacks.CbEvent = function() {
};
$hxClasses["nape.callbacks.CbEvent"] = nape.callbacks.CbEvent;
nape.callbacks.CbEvent.__name__ = ["nape","callbacks","CbEvent"];
nape.callbacks.CbEvent.__properties__ = {get_PRE:"get_PRE",get_BREAK:"get_BREAK",get_SLEEP:"get_SLEEP",get_WAKE:"get_WAKE",get_END:"get_END",get_ONGOING:"get_ONGOING",get_BEGIN:"get_BEGIN"}
nape.callbacks.CbEvent.get_BEGIN = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
};
nape.callbacks.CbEvent.get_ONGOING = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
};
nape.callbacks.CbEvent.get_END = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_END;
};
nape.callbacks.CbEvent.get_WAKE = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
};
nape.callbacks.CbEvent.get_SLEEP = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
};
nape.callbacks.CbEvent.get_BREAK = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
};
nape.callbacks.CbEvent.get_PRE = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_PRE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_PRE = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_PRE;
};
nape.callbacks.CbEvent.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_PRE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_PRE = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_PRE;
			return $r;
		}(this))) return "PRE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
			return $r;
		}(this))) return "BEGIN"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
			return $r;
		}(this))) return "ONGOING"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
			return $r;
		}(this))) return "END"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
			return $r;
		}(this))) return "WAKE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
			return $r;
		}(this))) return "SLEEP"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
			return $r;
		}(this))) return "BREAK"; else return "";
	}
	,__class__: nape.callbacks.CbEvent
};
nape.callbacks.CbType = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.callbacks.ZPP_CbType();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.callbacks.CbType"] = nape.callbacks.CbType;
nape.callbacks.CbType.__name__ = ["nape","callbacks","CbType"];
nape.callbacks.CbType.__properties__ = {get_ANY_COMPOUND:"get_ANY_COMPOUND",get_ANY_SHAPE:"get_ANY_SHAPE",get_ANY_CONSTRAINT:"get_ANY_CONSTRAINT",get_ANY_BODY:"get_ANY_BODY"}
nape.callbacks.CbType.get_ANY_BODY = function() {
	return zpp_nape.callbacks.ZPP_CbType.ANY_BODY;
};
nape.callbacks.CbType.get_ANY_CONSTRAINT = function() {
	return zpp_nape.callbacks.ZPP_CbType.ANY_CONSTRAINT;
};
nape.callbacks.CbType.get_ANY_SHAPE = function() {
	return zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE;
};
nape.callbacks.CbType.get_ANY_COMPOUND = function() {
	return zpp_nape.callbacks.ZPP_CbType.ANY_COMPOUND;
};
nape.callbacks.CbType.prototype = {
	get_id: function() {
		return this.zpp_inner.id;
	}
	,including: function(includes) {
		return new nape.callbacks.OptionType(this).including(includes);
	}
	,excluding: function(excludes) {
		return new nape.callbacks.OptionType(this).excluding(excludes);
	}
	,get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_interactors: function() {
		if(this.zpp_inner.wrap_interactors == null) this.zpp_inner.wrap_interactors = zpp_nape.util.ZPP_InteractorList.get(this.zpp_inner.interactors,true);
		return this.zpp_inner.wrap_interactors;
	}
	,get_constraints: function() {
		if(this.zpp_inner.wrap_constraints == null) this.zpp_inner.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get(this.zpp_inner.constraints,true);
		return this.zpp_inner.wrap_constraints;
	}
	,toString: function() {
		if(this == zpp_nape.callbacks.ZPP_CbType.ANY_BODY) return "ANY_BODY"; else if(this == zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE) return "ANY_SHAPE"; else if(this == zpp_nape.callbacks.ZPP_CbType.ANY_COMPOUND) return "ANY_COMPOUND"; else if(this == zpp_nape.callbacks.ZPP_CbType.ANY_CONSTRAINT) return "ANY_CONSTRAINT"; else return "CbType#" + this.zpp_inner.id;
	}
	,__class__: nape.callbacks.CbType
	,__properties__: {get_constraints:"get_constraints",get_interactors:"get_interactors",get_userData:"get_userData",get_id:"get_id"}
};
nape.callbacks.CbTypeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.callbacks.CbTypeIterator"] = nape.callbacks.CbTypeIterator;
nape.callbacks.CbTypeIterator.__name__ = ["nape","callbacks","CbTypeIterator"];
nape.callbacks.CbTypeIterator.get = function(list) {
	var ret;
	if(nape.callbacks.CbTypeIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_CbTypeList.internal = true;
		var ret1 = new nape.callbacks.CbTypeIterator();
		zpp_nape.util.ZPP_CbTypeList.internal = false;
		ret = ret1;
	} else {
		var r = nape.callbacks.CbTypeIterator.zpp_pool;
		nape.callbacks.CbTypeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.callbacks.CbTypeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.callbacks.CbTypeIterator.zpp_pool;
			nape.callbacks.CbTypeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.callbacks.CbTypeIterator
};
nape.callbacks.CbTypeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_CbTypeList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.callbacks.CbTypeList"] = nape.callbacks.CbTypeList;
nape.callbacks.CbTypeList.__name__ = ["nape","callbacks","CbTypeList"];
nape.callbacks.CbTypeList.fromArray = function(array) {
	var ret = new nape.callbacks.CbTypeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.callbacks.CbTypeList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.callbacks.CbTypeIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.callbacks.CbTypeList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.callbacks.CbTypeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.callbacks.CbTypeIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.callbacks.CbTypeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape.callbacks.CbTypeIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.callbacks.CbTypeIterator.zpp_pool;
			nape.callbacks.CbTypeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.callbacks.CbTypeList
	,__properties__: {get_length:"get_length"}
};
nape.callbacks.ConstraintCallback = function() {
	nape.callbacks.Callback.call(this);
};
$hxClasses["nape.callbacks.ConstraintCallback"] = nape.callbacks.ConstraintCallback;
nape.callbacks.ConstraintCallback.__name__ = ["nape","callbacks","ConstraintCallback"];
nape.callbacks.ConstraintCallback.__super__ = nape.callbacks.Callback;
nape.callbacks.ConstraintCallback.prototype = $extend(nape.callbacks.Callback.prototype,{
	get_constraint: function() {
		return this.zpp_inner.constraint.outer;
	}
	,toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP","BREAK"][this.zpp_inner.event - zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE];
		ret += ":" + this.zpp_inner.constraint.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape.callbacks.ConstraintCallback
	,__properties__: $extend(nape.callbacks.Callback.prototype.__properties__,{get_constraint:"get_constraint"})
});
nape.callbacks.ConstraintListener = function(event,options,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	nape.callbacks.Listener.call(this);
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK; else {
	}
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_ConstraintListener(zpp_nape.callbacks.ZPP_OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
$hxClasses["nape.callbacks.ConstraintListener"] = nape.callbacks.ConstraintListener;
nape.callbacks.ConstraintListener.__name__ = ["nape","callbacks","ConstraintListener"];
nape.callbacks.ConstraintListener.__super__ = nape.callbacks.Listener;
nape.callbacks.ConstraintListener.prototype = $extend(nape.callbacks.Listener.prototype,{
	get_options: function() {
		return this.zpp_inner_zn.options.outer;
	}
	,set_options: function(options) {
		this.zpp_inner_zn.options.set(options.zpp_inner);
		return this.zpp_inner_zn.options.outer;
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handler;
	}
	,set_handler: function(handler) {
		this.zpp_inner_zn.handler = handler;
		return this.zpp_inner_zn.handler;
	}
	,__class__: nape.callbacks.ConstraintListener
	,__properties__: $extend(nape.callbacks.Listener.prototype.__properties__,{set_handler:"set_handler",get_handler:"get_handler",set_options:"set_options",get_options:"get_options"})
});
nape.callbacks.InteractionCallback = function() {
	nape.callbacks.Callback.call(this);
};
$hxClasses["nape.callbacks.InteractionCallback"] = nape.callbacks.InteractionCallback;
nape.callbacks.InteractionCallback.__name__ = ["nape","callbacks","InteractionCallback"];
nape.callbacks.InteractionCallback.__super__ = nape.callbacks.Callback;
nape.callbacks.InteractionCallback.prototype = $extend(nape.callbacks.Callback.prototype,{
	get_int1: function() {
		return this.zpp_inner.int1.outer_i;
	}
	,get_int2: function() {
		return this.zpp_inner.int2.outer_i;
	}
	,get_arbiters: function() {
		return this.zpp_inner.wrap_arbiters;
	}
	,toString: function() {
		var ret = "Cb:";
		ret += ["BEGIN","END","","","","","ONGOING"][this.zpp_inner.event];
		ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
		ret += " : " + this.zpp_inner.wrap_arbiters.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape.callbacks.InteractionCallback
	,__properties__: $extend(nape.callbacks.Callback.prototype.__properties__,{get_arbiters:"get_arbiters",get_int2:"get_int2",get_int1:"get_int1"})
});
nape.callbacks.InteractionListener = function(event,interactionType,options1,options2,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	nape.callbacks.Listener.call(this);
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_END; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING; else {
	}
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_InteractionListener(zpp_nape.callbacks.ZPP_OptionType.argument(options1),zpp_nape.callbacks.ZPP_OptionType.argument(options2),xevent,zpp_nape.util.ZPP_Flags.id_ListenerType_INTERACTION);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zni = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.handleri = handler;
	this.set_interactionType(interactionType);
};
$hxClasses["nape.callbacks.InteractionListener"] = nape.callbacks.InteractionListener;
nape.callbacks.InteractionListener.__name__ = ["nape","callbacks","InteractionListener"];
nape.callbacks.InteractionListener.__super__ = nape.callbacks.Listener;
nape.callbacks.InteractionListener.prototype = $extend(nape.callbacks.Listener.prototype,{
	get_options1: function() {
		return this.zpp_inner_zn.options1.outer;
	}
	,set_options1: function(options1) {
		this.zpp_inner_zn.options1.set(options1.zpp_inner);
		return this.zpp_inner_zn.options1.outer;
	}
	,get_options2: function() {
		return this.zpp_inner_zn.options2.outer;
	}
	,set_options2: function(options2) {
		this.zpp_inner_zn.options2.set(options2.zpp_inner);
		return this.zpp_inner_zn.options2.outer;
	}
	,get_interactionType: function() {
		var ret = this.zpp_inner_zn.itype;
		if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION) {
			if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
		} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR) {
			if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
		} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID) {
			if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
		} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
			if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_ANY;
		} else return null;
	}
	,set_interactionType: function(interactionType) {
		if(this.get_interactionType() != interactionType) {
			var xtype;
			if(interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
				return $r;
			}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION; else if(interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
				return $r;
			}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR; else if(interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
				return $r;
			}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID; else xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_ANY;
			this.zpp_inner_zn.itype = xtype;
		}
		return this.get_interactionType();
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handleri;
	}
	,set_handler: function(handler) {
		this.zpp_inner_zn.handleri = handler;
		return this.zpp_inner_zn.handleri;
	}
	,get_allowSleepingCallbacks: function() {
		return this.zpp_inner_zn.allowSleepingCallbacks;
	}
	,set_allowSleepingCallbacks: function(allowSleepingCallbacks) {
		this.zpp_inner_zn.allowSleepingCallbacks = allowSleepingCallbacks;
		return this.zpp_inner_zn.allowSleepingCallbacks;
	}
	,__class__: nape.callbacks.InteractionListener
	,__properties__: $extend(nape.callbacks.Listener.prototype.__properties__,{set_allowSleepingCallbacks:"set_allowSleepingCallbacks",get_allowSleepingCallbacks:"get_allowSleepingCallbacks",set_handler:"set_handler",get_handler:"get_handler",set_interactionType:"set_interactionType",get_interactionType:"get_interactionType",set_options2:"set_options2",get_options2:"get_options2",set_options1:"set_options1",get_options1:"get_options1"})
});
nape.callbacks.InteractionType = function() {
};
$hxClasses["nape.callbacks.InteractionType"] = nape.callbacks.InteractionType;
nape.callbacks.InteractionType.__name__ = ["nape","callbacks","InteractionType"];
nape.callbacks.InteractionType.__properties__ = {get_ANY:"get_ANY",get_FLUID:"get_FLUID",get_SENSOR:"get_SENSOR",get_COLLISION:"get_COLLISION"}
nape.callbacks.InteractionType.get_COLLISION = function() {
	if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
};
nape.callbacks.InteractionType.get_SENSOR = function() {
	if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
};
nape.callbacks.InteractionType.get_FLUID = function() {
	if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
};
nape.callbacks.InteractionType.get_ANY = function() {
	if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InteractionType_ANY;
};
nape.callbacks.InteractionType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
			return $r;
		}(this))) return "COLLISION"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
			return $r;
		}(this))) return "SENSOR"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
			return $r;
		}(this))) return "FLUID"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_ANY;
			return $r;
		}(this))) return "ANY"; else return "";
	}
	,__class__: nape.callbacks.InteractionType
};
nape.callbacks.ListenerIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.callbacks.ListenerIterator"] = nape.callbacks.ListenerIterator;
nape.callbacks.ListenerIterator.__name__ = ["nape","callbacks","ListenerIterator"];
nape.callbacks.ListenerIterator.get = function(list) {
	var ret;
	if(nape.callbacks.ListenerIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ListenerList.internal = true;
		var ret1 = new nape.callbacks.ListenerIterator();
		zpp_nape.util.ZPP_ListenerList.internal = false;
		ret = ret1;
	} else {
		var r = nape.callbacks.ListenerIterator.zpp_pool;
		nape.callbacks.ListenerIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.callbacks.ListenerIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.callbacks.ListenerIterator.zpp_pool;
			nape.callbacks.ListenerIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.callbacks.ListenerIterator
};
nape.callbacks.ListenerList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ListenerList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.callbacks.ListenerList"] = nape.callbacks.ListenerList;
nape.callbacks.ListenerList.__name__ = ["nape","callbacks","ListenerList"];
nape.callbacks.ListenerList.fromArray = function(array) {
	var ret = new nape.callbacks.ListenerList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.callbacks.ListenerList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.callbacks.ListenerIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.callbacks.ListenerList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.callbacks.ListenerIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.callbacks.ListenerIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.callbacks.ListenerIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape.callbacks.ListenerIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.callbacks.ListenerIterator.zpp_pool;
			nape.callbacks.ListenerIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.callbacks.ListenerList
	,__properties__: {get_length:"get_length"}
};
nape.callbacks.ListenerType = function() {
};
$hxClasses["nape.callbacks.ListenerType"] = nape.callbacks.ListenerType;
nape.callbacks.ListenerType.__name__ = ["nape","callbacks","ListenerType"];
nape.callbacks.ListenerType.__properties__ = {get_PRE:"get_PRE",get_INTERACTION:"get_INTERACTION",get_CONSTRAINT:"get_CONSTRAINT",get_BODY:"get_BODY"}
nape.callbacks.ListenerType.get_BODY = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_BODY == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_BODY = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_BODY;
};
nape.callbacks.ListenerType.get_CONSTRAINT = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT;
};
nape.callbacks.ListenerType.get_INTERACTION = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION;
};
nape.callbacks.ListenerType.get_PRE = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_PRE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_PRE = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_PRE;
};
nape.callbacks.ListenerType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ListenerType_BODY == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ListenerType_BODY = new nape.callbacks.ListenerType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ListenerType_BODY;
			return $r;
		}(this))) return "BODY"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = new nape.callbacks.ListenerType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT;
			return $r;
		}(this))) return "CONSTRAINT"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = new nape.callbacks.ListenerType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION;
			return $r;
		}(this))) return "INTERACTION"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ListenerType_PRE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ListenerType_PRE = new nape.callbacks.ListenerType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ListenerType_PRE;
			return $r;
		}(this))) return "PRE"; else return "";
	}
	,__class__: nape.callbacks.ListenerType
};
nape.callbacks.OptionType = function(includes,excludes) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.callbacks.ZPP_OptionType();
	this.zpp_inner.outer = this;
	if(includes != null) this.including(includes);
	if(excludes != null) this.excluding(excludes);
};
$hxClasses["nape.callbacks.OptionType"] = nape.callbacks.OptionType;
nape.callbacks.OptionType.__name__ = ["nape","callbacks","OptionType"];
nape.callbacks.OptionType.prototype = {
	get_includes: function() {
		if(this.zpp_inner.wrap_includes == null) this.zpp_inner.setup_includes();
		return this.zpp_inner.wrap_includes;
	}
	,get_excludes: function() {
		if(this.zpp_inner.wrap_excludes == null) this.zpp_inner.setup_excludes();
		return this.zpp_inner.wrap_excludes;
	}
	,including: function(includes) {
		this.zpp_inner.append(this.zpp_inner.includes,includes);
		return this;
	}
	,excluding: function(excludes) {
		this.zpp_inner.append(this.zpp_inner.excludes,excludes);
		return this;
	}
	,toString: function() {
		var inc = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_includes == null) $this.zpp_inner.setup_includes();
			$r = $this.zpp_inner.wrap_includes;
			return $r;
		}(this))).toString();
		var exc = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_excludes == null) $this.zpp_inner.setup_excludes();
			$r = $this.zpp_inner.wrap_excludes;
			return $r;
		}(this))).toString();
		return "@{" + inc + " excluding " + exc + "}";
	}
	,__class__: nape.callbacks.OptionType
	,__properties__: {get_excludes:"get_excludes",get_includes:"get_includes"}
};
nape.callbacks.PreCallback = function() {
	nape.callbacks.Callback.call(this);
};
$hxClasses["nape.callbacks.PreCallback"] = nape.callbacks.PreCallback;
nape.callbacks.PreCallback.__name__ = ["nape","callbacks","PreCallback"];
nape.callbacks.PreCallback.__super__ = nape.callbacks.Callback;
nape.callbacks.PreCallback.prototype = $extend(nape.callbacks.Callback.prototype,{
	get_arbiter: function() {
		return this.zpp_inner.pre_arbiter.wrapper();
	}
	,get_int1: function() {
		return this.zpp_inner.int1.outer_i;
	}
	,get_int2: function() {
		return this.zpp_inner.int2.outer_i;
	}
	,get_swapped: function() {
		return this.zpp_inner.pre_swapped;
	}
	,toString: function() {
		var ret = "Cb:PRE:";
		ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
		ret += " : " + this.zpp_inner.pre_arbiter.wrapper().toString();
		ret += " : listnener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape.callbacks.PreCallback
	,__properties__: $extend(nape.callbacks.Callback.prototype.__properties__,{get_swapped:"get_swapped",get_int2:"get_int2",get_int1:"get_int1",get_arbiter:"get_arbiter"})
});
nape.callbacks.PreFlag = function() {
};
$hxClasses["nape.callbacks.PreFlag"] = nape.callbacks.PreFlag;
nape.callbacks.PreFlag.__name__ = ["nape","callbacks","PreFlag"];
nape.callbacks.PreFlag.__properties__ = {get_IGNORE_ONCE:"get_IGNORE_ONCE",get_ACCEPT_ONCE:"get_ACCEPT_ONCE",get_IGNORE:"get_IGNORE",get_ACCEPT:"get_ACCEPT"}
nape.callbacks.PreFlag.get_ACCEPT = function() {
	if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
};
nape.callbacks.PreFlag.get_IGNORE = function() {
	if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
};
nape.callbacks.PreFlag.get_ACCEPT_ONCE = function() {
	if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
};
nape.callbacks.PreFlag.get_IGNORE_ONCE = function() {
	if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE = new nape.callbacks.PreFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE;
};
nape.callbacks.PreFlag.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
			return $r;
		}(this))) return "ACCEPT"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
			return $r;
		}(this))) return "IGNORE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
			return $r;
		}(this))) return "ACCEPT_ONCE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE;
			return $r;
		}(this))) return "IGNORE_ONCE"; else return "";
	}
	,__class__: nape.callbacks.PreFlag
};
nape.callbacks.PreListener = function(interactionType,options1,options2,handler,precedence,pure) {
	if(pure == null) pure = false;
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	nape.callbacks.Listener.call(this);
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_InteractionListener(zpp_nape.callbacks.ZPP_OptionType.argument(options1),zpp_nape.callbacks.ZPP_OptionType.argument(options2),zpp_nape.util.ZPP_Flags.id_CbEvent_PRE,zpp_nape.util.ZPP_Flags.id_ListenerType_PRE);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_znp = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.pure = pure;
	this.zpp_inner_zn.handlerp = handler;
	this.set_interactionType(interactionType);
};
$hxClasses["nape.callbacks.PreListener"] = nape.callbacks.PreListener;
nape.callbacks.PreListener.__name__ = ["nape","callbacks","PreListener"];
nape.callbacks.PreListener.__super__ = nape.callbacks.Listener;
nape.callbacks.PreListener.prototype = $extend(nape.callbacks.Listener.prototype,{
	get_options1: function() {
		return this.zpp_inner_zn.options1.outer;
	}
	,set_options1: function(options1) {
		this.zpp_inner_zn.options1.set(options1.zpp_inner);
		return this.zpp_inner_zn.options1.outer;
	}
	,get_options2: function() {
		return this.zpp_inner_zn.options2.outer;
	}
	,set_options2: function(options2) {
		this.zpp_inner_zn.options2.set(options2.zpp_inner);
		return this.zpp_inner_zn.options2.outer;
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handlerp;
	}
	,set_handler: function(handler) {
		this.zpp_inner_zn.handlerp = handler;
		this.zpp_inner_zn.wake();
		return this.zpp_inner_zn.handlerp;
	}
	,get_pure: function() {
		return this.zpp_inner_zn.pure;
	}
	,set_pure: function(pure) {
		if(!pure) this.zpp_inner_zn.wake();
		this.zpp_inner_zn.pure = pure;
		return this.zpp_inner_zn.pure;
	}
	,get_interactionType: function() {
		var ret = this.zpp_inner_zn.itype;
		if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION) {
			if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
		} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR) {
			if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
		} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID) {
			if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
		} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
			if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_ANY;
		} else return null;
	}
	,set_interactionType: function(interactionType) {
		if(this.get_interactionType() != interactionType) {
			var xtype;
			if(interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
				return $r;
			}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION; else if(interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
				return $r;
			}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR; else if(interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
				return $r;
			}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID; else xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_ANY;
			this.zpp_inner_zn.itype = xtype;
		}
		return this.get_interactionType();
	}
	,__class__: nape.callbacks.PreListener
	,__properties__: $extend(nape.callbacks.Listener.prototype.__properties__,{set_interactionType:"set_interactionType",get_interactionType:"get_interactionType",set_pure:"set_pure",get_pure:"get_pure",set_handler:"set_handler",get_handler:"get_handler",set_options2:"set_options2",get_options2:"get_options2",set_options1:"set_options1",get_options1:"get_options1"})
});
nape.constraint = {};
nape.constraint.Constraint = function() {
	this.debugDraw = true;
	this.zpp_inner.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_CONSTRAINT.zpp_inner);
};
$hxClasses["nape.constraint.Constraint"] = nape.constraint.Constraint;
nape.constraint.Constraint.__name__ = ["nape","constraint","Constraint"];
nape.constraint.Constraint.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_compound: function() {
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,set_compound: function(compound) {
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
			if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_constraints.remove(this);
			if(compound != null) compound.zpp_inner.wrap_constraints.add(this);
		}
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,get_space: function() {
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,set_space: function(space) {
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if(this.zpp_inner.component != null) this.zpp_inner.component.woken = false;
			this.zpp_inner.clearcache();
			if(this.zpp_inner.space != null) this.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(this);
			if(space != null) space.zpp_inner.wrap_constraints.add(this); else this.zpp_inner.space = null;
		}
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,get_isSleeping: function() {
		return this.zpp_inner.component.sleeping;
	}
	,get_active: function() {
		return this.zpp_inner.active;
	}
	,set_active: function(active) {
		if(this.zpp_inner.active != active) {
			if(this.zpp_inner.component != null) this.zpp_inner.component.woken = false;
			this.zpp_inner.clearcache();
			if(active) {
				this.zpp_inner.active = active;
				this.zpp_inner.activate();
				if(this.zpp_inner.space != null) {
					if(this.zpp_inner.component != null) this.zpp_inner.component.sleeping = true;
					this.zpp_inner.space.wake_constraint(this.zpp_inner,true);
				}
			} else {
				if(this.zpp_inner.space != null) {
					this.zpp_inner.wake();
					this.zpp_inner.space.live_constraints.remove(this.zpp_inner);
				}
				this.zpp_inner.active = active;
				this.zpp_inner.deactivate();
			}
		}
		return this.zpp_inner.active;
	}
	,get_ignore: function() {
		return this.zpp_inner.ignore;
	}
	,set_ignore: function(ignore) {
		if(this.zpp_inner.ignore != ignore) {
			this.zpp_inner.ignore = ignore;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.ignore;
	}
	,get_stiff: function() {
		return this.zpp_inner.stiff;
	}
	,set_stiff: function(stiff) {
		if(this.zpp_inner.stiff != stiff) {
			this.zpp_inner.stiff = stiff;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.stiff;
	}
	,get_frequency: function() {
		return this.zpp_inner.frequency;
	}
	,set_frequency: function(frequency) {
		if(this.zpp_inner.frequency != frequency) {
			this.zpp_inner.frequency = frequency;
			if(!this.zpp_inner.stiff) this.zpp_inner.wake();
		}
		return this.zpp_inner.frequency;
	}
	,get_damping: function() {
		return this.zpp_inner.damping;
	}
	,set_damping: function(damping) {
		if(this.zpp_inner.damping != damping) {
			this.zpp_inner.damping = damping;
			if(!this.zpp_inner.stiff) this.zpp_inner.wake();
		}
		return this.zpp_inner.damping;
	}
	,get_maxForce: function() {
		return this.zpp_inner.maxForce;
	}
	,set_maxForce: function(maxForce) {
		if(this.zpp_inner.maxForce != maxForce) {
			this.zpp_inner.maxForce = maxForce;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.maxForce;
	}
	,get_maxError: function() {
		return this.zpp_inner.maxError;
	}
	,set_maxError: function(maxError) {
		if(this.zpp_inner.maxError != maxError) {
			this.zpp_inner.maxError = maxError;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.maxError;
	}
	,get_breakUnderForce: function() {
		return this.zpp_inner.breakUnderForce;
	}
	,set_breakUnderForce: function(breakUnderForce) {
		if(this.zpp_inner.breakUnderForce != breakUnderForce) {
			this.zpp_inner.breakUnderForce = breakUnderForce;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.breakUnderForce;
	}
	,get_breakUnderError: function() {
		return this.zpp_inner.breakUnderError;
	}
	,set_breakUnderError: function(breakUnderError) {
		if(this.zpp_inner.breakUnderError != breakUnderError) {
			this.zpp_inner.breakUnderError = breakUnderError;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.breakUnderError;
	}
	,get_removeOnBreak: function() {
		return this.zpp_inner.removeOnBreak;
	}
	,set_removeOnBreak: function(removeOnBreak) {
		this.zpp_inner.removeOnBreak = removeOnBreak;
		return this.zpp_inner.removeOnBreak;
	}
	,impulse: function() {
		return null;
	}
	,bodyImpulse: function(body) {
		return null;
	}
	,visitBodies: function(lambda) {
	}
	,get_cbTypes: function() {
		if(this.zpp_inner.wrap_cbTypes == null) this.zpp_inner.setupcbTypes();
		return this.zpp_inner.wrap_cbTypes;
	}
	,toString: function() {
		return "{Constraint}";
	}
	,copy: function() {
		return this.zpp_inner.copy();
	}
	,__class__: nape.constraint.Constraint
	,__properties__: {get_cbTypes:"get_cbTypes",set_removeOnBreak:"set_removeOnBreak",get_removeOnBreak:"get_removeOnBreak",set_breakUnderError:"set_breakUnderError",get_breakUnderError:"get_breakUnderError",set_breakUnderForce:"set_breakUnderForce",get_breakUnderForce:"get_breakUnderForce",set_maxError:"set_maxError",get_maxError:"get_maxError",set_maxForce:"set_maxForce",get_maxForce:"get_maxForce",set_damping:"set_damping",get_damping:"get_damping",set_frequency:"set_frequency",get_frequency:"get_frequency",set_stiff:"set_stiff",get_stiff:"get_stiff",set_ignore:"set_ignore",get_ignore:"get_ignore",set_active:"set_active",get_active:"get_active",get_isSleeping:"get_isSleeping",set_space:"set_space",get_space:"get_space",set_compound:"set_compound",get_compound:"get_compound",get_userData:"get_userData"}
};
nape.constraint.AngleJoint = function(body1,body2,jointMin,jointMax,ratio) {
	if(ratio == null) ratio = 1.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_AngleJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape.constraint.Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	this.zpp_inner.immutable_midstep("AngleJoint::jointMin");
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("AngleJoint::jointMax");
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
	this.zpp_inner.immutable_midstep("AngleJoint::ratio");
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
};
$hxClasses["nape.constraint.AngleJoint"] = nape.constraint.AngleJoint;
nape.constraint.AngleJoint.__name__ = ["nape","constraint","AngleJoint"];
nape.constraint.AngleJoint.__super__ = nape.constraint.Constraint;
nape.constraint.AngleJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("AngleJoint::jointMin");
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("AngleJoint::jointMax");
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("AngleJoint::ratio");
		if(this.zpp_inner_zn.ratio != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.ratio;
	}
	,isSlack: function() {
		return this.zpp_inner_zn.is_slack();
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(1,1);
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(0,0,0); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape.constraint.AngleJoint
	,__properties__: $extend(nape.constraint.Constraint.prototype.__properties__,{set_ratio:"set_ratio",get_ratio:"get_ratio",set_jointMax:"set_jointMax",get_jointMax:"get_jointMax",set_jointMin:"set_jointMin",get_jointMin:"get_jointMin",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
nape.constraint.ConstraintIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.constraint.ConstraintIterator"] = nape.constraint.ConstraintIterator;
nape.constraint.ConstraintIterator.__name__ = ["nape","constraint","ConstraintIterator"];
nape.constraint.ConstraintIterator.get = function(list) {
	var ret;
	if(nape.constraint.ConstraintIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ConstraintList.internal = true;
		var ret1 = new nape.constraint.ConstraintIterator();
		zpp_nape.util.ZPP_ConstraintList.internal = false;
		ret = ret1;
	} else {
		var r = nape.constraint.ConstraintIterator.zpp_pool;
		nape.constraint.ConstraintIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.constraint.ConstraintIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.constraint.ConstraintIterator.zpp_pool;
			nape.constraint.ConstraintIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.constraint.ConstraintIterator
};
nape.constraint.ConstraintList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ConstraintList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.constraint.ConstraintList"] = nape.constraint.ConstraintList;
nape.constraint.ConstraintList.__name__ = ["nape","constraint","ConstraintList"];
nape.constraint.ConstraintList.fromArray = function(array) {
	var ret = new nape.constraint.ConstraintList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.constraint.ConstraintList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.constraint.ConstraintIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.constraint.ConstraintList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.constraint.ConstraintIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.constraint.ConstraintIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.constraint.ConstraintIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape.constraint.ConstraintIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.constraint.ConstraintIterator.zpp_pool;
			nape.constraint.ConstraintIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.constraint.ConstraintList
	,__properties__: {get_length:"get_length"}
};
nape.constraint.DistanceJoint = function(body1,body2,anchor1,anchor2,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_DistanceJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape.constraint.Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMin");
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMax");
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
$hxClasses["nape.constraint.DistanceJoint"] = nape.constraint.DistanceJoint;
nape.constraint.DistanceJoint.__name__ = ["nape","constraint","DistanceJoint"];
nape.constraint.DistanceJoint.__super__ = nape.constraint.Constraint;
nape.constraint.DistanceJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("DistanceJoint::jointMin");
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("DistanceJoint::jointMax");
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,isSlack: function() {
		return this.zpp_inner_zn.slack;
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(1,1);
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape.constraint.DistanceJoint
	,__properties__: $extend(nape.constraint.Constraint.prototype.__properties__,{set_jointMax:"set_jointMax",get_jointMax:"get_jointMax",set_jointMin:"set_jointMin",get_jointMin:"get_jointMin",set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
nape.constraint.LineJoint = function(body1,body2,anchor1,anchor2,direction,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_LineJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape.constraint.Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_n == null) $this.zpp_inner_zn.setup_n();
		$r = $this.zpp_inner_zn.wrap_n;
		return $r;
	}(this))).set(direction);
	if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
	this.zpp_inner_zn.wrap_n;
	this.zpp_inner.immutable_midstep("LineJoint::jointMin");
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("LineJoint::jointMax");
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
$hxClasses["nape.constraint.LineJoint"] = nape.constraint.LineJoint;
nape.constraint.LineJoint.__name__ = ["nape","constraint","LineJoint"];
nape.constraint.LineJoint.__super__ = nape.constraint.Constraint;
nape.constraint.LineJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,get_direction: function() {
		if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
		return this.zpp_inner_zn.wrap_n;
	}
	,set_direction: function(direction) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_n == null) $this.zpp_inner_zn.setup_n();
			$r = $this.zpp_inner_zn.wrap_n;
			return $r;
		}(this))).set(direction);
		if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
		return this.zpp_inner_zn.wrap_n;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("LineJoint::jointMin");
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("LineJoint::jointMax");
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(2,1);
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape.constraint.LineJoint
	,__properties__: $extend(nape.constraint.Constraint.prototype.__properties__,{set_jointMax:"set_jointMax",get_jointMax:"get_jointMax",set_jointMin:"set_jointMin",get_jointMin:"get_jointMin",set_direction:"set_direction",get_direction:"get_direction",set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
nape.constraint.MotorJoint = function(body1,body2,rate,ratio) {
	if(ratio == null) ratio = 1.0;
	if(rate == null) rate = 0.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_MotorJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape.constraint.Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	this.zpp_inner.immutable_midstep("MotorJoint::rate");
	if(this.zpp_inner_zn.rate != rate) {
		this.zpp_inner_zn.rate = rate;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.rate;
	this.zpp_inner.immutable_midstep("MotorJoint::ratio");
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
};
$hxClasses["nape.constraint.MotorJoint"] = nape.constraint.MotorJoint;
nape.constraint.MotorJoint.__name__ = ["nape","constraint","MotorJoint"];
nape.constraint.MotorJoint.__super__ = nape.constraint.Constraint;
nape.constraint.MotorJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("MotorJoint::ratio");
		if(this.zpp_inner_zn.ratio != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.ratio;
	}
	,get_rate: function() {
		return this.zpp_inner_zn.rate;
	}
	,set_rate: function(rate) {
		this.zpp_inner.immutable_midstep("MotorJoint::rate");
		if(this.zpp_inner_zn.rate != rate) {
			this.zpp_inner_zn.rate = rate;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.rate;
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(1,1);
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape.constraint.MotorJoint
	,__properties__: $extend(nape.constraint.Constraint.prototype.__properties__,{set_rate:"set_rate",get_rate:"get_rate",set_ratio:"set_ratio",get_ratio:"get_ratio",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
nape.constraint.PivotJoint = function(body1,body2,anchor1,anchor2) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_PivotJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape.constraint.Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
};
$hxClasses["nape.constraint.PivotJoint"] = nape.constraint.PivotJoint;
nape.constraint.PivotJoint.__name__ = ["nape","constraint","PivotJoint"];
nape.constraint.PivotJoint.__super__ = nape.constraint.Constraint;
nape.constraint.PivotJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(2,1);
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape.constraint.PivotJoint
	,__properties__: $extend(nape.constraint.Constraint.prototype.__properties__,{set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
nape.constraint.PulleyJoint = function(body1,body2,body3,body4,anchor1,anchor2,anchor3,anchor4,jointMin,jointMax,ratio) {
	if(ratio == null) ratio = 1.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_PulleyJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape.constraint.Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	this.set_body3(body3);
	this.set_body4(body4);
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a3 == null) $this.zpp_inner_zn.setup_a3();
		$r = $this.zpp_inner_zn.wrap_a3;
		return $r;
	}(this))).set(anchor3);
	if(this.zpp_inner_zn.wrap_a3 == null) this.zpp_inner_zn.setup_a3();
	this.zpp_inner_zn.wrap_a3;
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a4 == null) $this.zpp_inner_zn.setup_a4();
		$r = $this.zpp_inner_zn.wrap_a4;
		return $r;
	}(this))).set(anchor4);
	if(this.zpp_inner_zn.wrap_a4 == null) this.zpp_inner_zn.setup_a4();
	this.zpp_inner_zn.wrap_a4;
	this.zpp_inner.immutable_midstep("PulleyJoint::ratio");
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMin");
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMax");
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
$hxClasses["nape.constraint.PulleyJoint"] = nape.constraint.PulleyJoint;
nape.constraint.PulleyJoint.__name__ = ["nape","constraint","PulleyJoint"];
nape.constraint.PulleyJoint.__super__ = nape.constraint.Constraint;
nape.constraint.PulleyJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1 && this.zpp_inner_zn.b3 != inbody1 && this.zpp_inner_zn.b4 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2 && this.zpp_inner_zn.b3 != inbody2 && this.zpp_inner_zn.b4 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_body3: function() {
		if(this.zpp_inner_zn.b3 == null) return null; else return this.zpp_inner_zn.b3.outer;
	}
	,set_body3: function(body3) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body3");
		var inbody3;
		if(body3 == null) inbody3 = null; else inbody3 = body3.zpp_inner;
		if(inbody3 != this.zpp_inner_zn.b3) {
			if(this.zpp_inner_zn.b3 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b3) {
					if(this.zpp_inner_zn.b3 != null) this.zpp_inner_zn.b3.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b3.wake();
			}
			this.zpp_inner_zn.b3 = inbody3;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody3 != null && this.zpp_inner_zn.b1 != inbody3 && this.zpp_inner_zn.b2 != inbody3 && this.zpp_inner_zn.b4 != inbody3) {
				if(inbody3 != null) inbody3.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody3 != null) inbody3.wake();
			}
		}
		if(this.zpp_inner_zn.b3 == null) return null; else return this.zpp_inner_zn.b3.outer;
	}
	,get_body4: function() {
		if(this.zpp_inner_zn.b4 == null) return null; else return this.zpp_inner_zn.b4.outer;
	}
	,set_body4: function(body4) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body4");
		var inbody4;
		if(body4 == null) inbody4 = null; else inbody4 = body4.zpp_inner;
		if(inbody4 != this.zpp_inner_zn.b4) {
			if(this.zpp_inner_zn.b4 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b4) {
					if(this.zpp_inner_zn.b4 != null) this.zpp_inner_zn.b4.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b4.wake();
			}
			this.zpp_inner_zn.b4 = inbody4;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody4 != null && this.zpp_inner_zn.b1 != inbody4 && this.zpp_inner_zn.b2 != inbody4 && this.zpp_inner_zn.b3 != inbody4) {
				if(inbody4 != null) inbody4.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody4 != null) inbody4.wake();
			}
		}
		if(this.zpp_inner_zn.b4 == null) return null; else return this.zpp_inner_zn.b4.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,get_anchor3: function() {
		if(this.zpp_inner_zn.wrap_a3 == null) this.zpp_inner_zn.setup_a3();
		return this.zpp_inner_zn.wrap_a3;
	}
	,set_anchor3: function(anchor3) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a3 == null) $this.zpp_inner_zn.setup_a3();
			$r = $this.zpp_inner_zn.wrap_a3;
			return $r;
		}(this))).set(anchor3);
		if(this.zpp_inner_zn.wrap_a3 == null) this.zpp_inner_zn.setup_a3();
		return this.zpp_inner_zn.wrap_a3;
	}
	,get_anchor4: function() {
		if(this.zpp_inner_zn.wrap_a4 == null) this.zpp_inner_zn.setup_a4();
		return this.zpp_inner_zn.wrap_a4;
	}
	,set_anchor4: function(anchor4) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a4 == null) $this.zpp_inner_zn.setup_a4();
			$r = $this.zpp_inner_zn.wrap_a4;
			return $r;
		}(this))).set(anchor4);
		if(this.zpp_inner_zn.wrap_a4 == null) this.zpp_inner_zn.setup_a4();
		return this.zpp_inner_zn.wrap_a4;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("PulleyJoint::jointMin");
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("PulleyJoint::jointMax");
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("PulleyJoint::ratio");
		if(this.zpp_inner_zn.ratio != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.ratio;
	}
	,isSlack: function() {
		return this.zpp_inner_zn.slack;
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(1,1);
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
		if((this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != null && (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) lambda(this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer);
		if((this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != null && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer)) lambda(this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer);
	}
	,__class__: nape.constraint.PulleyJoint
	,__properties__: $extend(nape.constraint.Constraint.prototype.__properties__,{set_ratio:"set_ratio",get_ratio:"get_ratio",set_jointMax:"set_jointMax",get_jointMax:"get_jointMax",set_jointMin:"set_jointMin",get_jointMin:"get_jointMin",set_anchor4:"set_anchor4",get_anchor4:"get_anchor4",set_anchor3:"set_anchor3",get_anchor3:"get_anchor3",set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body4:"set_body4",get_body4:"get_body4",set_body3:"set_body3",get_body3:"get_body3",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
nape.constraint.UserConstraint = function(dimensions,velocityOnly) {
	if(velocityOnly == null) velocityOnly = false;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_UserConstraint(dimensions,velocityOnly);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape.constraint.Constraint.call(this);
};
$hxClasses["nape.constraint.UserConstraint"] = nape.constraint.UserConstraint;
nape.constraint.UserConstraint.__name__ = ["nape","constraint","UserConstraint"];
nape.constraint.UserConstraint.__super__ = nape.constraint.Constraint;
nape.constraint.UserConstraint.prototype = $extend(nape.constraint.Constraint.prototype,{
	__bindVec2: function() {
		var ret = new nape.geom.Vec2();
		ret.zpp_inner._inuse = true;
		ret.zpp_inner._invalidate = ($_=this.zpp_inner_zn,$bind($_,$_.bindVec2_invalidate));
		return ret;
	}
	,__copy: function() {
		return null;
	}
	,__broken: function() {
	}
	,__validate: function() {
	}
	,__draw: function(debug) {
	}
	,__prepare: function() {
	}
	,__position: function(err) {
	}
	,__velocity: function(err) {
	}
	,__eff_mass: function(eff) {
	}
	,__clamp: function(jAcc) {
	}
	,__impulse: function(imp,body,out) {
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(this.zpp_inner_zn.dim,1);
		var _g1 = 0;
		var _g = this.zpp_inner_zn.dim;
		while(_g1 < _g) {
			var i = _g1++;
			ret.zpp_inner.x[i * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc[i];
		}
		return ret;
	}
	,bodyImpulse: function(body) {
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		var i = 0;
		var nbodies = this.zpp_inner_zn.bodies.length;
		while(i < nbodies) {
			var b = this.zpp_inner_zn.bodies[i];
			if(b.body != null) {
				var found = false;
				var _g = i + 1;
				while(_g < nbodies) {
					var j = _g++;
					var c = this.zpp_inner_zn.bodies[j];
					if(c.body == b.body) {
						found = true;
						break;
					}
				}
				if(!found) lambda(b.body.outer);
			}
			i++;
		}
	}
	,__invalidate: function() {
		this.zpp_inner.immutable_midstep("UserConstraint::invalidate()");
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner.wake();
	}
	,__registerBody: function(oldBody,newBody) {
		this.zpp_inner.immutable_midstep("UserConstraint::registerBody(..)");
		if(oldBody != newBody) {
			if(oldBody != null) {
				if(!this.zpp_inner_zn.remBody(oldBody.zpp_inner)) {
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) oldBody.zpp_inner.wake();
			}
			if(newBody != null) this.zpp_inner_zn.addBody(newBody.zpp_inner);
			this.zpp_inner.wake();
			if(newBody != null) newBody.zpp_inner.wake();
		}
		return newBody;
	}
	,__class__: nape.constraint.UserConstraint
});
nape.constraint.WeldJoint = function(body1,body2,anchor1,anchor2,phase) {
	if(phase == null) phase = 0.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_WeldJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape.constraint.Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	this.zpp_inner.immutable_midstep("WeldJoint::phase");
	if(this.zpp_inner_zn.phase != phase) {
		this.zpp_inner_zn.phase = phase;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.phase;
};
$hxClasses["nape.constraint.WeldJoint"] = nape.constraint.WeldJoint;
nape.constraint.WeldJoint.__name__ = ["nape","constraint","WeldJoint"];
nape.constraint.WeldJoint.__super__ = nape.constraint.Constraint;
nape.constraint.WeldJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,get_phase: function() {
		return this.zpp_inner_zn.phase;
	}
	,set_phase: function(phase) {
		this.zpp_inner.immutable_midstep("WeldJoint::phase");
		if(this.zpp_inner_zn.phase != phase) {
			this.zpp_inner_zn.phase = phase;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.phase;
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(3,1);
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccz;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape.constraint.WeldJoint
	,__properties__: $extend(nape.constraint.Constraint.prototype.__properties__,{set_phase:"set_phase",get_phase:"get_phase",set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
nape.dynamics = {};
nape.dynamics.Arbiter = function() {
	this.zpp_inner = null;
	if(!zpp_nape.dynamics.ZPP_Arbiter.internal) {
	}
};
$hxClasses["nape.dynamics.Arbiter"] = nape.dynamics.Arbiter;
nape.dynamics.Arbiter.__name__ = ["nape","dynamics","Arbiter"];
nape.dynamics.Arbiter.prototype = {
	get_isSleeping: function() {
		return this.zpp_inner.sleeping;
	}
	,get_type: function() {
		return zpp_nape.dynamics.ZPP_Arbiter.types[this.zpp_inner.type];
	}
	,isCollisionArbiter: function() {
		return this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.COL;
	}
	,isFluidArbiter: function() {
		return this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID;
	}
	,isSensorArbiter: function() {
		return this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.SENSOR;
	}
	,get_collisionArbiter: function() {
		if(this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.COL) return this.zpp_inner.colarb.outer_zn; else return null;
	}
	,get_fluidArbiter: function() {
		if(this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) return this.zpp_inner.fluidarb.outer_zn; else return null;
	}
	,get_shape1: function() {
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.ws2.outer; else return this.zpp_inner.ws1.outer;
	}
	,get_shape2: function() {
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.ws1.outer; else return this.zpp_inner.ws2.outer;
	}
	,get_body1: function() {
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.b2.outer; else return this.zpp_inner.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.b1.outer; else return this.zpp_inner.b2.outer;
	}
	,get_state: function() {
		var _g = this.zpp_inner.immState;
		var x = _g;
		if(x == (zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS)) {
			if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
		} else {
			var x1 = _g;
			switch(_g) {
			case zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT:
				if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				return zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
			default:
				if(x1 == (zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS)) {
					if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					return zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
				} else {
					if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE = new nape.callbacks.PreFlag();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					return zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE;
				}
			}
		}
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		return nape.geom.Vec3.get(0,0,0);
	}
	,toString: function() {
		var ret;
		if(this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.COL) ret = "CollisionArbiter"; else if(this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) ret = "FluidArbiter"; else ret = "SensorArbiter";
		if(this.zpp_inner.cleared) return ret + "(object-pooled)"; else return ret + "(" + (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws2.outer:this.zpp_inner.ws1.outer).toString() + "|" + (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws1.outer:this.zpp_inner.ws2.outer).toString() + ")" + (this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.COL?"[" + ["SD","DD"][this.zpp_inner.colarb.stat?0:1] + "]":"") + "<-" + this.get_state().toString();
	}
	,__class__: nape.dynamics.Arbiter
	,__properties__: {get_state:"get_state",get_body2:"get_body2",get_body1:"get_body1",get_shape2:"get_shape2",get_shape1:"get_shape1",get_fluidArbiter:"get_fluidArbiter",get_collisionArbiter:"get_collisionArbiter",get_type:"get_type",get_isSleeping:"get_isSleeping"}
};
nape.dynamics.ArbiterIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.ArbiterIterator"] = nape.dynamics.ArbiterIterator;
nape.dynamics.ArbiterIterator.__name__ = ["nape","dynamics","ArbiterIterator"];
nape.dynamics.ArbiterIterator.get = function(list) {
	var ret;
	if(nape.dynamics.ArbiterIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ArbiterList.internal = true;
		var ret1 = new nape.dynamics.ArbiterIterator();
		zpp_nape.util.ZPP_ArbiterList.internal = false;
		ret = ret1;
	} else {
		var r = nape.dynamics.ArbiterIterator.zpp_pool;
		nape.dynamics.ArbiterIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.dynamics.ArbiterIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.dynamics.ArbiterIterator.zpp_pool;
			nape.dynamics.ArbiterIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.dynamics.ArbiterIterator
};
nape.dynamics.ArbiterList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ArbiterList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.dynamics.ArbiterList"] = nape.dynamics.ArbiterList;
nape.dynamics.ArbiterList.__name__ = ["nape","dynamics","ArbiterList"];
nape.dynamics.ArbiterList.fromArray = function(array) {
	var ret = new nape.dynamics.ArbiterList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.dynamics.ArbiterList.prototype = {
	get_length: function() {
		return this.zpp_gl();
	}
	,zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) this.zpp_inner.user_length++;
				cx_ite = cx_ite.next;
			}
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,has: function(obj) {
		this.zpp_vm();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_vm();
		if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.head;
			while(true) {
				var x = this.zpp_inner.at_ite.elt;
				if(x.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x1 = this.zpp_inner.at_ite.elt;
				if(x1.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
	}
	,empty: function() {
		return this.zpp_gl() == 0;
	}
	,iterator: function() {
		this.zpp_vm();
		return nape.dynamics.ArbiterIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.dynamics.ArbiterList();
		var _g = this.iterator();
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g = xs.iterator();
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) this.add(x);
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g = this.iterator();
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it = this.iterator();
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.dynamics.ArbiterIterator.zpp_pool;
			nape.dynamics.ArbiterIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.zpp_gl()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.dynamics.ArbiterList
	,__properties__: {get_length:"get_length"}
};
nape.dynamics.ArbiterType = function() {
};
$hxClasses["nape.dynamics.ArbiterType"] = nape.dynamics.ArbiterType;
nape.dynamics.ArbiterType.__name__ = ["nape","dynamics","ArbiterType"];
nape.dynamics.ArbiterType.__properties__ = {get_FLUID:"get_FLUID",get_SENSOR:"get_SENSOR",get_COLLISION:"get_COLLISION"}
nape.dynamics.ArbiterType.get_COLLISION = function() {
	if(zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION;
};
nape.dynamics.ArbiterType.get_SENSOR = function() {
	if(zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR;
};
nape.dynamics.ArbiterType.get_FLUID = function() {
	if(zpp_nape.util.ZPP_Flags.ArbiterType_FLUID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ArbiterType_FLUID;
};
nape.dynamics.ArbiterType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = new nape.dynamics.ArbiterType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION;
			return $r;
		}(this))) return "COLLISION"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = new nape.dynamics.ArbiterType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR;
			return $r;
		}(this))) return "SENSOR"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ArbiterType_FLUID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = new nape.dynamics.ArbiterType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ArbiterType_FLUID;
			return $r;
		}(this))) return "FLUID"; else return "";
	}
	,__class__: nape.dynamics.ArbiterType
};
nape.dynamics.CollisionArbiter = function() {
	nape.dynamics.Arbiter.call(this);
};
$hxClasses["nape.dynamics.CollisionArbiter"] = nape.dynamics.CollisionArbiter;
nape.dynamics.CollisionArbiter.__name__ = ["nape","dynamics","CollisionArbiter"];
nape.dynamics.CollisionArbiter.__super__ = nape.dynamics.Arbiter;
nape.dynamics.CollisionArbiter.prototype = $extend(nape.dynamics.Arbiter.prototype,{
	get_contacts: function() {
		if(this.zpp_inner.colarb.wrap_contacts == null) this.zpp_inner.colarb.setupcontacts();
		return this.zpp_inner.colarb.wrap_contacts;
	}
	,get_normal: function() {
		if(this.zpp_inner.colarb.wrap_normal == null) this.zpp_inner.colarb.getnormal();
		return this.zpp_inner.colarb.wrap_normal;
	}
	,get_radius: function() {
		return this.zpp_inner.colarb.radius;
	}
	,get_referenceEdge1: function() {
		var edge = this.zpp_inner.colarb.__ref_edge1;
		if(edge != null && (!((this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws2.outer:this.zpp_inner.ws1.outer).zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) || (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws2.outer:this.zpp_inner.ws1.outer).zpp_inner != edge.polygon)) edge = this.zpp_inner.colarb.__ref_edge2;
		if(edge == null) return null; else return edge.wrapper();
	}
	,get_referenceEdge2: function() {
		var edge = this.zpp_inner.colarb.__ref_edge1;
		if(edge != null && (!((this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws1.outer:this.zpp_inner.ws2.outer).zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) || (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws1.outer:this.zpp_inner.ws2.outer).zpp_inner != edge.polygon)) edge = this.zpp_inner.colarb.__ref_edge2;
		if(edge == null) return null; else return edge.wrapper();
	}
	,firstVertex: function() {
		var poly2circle = this.zpp_inner.colarb.__ref_edge1 != null != (this.zpp_inner.colarb.__ref_edge2 != null);
		if(poly2circle) return this.zpp_inner.colarb.__ref_vertex == -1; else return false;
	}
	,secondVertex: function() {
		var poly2circle = this.zpp_inner.colarb.__ref_edge1 != null != (this.zpp_inner.colarb.__ref_edge2 != null);
		if(poly2circle) return this.zpp_inner.colarb.__ref_vertex == 1; else return false;
	}
	,normalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) {
			var imp = colarb.oc1.wrapper().normalImpulse(body);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		if(colarb.hc2) {
			if(!freshOnly || colarb.oc2.fresh) {
				var imp1 = colarb.oc2.wrapper().normalImpulse(body);
				var t2 = 1;
				var t3 = t2;
				retx += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.x;
					return $r;
				}(this)) * t3;
				rety += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.y;
					return $r;
				}(this)) * t3;
				retz += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.z;
					return $r;
				}(this)) * t2;
				imp1.dispose();
			}
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,tangentImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) {
			var imp = colarb.oc1.wrapper().tangentImpulse(body);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		if(colarb.hc2) {
			if(!freshOnly || colarb.oc2.fresh) {
				var imp1 = colarb.oc2.wrapper().tangentImpulse(body);
				var t2 = 1;
				var t3 = t2;
				retx += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.x;
					return $r;
				}(this)) * t3;
				rety += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.y;
					return $r;
				}(this)) * t3;
				retz += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.z;
					return $r;
				}(this)) * t2;
				imp1.dispose();
			}
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) {
			var imp = colarb.oc1.wrapper().totalImpulse(body);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		if(colarb.hc2) {
			if(!freshOnly || colarb.oc2.fresh) {
				var imp1 = colarb.oc2.wrapper().totalImpulse(body);
				var t2 = 1;
				var t3 = t2;
				retx += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.x;
					return $r;
				}(this)) * t3;
				rety += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.y;
					return $r;
				}(this)) * t3;
				retz += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.z;
					return $r;
				}(this)) * t2;
				imp1.dispose();
			}
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,rollingImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) return colarb.oc1.wrapper().rollingImpulse(body); else return 0.0;
	}
	,get_elasticity: function() {
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity <= Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Math.POSITIVE_INFINITY || colarb.s2.material.elasticity >= Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.restitution;
	}
	,set_elasticity: function(elasticity) {
		var colarb = this.zpp_inner.colarb;
		colarb.restitution = elasticity;
		colarb.userdef_restitution = true;
		return this.get_elasticity();
	}
	,get_dynamicFriction: function() {
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity <= Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Math.POSITIVE_INFINITY || colarb.s2.material.elasticity >= Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.dyn_fric;
	}
	,set_dynamicFriction: function(dynamicFriction) {
		var colarb = this.zpp_inner.colarb;
		colarb.dyn_fric = dynamicFriction;
		colarb.userdef_dyn_fric = true;
		return this.get_dynamicFriction();
	}
	,get_staticFriction: function() {
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity <= Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Math.POSITIVE_INFINITY || colarb.s2.material.elasticity >= Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.stat_fric;
	}
	,set_staticFriction: function(staticFriction) {
		var colarb = this.zpp_inner.colarb;
		colarb.stat_fric = staticFriction;
		colarb.userdef_stat_fric = true;
		return this.get_staticFriction();
	}
	,get_rollingFriction: function() {
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity <= Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Math.POSITIVE_INFINITY || colarb.s2.material.elasticity >= Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.rfric;
	}
	,set_rollingFriction: function(rollingFriction) {
		var colarb = this.zpp_inner.colarb;
		colarb.rfric = rollingFriction;
		colarb.userdef_rfric = true;
		return this.get_rollingFriction();
	}
	,__class__: nape.dynamics.CollisionArbiter
	,__properties__: $extend(nape.dynamics.Arbiter.prototype.__properties__,{set_rollingFriction:"set_rollingFriction",get_rollingFriction:"get_rollingFriction",set_staticFriction:"set_staticFriction",get_staticFriction:"get_staticFriction",set_dynamicFriction:"set_dynamicFriction",get_dynamicFriction:"get_dynamicFriction",set_elasticity:"set_elasticity",get_elasticity:"get_elasticity",get_referenceEdge2:"get_referenceEdge2",get_referenceEdge1:"get_referenceEdge1",get_radius:"get_radius",get_normal:"get_normal",get_contacts:"get_contacts"})
});
nape.dynamics.Contact = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.Contact"] = nape.dynamics.Contact;
nape.dynamics.Contact.__name__ = ["nape","dynamics","Contact"];
nape.dynamics.Contact.prototype = {
	get_arbiter: function() {
		if(this.zpp_inner.arbiter == null) return null; else return this.zpp_inner.arbiter.outer.get_collisionArbiter();
	}
	,get_penetration: function() {
		return -this.zpp_inner.dist;
	}
	,get_position: function() {
		if(this.zpp_inner.wrap_position == null) this.zpp_inner.getposition();
		return this.zpp_inner.wrap_position;
	}
	,get_fresh: function() {
		return this.zpp_inner.fresh;
	}
	,normalImpulse: function(body) {
		var colarb = this.zpp_inner.arbiter.colarb;
		var cin = this.zpp_inner.inner;
		var jnAcc = cin.jnAcc;
		if(body == null) return nape.geom.Vec3.get(colarb.nx * jnAcc,colarb.ny * jnAcc); else if(body == colarb.b1.outer) return nape.geom.Vec3.get(colarb.nx * -jnAcc,colarb.ny * -jnAcc,-(colarb.ny * cin.r1x - colarb.nx * cin.r1y) * jnAcc); else return nape.geom.Vec3.get(colarb.nx * jnAcc,colarb.ny * jnAcc,(colarb.ny * cin.r2x - colarb.nx * cin.r2y) * jnAcc);
	}
	,tangentImpulse: function(body) {
		var colarb = this.zpp_inner.arbiter.colarb;
		var cin = this.zpp_inner.inner;
		var jtAcc = cin.jtAcc;
		if(body == null) return nape.geom.Vec3.get(-colarb.ny * jtAcc,colarb.nx * jtAcc); else if(body == colarb.b1.outer) return nape.geom.Vec3.get(colarb.ny * jtAcc,-colarb.nx * jtAcc,-(cin.r1x * colarb.nx + cin.r1y * colarb.ny) * jtAcc); else return nape.geom.Vec3.get(-colarb.ny * jtAcc,colarb.nx * jtAcc,(cin.r2x * colarb.nx + cin.r2y * colarb.ny) * jtAcc);
	}
	,rollingImpulse: function(body) {
		var colarb = this.zpp_inner.arbiter.colarb;
		var jrAcc = this.zpp_inner.arbiter.colarb.jrAcc;
		if(body == null) return jrAcc; else if(body == colarb.b1.outer) return -jrAcc; else return jrAcc;
	}
	,totalImpulse: function(body) {
		var colarb = this.zpp_inner.arbiter.colarb;
		var cin = this.zpp_inner.inner;
		var jnAcc = cin.jnAcc;
		var jtAcc = cin.jtAcc;
		var jrAcc = colarb.jrAcc;
		if(body == null) return nape.geom.Vec3.get(colarb.nx * jnAcc - colarb.ny * jtAcc,colarb.ny * jnAcc + colarb.nx * jtAcc,jrAcc); else {
			var jx = colarb.nx * jnAcc - colarb.ny * jtAcc;
			var jy = colarb.ny * jnAcc + colarb.nx * jtAcc;
			if(body == colarb.b1.outer) return nape.geom.Vec3.get(-jx,-jy,-(jy * cin.r1x - jx * cin.r1y) - jrAcc); else return nape.geom.Vec3.get(jx,jy,jy * cin.r2x - jx * cin.r2y + jrAcc);
		}
	}
	,get_friction: function() {
		return this.zpp_inner.inner.friction;
	}
	,toString: function() {
		if(this.zpp_inner.arbiter == null || this.zpp_inner.arbiter.cleared) return "{object-pooled}"; else return "{Contact}";
	}
	,__class__: nape.dynamics.Contact
	,__properties__: {get_friction:"get_friction",get_fresh:"get_fresh",get_position:"get_position",get_penetration:"get_penetration",get_arbiter:"get_arbiter"}
};
nape.dynamics.ContactIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.ContactIterator"] = nape.dynamics.ContactIterator;
nape.dynamics.ContactIterator.__name__ = ["nape","dynamics","ContactIterator"];
nape.dynamics.ContactIterator.get = function(list) {
	var ret;
	if(nape.dynamics.ContactIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ContactList.internal = true;
		var ret1 = new nape.dynamics.ContactIterator();
		zpp_nape.util.ZPP_ContactList.internal = false;
		ret = ret1;
	} else {
		var r = nape.dynamics.ContactIterator.zpp_pool;
		nape.dynamics.ContactIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.dynamics.ContactIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.dynamics.ContactIterator.zpp_pool;
			nape.dynamics.ContactIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.dynamics.ContactIterator
};
nape.dynamics.ContactList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ContactList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.dynamics.ContactList"] = nape.dynamics.ContactList;
nape.dynamics.ContactList.__name__ = ["nape","dynamics","ContactList"];
nape.dynamics.ContactList.fromArray = function(array) {
	var ret = new nape.dynamics.ContactList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.dynamics.ContactList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				if(i.active && i.arbiter.active) this.zpp_inner.user_length++;
				cx_ite = cx_ite.next;
			}
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.next;
			while(true) {
				var x = this.zpp_inner.at_ite;
				if(x.active && x.arbiter.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x1 = this.zpp_inner.at_ite;
				if(x1.active && x1.arbiter.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.wrapper();
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.get_length() == 0) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.get_length() == 0) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.next;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.next; else ret = ite.next;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.next; else ret = ite.next;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.next;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.next;
		while(cx_ite != null) {
			var x = cx_ite;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.get_length() == 0)) this.pop(); else while(!(this.get_length() == 0)) this.shift();
	}
	,empty: function() {
		return this.get_length() == 0;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.dynamics.ContactIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.dynamics.ContactList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.dynamics.ContactIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.dynamics.ContactIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.dynamics.ContactIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape.dynamics.ContactIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.dynamics.ContactIterator.zpp_pool;
			nape.dynamics.ContactIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.dynamics.ContactList
	,__properties__: {get_length:"get_length"}
};
nape.dynamics.FluidArbiter = function() {
	nape.dynamics.Arbiter.call(this);
};
$hxClasses["nape.dynamics.FluidArbiter"] = nape.dynamics.FluidArbiter;
nape.dynamics.FluidArbiter.__name__ = ["nape","dynamics","FluidArbiter"];
nape.dynamics.FluidArbiter.__super__ = nape.dynamics.Arbiter;
nape.dynamics.FluidArbiter.prototype = $extend(nape.dynamics.Arbiter.prototype,{
	get_position: function() {
		if(this.zpp_inner.fluidarb.wrap_position == null) this.zpp_inner.fluidarb.getposition();
		return this.zpp_inner.fluidarb.wrap_position;
	}
	,set_position: function(position) {
		((function($this) {
			var $r;
			if($this.zpp_inner.fluidarb.wrap_position == null) $this.zpp_inner.fluidarb.getposition();
			$r = $this.zpp_inner.fluidarb.wrap_position;
			return $r;
		}(this))).set(position);
		if(this.zpp_inner.fluidarb.wrap_position == null) this.zpp_inner.fluidarb.getposition();
		return this.zpp_inner.fluidarb.wrap_position;
	}
	,get_overlap: function() {
		return this.zpp_inner.fluidarb.overlap;
	}
	,set_overlap: function(overlap) {
		this.zpp_inner.fluidarb.overlap = overlap;
		return this.zpp_inner.fluidarb.overlap;
	}
	,buoyancyImpulse: function(body) {
		var farb = this.zpp_inner.fluidarb;
		if(body == null) return nape.geom.Vec3.get(farb.buoyx,farb.buoyy,0); else if(body.zpp_inner == this.zpp_inner.b2) return nape.geom.Vec3.get(farb.buoyx,farb.buoyy,farb.buoyy * farb.r2x - farb.buoyx * farb.r2y); else return nape.geom.Vec3.get(-farb.buoyx,-farb.buoyy,-(farb.buoyy * farb.r1x - farb.buoyx * farb.r1y));
	}
	,dragImpulse: function(body) {
		var farb = this.zpp_inner.fluidarb;
		var scale;
		if(body == null || body.zpp_inner == this.zpp_inner.b2) scale = 1; else scale = -1;
		return nape.geom.Vec3.get(farb.dampx * scale,farb.dampy * scale,farb.adamp * scale);
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var tmp = this.buoyancyImpulse(body);
		var ret = this.dragImpulse(body);
		var _g = ret;
		_g.set_x((function($this) {
			var $r;
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			tmp.zpp_inner.validate();
			$r = tmp.zpp_inner.x;
			return $r;
		}(this)));
		var _g1 = ret;
		_g1.set_y((function($this) {
			var $r;
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			tmp.zpp_inner.validate();
			$r = tmp.zpp_inner.y;
			return $r;
		}(this)));
		var _g2 = ret;
		_g2.set_z((function($this) {
			var $r;
			_g2.zpp_inner.validate();
			$r = _g2.zpp_inner.z;
			return $r;
		}(this)) + (function($this) {
			var $r;
			tmp.zpp_inner.validate();
			$r = tmp.zpp_inner.z;
			return $r;
		}(this)));
		tmp.dispose();
		return ret;
	}
	,__class__: nape.dynamics.FluidArbiter
	,__properties__: $extend(nape.dynamics.Arbiter.prototype.__properties__,{set_overlap:"set_overlap",get_overlap:"get_overlap",set_position:"set_position",get_position:"get_position"})
});
nape.dynamics.InteractionFilter = function(collisionGroup,collisionMask,sensorGroup,sensorMask,fluidGroup,fluidMask) {
	if(fluidMask == null) fluidMask = -1;
	if(fluidGroup == null) fluidGroup = 1;
	if(sensorMask == null) sensorMask = -1;
	if(sensorGroup == null) sensorGroup = 1;
	if(collisionMask == null) collisionMask = -1;
	if(collisionGroup == null) collisionGroup = 1;
	this.zpp_inner = null;
	if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) this.zpp_inner = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
		this.zpp_inner = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(this.zpp_inner.collisionGroup != collisionGroup) {
		this.zpp_inner.collisionGroup = collisionGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.collisionGroup;
	if(this.zpp_inner.collisionMask != collisionMask) {
		this.zpp_inner.collisionMask = collisionMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.collisionMask;
	if(this.zpp_inner.sensorGroup != sensorGroup) {
		this.zpp_inner.sensorGroup = sensorGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.sensorGroup;
	if(this.zpp_inner.sensorMask != sensorMask) {
		this.zpp_inner.sensorMask = sensorMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.sensorMask;
	if(this.zpp_inner.fluidGroup != fluidGroup) {
		this.zpp_inner.fluidGroup = fluidGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.fluidGroup;
	if(this.zpp_inner.fluidMask != fluidMask) {
		this.zpp_inner.fluidMask = fluidMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.fluidMask;
};
$hxClasses["nape.dynamics.InteractionFilter"] = nape.dynamics.InteractionFilter;
nape.dynamics.InteractionFilter.__name__ = ["nape","dynamics","InteractionFilter"];
nape.dynamics.InteractionFilter.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_shapes: function() {
		if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get(this.zpp_inner.shapes,true);
		return this.zpp_inner.wrap_shapes;
	}
	,get_collisionGroup: function() {
		return this.zpp_inner.collisionGroup;
	}
	,set_collisionGroup: function(collisionGroup) {
		if(this.zpp_inner.collisionGroup != collisionGroup) {
			this.zpp_inner.collisionGroup = collisionGroup;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.collisionGroup;
	}
	,get_collisionMask: function() {
		return this.zpp_inner.collisionMask;
	}
	,set_collisionMask: function(collisionMask) {
		if(this.zpp_inner.collisionMask != collisionMask) {
			this.zpp_inner.collisionMask = collisionMask;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.collisionMask;
	}
	,get_sensorGroup: function() {
		return this.zpp_inner.sensorGroup;
	}
	,set_sensorGroup: function(sensorGroup) {
		if(this.zpp_inner.sensorGroup != sensorGroup) {
			this.zpp_inner.sensorGroup = sensorGroup;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.sensorGroup;
	}
	,get_sensorMask: function() {
		return this.zpp_inner.sensorMask;
	}
	,set_sensorMask: function(sensorMask) {
		if(this.zpp_inner.sensorMask != sensorMask) {
			this.zpp_inner.sensorMask = sensorMask;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.sensorMask;
	}
	,get_fluidGroup: function() {
		return this.zpp_inner.fluidGroup;
	}
	,set_fluidGroup: function(fluidGroup) {
		if(this.zpp_inner.fluidGroup != fluidGroup) {
			this.zpp_inner.fluidGroup = fluidGroup;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.fluidGroup;
	}
	,get_fluidMask: function() {
		return this.zpp_inner.fluidMask;
	}
	,set_fluidMask: function(fluidMask) {
		if(this.zpp_inner.fluidMask != fluidMask) {
			this.zpp_inner.fluidMask = fluidMask;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.fluidMask;
	}
	,shouldCollide: function(filter) {
		return this.zpp_inner.shouldCollide(filter.zpp_inner);
	}
	,shouldSense: function(filter) {
		return this.zpp_inner.shouldSense(filter.zpp_inner);
	}
	,shouldFlow: function(filter) {
		return this.zpp_inner.shouldFlow(filter.zpp_inner);
	}
	,copy: function() {
		return new nape.dynamics.InteractionFilter(this.zpp_inner.collisionGroup,this.zpp_inner.collisionMask,this.zpp_inner.sensorGroup,this.zpp_inner.sensorMask,this.zpp_inner.fluidGroup,this.zpp_inner.fluidMask);
	}
	,toString: function() {
		return "{ collision: " + StringTools.hex(this.zpp_inner.collisionGroup,8) + "~" + StringTools.hex(this.zpp_inner.collisionMask,8) + " sensor: " + StringTools.hex(this.zpp_inner.sensorGroup,8) + "~" + StringTools.hex(this.zpp_inner.sensorMask,8) + " fluid: " + StringTools.hex(this.zpp_inner.fluidGroup,8) + "~" + StringTools.hex(this.zpp_inner.fluidMask,8) + " }";
	}
	,__class__: nape.dynamics.InteractionFilter
	,__properties__: {set_fluidMask:"set_fluidMask",get_fluidMask:"get_fluidMask",set_fluidGroup:"set_fluidGroup",get_fluidGroup:"get_fluidGroup",set_sensorMask:"set_sensorMask",get_sensorMask:"get_sensorMask",set_sensorGroup:"set_sensorGroup",get_sensorGroup:"get_sensorGroup",set_collisionMask:"set_collisionMask",get_collisionMask:"get_collisionMask",set_collisionGroup:"set_collisionGroup",get_collisionGroup:"get_collisionGroup",get_shapes:"get_shapes",get_userData:"get_userData"}
};
nape.dynamics.InteractionGroup = function(ignore) {
	if(ignore == null) ignore = false;
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.dynamics.ZPP_InteractionGroup();
	this.zpp_inner.outer = this;
	if(this.zpp_inner.ignore != ignore) {
		this.zpp_inner.invalidate(true);
		this.zpp_inner.ignore = ignore;
	}
	this.zpp_inner.ignore;
};
$hxClasses["nape.dynamics.InteractionGroup"] = nape.dynamics.InteractionGroup;
nape.dynamics.InteractionGroup.__name__ = ["nape","dynamics","InteractionGroup"];
nape.dynamics.InteractionGroup.prototype = {
	get_group: function() {
		if(this.zpp_inner.group == null) return null; else return this.zpp_inner.group.outer;
	}
	,set_group: function(group) {
		this.zpp_inner.setGroup(group == null?null:group.zpp_inner);
		if(this.zpp_inner.group == null) return null; else return this.zpp_inner.group.outer;
	}
	,get_ignore: function() {
		return this.zpp_inner.ignore;
	}
	,set_ignore: function(ignore) {
		if(this.zpp_inner.ignore != ignore) {
			this.zpp_inner.invalidate(true);
			this.zpp_inner.ignore = ignore;
		}
		return this.zpp_inner.ignore;
	}
	,get_interactors: function() {
		if(this.zpp_inner.wrap_interactors == null) this.zpp_inner.wrap_interactors = zpp_nape.util.ZPP_InteractorList.get(this.zpp_inner.interactors,true);
		return this.zpp_inner.wrap_interactors;
	}
	,get_groups: function() {
		if(this.zpp_inner.wrap_groups == null) this.zpp_inner.wrap_groups = zpp_nape.util.ZPP_InteractionGroupList.get(this.zpp_inner.groups,true);
		return this.zpp_inner.wrap_groups;
	}
	,toString: function() {
		var ret = "InteractionGroup";
		if(this.zpp_inner.ignore) ret += ":ignore";
		return ret;
	}
	,__class__: nape.dynamics.InteractionGroup
	,__properties__: {get_groups:"get_groups",get_interactors:"get_interactors",set_ignore:"set_ignore",get_ignore:"get_ignore",set_group:"set_group",get_group:"get_group"}
};
nape.dynamics.InteractionGroupIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.InteractionGroupIterator"] = nape.dynamics.InteractionGroupIterator;
nape.dynamics.InteractionGroupIterator.__name__ = ["nape","dynamics","InteractionGroupIterator"];
nape.dynamics.InteractionGroupIterator.get = function(list) {
	var ret;
	if(nape.dynamics.InteractionGroupIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_InteractionGroupList.internal = true;
		var ret1 = new nape.dynamics.InteractionGroupIterator();
		zpp_nape.util.ZPP_InteractionGroupList.internal = false;
		ret = ret1;
	} else {
		var r = nape.dynamics.InteractionGroupIterator.zpp_pool;
		nape.dynamics.InteractionGroupIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.dynamics.InteractionGroupIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.dynamics.InteractionGroupIterator.zpp_pool;
			nape.dynamics.InteractionGroupIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.dynamics.InteractionGroupIterator
};
nape.dynamics.InteractionGroupList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_InteractionGroupList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.dynamics.InteractionGroupList"] = nape.dynamics.InteractionGroupList;
nape.dynamics.InteractionGroupList.__name__ = ["nape","dynamics","InteractionGroupList"];
nape.dynamics.InteractionGroupList.fromArray = function(array) {
	var ret = new nape.dynamics.InteractionGroupList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.dynamics.InteractionGroupList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.dynamics.InteractionGroupIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.dynamics.InteractionGroupList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.dynamics.InteractionGroupIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.dynamics.InteractionGroupIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.dynamics.InteractionGroupIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape.dynamics.InteractionGroupIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.dynamics.InteractionGroupIterator.zpp_pool;
			nape.dynamics.InteractionGroupIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.dynamics.InteractionGroupList
	,__properties__: {get_length:"get_length"}
};
nape.geom = {};
nape.geom.AABB = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_inner = null;
	this.zpp_inner = zpp_nape.geom.ZPP_AABB.get(x,y,x + width,y + height);
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.AABB"] = nape.geom.AABB;
nape.geom.AABB.__name__ = ["nape","geom","AABB"];
nape.geom.AABB.fromRect = function(rect) {
	return new nape.geom.AABB(rect.x,rect.y,rect.width,rect.height);
};
nape.geom.AABB.prototype = {
	copy: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.copy().wrapper();
	}
	,toRect: function() {
		return new openfl.geom.Rectangle((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.width();
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.height();
			return $r;
		}(this)));
	}
	,get_min: function() {
		return this.zpp_inner.getmin();
	}
	,set_min: function(min) {
		this.zpp_inner.getmin().set(min);
		return this.zpp_inner.getmin();
	}
	,get_max: function() {
		return this.zpp_inner.getmax();
	}
	,set_max: function(max) {
		this.zpp_inner.getmax().set(max);
		return this.zpp_inner.getmax();
	}
	,get_x: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.minx;
	}
	,set_x: function(x) {
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) != x) {
			this.zpp_inner.maxx += x - this.zpp_inner.minx;
			this.zpp_inner.minx = x;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.minx;
	}
	,get_y: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.miny;
	}
	,set_y: function(y) {
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this)) != y) {
			this.zpp_inner.maxy += y - this.zpp_inner.miny;
			this.zpp_inner.miny = y;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.miny;
	}
	,get_width: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.width();
	}
	,set_width: function(width) {
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.width();
			return $r;
		}(this)) != width) {
			this.zpp_inner.maxx = (function($this) {
				var $r;
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.minx;
				return $r;
			}(this)) + width;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.width();
	}
	,get_height: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.height();
	}
	,set_height: function(height) {
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.height();
			return $r;
		}(this)) != height) {
			this.zpp_inner.maxy = (function($this) {
				var $r;
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.miny;
				return $r;
			}(this)) + height;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.height();
	}
	,toString: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.toString();
	}
	,__class__: nape.geom.AABB
	,__properties__: {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min"}
};
nape.geom.ConvexResult = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.geom.ConvexResult"] = nape.geom.ConvexResult;
nape.geom.ConvexResult.__name__ = ["nape","geom","ConvexResult"];
nape.geom.ConvexResult.prototype = {
	get_normal: function() {
		return this.zpp_inner.normal;
	}
	,get_position: function() {
		return this.zpp_inner.position;
	}
	,get_toi: function() {
		return this.zpp_inner.toiDistance;
	}
	,get_shape: function() {
		return this.zpp_inner.shape;
	}
	,dispose: function() {
		this.zpp_inner.free();
	}
	,toString: function() {
		return "{ shape: " + Std.string(this.zpp_inner.shape) + " toi: " + this.zpp_inner.toiDistance + " }";
	}
	,__class__: nape.geom.ConvexResult
	,__properties__: {get_shape:"get_shape",get_toi:"get_toi",get_position:"get_position",get_normal:"get_normal"}
};
nape.geom.ConvexResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.geom.ConvexResultIterator"] = nape.geom.ConvexResultIterator;
nape.geom.ConvexResultIterator.__name__ = ["nape","geom","ConvexResultIterator"];
nape.geom.ConvexResultIterator.get = function(list) {
	var ret;
	if(nape.geom.ConvexResultIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ConvexResultList.internal = true;
		var ret1 = new nape.geom.ConvexResultIterator();
		zpp_nape.util.ZPP_ConvexResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape.geom.ConvexResultIterator.zpp_pool;
		nape.geom.ConvexResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.geom.ConvexResultIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.geom.ConvexResultIterator.zpp_pool;
			nape.geom.ConvexResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.geom.ConvexResultIterator
};
nape.geom.ConvexResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ConvexResultList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.ConvexResultList"] = nape.geom.ConvexResultList;
nape.geom.ConvexResultList.__name__ = ["nape","geom","ConvexResultList"];
nape.geom.ConvexResultList.fromArray = function(array) {
	var ret = new nape.geom.ConvexResultList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.geom.ConvexResultList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			} else this.zpp_inner.inner.add(obj);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret;
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.geom.ConvexResultIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.geom.ConvexResultList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.geom.ConvexResultIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.geom.ConvexResultIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.geom.ConvexResultIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape.geom.ConvexResultIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.geom.ConvexResultIterator.zpp_pool;
			nape.geom.ConvexResultIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.geom.ConvexResultList
	,__properties__: {get_length:"get_length"}
};
nape.geom.Geom = function() { };
$hxClasses["nape.geom.Geom"] = nape.geom.Geom;
nape.geom.Geom.__name__ = ["nape","geom","Geom"];
nape.geom.Geom.distanceBody = function(body1,body2,out1,out2) {
	var cx_ite = body1.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		zpp_nape.geom.ZPP_Geom.validateShape(i);
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = body2.zpp_inner.shapes.head;
	while(cx_ite1 != null) {
		var i1 = cx_ite1.elt;
		zpp_nape.geom.ZPP_Geom.validateShape(i1);
		cx_ite1 = cx_ite1.next;
	}
	return zpp_nape.geom.ZPP_SweepDistance.distanceBody(body1.zpp_inner,body2.zpp_inner,out1.zpp_inner,out2.zpp_inner);
};
nape.geom.Geom.distance = function(shape1,shape2,out1,out2) {
	zpp_nape.geom.ZPP_Geom.validateShape(shape1.zpp_inner);
	zpp_nape.geom.ZPP_Geom.validateShape(shape2.zpp_inner);
	var tmp;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) tmp = new zpp_nape.geom.ZPP_Vec2(); else {
		tmp = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = tmp.next;
		tmp.next = null;
	}
	tmp.weak = false;
	var ret = zpp_nape.geom.ZPP_SweepDistance.distance(shape1.zpp_inner,shape2.zpp_inner,out1.zpp_inner,out2.zpp_inner,tmp,1e100);
	var o = tmp;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	return ret;
};
nape.geom.Geom.intersectsBody = function(body1,body2) {
	var cx_ite = body1.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		zpp_nape.geom.ZPP_Geom.validateShape(i);
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = body2.zpp_inner.shapes.head;
	while(cx_ite1 != null) {
		var i1 = cx_ite1.elt;
		zpp_nape.geom.ZPP_Geom.validateShape(i1);
		cx_ite1 = cx_ite1.next;
	}
	if(!body1.zpp_inner.aabb.intersect(body2.zpp_inner.aabb)) return false; else {
		var cx_ite2 = body1.zpp_inner.shapes.head;
		while(cx_ite2 != null) {
			var s1 = cx_ite2.elt;
			var cx_ite3 = body2.zpp_inner.shapes.head;
			while(cx_ite3 != null) {
				var s2 = cx_ite3.elt;
				if(zpp_nape.geom.ZPP_Collide.testCollide_safe(s1,s2)) return true;
				cx_ite3 = cx_ite3.next;
			}
			cx_ite2 = cx_ite2.next;
		}
		return false;
	}
};
nape.geom.Geom.intersects = function(shape1,shape2) {
	zpp_nape.geom.ZPP_Geom.validateShape(shape1.zpp_inner);
	zpp_nape.geom.ZPP_Geom.validateShape(shape2.zpp_inner);
	return shape1.zpp_inner.aabb.intersect(shape2.zpp_inner.aabb) && zpp_nape.geom.ZPP_Collide.testCollide_safe(shape1.zpp_inner,shape2.zpp_inner);
};
nape.geom.Geom.contains = function(shape1,shape2) {
	zpp_nape.geom.ZPP_Geom.validateShape(shape1.zpp_inner);
	zpp_nape.geom.ZPP_Geom.validateShape(shape2.zpp_inner);
	return zpp_nape.geom.ZPP_Collide.containTest(shape1.zpp_inner,shape2.zpp_inner);
};
nape.geom.GeomPoly = function(vertices) {
	this.zpp_inner = null;
	this.zpp_pool = null;
	this.zpp_inner = new zpp_nape.geom.ZPP_GeomPoly(this);
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				var v = vite;
				var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
					var $r;
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this)));
				if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
					obj.prev = this.zpp_inner.vertices;
					obj.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj;
					this.zpp_inner.vertices.next = obj;
				}
				this.zpp_inner.vertices = obj;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.Vec2List)) {
			var lv1 = vertices;
			var _g1 = lv1.iterator();
			while(_g1.hasNext()) {
				var v1;
				_g1.zpp_critical = false;
				v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				var obj1 = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
					var $r;
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.y;
					return $r;
				}(this)));
				if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj1.prev = obj1.next = obj1; else {
					obj1.prev = this.zpp_inner.vertices;
					obj1.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj1;
					this.zpp_inner.vertices.next = obj1;
				}
				this.zpp_inner.vertices = obj1;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.GeomPoly)) {
			var lv2 = vertices;
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				do {
					var v2 = nape.geom.Vec2.get(vite1.x,vite1.y,null);
					vite1 = vite1.next;
					var obj2 = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
						var $r;
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.y;
						return $r;
					}(this)));
					if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj2.prev = obj2.next = obj2; else {
						obj2.prev = this.zpp_inner.vertices;
						obj2.next = this.zpp_inner.vertices.next;
						this.zpp_inner.vertices.next.prev = obj2;
						this.zpp_inner.vertices.next = obj2;
					}
					this.zpp_inner.vertices = obj2;
					v2.dispose();
				} while(vite1 != verts);
			}
		} else {
		}
		this.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				if(cur.zpp_inner.weak?(function($this) {
					var $r;
					cur.dispose();
					$r = true;
					return $r;
				}(this)):false) {
					lv3.splice(i,1);
					continue;
				}
				i++;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) lv4.zpp_inner._validate();
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x = cur1.elt;
				if(x.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
						true;
					} else false;
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
};
$hxClasses["nape.geom.GeomPoly"] = nape.geom.GeomPoly;
nape.geom.GeomPoly.__name__ = ["nape","geom","GeomPoly"];
nape.geom.GeomPoly.get = function(vertices) {
	var ret;
	if(zpp_nape.util.ZPP_PubPool.poolGeomPoly == null) ret = new nape.geom.GeomPoly(); else {
		ret = zpp_nape.util.ZPP_PubPool.poolGeomPoly;
		zpp_nape.util.ZPP_PubPool.poolGeomPoly = ret.zpp_pool;
		ret.zpp_pool = null;
	}
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				var v = vite;
				var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
					var $r;
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this)));
				if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj.prev = obj.next = obj; else {
					obj.prev = ret.zpp_inner.vertices;
					obj.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj;
					ret.zpp_inner.vertices.next = obj;
				}
				ret.zpp_inner.vertices = obj;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.Vec2List)) {
			var lv1 = vertices;
			var _g1 = lv1.iterator();
			while(_g1.hasNext()) {
				var v1;
				_g1.zpp_critical = false;
				v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				var obj1 = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
					var $r;
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.y;
					return $r;
				}(this)));
				if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj1.prev = obj1.next = obj1; else {
					obj1.prev = ret.zpp_inner.vertices;
					obj1.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj1;
					ret.zpp_inner.vertices.next = obj1;
				}
				ret.zpp_inner.vertices = obj1;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.GeomPoly)) {
			var lv2 = vertices;
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				do {
					var v2 = nape.geom.Vec2.get(vite1.x,vite1.y,null);
					vite1 = vite1.next;
					var obj2 = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
						var $r;
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.y;
						return $r;
					}(this)));
					if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj2.prev = obj2.next = obj2; else {
						obj2.prev = ret.zpp_inner.vertices;
						obj2.next = ret.zpp_inner.vertices.next;
						ret.zpp_inner.vertices.next.prev = obj2;
						ret.zpp_inner.vertices.next = obj2;
					}
					ret.zpp_inner.vertices = obj2;
					v2.dispose();
				} while(vite1 != verts);
			}
		} else {
		}
		ret.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				if(cur.zpp_inner.weak?(function($this) {
					var $r;
					cur.dispose();
					$r = true;
					return $r;
				}(this)):false) {
					lv3.splice(i,1);
					continue;
				}
				i++;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) lv4.zpp_inner._validate();
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x = cur1.elt;
				if(x.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
						true;
					} else false;
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
	return ret;
};
nape.geom.GeomPoly.prototype = {
	empty: function() {
		return this.zpp_inner.vertices == null;
	}
	,size: function() {
		var ret = 0;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var i = nite;
				ret++;
				nite = nite.next;
			} while(nite != L);
		}
		return ret;
	}
	,iterator: function() {
		return zpp_nape.geom.ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,true);
	}
	,forwardIterator: function() {
		return zpp_nape.geom.ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,true);
	}
	,backwardsIterator: function() {
		return zpp_nape.geom.ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,false);
	}
	,current: function() {
		return this.zpp_inner.vertices.wrapper();
	}
	,push: function(vertex) {
		var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
			var $r;
			vertex.zpp_inner.validate();
			$r = vertex.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			vertex.zpp_inner.validate();
			$r = vertex.zpp_inner.y;
			return $r;
		}(this)));
		if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
			obj.prev = this.zpp_inner.vertices;
			obj.next = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.next.prev = obj;
			this.zpp_inner.vertices.next = obj;
		}
		this.zpp_inner.vertices = obj;
		if(vertex.zpp_inner.weak) {
			vertex.dispose();
			true;
		} else false;
		return this;
	}
	,pop: function() {
		var retv = this.zpp_inner.vertices;
		if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = null;
		} else {
			var retnodes = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = null;
			this.zpp_inner.vertices = retnodes;
		}
		var o = retv;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		return this;
	}
	,unshift: function(vertex) {
		var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
			var $r;
			vertex.zpp_inner.validate();
			$r = vertex.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			vertex.zpp_inner.validate();
			$r = vertex.zpp_inner.y;
			return $r;
		}(this)));
		if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
			obj.next = this.zpp_inner.vertices;
			obj.prev = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.prev.next = obj;
			this.zpp_inner.vertices.prev = obj;
		}
		this.zpp_inner.vertices = obj;
		if(vertex.zpp_inner.weak) {
			vertex.dispose();
			true;
		} else false;
		return this;
	}
	,shift: function() {
		var retv = this.zpp_inner.vertices;
		if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = this.zpp_inner.vertices = null;
		} else {
			var retnodes = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = null;
			this.zpp_inner.vertices = retnodes;
		}
		var o = retv;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		return this;
	}
	,skipForward: function(times) {
		if(!(this.zpp_inner.vertices == null)) {
			if(times > 0) while(times-- > 0) this.zpp_inner.vertices = this.zpp_inner.vertices.next; else if(times < 0) while(times++ < 0) this.zpp_inner.vertices = this.zpp_inner.vertices.prev;
		}
		return this;
	}
	,skipBackwards: function(times) {
		return this.skipForward(-times);
	}
	,erase: function(count) {
		while(count != 0 && !(this.zpp_inner.vertices == null)) {
			var retv = this.zpp_inner.vertices;
			if(count > 0) {
				if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
					this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
					this.zpp_inner.vertices = this.zpp_inner.vertices = null;
				} else {
					var retnodes = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
					this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
					this.zpp_inner.vertices = null;
					this.zpp_inner.vertices = retnodes;
				}
				count--;
			} else if(count < 0) {
				if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
					this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
					this.zpp_inner.vertices = null;
				} else {
					var retnodes1 = this.zpp_inner.vertices.prev;
					this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
					this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
					this.zpp_inner.vertices = null;
					this.zpp_inner.vertices = retnodes1;
				}
				count++;
			}
			var o = retv;
			if(o.wrap != null) {
				o.wrap.zpp_inner._inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.prev = o.next = null;
			o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
			zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		}
		return this;
	}
	,clear: function() {
		while(!(this.zpp_inner.vertices == null)) {
			var tmp = this.zpp_inner.vertices;
			if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
				this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
				this.zpp_inner.vertices = this.zpp_inner.vertices = null;
			} else {
				var retnodes = this.zpp_inner.vertices.next;
				this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
				this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
				this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
				this.zpp_inner.vertices = null;
				this.zpp_inner.vertices = retnodes;
			}
			var o = tmp;
			if(o.wrap != null) {
				o.wrap.zpp_inner._inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.prev = o.next = null;
			o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
			zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		}
		return this;
	}
	,copy: function() {
		var ret = nape.geom.GeomPoly.get();
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				var obj = zpp_nape.geom.ZPP_GeomVert.get(v.x,v.y);
				if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj.prev = obj.next = obj; else {
					obj.prev = ret.zpp_inner.vertices;
					obj.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj;
					ret.zpp_inner.vertices.next = obj;
				}
				ret.zpp_inner.vertices = obj;
				nite = nite.next;
			} while(nite != L);
		}
		return ret.skipForward(1);
	}
	,dispose: function() {
		this.clear();
		var o = this;
		o.zpp_pool = zpp_nape.util.ZPP_PubPool.poolGeomPoly;
		zpp_nape.util.ZPP_PubPool.poolGeomPoly = o;
	}
	,toString: function() {
		var ret = "GeomPoly[";
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v != this.zpp_inner.vertices) ret += ",";
				ret += "{" + v.x + "," + v.y + "}";
				nite = nite.next;
			} while(nite != L);
		}
		return ret + "]";
	}
	,area: function() {
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return 0.0; else {
			var ret;
			var area = 0.0;
			var F = this.zpp_inner.vertices;
			var L = this.zpp_inner.vertices;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					area += v.x * (v.next.y - v.prev.y);
					nite = nite.next;
				} while(nite != L);
			}
			ret = area * 0.5;
			if(ret < 0) return -ret; else return ret;
		}
	}
	,winding: function() {
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) {
			if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
		} else {
			var area;
			var area1 = 0.0;
			var F = this.zpp_inner.vertices;
			var L = this.zpp_inner.vertices;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					area1 += v.x * (v.next.y - v.prev.y);
					nite = nite.next;
				} while(nite != L);
			}
			area = area1 * 0.5;
			if(area > 0) {
				if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				return zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
			} else if(area == 0) {
				if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				return zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
			} else {
				if(zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = new nape.geom.Winding();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				return zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE;
			}
		}
	}
	,contains: function(point) {
		var ret;
		var x;
		point.zpp_inner.validate();
		x = point.zpp_inner.x;
		var y;
		point.zpp_inner.validate();
		y = point.zpp_inner.y;
		var ret1 = false;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var p = nite;
				var q = p.prev;
				if((p.y < y && q.y >= y || q.y < y && p.y >= y) && (p.x <= x || q.x <= x)) {
					if(p.x + (y - p.y) / (q.y - p.y) * (q.x - p.x) < x) ret1 = !ret1;
				}
				nite = nite.next;
			} while(nite != L);
		}
		ret = ret1;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,isClockwise: function() {
		return this.winding() == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
			return $r;
		}(this));
	}
	,isConvex: function() {
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else {
			var neg = false;
			var pos = false;
			var ret = true;
			var F = this.zpp_inner.vertices;
			var L = this.zpp_inner.vertices;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					var u = v.prev;
					var w = v.next;
					var ax = 0.0;
					var ay = 0.0;
					ax = w.x - v.x;
					ay = w.y - v.y;
					var bx = 0.0;
					var by = 0.0;
					bx = v.x - u.x;
					by = v.y - u.y;
					var dot = by * ax - bx * ay;
					if(dot > 0.0) pos = true; else if(dot < 0.0) neg = true;
					if(pos && neg) {
						ret = false;
						break;
					}
					nite = nite.next;
				} while(nite != L);
			}
			return ret;
		}
	}
	,isSimple: function() {
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else return zpp_nape.geom.ZPP_Simple.isSimple(this.zpp_inner.vertices);
	}
	,isMonotone: function() {
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else return zpp_nape.geom.ZPP_Monotone.isMonotone(this.zpp_inner.vertices);
	}
	,isDegenerate: function() {
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else return this.area() < nape.Config.epsilon;
	}
	,simplify: function(epsilon) {
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return this.copy(); else {
			var x = zpp_nape.geom.ZPP_Simplify.simplify(this.zpp_inner.vertices,epsilon);
			var ret = nape.geom.GeomPoly.get();
			ret.zpp_inner.vertices = x;
			return ret;
		}
	}
	,simpleDecomposition: function(output) {
		var MPs = zpp_nape.geom.ZPP_Simple.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
			$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
			return $r;
		}(this)));
		var ret;
		if(output == null) ret = new nape.geom.GeomPolyList(); else ret = output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			var x = nape.geom.GeomPoly.get();
			x.zpp_inner.vertices = MP;
			if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
		}
		return ret;
	}
	,monotoneDecomposition: function(output) {
		var poly = zpp_nape.geom.ZPP_Monotone.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_Monotone.sharedPPoly == null) zpp_nape.geom.ZPP_Monotone.sharedPPoly = new zpp_nape.geom.ZPP_PartitionedPoly();
			$r = zpp_nape.geom.ZPP_Monotone.sharedPPoly;
			return $r;
		}(this)));
		var MPs = poly.extract((function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
			$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
			return $r;
		}(this)));
		var ret;
		if(output == null) ret = new nape.geom.GeomPolyList(); else ret = output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			var x = nape.geom.GeomPoly.get();
			x.zpp_inner.vertices = MP;
			if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
		}
		return ret;
	}
	,convexDecomposition: function(delaunay,output) {
		if(delaunay == null) delaunay = false;
		var poly = zpp_nape.geom.ZPP_Monotone.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_Monotone.sharedPPoly == null) zpp_nape.geom.ZPP_Monotone.sharedPPoly = new zpp_nape.geom.ZPP_PartitionedPoly();
			$r = zpp_nape.geom.ZPP_Monotone.sharedPPoly;
			return $r;
		}(this)));
		var MPs = poly.extract_partitions((function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList = new zpp_nape.util.ZNPList_ZPP_PartitionedPoly();
			$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList;
			return $r;
		}(this)));
		var ret;
		if(output == null) ret = new nape.geom.GeomPolyList(); else ret = output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			zpp_nape.geom.ZPP_Triangular.triangulate(MP);
			if(delaunay) zpp_nape.geom.ZPP_Triangular.optimise(MP);
			zpp_nape.geom.ZPP_Convex.optimise(MP);
			var MQs = MP.extract((function($this) {
				var $r;
				if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
				$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
				return $r;
			}(this)));
			var o = MP;
			o.next = zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool;
			zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = o;
			while(!(MQs.head == null)) {
				var MQ = MQs.pop_unsafe();
				var x = nape.geom.GeomPoly.get();
				x.zpp_inner.vertices = MQ;
				if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
			}
		}
		return ret;
	}
	,triangularDecomposition: function(delaunay,output) {
		if(delaunay == null) delaunay = false;
		var poly = zpp_nape.geom.ZPP_Monotone.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_Monotone.sharedPPoly == null) zpp_nape.geom.ZPP_Monotone.sharedPPoly = new zpp_nape.geom.ZPP_PartitionedPoly();
			$r = zpp_nape.geom.ZPP_Monotone.sharedPPoly;
			return $r;
		}(this)));
		var MPs = poly.extract_partitions((function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList = new zpp_nape.util.ZNPList_ZPP_PartitionedPoly();
			$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList;
			return $r;
		}(this)));
		var ret;
		if(output == null) ret = new nape.geom.GeomPolyList(); else ret = output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			zpp_nape.geom.ZPP_Triangular.triangulate(MP);
			if(delaunay) zpp_nape.geom.ZPP_Triangular.optimise(MP);
			var MQs = MP.extract((function($this) {
				var $r;
				if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
				$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
				return $r;
			}(this)));
			var o = MP;
			o.next = zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool;
			zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = o;
			while(!(MQs.head == null)) {
				var MQ = MQs.pop_unsafe();
				var x = nape.geom.GeomPoly.get();
				x.zpp_inner.vertices = MQ;
				if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
			}
		}
		return ret;
	}
	,inflate: function(inflation) {
		var ret = nape.geom.GeomPoly.get();
		if(this.winding() == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
			return $r;
		}(this))) inflation = -inflation;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var p = nite;
				var prev = p.prev;
				var next = p.next;
				var ax = 0.0;
				var ay = 0.0;
				var bx = 0.0;
				var by = 0.0;
				ax = p.x - prev.x;
				ay = p.y - prev.y;
				bx = next.x - p.x;
				by = next.y - p.y;
				var apx = 0.0;
				var apy = 0.0;
				var bpx = 0.0;
				var bpy = 0.0;
				apx = ax;
				apy = ay;
				var d = apx * apx + apy * apy;
				var imag = 1.0 / Math.sqrt(d);
				var t = imag;
				apx *= t;
				apy *= t;
				var t1 = apx;
				apx = -apy;
				apy = t1;
				var t2 = inflation;
				apx *= t2;
				apy *= t2;
				bpx = bx;
				bpy = by;
				var d1 = bpx * bpx + bpy * bpy;
				var imag1 = 1.0 / Math.sqrt(d1);
				var t3 = imag1;
				bpx *= t3;
				bpy *= t3;
				var t4 = bpx;
				bpx = -bpy;
				bpy = t4;
				var t5 = inflation;
				bpx *= t5;
				bpy *= t5;
				var bapx = 0.0;
				var bapy = 0.0;
				bapx = bpx - apx;
				bapy = bpy - apy;
				var num = by * bapx - bx * bapy;
				var t6;
				if(num == 0) t6 = 0; else t6 = num / (by * ax - bx * ay);
				var px = 0.0;
				var py = 0.0;
				px = p.x + apx;
				py = p.y + apy;
				var t7 = t6;
				px += ax * t7;
				py += ay * t7;
				ret.push(nape.geom.Vec2.get(px,py,null));
				nite = nite.next;
			} while(nite != L);
		}
		return ret.skipForward(1);
	}
	,cut: function(start,end,boundedStart,boundedEnd,output) {
		if(boundedEnd == null) boundedEnd = false;
		if(boundedStart == null) boundedStart = false;
		var ret = zpp_nape.geom.ZPP_Cutter.run(this.zpp_inner.vertices,start,end,boundedStart,boundedEnd,output);
		if(start.zpp_inner.weak) {
			start.dispose();
			true;
		} else false;
		if(end.zpp_inner.weak) {
			end.dispose();
			true;
		} else false;
		return ret;
	}
	,transform: function(matrix) {
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				var t = matrix.zpp_inner.a * v.x + matrix.zpp_inner.b * v.y + matrix.zpp_inner.tx;
				v.y = matrix.zpp_inner.c * v.x + matrix.zpp_inner.d * v.y + matrix.zpp_inner.ty;
				v.x = t;
				nite = nite.next;
			} while(nite != L);
		}
		return this;
	}
	,bounds: function() {
		var minx = 1e100;
		var miny = 1e100;
		var maxx = -1e+100;
		var maxy = -1e+100;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.x < minx) minx = v.x;
				if(v.y < miny) miny = v.y;
				if(v.x > maxx) maxx = v.x;
				if(v.y > maxy) maxy = v.y;
				nite = nite.next;
			} while(nite != L);
		}
		return new nape.geom.AABB(minx,miny,maxx - minx,maxy - miny);
	}
	,top: function() {
		var min = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.y < min.y) min = v;
				nite = nite.next;
			} while(nite != L);
		}
		if(min.wrap == null) {
			min.wrap = nape.geom.Vec2.get(min.x,min.y,null);
			min.wrap.zpp_inner._inuse = true;
			min.wrap.zpp_inner._invalidate = $bind(min,min.modwrap);
			min.wrap.zpp_inner._validate = $bind(min,min.getwrap);
		}
		return min.wrap;
	}
	,bottom: function() {
		var max = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.y > max.y) max = v;
				nite = nite.next;
			} while(nite != L);
		}
		if(max.wrap == null) {
			max.wrap = nape.geom.Vec2.get(max.x,max.y,null);
			max.wrap.zpp_inner._inuse = true;
			max.wrap.zpp_inner._invalidate = $bind(max,max.modwrap);
			max.wrap.zpp_inner._validate = $bind(max,max.getwrap);
		}
		return max.wrap;
	}
	,left: function() {
		var min = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.x < min.x) min = v;
				nite = nite.next;
			} while(nite != L);
		}
		if(min.wrap == null) {
			min.wrap = nape.geom.Vec2.get(min.x,min.y,null);
			min.wrap.zpp_inner._inuse = true;
			min.wrap.zpp_inner._invalidate = $bind(min,min.modwrap);
			min.wrap.zpp_inner._validate = $bind(min,min.getwrap);
		}
		return min.wrap;
	}
	,right: function() {
		var max = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.x > max.x) max = v;
				nite = nite.next;
			} while(nite != L);
		}
		if(max.wrap == null) {
			max.wrap = nape.geom.Vec2.get(max.x,max.y,null);
			max.wrap.zpp_inner._inuse = true;
			max.wrap.zpp_inner._invalidate = $bind(max,max.modwrap);
			max.wrap.zpp_inner._validate = $bind(max,max.getwrap);
		}
		return max.wrap;
	}
	,__class__: nape.geom.GeomPoly
};
nape.geom.GeomPolyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.geom.GeomPolyIterator"] = nape.geom.GeomPolyIterator;
nape.geom.GeomPolyIterator.__name__ = ["nape","geom","GeomPolyIterator"];
nape.geom.GeomPolyIterator.get = function(list) {
	var ret;
	if(nape.geom.GeomPolyIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_GeomPolyList.internal = true;
		var ret1 = new nape.geom.GeomPolyIterator();
		zpp_nape.util.ZPP_GeomPolyList.internal = false;
		ret = ret1;
	} else {
		var r = nape.geom.GeomPolyIterator.zpp_pool;
		nape.geom.GeomPolyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.geom.GeomPolyIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.geom.GeomPolyIterator.zpp_pool;
			nape.geom.GeomPolyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.geom.GeomPolyIterator
};
nape.geom.GeomPolyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_GeomPolyList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.GeomPolyList"] = nape.geom.GeomPolyList;
nape.geom.GeomPolyList.__name__ = ["nape","geom","GeomPolyList"];
nape.geom.GeomPolyList.fromArray = function(array) {
	var ret = new nape.geom.GeomPolyList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.geom.GeomPolyList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.geom.GeomPolyIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.geom.GeomPolyList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.geom.GeomPolyIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.geom.GeomPolyIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.geom.GeomPolyIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape.geom.GeomPolyIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.geom.GeomPolyIterator.zpp_pool;
			nape.geom.GeomPolyIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.geom.GeomPolyList
	,__properties__: {get_length:"get_length"}
};
nape.geom.GeomVertexIterator = function() {
};
$hxClasses["nape.geom.GeomVertexIterator"] = nape.geom.GeomVertexIterator;
nape.geom.GeomVertexIterator.__name__ = ["nape","geom","GeomVertexIterator"];
nape.geom.GeomVertexIterator.prototype = {
	hasNext: function() {
		var ret = this.zpp_inner.ptr != this.zpp_inner.start || this.zpp_inner.first;
		this.zpp_inner.first = false;
		if(!ret) {
			var o = this.zpp_inner;
			o.outer.zpp_inner = null;
			o.ptr = o.start = null;
			o.next = zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool;
			zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = o;
		}
		return ret;
	}
	,next: function() {
		var ret = this.zpp_inner.ptr.wrapper();
		if(this.zpp_inner.forward) this.zpp_inner.ptr = this.zpp_inner.ptr.next; else this.zpp_inner.ptr = this.zpp_inner.ptr.prev;
		return ret;
	}
	,__class__: nape.geom.GeomVertexIterator
};
nape.geom.MarchingSquares = function() { };
$hxClasses["nape.geom.MarchingSquares"] = nape.geom.MarchingSquares;
nape.geom.MarchingSquares.__name__ = ["nape","geom","MarchingSquares"];
nape.geom.MarchingSquares.run = function(iso,bounds,cellsize,quality,subgrid,combine,output) {
	if(combine == null) combine = true;
	if(quality == null) quality = 2;
	var ret;
	if(output != null) ret = output; else ret = new nape.geom.GeomPolyList();
	if(subgrid == null) zpp_nape.geom.ZPP_MarchingSquares.run(iso,(function($this) {
		var $r;
		bounds.zpp_inner.validate();
		$r = bounds.zpp_inner.minx;
		return $r;
	}(this)),(function($this) {
		var $r;
		bounds.zpp_inner.validate();
		$r = bounds.zpp_inner.miny;
		return $r;
	}(this)),bounds.zpp_inner.getmax().get_x(),bounds.zpp_inner.getmax().get_y(),cellsize,quality,combine,ret); else {
		var xp;
		xp = (function($this) {
			var $r;
			bounds.zpp_inner.validate();
			$r = bounds.zpp_inner.width();
			return $r;
		}(this)) / (function($this) {
			var $r;
			subgrid.zpp_inner.validate();
			$r = subgrid.zpp_inner.x;
			return $r;
		}(this));
		var yp;
		yp = (function($this) {
			var $r;
			bounds.zpp_inner.validate();
			$r = bounds.zpp_inner.height();
			return $r;
		}(this)) / (function($this) {
			var $r;
			subgrid.zpp_inner.validate();
			$r = subgrid.zpp_inner.y;
			return $r;
		}(this));
		var xn = xp | 0;
		var yn = yp | 0;
		if(xn != xp) xn++;
		if(yn != yp) yn++;
		var _g = 0;
		while(_g < xn) {
			var x = _g++;
			var x0;
			x0 = (function($this) {
				var $r;
				bounds.zpp_inner.validate();
				$r = bounds.zpp_inner.minx;
				return $r;
			}(this)) + (function($this) {
				var $r;
				subgrid.zpp_inner.validate();
				$r = subgrid.zpp_inner.x;
				return $r;
			}(this)) * x;
			var x1;
			if(x == xn - 1) x1 = bounds.zpp_inner.getmax().get_x(); else x1 = x0 + (function($this) {
				var $r;
				subgrid.zpp_inner.validate();
				$r = subgrid.zpp_inner.x;
				return $r;
			}(this));
			var _g1 = 0;
			while(_g1 < yn) {
				var y = _g1++;
				var y0;
				y0 = (function($this) {
					var $r;
					bounds.zpp_inner.validate();
					$r = bounds.zpp_inner.miny;
					return $r;
				}(this)) + (function($this) {
					var $r;
					subgrid.zpp_inner.validate();
					$r = subgrid.zpp_inner.y;
					return $r;
				}(this)) * y;
				var y1;
				if(y == yn - 1) y1 = bounds.zpp_inner.getmax().get_y(); else y1 = y0 + (function($this) {
					var $r;
					subgrid.zpp_inner.validate();
					$r = subgrid.zpp_inner.y;
					return $r;
				}(this));
				zpp_nape.geom.ZPP_MarchingSquares.run(iso,x0,y0,x1,y1,cellsize,quality,combine,ret);
			}
		}
	}
	if(cellsize.zpp_inner.weak) {
		cellsize.dispose();
		true;
	} else false;
	if(subgrid != null) {
		if(subgrid.zpp_inner.weak) {
			subgrid.dispose();
			true;
		} else false;
	}
	return ret;
};
nape.geom.Mat23 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0.0;
	if(tx == null) tx = 0.0;
	if(d == null) d = 1.0;
	if(c == null) c = 0.0;
	if(b == null) b = 0.0;
	if(a == null) a = 1.0;
	this.zpp_inner = null;
	this.zpp_inner = zpp_nape.geom.ZPP_Mat23.get();
	this.zpp_inner.outer = this;
	this.zpp_inner.a = a;
	this.zpp_inner.invalidate();
	this.zpp_inner.a;
	this.zpp_inner.b = b;
	this.zpp_inner.invalidate();
	this.zpp_inner.b;
	this.zpp_inner.tx = tx;
	this.zpp_inner.invalidate();
	this.zpp_inner.tx;
	this.zpp_inner.c = c;
	this.zpp_inner.invalidate();
	this.zpp_inner.c;
	this.zpp_inner.d = d;
	this.zpp_inner.invalidate();
	this.zpp_inner.d;
	this.zpp_inner.ty = ty;
	this.zpp_inner.invalidate();
	this.zpp_inner.ty;
};
$hxClasses["nape.geom.Mat23"] = nape.geom.Mat23;
nape.geom.Mat23.__name__ = ["nape","geom","Mat23"];
nape.geom.Mat23.fromMatrix = function(matrix) {
	var m = matrix;
	return new nape.geom.Mat23(m.a,m.c,m.b,m.d,m.tx,m.ty);
};
nape.geom.Mat23.rotation = function(angle) {
	var cos = Math.cos(angle);
	var sin = Math.sin(angle);
	return new nape.geom.Mat23(cos,-sin,sin,cos,0,0);
};
nape.geom.Mat23.translation = function(tx,ty) {
	return new nape.geom.Mat23(1,0,0,1,tx,ty);
};
nape.geom.Mat23.scale = function(sx,sy) {
	return new nape.geom.Mat23(sx,0,0,sy,0,0);
};
nape.geom.Mat23.prototype = {
	get_a: function() {
		return this.zpp_inner.a;
	}
	,set_a: function(a) {
		this.zpp_inner.a = a;
		this.zpp_inner.invalidate();
		return this.zpp_inner.a;
	}
	,get_b: function() {
		return this.zpp_inner.b;
	}
	,set_b: function(b) {
		this.zpp_inner.b = b;
		this.zpp_inner.invalidate();
		return this.zpp_inner.b;
	}
	,get_c: function() {
		return this.zpp_inner.c;
	}
	,set_c: function(c) {
		this.zpp_inner.c = c;
		this.zpp_inner.invalidate();
		return this.zpp_inner.c;
	}
	,get_d: function() {
		return this.zpp_inner.d;
	}
	,set_d: function(d) {
		this.zpp_inner.d = d;
		this.zpp_inner.invalidate();
		return this.zpp_inner.d;
	}
	,get_tx: function() {
		return this.zpp_inner.tx;
	}
	,set_tx: function(tx) {
		this.zpp_inner.tx = tx;
		this.zpp_inner.invalidate();
		return this.zpp_inner.tx;
	}
	,get_ty: function() {
		return this.zpp_inner.ty;
	}
	,set_ty: function(ty) {
		this.zpp_inner.ty = ty;
		this.zpp_inner.invalidate();
		return this.zpp_inner.ty;
	}
	,copy: function() {
		return new nape.geom.Mat23(this.zpp_inner.a,this.zpp_inner.b,this.zpp_inner.c,this.zpp_inner.d,this.zpp_inner.tx,this.zpp_inner.ty);
	}
	,set: function(matrix) {
		this.zpp_inner.set(matrix.zpp_inner);
		this.zpp_inner.invalidate();
		return this;
	}
	,setAs: function(a,b,c,d,tx,ty) {
		if(ty == null) ty = 0.0;
		if(tx == null) tx = 0.0;
		if(d == null) d = 1.0;
		if(c == null) c = 0.0;
		if(b == null) b = 0.0;
		if(a == null) a = 1.0;
		this.zpp_inner.setas(a,b,c,d,tx,ty);
		this.zpp_inner.invalidate();
		return this;
	}
	,reset: function() {
		return this.setAs();
	}
	,toMatrix: function(output) {
		if(output == null) output = new openfl.geom.Matrix();
		output.a = this.zpp_inner.a;
		output.b = this.zpp_inner.c;
		output.c = this.zpp_inner.b;
		output.d = this.zpp_inner.d;
		output.tx = this.zpp_inner.tx;
		output.ty = this.zpp_inner.ty;
		return output;
	}
	,get_determinant: function() {
		return this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
	}
	,singular: function() {
		var norm = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.c + this.zpp_inner.d * this.zpp_inner.d;
		var limit = this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
		if(limit < 0) limit = -limit;
		return norm > nape.Config.illConditionedThreshold * limit;
	}
	,inverse: function() {
		var idet = 1.0 / (this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c);
		return new nape.geom.Mat23(this.zpp_inner.d * idet,-this.zpp_inner.b * idet,-this.zpp_inner.c * idet,this.zpp_inner.a * idet,(this.zpp_inner.b * this.zpp_inner.ty - this.zpp_inner.d * this.zpp_inner.tx) * idet,(this.zpp_inner.c * this.zpp_inner.tx - this.zpp_inner.a * this.zpp_inner.ty) * idet);
	}
	,transpose: function() {
		return new nape.geom.Mat23(this.zpp_inner.a,this.zpp_inner.c,this.zpp_inner.b,this.zpp_inner.d,-this.zpp_inner.a * this.zpp_inner.tx - this.zpp_inner.c * this.zpp_inner.ty,-this.zpp_inner.b * this.zpp_inner.tx - this.zpp_inner.d * this.zpp_inner.ty);
	}
	,concat: function(matrix) {
		var m = matrix;
		return new nape.geom.Mat23(m.zpp_inner.a * this.zpp_inner.a + m.zpp_inner.b * this.zpp_inner.c,m.zpp_inner.a * this.zpp_inner.b + m.zpp_inner.b * this.zpp_inner.d,m.zpp_inner.c * this.zpp_inner.a + m.zpp_inner.d * this.zpp_inner.c,m.zpp_inner.c * this.zpp_inner.b + m.zpp_inner.d * this.zpp_inner.d,m.zpp_inner.a * this.zpp_inner.tx + m.zpp_inner.b * this.zpp_inner.ty + m.zpp_inner.tx,m.zpp_inner.c * this.zpp_inner.tx + m.zpp_inner.d * this.zpp_inner.ty + m.zpp_inner.ty);
	}
	,transform: function(point,noTranslation,weak) {
		if(weak == null) weak = false;
		if(noTranslation == null) noTranslation = false;
		var ret;
		if(noTranslation) ret = nape.geom.Vec2.get((function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.a + (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.b,(function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.c + (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.d,weak); else ret = nape.geom.Vec2.get((function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.a + (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.b + this.zpp_inner.tx,(function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.c + (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.d + this.zpp_inner.ty,weak);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,inverseTransform: function(point,noTranslation,weak) {
		if(weak == null) weak = false;
		if(noTranslation == null) noTranslation = false;
		var idet = 1.0 / (this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c);
		var ret;
		if(noTranslation) ret = nape.geom.Vec2.get(((function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.d - (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.b) * idet,((function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.a - (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.c) * idet,weak); else {
			var dx;
			dx = (function($this) {
				var $r;
				point.zpp_inner.validate();
				$r = point.zpp_inner.x;
				return $r;
			}(this)) - this.zpp_inner.tx;
			var dy;
			dy = (function($this) {
				var $r;
				point.zpp_inner.validate();
				$r = point.zpp_inner.y;
				return $r;
			}(this)) - this.zpp_inner.ty;
			ret = nape.geom.Vec2.get((dx * this.zpp_inner.d - dy * this.zpp_inner.b) * idet,(dy * this.zpp_inner.a - dx * this.zpp_inner.c) * idet,weak);
		}
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,toString: function() {
		return "{ a: " + this.zpp_inner.a + " b: " + this.zpp_inner.b + " c: " + this.zpp_inner.c + " d: " + this.zpp_inner.d + " tx: " + this.zpp_inner.tx + " ty: " + this.zpp_inner.ty + " }";
	}
	,equiorthogonal: function() {
		if(this.singular()) return false; else {
			var x = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
			if(x * x < nape.Config.epsilon) {
				var y = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b - this.zpp_inner.c * this.zpp_inner.c - this.zpp_inner.d * this.zpp_inner.d;
				return y * y < nape.Config.epsilon;
			} else return false;
		}
	}
	,orthogonal: function() {
		var x = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
		if(x * x < nape.Config.epsilon) {
			var y = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b - 1;
			var z = this.zpp_inner.c * this.zpp_inner.c + this.zpp_inner.d * this.zpp_inner.d - 1;
			return y * y < nape.Config.epsilon && z * z < nape.Config.epsilon;
		} else return false;
	}
	,equiorthogonalise: function() {
		if(!this.equiorthogonal()) {
			var k1 = Math.sqrt(this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.c * this.zpp_inner.c);
			var k2 = Math.sqrt(this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.d * this.zpp_inner.d);
			var k = (k1 + k2) / 2;
			k1 = k / k1;
			k2 = k / k2;
			var _g = this;
			_g.zpp_inner.a = _g.zpp_inner.a * k1;
			_g.zpp_inner.invalidate();
			_g.zpp_inner.a;
			var _g1 = this;
			_g1.zpp_inner.c = _g1.zpp_inner.c * k1;
			_g1.zpp_inner.invalidate();
			_g1.zpp_inner.c;
			var _g2 = this;
			_g2.zpp_inner.b = _g2.zpp_inner.b * k2;
			_g2.zpp_inner.invalidate();
			_g2.zpp_inner.b;
			var _g3 = this;
			_g3.zpp_inner.d = _g3.zpp_inner.d * k2;
			_g3.zpp_inner.invalidate();
			_g3.zpp_inner.d;
			var dot = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
			var ang = 0.25 * Math.PI - 0.5 * Math.acos(dot / (k * k));
			if(this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c > 0) ang = -ang;
			var sin = Math.sin(ang);
			var cos = Math.cos(ang);
			var a2 = this.zpp_inner.a * cos - this.zpp_inner.c * sin;
			var b2 = this.zpp_inner.b * cos + this.zpp_inner.d * sin;
			this.zpp_inner.c = this.zpp_inner.c * cos + this.zpp_inner.a * sin;
			this.zpp_inner.invalidate();
			this.zpp_inner.c;
			this.zpp_inner.a = a2;
			this.zpp_inner.invalidate();
			this.zpp_inner.a;
			this.zpp_inner.d = this.zpp_inner.d * cos - this.zpp_inner.b * sin;
			this.zpp_inner.invalidate();
			this.zpp_inner.d;
			this.zpp_inner.b = b2;
			this.zpp_inner.invalidate();
			this.zpp_inner.b;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,orthogonalise: function() {
		if(!this.orthogonal()) {
			var k1 = Math.sqrt(this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.c * this.zpp_inner.c);
			var k2 = Math.sqrt(this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.d * this.zpp_inner.d);
			var k = 1;
			k1 = k / k1;
			k2 = k / k2;
			var _g = this;
			_g.zpp_inner.a = _g.zpp_inner.a * k1;
			_g.zpp_inner.invalidate();
			_g.zpp_inner.a;
			var _g1 = this;
			_g1.zpp_inner.c = _g1.zpp_inner.c * k1;
			_g1.zpp_inner.invalidate();
			_g1.zpp_inner.c;
			var _g2 = this;
			_g2.zpp_inner.b = _g2.zpp_inner.b * k2;
			_g2.zpp_inner.invalidate();
			_g2.zpp_inner.b;
			var _g3 = this;
			_g3.zpp_inner.d = _g3.zpp_inner.d * k2;
			_g3.zpp_inner.invalidate();
			_g3.zpp_inner.d;
			var dot = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
			var ang = 0.25 * Math.PI - 0.5 * Math.acos(dot / (k * k));
			if(this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c > 0) ang = -ang;
			var sin = Math.sin(ang);
			var cos = Math.cos(ang);
			var a2 = this.zpp_inner.a * cos - this.zpp_inner.c * sin;
			var b2 = this.zpp_inner.b * cos + this.zpp_inner.d * sin;
			this.zpp_inner.c = this.zpp_inner.c * cos + this.zpp_inner.a * sin;
			this.zpp_inner.invalidate();
			this.zpp_inner.c;
			this.zpp_inner.a = a2;
			this.zpp_inner.invalidate();
			this.zpp_inner.a;
			this.zpp_inner.d = this.zpp_inner.d * cos - this.zpp_inner.b * sin;
			this.zpp_inner.invalidate();
			this.zpp_inner.d;
			this.zpp_inner.b = b2;
			this.zpp_inner.invalidate();
			this.zpp_inner.b;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,__class__: nape.geom.Mat23
	,__properties__: {get_determinant:"get_determinant",set_ty:"set_ty",get_ty:"get_ty",set_tx:"set_tx",get_tx:"get_tx",set_d:"set_d",get_d:"get_d",set_c:"set_c",get_c:"get_c",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
};
nape.geom.MatMN = function(rows,cols) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.geom.ZPP_MatMN(rows,cols);
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.MatMN"] = nape.geom.MatMN;
nape.geom.MatMN.__name__ = ["nape","geom","MatMN"];
nape.geom.MatMN.prototype = {
	get_rows: function() {
		return this.zpp_inner.m;
	}
	,get_cols: function() {
		return this.zpp_inner.n;
	}
	,x: function(row,col) {
		return this.zpp_inner.x[row * this.zpp_inner.n + col];
	}
	,setx: function(row,col,x) {
		return this.zpp_inner.x[row * this.zpp_inner.n + col] = x;
	}
	,toString: function() {
		var ret = "{ ";
		var fst = true;
		var _g1 = 0;
		var _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			if(!fst) ret += "; ";
			fst = false;
			var _g3 = 0;
			var _g2 = this.zpp_inner.n;
			while(_g3 < _g2) {
				var j = _g3++;
				ret += this.zpp_inner.x[i * this.zpp_inner.n + j] + " ";
			}
		}
		ret += "}";
		return ret;
	}
	,transpose: function() {
		var ret = new nape.geom.MatMN(this.zpp_inner.n,this.zpp_inner.m);
		var _g1 = 0;
		var _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = this.zpp_inner.n;
			while(_g3 < _g2) {
				var j = _g3++;
				ret.zpp_inner.x[j * ret.zpp_inner.n + i] = this.zpp_inner.x[i * this.zpp_inner.n + j];
			}
		}
		return ret;
	}
	,mul: function(matrix) {
		var y = matrix;
		var ret = new nape.geom.MatMN(this.zpp_inner.m,y.zpp_inner.n);
		var _g1 = 0;
		var _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = y.zpp_inner.n;
			while(_g3 < _g2) {
				var j = _g3++;
				var v = 0.0;
				var _g5 = 0;
				var _g4 = this.zpp_inner.n;
				while(_g5 < _g4) {
					var k = _g5++;
					v += this.zpp_inner.x[i * this.zpp_inner.n + k] * y.zpp_inner.x[k * y.zpp_inner.n + j];
				}
				ret.zpp_inner.x[i * ret.zpp_inner.n + j] = v;
			}
		}
		return ret;
	}
	,__class__: nape.geom.MatMN
	,__properties__: {get_cols:"get_cols",get_rows:"get_rows"}
};
nape.geom.Ray = function(origin,direction) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.geom.ZPP_Ray();
	this.zpp_inner.origin.set(origin);
	this.zpp_inner.origin;
	this.zpp_inner.direction.set(direction);
	this.zpp_inner.zip_dir = true;
	this.zpp_inner.direction;
	this.zpp_inner.maxdist = Math.POSITIVE_INFINITY;
};
$hxClasses["nape.geom.Ray"] = nape.geom.Ray;
nape.geom.Ray.__name__ = ["nape","geom","Ray"];
nape.geom.Ray.fromSegment = function(start,end) {
	var dir = end.sub(start,true);
	var ret = new nape.geom.Ray(start,dir);
	ret.set_maxDistance(Math.sqrt(zpp_nape.geom.ZPP_VecMath.vec_dsq((function($this) {
		var $r;
		start.zpp_inner.validate();
		$r = start.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		start.zpp_inner.validate();
		$r = start.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		end.zpp_inner.validate();
		$r = end.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		end.zpp_inner.validate();
		$r = end.zpp_inner.y;
		return $r;
	}(this)))));
	if(start.zpp_inner.weak) {
		start.dispose();
		true;
	} else false;
	if(end.zpp_inner.weak) {
		end.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Ray.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_origin: function() {
		return this.zpp_inner.origin;
	}
	,set_origin: function(origin) {
		this.zpp_inner.origin.set(origin);
		return this.zpp_inner.origin;
	}
	,get_direction: function() {
		return this.zpp_inner.direction;
	}
	,set_direction: function(direction) {
		this.zpp_inner.direction.set(direction);
		this.zpp_inner.zip_dir = true;
		return this.zpp_inner.direction;
	}
	,get_maxDistance: function() {
		return this.zpp_inner.maxdist;
	}
	,set_maxDistance: function(maxDistance) {
		this.zpp_inner.maxdist = maxDistance;
		return this.zpp_inner.maxdist;
	}
	,aabb: function() {
		return this.zpp_inner.rayAABB().wrapper();
	}
	,at: function(distance,weak) {
		if(weak == null) weak = false;
		this.zpp_inner.validate_dir();
		return nape.geom.Vec2.get(this.zpp_inner.origin.get_x() + distance * this.zpp_inner.dirx,this.zpp_inner.origin.get_y() + distance * this.zpp_inner.diry,weak);
	}
	,copy: function() {
		var ret = new nape.geom.Ray(this.zpp_inner.origin,this.zpp_inner.direction);
		ret.zpp_inner.maxdist = this.zpp_inner.maxdist;
		ret.zpp_inner.maxdist;
		return ret;
	}
	,__class__: nape.geom.Ray
	,__properties__: {set_maxDistance:"set_maxDistance",get_maxDistance:"get_maxDistance",set_direction:"set_direction",get_direction:"get_direction",set_origin:"set_origin",get_origin:"get_origin",get_userData:"get_userData"}
};
nape.geom.RayResult = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.geom.RayResult"] = nape.geom.RayResult;
nape.geom.RayResult.__name__ = ["nape","geom","RayResult"];
nape.geom.RayResult.prototype = {
	get_normal: function() {
		return this.zpp_inner.normal;
	}
	,get_distance: function() {
		return this.zpp_inner.toiDistance;
	}
	,get_inner: function() {
		return this.zpp_inner.inner;
	}
	,get_shape: function() {
		return this.zpp_inner.shape;
	}
	,dispose: function() {
		this.zpp_inner.free();
	}
	,toString: function() {
		return "{ shape: " + Std.string(this.zpp_inner.shape) + " distance: " + this.zpp_inner.toiDistance + " ?inner: " + Std.string(this.zpp_inner.inner) + " }";
	}
	,__class__: nape.geom.RayResult
	,__properties__: {get_shape:"get_shape",get_inner:"get_inner",get_distance:"get_distance",get_normal:"get_normal"}
};
nape.geom.RayResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.geom.RayResultIterator"] = nape.geom.RayResultIterator;
nape.geom.RayResultIterator.__name__ = ["nape","geom","RayResultIterator"];
nape.geom.RayResultIterator.get = function(list) {
	var ret;
	if(nape.geom.RayResultIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_RayResultList.internal = true;
		var ret1 = new nape.geom.RayResultIterator();
		zpp_nape.util.ZPP_RayResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape.geom.RayResultIterator.zpp_pool;
		nape.geom.RayResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.geom.RayResultIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.geom.RayResultIterator.zpp_pool;
			nape.geom.RayResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.geom.RayResultIterator
};
nape.geom.RayResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_RayResultList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.RayResultList"] = nape.geom.RayResultList;
nape.geom.RayResultList.__name__ = ["nape","geom","RayResultList"];
nape.geom.RayResultList.fromArray = function(array) {
	var ret = new nape.geom.RayResultList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.geom.RayResultList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			} else this.zpp_inner.inner.add(obj);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret;
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.geom.RayResultIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.geom.RayResultList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.geom.RayResultIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.geom.RayResultIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.geom.RayResultIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape.geom.RayResultIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.geom.RayResultIterator.zpp_pool;
			nape.geom.RayResultIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.geom.RayResultList
	,__properties__: {get_length:"get_length"}
};
nape.geom.Vec2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_pool = null;
	this.zpp_inner = null;
	this.zpp_inner = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.Vec2"] = nape.geom.Vec2;
nape.geom.Vec2.__name__ = ["nape","geom","Vec2"];
nape.geom.Vec2.weak = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	return nape.geom.Vec2.get(x,y,true);
};
nape.geom.Vec2.get = function(x,y,weak) {
	if(weak == null) weak = false;
	if(y == null) y = 0;
	if(x == null) x = 0;
	var ret;
	if(zpp_nape.util.ZPP_PubPool.poolVec2 == null) ret = new nape.geom.Vec2(); else {
		ret = zpp_nape.util.ZPP_PubPool.poolVec2;
		zpp_nape.util.ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
	}
	if(ret.zpp_inner == null) {
		ret.zpp_inner = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
		ret.zpp_inner.outer = ret;
	} else {
		if(!((function($this) {
			var $r;
			ret.zpp_inner.validate();
			$r = ret.zpp_inner.x;
			return $r;
		}(this)) == x && (function($this) {
			var $r;
			ret.zpp_inner.validate();
			$r = ret.zpp_inner.y;
			return $r;
		}(this)) == y)) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			ret.zpp_inner.invalidate();
		}
		ret;
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
nape.geom.Vec2.fromPoint = function(point,weak) {
	if(weak == null) weak = false;
	return nape.geom.Vec2.get(point.x,point.y,weak);
};
nape.geom.Vec2.fromPolar = function(length,angle,weak) {
	if(weak == null) weak = false;
	return nape.geom.Vec2.get(length * Math.cos(angle),length * Math.sin(angle),weak);
};
nape.geom.Vec2.dsq = function(a,b) {
	var ret = zpp_nape.geom.ZPP_VecMath.vec_dsq((function($this) {
		var $r;
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		b.zpp_inner.validate();
		$r = b.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		b.zpp_inner.validate();
		$r = b.zpp_inner.y;
		return $r;
	}(this)));
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	if(b.zpp_inner.weak) {
		b.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Vec2.distance = function(a,b) {
	var ret = Math.sqrt(zpp_nape.geom.ZPP_VecMath.vec_dsq((function($this) {
		var $r;
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		b.zpp_inner.validate();
		$r = b.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		b.zpp_inner.validate();
		$r = b.zpp_inner.y;
		return $r;
	}(this))));
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	if(b.zpp_inner.weak) {
		b.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Vec2.prototype = {
	dispose: function() {
		var inner = this.zpp_inner;
		this.zpp_inner.outer = null;
		this.zpp_inner = null;
		var o = this;
		o.zpp_pool = zpp_nape.util.ZPP_PubPool.poolVec2;
		zpp_nape.util.ZPP_PubPool.poolVec2 = o;
		var o1 = inner;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o1;
	}
	,copy: function(weak) {
		if(weak == null) weak = false;
		return nape.geom.Vec2.get((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),weak);
	}
	,toPoint: function(output) {
		if(output == null) output = new openfl.geom.Point();
		this.zpp_inner.validate();
		output.x = this.zpp_inner.x;
		this.zpp_inner.validate();
		output.y = this.zpp_inner.y;
		return output;
	}
	,get_x: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,set_x: function(x) {
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) != x) {
			this.zpp_inner.x = x;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,get_y: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,set_y: function(y) {
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) != y) {
			this.zpp_inner.y = y;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,get_length: function() {
		return Math.sqrt((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
	}
	,set_length: function(length) {
		var t = length / Math.sqrt((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
		var _g = this;
		_g.set_x((function($this) {
			var $r;
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) * t);
		var _g1 = this;
		_g1.set_y((function($this) {
			var $r;
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) * t);
		this.zpp_inner.invalidate();
		return Math.sqrt((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
	}
	,lsq: function() {
		return (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this));
	}
	,set: function(vector) {
		var ret = this.setxy((function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,setxy: function(x,y) {
		if(!((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == x && (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) == y)) {
			this.zpp_inner.x = x;
			this.zpp_inner.y = y;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,get_angle: function() {
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) && (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == 0) return 0.0; else return Math.atan2((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)));
	}
	,set_angle: function(angle) {
		var l = Math.sqrt((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
		this.setxy(l * Math.cos(angle),l * Math.sin(angle));
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) && (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == 0) return 0.0; else return Math.atan2((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)));
	}
	,rotate: function(angle) {
		if(angle % (Math.PI * 2) != 0) {
			var ax = Math.sin(angle);
			var ay = Math.cos(angle);
			var t = ay * this.zpp_inner.x - ax * this.zpp_inner.y;
			this.zpp_inner.y = this.zpp_inner.x * ax + this.zpp_inner.y * ay;
			this.zpp_inner.x = t;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,reflect: function(vec,weak) {
		if(weak == null) weak = false;
		var normal = nape.geom.Vec2.get((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),true).normalise();
		var ret = vec.sub(normal.muleq(2 * normal.dot(vec)),weak);
		if(vec.zpp_inner.weak) {
			vec.dispose();
			true;
		} else false;
		return ret;
	}
	,normalise: function() {
		var d;
		d = (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this));
		var imag = 1.0 / Math.sqrt(d);
		var t = imag;
		var _g = this;
		_g.set_x((function($this) {
			var $r;
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) * t);
		var _g1 = this;
		_g1.set_y((function($this) {
			var $r;
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) * t);
		this.zpp_inner.invalidate();
		return this;
	}
	,unit: function(weak) {
		if(weak == null) weak = false;
		var scale = 1 / zpp_nape.util.ZPP_Math.sqrt((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
		return nape.geom.Vec2.get((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * scale,(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * scale,weak);
	}
	,add: function(vector,weak) {
		if(weak == null) weak = false;
		var ret = nape.geom.Vec2.get((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)),weak);
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,addMul: function(vector,scalar,weak) {
		if(weak == null) weak = false;
		var ret = nape.geom.Vec2.get((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * scalar,(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * scalar,weak);
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,sub: function(vector,weak) {
		if(weak == null) weak = false;
		var ret = nape.geom.Vec2.get((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) - (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) - (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)),weak);
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,mul: function(scalar,weak) {
		if(weak == null) weak = false;
		return nape.geom.Vec2.get((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * scalar,(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * scalar,weak);
	}
	,addeq: function(vector) {
		this.setxy((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return this;
	}
	,subeq: function(vector) {
		this.setxy((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) - (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) - (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return this;
	}
	,muleq: function(scalar) {
		return this.setxy((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * scalar,(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * scalar);
	}
	,dot: function(vector) {
		var ret;
		ret = (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,cross: function(vector) {
		var ret;
		ret = (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) - (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,perp: function(weak) {
		if(weak == null) weak = false;
		return nape.geom.Vec2.get(-(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)),weak);
	}
	,toString: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.toString();
	}
	,__class__: nape.geom.Vec2
	,__properties__: {set_angle:"set_angle",get_angle:"get_angle",set_length:"set_length",get_length:"get_length",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
nape.geom.Vec2Iterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.geom.Vec2Iterator"] = nape.geom.Vec2Iterator;
nape.geom.Vec2Iterator.__name__ = ["nape","geom","Vec2Iterator"];
nape.geom.Vec2Iterator.get = function(list) {
	var ret;
	if(nape.geom.Vec2Iterator.zpp_pool == null) {
		zpp_nape.util.ZPP_Vec2List.internal = true;
		var ret1 = new nape.geom.Vec2Iterator();
		zpp_nape.util.ZPP_Vec2List.internal = false;
		ret = ret1;
	} else {
		var r = nape.geom.Vec2Iterator.zpp_pool;
		nape.geom.Vec2Iterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.geom.Vec2Iterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.geom.Vec2Iterator.zpp_pool;
			nape.geom.Vec2Iterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.geom.Vec2Iterator
};
nape.geom.Vec2List = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_Vec2List();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.Vec2List"] = nape.geom.Vec2List;
nape.geom.Vec2List.__name__ = ["nape","geom","Vec2List"];
nape.geom.Vec2List.fromArray = function(array) {
	var ret = new nape.geom.Vec2List();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.geom.Vec2List.prototype = {
	get_length: function() {
		return this.zpp_gl();
	}
	,zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,has: function(obj) {
		this.zpp_vm();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_vm();
		if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
	}
	,empty: function() {
		return this.zpp_gl() == 0;
	}
	,iterator: function() {
		this.zpp_vm();
		return nape.geom.Vec2Iterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.geom.Vec2List();
		var _g = this.iterator();
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?nape.geom.Vec2.get((function($this) {
				var $r;
				i.zpp_inner.validate();
				$r = i.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				i.zpp_inner.validate();
				$r = i.zpp_inner.y;
				return $r;
			}(this)),false):i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g = xs.iterator();
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) this.add(x);
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g = this.iterator();
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it = this.iterator();
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.geom.Vec2Iterator.zpp_pool;
			nape.geom.Vec2Iterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.zpp_gl()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.geom.Vec2List
	,__properties__: {get_length:"get_length"}
};
nape.geom.Vec3 = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_pool = null;
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.geom.ZPP_Vec3();
	this.zpp_inner.outer = this;
	this.zpp_inner.x = x;
	this.zpp_inner.validate();
	this.zpp_inner.x;
	this.zpp_inner.y = y;
	this.zpp_inner.validate();
	this.zpp_inner.y;
	this.zpp_inner.z = z;
	this.zpp_inner.validate();
	this.zpp_inner.z;
};
$hxClasses["nape.geom.Vec3"] = nape.geom.Vec3;
nape.geom.Vec3.__name__ = ["nape","geom","Vec3"];
nape.geom.Vec3.get = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	var ret;
	if(zpp_nape.util.ZPP_PubPool.poolVec3 == null) ret = new nape.geom.Vec3(); else {
		ret = zpp_nape.util.ZPP_PubPool.poolVec3;
		zpp_nape.util.ZPP_PubPool.poolVec3 = ret.zpp_pool;
		ret.zpp_pool = null;
	}
	ret.setxyz(x,y,z);
	ret.zpp_inner.immutable = false;
	ret.zpp_inner._validate = null;
	return ret;
};
nape.geom.Vec3.prototype = {
	get_x: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,set_x: function(x) {
		this.zpp_inner.x = x;
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,get_y: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,set_y: function(y) {
		this.zpp_inner.y = y;
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,get_z: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.z;
	}
	,set_z: function(z) {
		this.zpp_inner.z = z;
		this.zpp_inner.validate();
		return this.zpp_inner.z;
	}
	,dispose: function() {
		var o = this;
		o.zpp_pool = zpp_nape.util.ZPP_PubPool.poolVec3;
		zpp_nape.util.ZPP_PubPool.poolVec3 = o;
	}
	,get_length: function() {
		return Math.sqrt((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)));
	}
	,set_length: function(length) {
		var t = length / Math.sqrt((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)));
		var t1 = t;
		var _g = this;
		_g.set_x((function($this) {
			var $r;
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) * t1);
		var _g1 = this;
		_g1.set_y((function($this) {
			var $r;
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) * t1);
		var _g2 = this;
		_g2.set_z((function($this) {
			var $r;
			_g2.zpp_inner.validate();
			$r = _g2.zpp_inner.z;
			return $r;
		}(this)) * t);
		return Math.sqrt((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)));
	}
	,lsq: function() {
		return (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this));
	}
	,set: function(vector) {
		return this.setxyz((function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.z;
			return $r;
		}(this)));
	}
	,setxyz: function(x,y,z) {
		this.zpp_inner.x = x;
		this.zpp_inner.validate();
		this.zpp_inner.x;
		this.zpp_inner.y = y;
		this.zpp_inner.validate();
		this.zpp_inner.y;
		this.zpp_inner.z = z;
		this.zpp_inner.validate();
		this.zpp_inner.z;
		return this;
	}
	,xy: function(weak) {
		if(weak == null) weak = false;
		return nape.geom.Vec2.get((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),weak);
	}
	,toString: function() {
		return "{ x: " + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + " y: " + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + " z: " + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) + " }";
	}
	,__class__: nape.geom.Vec3
	,__properties__: {set_length:"set_length",get_length:"get_length",set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
nape.geom.Winding = function() {
};
$hxClasses["nape.geom.Winding"] = nape.geom.Winding;
nape.geom.Winding.__name__ = ["nape","geom","Winding"];
nape.geom.Winding.__properties__ = {get_ANTICLOCKWISE:"get_ANTICLOCKWISE",get_CLOCKWISE:"get_CLOCKWISE",get_UNDEFINED:"get_UNDEFINED"}
nape.geom.Winding.get_UNDEFINED = function() {
	if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
};
nape.geom.Winding.get_CLOCKWISE = function() {
	if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
};
nape.geom.Winding.get_ANTICLOCKWISE = function() {
	if(zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = new nape.geom.Winding();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE;
};
nape.geom.Winding.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
			return $r;
		}(this))) return "UNDEFINED"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
			return $r;
		}(this))) return "CLOCKWISE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE;
			return $r;
		}(this))) return "ANTICLOCKWISE"; else return "";
	}
	,__class__: nape.geom.Winding
};
nape.phys = {};
nape.phys.Interactor = function() {
	this.zpp_inner_i = null;
};
$hxClasses["nape.phys.Interactor"] = nape.phys.Interactor;
nape.phys.Interactor.__name__ = ["nape","phys","Interactor"];
nape.phys.Interactor.prototype = {
	get_id: function() {
		return this.zpp_inner_i.id;
	}
	,get_userData: function() {
		if(this.zpp_inner_i.userData == null) this.zpp_inner_i.userData = { };
		return this.zpp_inner_i.userData;
	}
	,isShape: function() {
		return this.zpp_inner_i.ishape != null;
	}
	,isBody: function() {
		return this.zpp_inner_i.ibody != null;
	}
	,isCompound: function() {
		return this.zpp_inner_i.icompound != null;
	}
	,get_castShape: function() {
		if(this.zpp_inner_i.ishape != null) return this.zpp_inner_i.ishape.outer; else return null;
	}
	,get_castBody: function() {
		if(this.zpp_inner_i.ibody != null) return this.zpp_inner_i.ibody.outer; else return null;
	}
	,get_castCompound: function() {
		if(this.zpp_inner_i.icompound != null) return this.zpp_inner_i.icompound.outer; else return null;
	}
	,get_group: function() {
		if(this.zpp_inner_i.group == null) return null; else return this.zpp_inner_i.group.outer;
	}
	,set_group: function(group) {
		this.zpp_inner_i.immutable_midstep("Interactor::group");
		this.zpp_inner_i.setGroup(group == null?null:group.zpp_inner);
		if(this.zpp_inner_i.group == null) return null; else return this.zpp_inner_i.group.outer;
	}
	,get_cbTypes: function() {
		if(this.zpp_inner_i.wrap_cbTypes == null) this.zpp_inner_i.setupcbTypes();
		return this.zpp_inner_i.wrap_cbTypes;
	}
	,toString: function() {
		return "";
	}
	,__class__: nape.phys.Interactor
	,__properties__: {get_cbTypes:"get_cbTypes",set_group:"set_group",get_group:"get_group",get_castCompound:"get_castCompound",get_castBody:"get_castBody",get_castShape:"get_castShape",get_userData:"get_userData",get_id:"get_id"}
};
nape.phys.Body = function(type,position) {
	this.debugDraw = true;
	this.zpp_inner = null;
	nape.phys.Interactor.call(this);
	this.zpp_inner = new zpp_nape.phys.ZPP_Body();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	if(position != null) {
		position.zpp_inner.validate();
		this.zpp_inner.posx = position.zpp_inner.x;
		position.zpp_inner.validate();
		this.zpp_inner.posy = position.zpp_inner.y;
	} else {
		this.zpp_inner.posx = 0;
		this.zpp_inner.posy = 0;
	}
	this.set_type(type == null?(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)):type);
	if(position != null) {
		if(position.zpp_inner.weak) {
			position.dispose();
			true;
		} else false;
	}
	this.zpp_inner_i.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_BODY.zpp_inner);
};
$hxClasses["nape.phys.Body"] = nape.phys.Body;
nape.phys.Body.__name__ = ["nape","phys","Body"];
nape.phys.Body.__super__ = nape.phys.Interactor;
nape.phys.Body.prototype = $extend(nape.phys.Interactor.prototype,{
	get_type: function() {
		return zpp_nape.phys.ZPP_Body.types[this.zpp_inner.type];
	}
	,set_type: function(type) {
		this.zpp_inner.immutable_midstep("Body::type");
		if(zpp_nape.phys.ZPP_Body.types[this.zpp_inner.type] != type) {
			var ntype;
			if(type == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
				return $r;
			}(this))) ntype = zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC; else if(type == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
				return $r;
			}(this))) ntype = zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC; else ntype = zpp_nape.util.ZPP_Flags.id_BodyType_STATIC;
			if(ntype == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.zpp_inner.space != null) {
				this.zpp_inner.velx = 0;
				this.zpp_inner.vely = 0;
				this.zpp_inner.angvel = 0;
			}
			this.zpp_inner.invalidate_type();
			if(this.zpp_inner.space != null) this.zpp_inner.space.transmitType(this.zpp_inner,ntype); else this.zpp_inner.type = ntype;
		}
		return zpp_nape.phys.ZPP_Body.types[this.zpp_inner.type];
	}
	,get_isBullet: function() {
		return this.zpp_inner.bulletEnabled;
	}
	,set_isBullet: function(isBullet) {
		this.zpp_inner.bulletEnabled = isBullet;
		return this.zpp_inner.bulletEnabled;
	}
	,get_disableCCD: function() {
		return this.zpp_inner.disableCCD;
	}
	,set_disableCCD: function(disableCCD) {
		this.zpp_inner.disableCCD = disableCCD;
		return this.zpp_inner.disableCCD;
	}
	,integrate: function(deltaTime) {
		this.zpp_inner.immutable_midstep("Body::space");
		if(deltaTime == 0) return this;
		var cur = this.zpp_inner;
		cur.sweepTime = 0;
		cur.sweep_angvel = cur.angvel;
		cur.sweepIntegrate(deltaTime);
		cur.invalidate_pos();
		cur.invalidate_rot();
		cur.sweepTime = 0;
		return this;
	}
	,isStatic: function() {
		return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC;
	}
	,isDynamic: function() {
		return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC;
	}
	,isKinematic: function() {
		return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC;
	}
	,get_shapes: function() {
		return this.zpp_inner.wrap_shapes;
	}
	,get_compound: function() {
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,set_compound: function(compound) {
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
			if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_bodies.remove(this);
			if(compound != null) compound.zpp_inner.wrap_bodies.add(this);
		}
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,get_space: function() {
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,set_space: function(space) {
		this.zpp_inner.immutable_midstep("Body::space");
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner.component.woken = false;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(this);
			if(space != null) space.zpp_inner.wrap_bodies.add(this);
		}
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,get_arbiters: function() {
		if(this.zpp_inner.wrap_arbiters == null) this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get(this.zpp_inner.arbiters,true);
		return this.zpp_inner.wrap_arbiters;
	}
	,get_isSleeping: function() {
		return this.zpp_inner.component.sleeping;
	}
	,get_constraints: function() {
		if(this.zpp_inner.wrap_constraints == null) this.zpp_inner.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get(this.zpp_inner.constraints,true);
		return this.zpp_inner.wrap_constraints;
	}
	,copy: function() {
		return this.zpp_inner.copy();
	}
	,get_position: function() {
		if(this.zpp_inner.wrap_pos == null) this.zpp_inner.setupPosition();
		return this.zpp_inner.wrap_pos;
	}
	,set_position: function(position) {
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this))).set(position);
		if(this.zpp_inner.wrap_pos == null) this.zpp_inner.setupPosition();
		return this.zpp_inner.wrap_pos;
	}
	,get_velocity: function() {
		if(this.zpp_inner.wrap_vel == null) this.zpp_inner.setupVelocity();
		return this.zpp_inner.wrap_vel;
	}
	,set_velocity: function(velocity) {
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_vel == null) $this.zpp_inner.setupVelocity();
			$r = $this.zpp_inner.wrap_vel;
			return $r;
		}(this))).set(velocity);
		if(this.zpp_inner.wrap_vel == null) this.zpp_inner.setupVelocity();
		return this.zpp_inner.wrap_vel;
	}
	,setVelocityFromTarget: function(targetPosition,targetRotation,deltaTime) {
		var idt = 1 / deltaTime;
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_vel == null) $this.zpp_inner.setupVelocity();
			$r = $this.zpp_inner.wrap_vel;
			return $r;
		}(this))).set(targetPosition.sub((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this)),true).muleq(idt));
		this.set_angularVel((targetRotation - this.zpp_inner.rot) * idt);
		if(targetPosition.zpp_inner.weak) {
			targetPosition.dispose();
			true;
		} else false;
		return this;
	}
	,get_kinematicVel: function() {
		if(this.zpp_inner.wrap_kinvel == null) this.zpp_inner.setupkinvel();
		return this.zpp_inner.wrap_kinvel;
	}
	,set_kinematicVel: function(kinematicVel) {
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_kinvel == null) $this.zpp_inner.setupkinvel();
			$r = $this.zpp_inner.wrap_kinvel;
			return $r;
		}(this))).set(kinematicVel);
		if(this.zpp_inner.wrap_kinvel == null) this.zpp_inner.setupkinvel();
		return this.zpp_inner.wrap_kinvel;
	}
	,get_surfaceVel: function() {
		if(this.zpp_inner.wrap_svel == null) this.zpp_inner.setupsvel();
		return this.zpp_inner.wrap_svel;
	}
	,set_surfaceVel: function(surfaceVel) {
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_svel == null) $this.zpp_inner.setupsvel();
			$r = $this.zpp_inner.wrap_svel;
			return $r;
		}(this))).set(surfaceVel);
		if(this.zpp_inner.wrap_svel == null) this.zpp_inner.setupsvel();
		return this.zpp_inner.wrap_svel;
	}
	,get_force: function() {
		if(this.zpp_inner.wrap_force == null) this.zpp_inner.setupForce();
		return this.zpp_inner.wrap_force;
	}
	,set_force: function(force) {
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_force == null) $this.zpp_inner.setupForce();
			$r = $this.zpp_inner.wrap_force;
			return $r;
		}(this))).set(force);
		if(this.zpp_inner.wrap_force == null) this.zpp_inner.setupForce();
		return this.zpp_inner.wrap_force;
	}
	,get_constraintVelocity: function() {
		if(this.zpp_inner.wrapcvel == null) this.zpp_inner.setup_cvel();
		return this.zpp_inner.wrapcvel;
	}
	,get_rotation: function() {
		return this.zpp_inner.rot;
	}
	,set_rotation: function(rotation) {
		this.zpp_inner.immutable_midstep("Body::rotation");
		if(this.zpp_inner.rot != rotation) {
			this.zpp_inner.rot = rotation;
			this.zpp_inner.invalidate_rot();
			this.zpp_inner.wake();
		}
		return this.zpp_inner.rot;
	}
	,get_angularVel: function() {
		return this.zpp_inner.angvel;
	}
	,set_angularVel: function(angularVel) {
		if(this.zpp_inner.angvel != angularVel) {
			this.zpp_inner.angvel = angularVel;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.angvel;
	}
	,get_kinAngVel: function() {
		return this.zpp_inner.kinangvel;
	}
	,set_kinAngVel: function(kinAngVel) {
		if(this.zpp_inner.kinangvel != kinAngVel) {
			this.zpp_inner.kinangvel = kinAngVel;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.kinangvel;
	}
	,get_torque: function() {
		return this.zpp_inner.torque;
	}
	,set_torque: function(torque) {
		if(this.zpp_inner.torque != torque) {
			this.zpp_inner.torque = torque;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.torque;
	}
	,get_bounds: function() {
		return this.zpp_inner.aabb.wrapper();
	}
	,get_allowMovement: function() {
		return !this.zpp_inner.nomove;
	}
	,set_allowMovement: function(allowMovement) {
		this.zpp_inner.immutable_midstep("Body::" + (allowMovement == null?"null":"" + allowMovement));
		if(!this.zpp_inner.nomove != allowMovement) {
			this.zpp_inner.nomove = !allowMovement;
			this.zpp_inner.invalidate_mass();
		}
		return !this.zpp_inner.nomove;
	}
	,get_allowRotation: function() {
		return !this.zpp_inner.norotate;
	}
	,set_allowRotation: function(allowRotation) {
		this.zpp_inner.immutable_midstep("Body::" + (allowRotation == null?"null":"" + allowRotation));
		if(!this.zpp_inner.norotate != allowRotation) {
			this.zpp_inner.norotate = !allowRotation;
			this.zpp_inner.invalidate_inertia();
		}
		return !this.zpp_inner.norotate;
	}
	,get_massMode: function() {
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,set_massMode: function(massMode) {
		this.zpp_inner.immutable_midstep("Body::massMode");
		if(massMode == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
			return $r;
		}(this))) this.zpp_inner.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT; else this.zpp_inner.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_FIXED;
		this.zpp_inner.invalidate_mass();
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,get_constraintMass: function() {
		if(!this.zpp_inner.world) this.zpp_inner.validate_mass();
		return this.zpp_inner.smass;
	}
	,get_mass: function() {
		this.zpp_inner.validate_mass();
		return this.zpp_inner.cmass;
	}
	,set_mass: function(mass) {
		this.zpp_inner.immutable_midstep("Body::mass");
		this.zpp_inner.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_FIXED;
		this.zpp_inner.cmass = mass;
		this.zpp_inner.invalidate_mass();
		this.zpp_inner.validate_mass();
		return this.zpp_inner.cmass;
	}
	,get_gravMassMode: function() {
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,set_gravMassMode: function(gravMassMode) {
		this.zpp_inner.immutable_midstep("Body::gravMassMode");
		if(gravMassMode == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
			return $r;
		}(this))) this.zpp_inner.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED; else if(gravMassMode == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
			return $r;
		}(this))) this.zpp_inner.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT; else this.zpp_inner.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED;
		this.zpp_inner.invalidate_gravMass();
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,get_gravMass: function() {
		this.zpp_inner.validate_gravMass();
		return this.zpp_inner.gravMass;
	}
	,set_gravMass: function(gravMass) {
		this.zpp_inner.immutable_midstep("Body::gravMass");
		this.zpp_inner.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED;
		this.zpp_inner.gravMass = gravMass;
		this.zpp_inner.invalidate_gravMass();
		this.zpp_inner.validate_gravMass();
		return this.zpp_inner.gravMass;
	}
	,get_gravMassScale: function() {
		this.zpp_inner.validate_gravMassScale();
		return this.zpp_inner.gravMassScale;
	}
	,set_gravMassScale: function(gravMassScale) {
		this.zpp_inner.immutable_midstep("Body::gravMassScale");
		this.zpp_inner.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED;
		this.zpp_inner.gravMassScale = gravMassScale;
		this.zpp_inner.invalidate_gravMassScale();
		this.zpp_inner.validate_gravMassScale();
		return this.zpp_inner.gravMassScale;
	}
	,get_inertiaMode: function() {
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.inertiaMode];
	}
	,set_inertiaMode: function(inertiaMode) {
		this.zpp_inner.immutable_midstep("Body::inertiaMode");
		if(inertiaMode == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
			return $r;
		}(this))) this.zpp_inner.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_FIXED; else this.zpp_inner.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT;
		this.zpp_inner.invalidate_inertia();
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.inertiaMode];
	}
	,get_constraintInertia: function() {
		if(!this.zpp_inner.world) this.zpp_inner.validate_inertia();
		return this.zpp_inner.sinertia;
	}
	,get_inertia: function() {
		this.zpp_inner.validate_inertia();
		return this.zpp_inner.cinertia;
	}
	,set_inertia: function(inertia) {
		this.zpp_inner.immutable_midstep("Body::inertia");
		this.zpp_inner.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_FIXED;
		this.zpp_inner.cinertia = inertia;
		this.zpp_inner.invalidate_inertia();
		this.zpp_inner.validate_inertia();
		return this.zpp_inner.cinertia;
	}
	,connectedBodies: function(depth,output) {
		if(depth == null) depth = -1;
		return this.zpp_inner.connectedBodies(depth,output);
	}
	,interactingBodies: function(type,depth,output) {
		if(depth == null) depth = -1;
		var arbiter_type;
		if(type == null) arbiter_type = zpp_nape.dynamics.ZPP_Arbiter.COL | zpp_nape.dynamics.ZPP_Arbiter.SENSOR | zpp_nape.dynamics.ZPP_Arbiter.FLUID; else if(type == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
			return $r;
		}(this))) arbiter_type = zpp_nape.dynamics.ZPP_Arbiter.COL; else if(type == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
			return $r;
		}(this))) arbiter_type = zpp_nape.dynamics.ZPP_Arbiter.SENSOR; else arbiter_type = zpp_nape.dynamics.ZPP_Arbiter.FLUID;
		return this.zpp_inner.interactingBodies(arbiter_type,depth,output);
	}
	,crushFactor: function() {
		var msum = 0.0;
		var jsum = nape.geom.Vec2.get(null,null,null);
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var arb;
			_g.zpp_critical = false;
			arb = _g.zpp_inner.at(_g.zpp_i++);
			var imp3 = arb.totalImpulse(this);
			var imp = imp3.xy();
			jsum.addeq(imp);
			msum += Math.sqrt((function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)));
			imp.dispose();
			imp3.dispose();
		}
		var _g1 = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_constraints == null) $this.zpp_inner.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get($this.zpp_inner.constraints,true);
			$r = $this.zpp_inner.wrap_constraints;
			return $r;
		}(this))).iterator();
		while(_g1.hasNext()) {
			var con;
			_g1.zpp_critical = false;
			con = _g1.zpp_inner.at(_g1.zpp_i++);
			var imp31 = con.bodyImpulse(this);
			var imp1 = imp31.xy();
			jsum.addeq(imp1);
			msum += Math.sqrt((function($this) {
				var $r;
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.x;
				return $r;
			}(this)) * (function($this) {
				var $r;
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.y;
				return $r;
			}(this)) * (function($this) {
				var $r;
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.y;
				return $r;
			}(this)));
			imp1.dispose();
			imp31.dispose();
		}
		var ret;
		ret = (msum - Math.sqrt((function($this) {
			var $r;
			jsum.zpp_inner.validate();
			$r = jsum.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			jsum.zpp_inner.validate();
			$r = jsum.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			jsum.zpp_inner.validate();
			$r = jsum.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			jsum.zpp_inner.validate();
			$r = jsum.zpp_inner.y;
			return $r;
		}(this)))) / ((function($this) {
			var $r;
			$this.zpp_inner.validate_mass();
			$r = $this.zpp_inner.cmass;
			return $r;
		}(this)) * (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.pre_dt);
		jsum.dispose();
		return ret;
	}
	,localPointToWorld: function(point,weak) {
		if(weak == null) weak = false;
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = this.zpp_inner.axisy * (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.axisx * (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this));
		tempy = (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisx + (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisy;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return nape.geom.Vec2.get(tempx + this.zpp_inner.posx,tempy + this.zpp_inner.posy,weak);
	}
	,worldPointToLocal: function(point,weak) {
		if(weak == null) weak = false;
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		var pointx = 0.0;
		var pointy = 0.0;
		pointx = (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.posx;
		pointy = (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) - this.zpp_inner.posy;
		tempx = pointx * this.zpp_inner.axisy + pointy * this.zpp_inner.axisx;
		tempy = pointy * this.zpp_inner.axisy - pointx * this.zpp_inner.axisx;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return nape.geom.Vec2.get(tempx,tempy,weak);
	}
	,localVectorToWorld: function(vector,weak) {
		if(weak == null) weak = false;
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = this.zpp_inner.axisy * (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.axisx * (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this));
		tempy = (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisx + (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisy;
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return nape.geom.Vec2.get(tempx,tempy,weak);
	}
	,worldVectorToLocal: function(vector,weak) {
		if(weak == null) weak = false;
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisy + (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisx;
		tempy = (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisy - (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisx;
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return nape.geom.Vec2.get(tempx,tempy,weak);
	}
	,applyImpulse: function(impulse,pos,sleepable) {
		if(sleepable == null) sleepable = false;
		if(sleepable && this.zpp_inner.component.sleeping) {
			if(impulse.zpp_inner.weak) {
				impulse.dispose();
				true;
			} else false;
			if(pos != null) {
				if(pos.zpp_inner.weak) {
					pos.dispose();
					true;
				} else false;
			}
			return this;
		}
		this.zpp_inner.validate_mass();
		var t = this.zpp_inner.imass;
		this.zpp_inner.velx += (function($this) {
			var $r;
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.x;
			return $r;
		}(this)) * t;
		this.zpp_inner.vely += (function($this) {
			var $r;
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.y;
			return $r;
		}(this)) * t;
		if(pos != null) {
			var rx = 0.0;
			var ry = 0.0;
			rx = (function($this) {
				var $r;
				pos.zpp_inner.validate();
				$r = pos.zpp_inner.x;
				return $r;
			}(this)) - this.zpp_inner.posx;
			ry = (function($this) {
				var $r;
				pos.zpp_inner.validate();
				$r = pos.zpp_inner.y;
				return $r;
			}(this)) - this.zpp_inner.posy;
			this.zpp_inner.validate_inertia();
			this.zpp_inner.angvel += ((function($this) {
				var $r;
				impulse.zpp_inner.validate();
				$r = impulse.zpp_inner.y;
				return $r;
			}(this)) * rx - (function($this) {
				var $r;
				impulse.zpp_inner.validate();
				$r = impulse.zpp_inner.x;
				return $r;
			}(this)) * ry) * this.zpp_inner.iinertia;
			if(pos.zpp_inner.weak) {
				pos.dispose();
				true;
			} else false;
		}
		if(!sleepable) {
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.zpp_inner.wake();
		}
		if(impulse.zpp_inner.weak) {
			impulse.dispose();
			true;
		} else false;
		return this;
	}
	,applyAngularImpulse: function(impulse,sleepable) {
		if(sleepable == null) sleepable = false;
		if(sleepable && this.zpp_inner.component.sleeping) return this;
		this.zpp_inner.validate_inertia();
		this.zpp_inner.angvel += impulse * this.zpp_inner.iinertia;
		if(!sleepable) {
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.zpp_inner.wake();
		}
		return this;
	}
	,translateShapes: function(translation) {
		this.zpp_inner.immutable_midstep("Body::translateShapes()");
		var weak = translation.zpp_inner.weak;
		translation.zpp_inner.weak = false;
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.translate(translation);
			cx_ite = cx_ite.next;
		}
		translation.zpp_inner.weak = weak;
		if(translation.zpp_inner.weak) {
			translation.dispose();
			true;
		} else false;
		return this;
	}
	,rotateShapes: function(angle) {
		this.zpp_inner.immutable_midstep("Body::rotateShapes()");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.rotate(angle);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,scaleShapes: function(scaleX,scaleY) {
		this.zpp_inner.immutable_midstep("Body::scaleShapes()");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.scale(scaleX,scaleY);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,transformShapes: function(matrix) {
		this.zpp_inner.immutable_midstep("Body::transformShapes()");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.transform(matrix);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,align: function() {
		this.zpp_inner.immutable_midstep("Body::align()");
		this.zpp_inner.validate_localCOM();
		var dx = nape.geom.Vec2.get(-this.zpp_inner.localCOMx,-this.zpp_inner.localCOMy,null);
		this.translateShapes(dx);
		var dx2 = this.localVectorToWorld(dx);
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this))).subeq(dx2);
		if(this.zpp_inner.pre_posx < Math.POSITIVE_INFINITY) {
			var t = 1.0;
			this.zpp_inner.pre_posx -= (function($this) {
				var $r;
				dx2.zpp_inner.validate();
				$r = dx2.zpp_inner.x;
				return $r;
			}(this)) * t;
			this.zpp_inner.pre_posy -= (function($this) {
				var $r;
				dx2.zpp_inner.validate();
				$r = dx2.zpp_inner.y;
				return $r;
			}(this)) * t;
		}
		dx.dispose();
		dx2.dispose();
		return this;
	}
	,rotate: function(centre,angle) {
		var weak = centre.zpp_inner.weak;
		centre.zpp_inner.weak = false;
		var del = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this))).sub(centre);
		del.rotate(angle);
		this.set_position(centre.add(del,true));
		del.dispose();
		var _g = this;
		_g.set_rotation(_g.zpp_inner.rot + angle);
		centre.zpp_inner.weak = weak;
		if(centre.zpp_inner.weak) {
			centre.dispose();
			true;
		} else false;
		return this;
	}
	,setShapeMaterials: function(material) {
		this.zpp_inner.immutable_midstep("Body::setShapeMaterials()");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.set_material(material);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,setShapeFilters: function(filter) {
		this.zpp_inner.immutable_midstep("Body::setShapeFilters()");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.set_filter(filter);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,setShapeFluidProperties: function(fluidProperties) {
		this.zpp_inner.immutable_midstep("Body::setShapeFluidProperties()");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.set_fluidProperties(fluidProperties);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,get_localCOM: function() {
		if(this.zpp_inner.wrap_localCOM == null) {
			this.zpp_inner.wrap_localCOM = nape.geom.Vec2.get(this.zpp_inner.localCOMx,this.zpp_inner.localCOMy,null);
			this.zpp_inner.wrap_localCOM.zpp_inner._inuse = true;
			this.zpp_inner.wrap_localCOM.zpp_inner._immutable = true;
			this.zpp_inner.wrap_localCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getlocalCOM));
		}
		return this.zpp_inner.wrap_localCOM;
	}
	,get_worldCOM: function() {
		if(this.zpp_inner.wrap_worldCOM == null) {
			this.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get(this.zpp_inner.worldCOMx,this.zpp_inner.worldCOMy,null);
			this.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getworldCOM));
		}
		return this.zpp_inner.wrap_worldCOM;
	}
	,normalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_collisionArbiter().normalImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,tangentImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_collisionArbiter().tangentImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,totalContactsImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_collisionArbiter().totalImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,rollingImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var ret = 0.0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			ret += arb.wrapper().get_collisionArbiter().rollingImpulse(this,freshOnly);
		}
		return ret;
	}
	,buoyancyImpulse: function(body) {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.FLUID) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_fluidArbiter().buoyancyImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,dragImpulse: function(body) {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.FLUID) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_fluidArbiter().dragImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,totalFluidImpulse: function(body) {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.FLUID) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_fluidArbiter().totalImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,constraintsImpulse: function() {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var cx_ite = this.zpp_inner.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			var imp = con.outer.bodyImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
			cx_ite = cx_ite.next;
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.SENSOR) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().totalImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		var cx_ite = this.zpp_inner.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.active) {
				var imp1 = con.outer.bodyImpulse(this);
				var t2 = 1;
				var t3 = t2;
				retx += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.x;
					return $r;
				}(this)) * t3;
				rety += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.y;
					return $r;
				}(this)) * t3;
				retz += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.z;
					return $r;
				}(this)) * t2;
				imp1.dispose();
			}
			cx_ite = cx_ite.next;
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,contains: function(point) {
		var wasWeak = point.zpp_inner.weak;
		point.zpp_inner.weak = false;
		var retvar;
		retvar = false;
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.outer.contains(point)) {
				retvar = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		point.zpp_inner.weak = wasWeak;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return retvar;
	}
	,toString: function() {
		return (this.zpp_inner.world?"(space::world":"(" + (this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC?"dynamic":this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?"static":"kinematic")) + ")#" + this.zpp_inner_i.id;
	}
	,__class__: nape.phys.Body
	,__properties__: $extend(nape.phys.Interactor.prototype.__properties__,{get_worldCOM:"get_worldCOM",get_localCOM:"get_localCOM",set_inertia:"set_inertia",get_inertia:"get_inertia",get_constraintInertia:"get_constraintInertia",set_inertiaMode:"set_inertiaMode",get_inertiaMode:"get_inertiaMode",set_gravMassScale:"set_gravMassScale",get_gravMassScale:"get_gravMassScale",set_gravMass:"set_gravMass",get_gravMass:"get_gravMass",set_gravMassMode:"set_gravMassMode",get_gravMassMode:"get_gravMassMode",set_mass:"set_mass",get_mass:"get_mass",get_constraintMass:"get_constraintMass",set_massMode:"set_massMode",get_massMode:"get_massMode",set_allowRotation:"set_allowRotation",get_allowRotation:"get_allowRotation",set_allowMovement:"set_allowMovement",get_allowMovement:"get_allowMovement",get_bounds:"get_bounds",set_torque:"set_torque",get_torque:"get_torque",set_kinAngVel:"set_kinAngVel",get_kinAngVel:"get_kinAngVel",set_angularVel:"set_angularVel",get_angularVel:"get_angularVel",set_rotation:"set_rotation",get_rotation:"get_rotation",get_constraintVelocity:"get_constraintVelocity",set_force:"set_force",get_force:"get_force",set_surfaceVel:"set_surfaceVel",get_surfaceVel:"get_surfaceVel",set_kinematicVel:"set_kinematicVel",get_kinematicVel:"get_kinematicVel",set_velocity:"set_velocity",get_velocity:"get_velocity",set_position:"set_position",get_position:"get_position",get_constraints:"get_constraints",get_isSleeping:"get_isSleeping",get_arbiters:"get_arbiters",set_space:"set_space",get_space:"get_space",set_compound:"set_compound",get_compound:"get_compound",get_shapes:"get_shapes",set_disableCCD:"set_disableCCD",get_disableCCD:"get_disableCCD",set_isBullet:"set_isBullet",get_isBullet:"get_isBullet",set_type:"set_type",get_type:"get_type"})
});
nape.phys.BodyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.phys.BodyIterator"] = nape.phys.BodyIterator;
nape.phys.BodyIterator.__name__ = ["nape","phys","BodyIterator"];
nape.phys.BodyIterator.get = function(list) {
	var ret;
	if(nape.phys.BodyIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_BodyList.internal = true;
		var ret1 = new nape.phys.BodyIterator();
		zpp_nape.util.ZPP_BodyList.internal = false;
		ret = ret1;
	} else {
		var r = nape.phys.BodyIterator.zpp_pool;
		nape.phys.BodyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.phys.BodyIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.phys.BodyIterator.zpp_pool;
			nape.phys.BodyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.phys.BodyIterator
};
nape.phys.BodyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_BodyList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.phys.BodyList"] = nape.phys.BodyList;
nape.phys.BodyList.__name__ = ["nape","phys","BodyList"];
nape.phys.BodyList.fromArray = function(array) {
	var ret = new nape.phys.BodyList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.phys.BodyList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.phys.BodyIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.phys.BodyList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.phys.BodyIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.phys.BodyIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.phys.BodyIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape.phys.BodyIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.phys.BodyIterator.zpp_pool;
			nape.phys.BodyIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.phys.BodyList
	,__properties__: {get_length:"get_length"}
};
nape.phys.BodyType = function() {
};
$hxClasses["nape.phys.BodyType"] = nape.phys.BodyType;
nape.phys.BodyType.__name__ = ["nape","phys","BodyType"];
nape.phys.BodyType.__properties__ = {get_KINEMATIC:"get_KINEMATIC",get_DYNAMIC:"get_DYNAMIC",get_STATIC:"get_STATIC"}
nape.phys.BodyType.get_STATIC = function() {
	if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.BodyType_STATIC;
};
nape.phys.BodyType.get_DYNAMIC = function() {
	if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
};
nape.phys.BodyType.get_KINEMATIC = function() {
	if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
};
nape.phys.BodyType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this))) return "STATIC"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
			return $r;
		}(this))) return "DYNAMIC"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
			return $r;
		}(this))) return "KINEMATIC"; else return "";
	}
	,__class__: nape.phys.BodyType
};
nape.phys.Compound = function() {
	this.zpp_inner = null;
	nape.phys.Interactor.call(this);
	this.zpp_inner = new zpp_nape.phys.ZPP_Compound();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_COMPOUND.zpp_inner);
};
$hxClasses["nape.phys.Compound"] = nape.phys.Compound;
nape.phys.Compound.__name__ = ["nape","phys","Compound"];
nape.phys.Compound.__super__ = nape.phys.Interactor;
nape.phys.Compound.prototype = $extend(nape.phys.Interactor.prototype,{
	get_bodies: function() {
		return this.zpp_inner.wrap_bodies;
	}
	,get_constraints: function() {
		return this.zpp_inner.wrap_constraints;
	}
	,get_compounds: function() {
		return this.zpp_inner.wrap_compounds;
	}
	,get_compound: function() {
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,set_compound: function(compound) {
		this.zpp_inner.immutable_midstep("Compound::compound");
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
			if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_compounds.remove(this);
			if(compound != null) compound.zpp_inner.wrap_compounds.add(this);
		}
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,get_space: function() {
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,set_space: function(space) {
		this.zpp_inner.immutable_midstep("Compound::space");
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.wrap_compounds.remove(this);
			if(space != null) space.zpp_inner.wrap_compounds.add(this);
		}
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,toString: function() {
		return "Compound" + this.zpp_inner_i.id;
	}
	,copy: function() {
		return this.zpp_inner.copy();
	}
	,breakApart: function() {
		this.zpp_inner.breakApart();
	}
	,visitBodies: function(lambda) {
		var _g = this.zpp_inner.wrap_bodies.iterator();
		while(_g.hasNext()) {
			var b;
			_g.zpp_critical = false;
			b = _g.zpp_inner.at(_g.zpp_i++);
			lambda(b);
		}
		var _g1 = this.zpp_inner.wrap_compounds.iterator();
		while(_g1.hasNext()) {
			var c;
			_g1.zpp_critical = false;
			c = _g1.zpp_inner.at(_g1.zpp_i++);
			c.visitBodies(lambda);
		}
	}
	,visitConstraints: function(lambda) {
		var _g = this.zpp_inner.wrap_constraints.iterator();
		while(_g.hasNext()) {
			var c;
			_g.zpp_critical = false;
			c = _g.zpp_inner.at(_g.zpp_i++);
			lambda(c);
		}
		var _g1 = this.zpp_inner.wrap_compounds.iterator();
		while(_g1.hasNext()) {
			var c1;
			_g1.zpp_critical = false;
			c1 = _g1.zpp_inner.at(_g1.zpp_i++);
			c1.visitConstraints(lambda);
		}
	}
	,visitCompounds: function(lambda) {
		var _g = this.zpp_inner.wrap_compounds.iterator();
		while(_g.hasNext()) {
			var c;
			_g.zpp_critical = false;
			c = _g.zpp_inner.at(_g.zpp_i++);
			lambda(c);
			c.visitCompounds(lambda);
		}
	}
	,COM: function(weak) {
		if(weak == null) weak = false;
		var ret = nape.geom.Vec2.get(0,0,weak);
		var total = 0.0;
		this.visitBodies(function(b) {
			if(!b.zpp_inner.wrap_shapes.empty()) {
				ret.addeq(((function($this) {
					var $r;
					if(b.zpp_inner.wrap_worldCOM == null) {
						b.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get(b.zpp_inner.worldCOMx,b.zpp_inner.worldCOMy,null);
						b.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
						b.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
						b.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=b.zpp_inner,$bind($_,$_.getworldCOM));
					}
					$r = b.zpp_inner.wrap_worldCOM;
					return $r;
				}(this))).mul((function($this) {
					var $r;
					b.zpp_inner.validate_mass();
					$r = b.zpp_inner.cmass;
					return $r;
				}(this)),true));
				b.zpp_inner.validate_mass();
				total += b.zpp_inner.cmass;
			}
		});
		ret.muleq(1 / total);
		return ret;
	}
	,translate: function(translation) {
		var weak = translation.zpp_inner.weak;
		translation.zpp_inner.weak = false;
		this.visitBodies(function(b) {
			((function($this) {
				var $r;
				if(b.zpp_inner.wrap_pos == null) b.zpp_inner.setupPosition();
				$r = b.zpp_inner.wrap_pos;
				return $r;
			}(this))).addeq(translation);
		});
		translation.zpp_inner.weak = weak;
		if(translation.zpp_inner.weak) {
			translation.dispose();
			true;
		} else false;
		return this;
	}
	,rotate: function(centre,angle) {
		var weak = centre.zpp_inner.weak;
		centre.zpp_inner.weak = false;
		this.visitBodies(function(b) {
			b.rotate(centre,angle);
		});
		centre.zpp_inner.weak = weak;
		if(centre.zpp_inner.weak) {
			centre.dispose();
			true;
		} else false;
		return this;
	}
	,__class__: nape.phys.Compound
	,__properties__: $extend(nape.phys.Interactor.prototype.__properties__,{set_space:"set_space",get_space:"get_space",set_compound:"set_compound",get_compound:"get_compound",get_compounds:"get_compounds",get_constraints:"get_constraints",get_bodies:"get_bodies"})
});
nape.phys.CompoundIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.phys.CompoundIterator"] = nape.phys.CompoundIterator;
nape.phys.CompoundIterator.__name__ = ["nape","phys","CompoundIterator"];
nape.phys.CompoundIterator.get = function(list) {
	var ret;
	if(nape.phys.CompoundIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_CompoundList.internal = true;
		var ret1 = new nape.phys.CompoundIterator();
		zpp_nape.util.ZPP_CompoundList.internal = false;
		ret = ret1;
	} else {
		var r = nape.phys.CompoundIterator.zpp_pool;
		nape.phys.CompoundIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.phys.CompoundIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.phys.CompoundIterator.zpp_pool;
			nape.phys.CompoundIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.phys.CompoundIterator
};
nape.phys.CompoundList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_CompoundList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.phys.CompoundList"] = nape.phys.CompoundList;
nape.phys.CompoundList.__name__ = ["nape","phys","CompoundList"];
nape.phys.CompoundList.fromArray = function(array) {
	var ret = new nape.phys.CompoundList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.phys.CompoundList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.phys.CompoundIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.phys.CompoundList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.phys.CompoundIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.phys.CompoundIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.phys.CompoundIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape.phys.CompoundIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.phys.CompoundIterator.zpp_pool;
			nape.phys.CompoundIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.phys.CompoundList
	,__properties__: {get_length:"get_length"}
};
nape.phys.FluidProperties = function(density,viscosity) {
	if(viscosity == null) viscosity = 1;
	if(density == null) density = 1;
	this.zpp_inner = null;
	if(zpp_nape.phys.ZPP_FluidProperties.zpp_pool == null) this.zpp_inner = new zpp_nape.phys.ZPP_FluidProperties(); else {
		this.zpp_inner = zpp_nape.phys.ZPP_FluidProperties.zpp_pool;
		zpp_nape.phys.ZPP_FluidProperties.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(density != this.zpp_inner.density * 1000) {
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.density * 1000;
	if(viscosity != this.zpp_inner.viscosity) {
		this.zpp_inner.viscosity = viscosity / 1;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.viscosity;
};
$hxClasses["nape.phys.FluidProperties"] = nape.phys.FluidProperties;
nape.phys.FluidProperties.__name__ = ["nape","phys","FluidProperties"];
nape.phys.FluidProperties.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_shapes: function() {
		if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get(this.zpp_inner.shapes,true);
		return this.zpp_inner.wrap_shapes;
	}
	,copy: function() {
		var ret = new nape.phys.FluidProperties(this.zpp_inner.density * 1000,this.zpp_inner.viscosity);
		if(this.zpp_inner.userData != null) ret.zpp_inner.userData = Reflect.copy(this.zpp_inner.userData);
		ret.set_gravity(this.zpp_inner.wrap_gravity);
		return ret;
	}
	,get_density: function() {
		return this.zpp_inner.density * 1000;
	}
	,set_density: function(density) {
		if(density != this.zpp_inner.density * 1000) {
			this.zpp_inner.density = density / 1000;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.density * 1000;
	}
	,get_viscosity: function() {
		return this.zpp_inner.viscosity;
	}
	,set_viscosity: function(viscosity) {
		if(viscosity != this.zpp_inner.viscosity) {
			this.zpp_inner.viscosity = viscosity / 1;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.viscosity;
	}
	,get_gravity: function() {
		return this.zpp_inner.wrap_gravity;
	}
	,set_gravity: function(gravity) {
		if(gravity == null) {
			if(this.zpp_inner.wrap_gravity != null) {
				this.zpp_inner.wrap_gravity.zpp_inner._inuse = false;
				this.zpp_inner.wrap_gravity.dispose();
				this.zpp_inner.wrap_gravity = null;
			}
		} else {
			if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
			this.zpp_inner.wrap_gravity.set(gravity);
		}
		return this.zpp_inner.wrap_gravity;
	}
	,toString: function() {
		return "{ density: " + this.zpp_inner.density * 1000 + " viscosity: " + this.zpp_inner.viscosity + " gravity: " + Std.string(this.zpp_inner.wrap_gravity) + " }";
	}
	,__class__: nape.phys.FluidProperties
	,__properties__: {set_gravity:"set_gravity",get_gravity:"get_gravity",set_viscosity:"set_viscosity",get_viscosity:"get_viscosity",set_density:"set_density",get_density:"get_density",get_shapes:"get_shapes",get_userData:"get_userData"}
};
nape.phys.GravMassMode = function() {
};
$hxClasses["nape.phys.GravMassMode"] = nape.phys.GravMassMode;
nape.phys.GravMassMode.__name__ = ["nape","phys","GravMassMode"];
nape.phys.GravMassMode.__properties__ = {get_SCALED:"get_SCALED",get_FIXED:"get_FIXED",get_DEFAULT:"get_DEFAULT"}
nape.phys.GravMassMode.get_DEFAULT = function() {
	if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
};
nape.phys.GravMassMode.get_FIXED = function() {
	if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
};
nape.phys.GravMassMode.get_SCALED = function() {
	if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
};
nape.phys.GravMassMode.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
			return $r;
		}(this))) return "DEFAULT"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
			return $r;
		}(this))) return "FIXED"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
			return $r;
		}(this))) return "SCALED"; else return "";
	}
	,__class__: nape.phys.GravMassMode
};
nape.phys.InertiaMode = function() {
};
$hxClasses["nape.phys.InertiaMode"] = nape.phys.InertiaMode;
nape.phys.InertiaMode.__name__ = ["nape","phys","InertiaMode"];
nape.phys.InertiaMode.__properties__ = {get_FIXED:"get_FIXED",get_DEFAULT:"get_DEFAULT"}
nape.phys.InertiaMode.get_DEFAULT = function() {
	if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
};
nape.phys.InertiaMode.get_FIXED = function() {
	if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
};
nape.phys.InertiaMode.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
			return $r;
		}(this))) return "DEFAULT"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
			return $r;
		}(this))) return "FIXED"; else return "";
	}
	,__class__: nape.phys.InertiaMode
};
nape.phys.InteractorIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.phys.InteractorIterator"] = nape.phys.InteractorIterator;
nape.phys.InteractorIterator.__name__ = ["nape","phys","InteractorIterator"];
nape.phys.InteractorIterator.get = function(list) {
	var ret;
	if(nape.phys.InteractorIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_InteractorList.internal = true;
		var ret1 = new nape.phys.InteractorIterator();
		zpp_nape.util.ZPP_InteractorList.internal = false;
		ret = ret1;
	} else {
		var r = nape.phys.InteractorIterator.zpp_pool;
		nape.phys.InteractorIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.phys.InteractorIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.phys.InteractorIterator.zpp_pool;
			nape.phys.InteractorIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.phys.InteractorIterator
};
nape.phys.InteractorList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_InteractorList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.phys.InteractorList"] = nape.phys.InteractorList;
nape.phys.InteractorList.__name__ = ["nape","phys","InteractorList"];
nape.phys.InteractorList.fromArray = function(array) {
	var ret = new nape.phys.InteractorList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.phys.InteractorList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner_i);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer_i;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner_i); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner_i);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner_i);
			} else this.zpp_inner.inner.add(obj.zpp_inner_i);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer_i;
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer_i;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner_i) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner_i);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.phys.InteractorIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.phys.InteractorList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.phys.InteractorIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.phys.InteractorIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.phys.InteractorIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape.phys.InteractorIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.phys.InteractorIterator.zpp_pool;
			nape.phys.InteractorIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.phys.InteractorList
	,__properties__: {get_length:"get_length"}
};
nape.phys.MassMode = function() {
};
$hxClasses["nape.phys.MassMode"] = nape.phys.MassMode;
nape.phys.MassMode.__name__ = ["nape","phys","MassMode"];
nape.phys.MassMode.__properties__ = {get_FIXED:"get_FIXED",get_DEFAULT:"get_DEFAULT"}
nape.phys.MassMode.get_DEFAULT = function() {
	if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
};
nape.phys.MassMode.get_FIXED = function() {
	if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.MassMode_FIXED;
};
nape.phys.MassMode.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
			return $r;
		}(this))) return "DEFAULT"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_FIXED;
			return $r;
		}(this))) return "FIXED"; else return "";
	}
	,__class__: nape.phys.MassMode
};
nape.phys.Material = function(elasticity,dynamicFriction,staticFriction,density,rollingFriction) {
	if(rollingFriction == null) rollingFriction = 0.001;
	if(density == null) density = 1;
	if(staticFriction == null) staticFriction = 2.0;
	if(dynamicFriction == null) dynamicFriction = 1.0;
	if(elasticity == null) elasticity = 0.0;
	this.zpp_inner = null;
	if(zpp_nape.phys.ZPP_Material.zpp_pool == null) this.zpp_inner = new zpp_nape.phys.ZPP_Material(); else {
		this.zpp_inner = zpp_nape.phys.ZPP_Material.zpp_pool;
		zpp_nape.phys.ZPP_Material.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(elasticity != this.zpp_inner.elasticity) {
		this.zpp_inner.elasticity = elasticity / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	this.zpp_inner.elasticity;
	if(dynamicFriction != this.zpp_inner.dynamicFriction) {
		this.zpp_inner.dynamicFriction = dynamicFriction / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ANGDRAG | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	this.zpp_inner.dynamicFriction;
	if(staticFriction != this.zpp_inner.staticFriction) {
		this.zpp_inner.staticFriction = staticFriction / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	this.zpp_inner.staticFriction;
	if(density != this.zpp_inner.density * 1000) {
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.PROPS);
	}
	this.zpp_inner.density * 1000;
	if(rollingFriction != this.zpp_inner.rollingFriction) {
		this.zpp_inner.rollingFriction = rollingFriction / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	this.zpp_inner.rollingFriction;
};
$hxClasses["nape.phys.Material"] = nape.phys.Material;
nape.phys.Material.__name__ = ["nape","phys","Material"];
nape.phys.Material.wood = function() {
	return new nape.phys.Material(0.4,0.2,0.38,0.7,0.005);
};
nape.phys.Material.steel = function() {
	return new nape.phys.Material(0.2,0.57,0.74,7.8,0.001);
};
nape.phys.Material.ice = function() {
	return new nape.phys.Material(0.3,0.03,0.1,0.9,0.0001);
};
nape.phys.Material.rubber = function() {
	return new nape.phys.Material(0.8,1.0,1.4,1.5,0.01);
};
nape.phys.Material.glass = function() {
	return new nape.phys.Material(0.4,0.4,0.94,2.6,0.002);
};
nape.phys.Material.sand = function() {
	return new nape.phys.Material(-1.0,0.45,0.6,1.6,16.0);
};
nape.phys.Material.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_shapes: function() {
		if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get(this.zpp_inner.shapes,true);
		return this.zpp_inner.wrap_shapes;
	}
	,copy: function() {
		var ret = new nape.phys.Material(this.zpp_inner.elasticity,this.zpp_inner.dynamicFriction,this.zpp_inner.staticFriction,this.zpp_inner.density * 1000,this.zpp_inner.rollingFriction);
		if(this.zpp_inner.userData != null) ret.zpp_inner.userData = Reflect.copy(this.zpp_inner.userData);
		return ret;
	}
	,get_elasticity: function() {
		return this.zpp_inner.elasticity;
	}
	,set_elasticity: function(elasticity) {
		if(elasticity != this.zpp_inner.elasticity) {
			this.zpp_inner.elasticity = elasticity / 1;
			this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
		}
		return this.zpp_inner.elasticity;
	}
	,get_dynamicFriction: function() {
		return this.zpp_inner.dynamicFriction;
	}
	,set_dynamicFriction: function(dynamicFriction) {
		if(dynamicFriction != this.zpp_inner.dynamicFriction) {
			this.zpp_inner.dynamicFriction = dynamicFriction / 1;
			this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ANGDRAG | zpp_nape.phys.ZPP_Material.ARBITERS);
		}
		return this.zpp_inner.dynamicFriction;
	}
	,get_staticFriction: function() {
		return this.zpp_inner.staticFriction;
	}
	,set_staticFriction: function(staticFriction) {
		if(staticFriction != this.zpp_inner.staticFriction) {
			this.zpp_inner.staticFriction = staticFriction / 1;
			this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
		}
		return this.zpp_inner.staticFriction;
	}
	,get_density: function() {
		return this.zpp_inner.density * 1000;
	}
	,set_density: function(density) {
		if(density != this.zpp_inner.density * 1000) {
			this.zpp_inner.density = density / 1000;
			this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.PROPS);
		}
		return this.zpp_inner.density * 1000;
	}
	,get_rollingFriction: function() {
		return this.zpp_inner.rollingFriction;
	}
	,set_rollingFriction: function(rollingFriction) {
		if(rollingFriction != this.zpp_inner.rollingFriction) {
			this.zpp_inner.rollingFriction = rollingFriction / 1;
			this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
		}
		return this.zpp_inner.rollingFriction;
	}
	,toString: function() {
		return "{ elasticity: " + this.zpp_inner.elasticity + " dynamicFriction: " + this.zpp_inner.dynamicFriction + " staticFriction: " + this.zpp_inner.staticFriction + " density: " + this.zpp_inner.density * 1000 + " rollingFriction: " + this.zpp_inner.rollingFriction + " }";
	}
	,__class__: nape.phys.Material
	,__properties__: {set_rollingFriction:"set_rollingFriction",get_rollingFriction:"get_rollingFriction",set_density:"set_density",get_density:"get_density",set_staticFriction:"set_staticFriction",get_staticFriction:"get_staticFriction",set_dynamicFriction:"set_dynamicFriction",get_dynamicFriction:"get_dynamicFriction",set_elasticity:"set_elasticity",get_elasticity:"get_elasticity",get_shapes:"get_shapes",get_userData:"get_userData"}
};
nape.shape = {};
nape.shape.Shape = function() {
	this.zpp_inner = null;
	nape.phys.Interactor.call(this);
};
$hxClasses["nape.shape.Shape"] = nape.shape.Shape;
nape.shape.Shape.__name__ = ["nape","shape","Shape"];
nape.shape.Shape.__super__ = nape.phys.Interactor;
nape.shape.Shape.prototype = $extend(nape.phys.Interactor.prototype,{
	get_type: function() {
		return zpp_nape.shape.ZPP_Shape.types[this.zpp_inner.type];
	}
	,isCircle: function() {
		return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE;
	}
	,isPolygon: function() {
		return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON;
	}
	,get_body: function() {
		if(this.zpp_inner.body != null) return this.zpp_inner.body.outer; else return null;
	}
	,set_body: function(body) {
		this.zpp_inner.immutable_midstep("Shape::body");
		if((this.zpp_inner.body != null?this.zpp_inner.body.outer:null) != body) {
			if(this.zpp_inner.body != null) (this.zpp_inner.body != null?this.zpp_inner.body.outer:null).zpp_inner.wrap_shapes.remove(this);
			if(body != null) body.zpp_inner.wrap_shapes.add(this);
		}
		if(this.zpp_inner.body != null) return this.zpp_inner.body.outer; else return null;
	}
	,get_castCircle: function() {
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) return this.zpp_inner.circle.outer_zn; else return null;
	}
	,get_castPolygon: function() {
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) return this.zpp_inner.polygon.outer_zn; else return null;
	}
	,get_worldCOM: function() {
		if(this.zpp_inner.wrap_worldCOM == null) {
			this.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get(this.zpp_inner.worldCOMx,this.zpp_inner.worldCOMy,null);
			this.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getworldCOM));
		}
		return this.zpp_inner.wrap_worldCOM;
	}
	,get_localCOM: function() {
		if(this.zpp_inner.wrap_localCOM == null) {
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.setupLocalCOM(); else this.zpp_inner.polygon.setupLocalCOM();
		}
		return this.zpp_inner.wrap_localCOM;
	}
	,set_localCOM: function(localCOM) {
		this.zpp_inner.immutable_midstep("Body::localCOM");
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_localCOM == null) {
				if($this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) $this.zpp_inner.circle.setupLocalCOM(); else $this.zpp_inner.polygon.setupLocalCOM();
			}
			$r = $this.zpp_inner.wrap_localCOM;
			return $r;
		}(this))).set(localCOM);
		if(this.zpp_inner.wrap_localCOM == null) {
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.setupLocalCOM(); else this.zpp_inner.polygon.setupLocalCOM();
		}
		return this.zpp_inner.wrap_localCOM;
	}
	,get_area: function() {
		this.zpp_inner.validate_area_inertia();
		return this.zpp_inner.area;
	}
	,get_inertia: function() {
		this.zpp_inner.validate_area_inertia();
		return this.zpp_inner.inertia;
	}
	,get_angDrag: function() {
		this.zpp_inner.validate_angDrag();
		return this.zpp_inner.angDrag;
	}
	,get_material: function() {
		return this.zpp_inner.material.wrapper();
	}
	,set_material: function(material) {
		this.zpp_inner.immutable_midstep("Shape::material");
		this.zpp_inner.setMaterial(material.zpp_inner);
		return this.zpp_inner.material.wrapper();
	}
	,get_filter: function() {
		return this.zpp_inner.filter.wrapper();
	}
	,set_filter: function(filter) {
		this.zpp_inner.immutable_midstep("Shape::filter");
		this.zpp_inner.setFilter(filter.zpp_inner);
		return this.zpp_inner.filter.wrapper();
	}
	,get_fluidProperties: function() {
		this.zpp_inner.immutable_midstep("Shape::fluidProperties");
		if(this.zpp_inner.fluidProperties == null) this.zpp_inner.setFluid(new nape.phys.FluidProperties().zpp_inner);
		return this.zpp_inner.fluidProperties.wrapper();
	}
	,set_fluidProperties: function(fluidProperties) {
		this.zpp_inner.setFluid(fluidProperties.zpp_inner);
		this.zpp_inner.immutable_midstep("Shape::fluidProperties");
		if(this.zpp_inner.fluidProperties == null) this.zpp_inner.setFluid(new nape.phys.FluidProperties().zpp_inner);
		return this.zpp_inner.fluidProperties.wrapper();
	}
	,get_fluidEnabled: function() {
		return this.zpp_inner.fluidEnabled;
	}
	,set_fluidEnabled: function(fluidEnabled) {
		this.zpp_inner.immutable_midstep("Shape::fluidEnabled");
		this.zpp_inner.fluidEnabled = fluidEnabled;
		if(fluidEnabled && this.zpp_inner.fluidProperties == null) this.set_fluidProperties(new nape.phys.FluidProperties());
		this.zpp_inner.wake();
		return this.zpp_inner.fluidEnabled;
	}
	,get_sensorEnabled: function() {
		return this.zpp_inner.sensorEnabled;
	}
	,set_sensorEnabled: function(sensorEnabled) {
		this.zpp_inner.immutable_midstep("Shape::sensorEnabled");
		this.zpp_inner.sensorEnabled = sensorEnabled;
		this.zpp_inner.wake();
		return this.zpp_inner.sensorEnabled;
	}
	,get_bounds: function() {
		return this.zpp_inner.aabb.wrapper();
	}
	,translate: function(translation) {
		this.zpp_inner.immutable_midstep("Shape::translate()");
		if(translation.lsq() > 0) {
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.__translate((function($this) {
				var $r;
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.y;
				return $r;
			}(this))); else this.zpp_inner.polygon.__translate((function($this) {
				var $r;
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.y;
				return $r;
			}(this)));
		}
		if(translation.zpp_inner.weak) {
			translation.dispose();
			true;
		} else false;
		return this;
	}
	,scale: function(scalex,scaley) {
		this.zpp_inner.immutable_midstep("Shape::scale()");
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			var d = scalex * scalex - scaley * scaley;
			if(d * d < nape.Config.epsilon * nape.Config.epsilon) this.zpp_inner.circle.__scale(scalex,scaley); else {
			}
		} else this.zpp_inner.polygon.__scale(scalex,scaley);
		return this;
	}
	,rotate: function(angle) {
		this.zpp_inner.immutable_midstep("Shape::rotate()");
		var dr = angle % (2 * Math.PI);
		if(dr != 0.0) {
			var cos = Math.cos(angle);
			var sin = Math.sin(angle);
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.__rotate(sin,cos); else this.zpp_inner.polygon.__rotate(sin,cos);
		}
		return this;
	}
	,transform: function(matrix) {
		this.zpp_inner.immutable_midstep("Shape::transform()");
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			if(matrix.equiorthogonal()) this.zpp_inner.circle.__transform(matrix); else {
			}
		} else this.zpp_inner.polygon.__transform(matrix);
		return this;
	}
	,contains: function(point) {
		zpp_nape.geom.ZPP_Geom.validateShape(this.zpp_inner);
		point.zpp_inner.validate();
		var ret = zpp_nape.geom.ZPP_Collide.shapeContains(this.zpp_inner,point.zpp_inner);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,copy: function() {
		return this.zpp_inner.copy();
	}
	,toString: function() {
		var ret;
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ret = "Circle"; else ret = "Polygon";
		return ret + "#" + this.zpp_inner_i.id;
	}
	,__class__: nape.shape.Shape
	,__properties__: $extend(nape.phys.Interactor.prototype.__properties__,{get_bounds:"get_bounds",set_sensorEnabled:"set_sensorEnabled",get_sensorEnabled:"get_sensorEnabled",set_fluidEnabled:"set_fluidEnabled",get_fluidEnabled:"get_fluidEnabled",set_fluidProperties:"set_fluidProperties",get_fluidProperties:"get_fluidProperties",set_filter:"set_filter",get_filter:"get_filter",set_material:"set_material",get_material:"get_material",get_angDrag:"get_angDrag",get_inertia:"get_inertia",get_area:"get_area",set_localCOM:"set_localCOM",get_localCOM:"get_localCOM",get_worldCOM:"get_worldCOM",get_castPolygon:"get_castPolygon",get_castCircle:"get_castCircle",set_body:"set_body",get_body:"get_body",get_type:"get_type"})
});
nape.shape.Circle = function(radius,localCOM,material,filter) {
	this.zpp_inner_zn = null;
	nape.shape.Shape.call(this);
	this.zpp_inner_zn = new zpp_nape.shape.ZPP_Circle();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	this.zpp_inner.immutable_midstep("Circle::radius");
	if(radius != this.zpp_inner_zn.radius) {
		this.zpp_inner_zn.radius = radius;
		this.zpp_inner_zn.invalidate_radius();
	}
	this.zpp_inner_zn.radius;
	if(localCOM == null) {
		this.zpp_inner.localCOMx = 0;
		this.zpp_inner.localCOMy = 0;
	} else {
		localCOM.zpp_inner.validate();
		this.zpp_inner.localCOMx = localCOM.zpp_inner.x;
		localCOM.zpp_inner.validate();
		this.zpp_inner.localCOMy = localCOM.zpp_inner.y;
		if(localCOM.zpp_inner.weak) {
			localCOM.dispose();
			true;
		} else false;
	}
	if(material == null) {
		if(zpp_nape.phys.ZPP_Material.zpp_pool == null) this.zpp_inner.material = new zpp_nape.phys.ZPP_Material(); else {
			this.zpp_inner.material = zpp_nape.phys.ZPP_Material.zpp_pool;
			zpp_nape.phys.ZPP_Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) this.zpp_inner.filter = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
			this.zpp_inner.filter = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE.zpp_inner);
};
$hxClasses["nape.shape.Circle"] = nape.shape.Circle;
nape.shape.Circle.__name__ = ["nape","shape","Circle"];
nape.shape.Circle.__super__ = nape.shape.Shape;
nape.shape.Circle.prototype = $extend(nape.shape.Shape.prototype,{
	get_radius: function() {
		return this.zpp_inner_zn.radius;
	}
	,set_radius: function(radius) {
		this.zpp_inner.immutable_midstep("Circle::radius");
		if(radius != this.zpp_inner_zn.radius) {
			this.zpp_inner_zn.radius = radius;
			this.zpp_inner_zn.invalidate_radius();
		}
		return this.zpp_inner_zn.radius;
	}
	,__class__: nape.shape.Circle
	,__properties__: $extend(nape.shape.Shape.prototype.__properties__,{set_radius:"set_radius",get_radius:"get_radius"})
});
nape.shape.Edge = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.shape.Edge"] = nape.shape.Edge;
nape.shape.Edge.__name__ = ["nape","shape","Edge"];
nape.shape.Edge.prototype = {
	get_polygon: function() {
		return this.zpp_inner.polygon.outer_zn;
	}
	,get_localNormal: function() {
		if(this.zpp_inner.wrap_lnorm == null) this.zpp_inner.getlnorm();
		return this.zpp_inner.wrap_lnorm;
	}
	,get_worldNormal: function() {
		if(this.zpp_inner.wrap_gnorm == null) this.zpp_inner.getgnorm();
		return this.zpp_inner.wrap_gnorm;
	}
	,get_length: function() {
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.length;
	}
	,get_localProjection: function() {
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.lprojection;
	}
	,get_worldProjection: function() {
		this.zpp_inner.polygon.validate_gaxi();
		return this.zpp_inner.gprojection;
	}
	,get_localVertex1: function() {
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.lp0.wrapper();
	}
	,get_localVertex2: function() {
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.lp1.wrapper();
	}
	,get_worldVertex1: function() {
		this.zpp_inner.polygon.validate_gaxi();
		return this.zpp_inner.gp0.wrapper();
	}
	,get_worldVertex2: function() {
		this.zpp_inner.polygon.validate_gaxi();
		return this.zpp_inner.gp1.wrapper();
	}
	,toString: function() {
		if(this.zpp_inner.polygon == null) return "Edge(object-pooled)"; else if(this.zpp_inner.polygon.body == null) {
			this.zpp_inner.polygon.validate_laxi();
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " }";
		} else {
			this.zpp_inner.polygon.validate_gaxi();
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " worldNormal : " + ("{ x: " + this.zpp_inner.gnormx + " y: " + this.zpp_inner.gnormy + " }") + " }";
		}
	}
	,__class__: nape.shape.Edge
	,__properties__: {get_worldVertex2:"get_worldVertex2",get_worldVertex1:"get_worldVertex1",get_localVertex2:"get_localVertex2",get_localVertex1:"get_localVertex1",get_worldProjection:"get_worldProjection",get_localProjection:"get_localProjection",get_length:"get_length",get_worldNormal:"get_worldNormal",get_localNormal:"get_localNormal",get_polygon:"get_polygon"}
};
nape.shape.EdgeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.shape.EdgeIterator"] = nape.shape.EdgeIterator;
nape.shape.EdgeIterator.__name__ = ["nape","shape","EdgeIterator"];
nape.shape.EdgeIterator.get = function(list) {
	var ret;
	if(nape.shape.EdgeIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_EdgeList.internal = true;
		var ret1 = new nape.shape.EdgeIterator();
		zpp_nape.util.ZPP_EdgeList.internal = false;
		ret = ret1;
	} else {
		var r = nape.shape.EdgeIterator.zpp_pool;
		nape.shape.EdgeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.shape.EdgeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.shape.EdgeIterator.zpp_pool;
			nape.shape.EdgeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.shape.EdgeIterator
};
nape.shape.EdgeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_EdgeList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.shape.EdgeList"] = nape.shape.EdgeList;
nape.shape.EdgeList.__name__ = ["nape","shape","EdgeList"];
nape.shape.EdgeList.fromArray = function(array) {
	var ret = new nape.shape.EdgeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.shape.EdgeList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) if(index == this.get_length() - 1) index = index; else index = this.get_length() - 2 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.shape.EdgeIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.shape.EdgeList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.shape.EdgeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.shape.EdgeIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.shape.EdgeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape.shape.EdgeIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.shape.EdgeIterator.zpp_pool;
			nape.shape.EdgeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.shape.EdgeList
	,__properties__: {get_length:"get_length"}
};
nape.shape.Polygon = function(localVerts,material,filter) {
	this.zpp_inner_zn = null;
	nape.shape.Shape.call(this);
	this.zpp_inner_zn = new zpp_nape.shape.ZPP_Polygon();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	if((localVerts instanceof Array) && localVerts.__enum__ == null) {
		var lv = localVerts;
		var _g = 0;
		while(_g < lv.length) {
			var vite = lv[_g];
			++_g;
			var x = vite;
			((function($this) {
				var $r;
				if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
				$r = $this.zpp_inner_zn.wrap_lverts;
				return $r;
			}(this))).push(nape.geom.Vec2.get((function($this) {
				var $r;
				x.zpp_inner.validate();
				$r = x.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				x.zpp_inner.validate();
				$r = x.zpp_inner.y;
				return $r;
			}(this)),false));
		}
	} else if(js.Boot.__instanceof(localVerts,nape.geom.Vec2List)) {
		var lv1 = localVerts;
		var _g1 = lv1.iterator();
		while(_g1.hasNext()) {
			var x1;
			_g1.zpp_critical = false;
			x1 = _g1.zpp_inner.at(_g1.zpp_i++);
			((function($this) {
				var $r;
				if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
				$r = $this.zpp_inner_zn.wrap_lverts;
				return $r;
			}(this))).push(nape.geom.Vec2.get((function($this) {
				var $r;
				x1.zpp_inner.validate();
				$r = x1.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				x1.zpp_inner.validate();
				$r = x1.zpp_inner.y;
				return $r;
			}(this)),false));
		}
	} else if(js.Boot.__instanceof(localVerts,nape.geom.GeomPoly)) {
		var lv2 = localVerts;
		var verts = lv2.zpp_inner.vertices;
		if(verts != null) {
			var vite1 = verts;
			do {
				var x2 = nape.geom.Vec2.get(vite1.x,vite1.y,null);
				vite1 = vite1.next;
				((function($this) {
					var $r;
					if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
					$r = $this.zpp_inner_zn.wrap_lverts;
					return $r;
				}(this))).push(nape.geom.Vec2.get((function($this) {
					var $r;
					x2.zpp_inner.validate();
					$r = x2.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					x2.zpp_inner.validate();
					$r = x2.zpp_inner.y;
					return $r;
				}(this)),false));
				x2.dispose();
			} while(vite1 != verts);
		}
	} else {
	}
	if((localVerts instanceof Array) && localVerts.__enum__ == null) {
		var lv3 = localVerts;
		var i = 0;
		while(i < lv3.length) {
			var cur = lv3[i];
			if(cur.zpp_inner.weak?(function($this) {
				var $r;
				cur.dispose();
				$r = true;
				return $r;
			}(this)):false) {
				lv3.splice(i,1);
				continue;
			}
			i++;
		}
	} else if(js.Boot.__instanceof(localVerts,nape.geom.Vec2List)) {
		var lv4 = localVerts;
		if(lv4.zpp_inner._validate != null) lv4.zpp_inner._validate();
		var ins = lv4.zpp_inner.inner;
		var pre = null;
		var cur1 = ins.head;
		while(cur1 != null) {
			var x3 = cur1.elt;
			if(x3.outer.zpp_inner.weak) {
				cur1 = ins.erase(pre);
				if(x3.outer.zpp_inner.weak) {
					x3.outer.dispose();
					true;
				} else false;
			} else {
				pre = cur1;
				cur1 = cur1.next;
			}
		}
	}
	if(material == null) {
		if(zpp_nape.phys.ZPP_Material.zpp_pool == null) this.zpp_inner.material = new zpp_nape.phys.ZPP_Material(); else {
			this.zpp_inner.material = zpp_nape.phys.ZPP_Material.zpp_pool;
			zpp_nape.phys.ZPP_Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) this.zpp_inner.filter = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
			this.zpp_inner.filter = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE.zpp_inner);
};
$hxClasses["nape.shape.Polygon"] = nape.shape.Polygon;
nape.shape.Polygon.__name__ = ["nape","shape","Polygon"];
nape.shape.Polygon.rect = function(x,y,width,height,weak) {
	if(weak == null) weak = false;
	return [nape.geom.Vec2.get(x,y,weak),nape.geom.Vec2.get(x + width,y,weak),nape.geom.Vec2.get(x + width,y + height,weak),nape.geom.Vec2.get(x,y + height,weak)];
};
nape.shape.Polygon.box = function(width,height,weak) {
	if(weak == null) weak = false;
	return nape.shape.Polygon.rect(-width / 2,-height / 2,width,height,weak);
};
nape.shape.Polygon.regular = function(xRadius,yRadius,edgeCount,angleOffset,weak) {
	if(weak == null) weak = false;
	if(angleOffset == null) angleOffset = 0.0;
	var ret = [];
	var dangle = Math.PI * 2 / edgeCount;
	var _g = 0;
	while(_g < edgeCount) {
		var i = _g++;
		var ang = i * dangle + angleOffset;
		var x = nape.geom.Vec2.get(Math.cos(ang) * xRadius,Math.sin(ang) * yRadius,weak);
		ret.push(x);
	}
	return ret;
};
nape.shape.Polygon.__super__ = nape.shape.Shape;
nape.shape.Polygon.prototype = $extend(nape.shape.Shape.prototype,{
	get_localVerts: function() {
		if(this.zpp_inner_zn.wrap_lverts == null) this.zpp_inner_zn.getlverts();
		return this.zpp_inner_zn.wrap_lverts;
	}
	,get_worldVerts: function() {
		if(this.zpp_inner_zn.wrap_gverts == null) this.zpp_inner_zn.getgverts();
		return this.zpp_inner_zn.wrap_gverts;
	}
	,get_edges: function() {
		if(this.zpp_inner_zn.wrap_edges == null) this.zpp_inner_zn.getedges();
		return this.zpp_inner_zn.wrap_edges;
	}
	,validity: function() {
		return this.zpp_inner_zn.valid();
	}
	,__class__: nape.shape.Polygon
	,__properties__: $extend(nape.shape.Shape.prototype.__properties__,{get_edges:"get_edges",get_worldVerts:"get_worldVerts",get_localVerts:"get_localVerts"})
});
nape.shape.ShapeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.shape.ShapeIterator"] = nape.shape.ShapeIterator;
nape.shape.ShapeIterator.__name__ = ["nape","shape","ShapeIterator"];
nape.shape.ShapeIterator.get = function(list) {
	var ret;
	if(nape.shape.ShapeIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ShapeList.internal = true;
		var ret1 = new nape.shape.ShapeIterator();
		zpp_nape.util.ZPP_ShapeList.internal = false;
		ret = ret1;
	} else {
		var r = nape.shape.ShapeIterator.zpp_pool;
		nape.shape.ShapeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.shape.ShapeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.shape.ShapeIterator.zpp_pool;
			nape.shape.ShapeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.shape.ShapeIterator
};
nape.shape.ShapeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ShapeList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.shape.ShapeList"] = nape.shape.ShapeList;
nape.shape.ShapeList.__name__ = ["nape","shape","ShapeList"];
nape.shape.ShapeList.fromArray = function(array) {
	var ret = new nape.shape.ShapeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.shape.ShapeList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.shape.ShapeIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.shape.ShapeList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.shape.ShapeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.shape.ShapeIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.shape.ShapeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape.shape.ShapeIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.shape.ShapeIterator.zpp_pool;
			nape.shape.ShapeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.shape.ShapeList
	,__properties__: {get_length:"get_length"}
};
nape.shape.ShapeType = function() {
};
$hxClasses["nape.shape.ShapeType"] = nape.shape.ShapeType;
nape.shape.ShapeType.__name__ = ["nape","shape","ShapeType"];
nape.shape.ShapeType.__properties__ = {get_POLYGON:"get_POLYGON",get_CIRCLE:"get_CIRCLE"}
nape.shape.ShapeType.get_CIRCLE = function() {
	if(zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE;
};
nape.shape.ShapeType.get_POLYGON = function() {
	if(zpp_nape.util.ZPP_Flags.ShapeType_POLYGON == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ShapeType_POLYGON;
};
nape.shape.ShapeType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = new nape.shape.ShapeType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE;
			return $r;
		}(this))) return "CIRCLE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ShapeType_POLYGON == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = new nape.shape.ShapeType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ShapeType_POLYGON;
			return $r;
		}(this))) return "POLYGON"; else return "";
	}
	,__class__: nape.shape.ShapeType
};
nape.shape.ValidationResult = function() {
};
$hxClasses["nape.shape.ValidationResult"] = nape.shape.ValidationResult;
nape.shape.ValidationResult.__name__ = ["nape","shape","ValidationResult"];
nape.shape.ValidationResult.__properties__ = {get_SELF_INTERSECTING:"get_SELF_INTERSECTING",get_CONCAVE:"get_CONCAVE",get_DEGENERATE:"get_DEGENERATE",get_VALID:"get_VALID"}
nape.shape.ValidationResult.get_VALID = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
};
nape.shape.ValidationResult.get_DEGENERATE = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
};
nape.shape.ValidationResult.get_CONCAVE = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
};
nape.shape.ValidationResult.get_SELF_INTERSECTING = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
};
nape.shape.ValidationResult.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
			return $r;
		}(this))) return "VALID"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
			return $r;
		}(this))) return "DEGENERATE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
			return $r;
		}(this))) return "CONCAVE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
			return $r;
		}(this))) return "SELF_INTERSECTING"; else return "";
	}
	,__class__: nape.shape.ValidationResult
};
nape.space = {};
nape.space.Broadphase = function() {
};
$hxClasses["nape.space.Broadphase"] = nape.space.Broadphase;
nape.space.Broadphase.__name__ = ["nape","space","Broadphase"];
nape.space.Broadphase.__properties__ = {get_SWEEP_AND_PRUNE:"get_SWEEP_AND_PRUNE",get_DYNAMIC_AABB_TREE:"get_DYNAMIC_AABB_TREE"}
nape.space.Broadphase.get_DYNAMIC_AABB_TREE = function() {
	if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
};
nape.space.Broadphase.get_SWEEP_AND_PRUNE = function() {
	if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
};
nape.space.Broadphase.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
			return $r;
		}(this))) return "DYNAMIC_AABB_TREE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
			return $r;
		}(this))) return "SWEEP_AND_PRUNE"; else return "";
	}
	,__class__: nape.space.Broadphase
};
nape.space.Space = function(gravity,broadphase) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.space.ZPP_Space(gravity == null?null:gravity.zpp_inner,broadphase);
	this.zpp_inner.outer = this;
	if(gravity != null) {
		if(gravity.zpp_inner.weak) {
			gravity.dispose();
			true;
		} else false;
	}
};
$hxClasses["nape.space.Space"] = nape.space.Space;
nape.space.Space.__name__ = ["nape","space","Space"];
nape.space.Space.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_gravity: function() {
		if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
		return this.zpp_inner.wrap_gravity;
	}
	,set_gravity: function(gravity) {
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_gravity == null) $this.zpp_inner.getgravity();
			$r = $this.zpp_inner.wrap_gravity;
			return $r;
		}(this))).set(gravity);
		if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
		return this.zpp_inner.wrap_gravity;
	}
	,get_broadphase: function() {
		if(this.zpp_inner.bphase.is_sweep) {
			if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
		} else {
			if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
		}
	}
	,get_sortContacts: function() {
		return this.zpp_inner.sortcontacts;
	}
	,set_sortContacts: function(sortContacts) {
		this.zpp_inner.sortcontacts = sortContacts;
		return this.zpp_inner.sortcontacts;
	}
	,get_worldAngularDrag: function() {
		return this.zpp_inner.global_ang_drag;
	}
	,set_worldAngularDrag: function(worldAngularDrag) {
		var d = worldAngularDrag;
		this.zpp_inner.global_ang_drag = d;
		return this.zpp_inner.global_ang_drag;
	}
	,get_worldLinearDrag: function() {
		return this.zpp_inner.global_lin_drag;
	}
	,set_worldLinearDrag: function(worldLinearDrag) {
		var d = worldLinearDrag;
		this.zpp_inner.global_lin_drag = d;
		return this.zpp_inner.global_lin_drag;
	}
	,get_compounds: function() {
		return this.zpp_inner.wrap_compounds;
	}
	,get_bodies: function() {
		return this.zpp_inner.wrap_bodies;
	}
	,get_liveBodies: function() {
		return this.zpp_inner.wrap_live;
	}
	,get_constraints: function() {
		return this.zpp_inner.wrap_constraints;
	}
	,get_liveConstraints: function() {
		return this.zpp_inner.wrap_livecon;
	}
	,visitBodies: function(lambda) {
		var _g = this.zpp_inner.wrap_bodies.iterator();
		while(_g.hasNext()) {
			var b;
			_g.zpp_critical = false;
			b = _g.zpp_inner.at(_g.zpp_i++);
			lambda(b);
		}
		var _g1 = this.zpp_inner.wrap_compounds.iterator();
		while(_g1.hasNext()) {
			var c;
			_g1.zpp_critical = false;
			c = _g1.zpp_inner.at(_g1.zpp_i++);
			c.visitBodies(lambda);
		}
	}
	,visitConstraints: function(lambda) {
		var _g = this.zpp_inner.wrap_constraints.iterator();
		while(_g.hasNext()) {
			var c;
			_g.zpp_critical = false;
			c = _g.zpp_inner.at(_g.zpp_i++);
			lambda(c);
		}
		var _g1 = this.zpp_inner.wrap_compounds.iterator();
		while(_g1.hasNext()) {
			var c1;
			_g1.zpp_critical = false;
			c1 = _g1.zpp_inner.at(_g1.zpp_i++);
			c1.visitConstraints(lambda);
		}
	}
	,visitCompounds: function(lambda) {
		var _g = this.zpp_inner.wrap_compounds.iterator();
		while(_g.hasNext()) {
			var c;
			_g.zpp_critical = false;
			c = _g.zpp_inner.at(_g.zpp_i++);
			lambda(c);
			c.visitCompounds(lambda);
		}
	}
	,get_world: function() {
		return this.zpp_inner.__static;
	}
	,get_arbiters: function() {
		if(this.zpp_inner.wrap_arbiters == null) {
			var ret = new zpp_nape.dynamics.ZPP_SpaceArbiterList();
			ret.space = this.zpp_inner;
			this.zpp_inner.wrap_arbiters = ret;
		}
		return this.zpp_inner.wrap_arbiters;
	}
	,get_listeners: function() {
		return this.zpp_inner.wrap_listeners;
	}
	,clear: function() {
		this.zpp_inner.clear();
	}
	,step: function(deltaTime,velocityIterations,positionIterations) {
		if(positionIterations == null) positionIterations = 10;
		if(velocityIterations == null) velocityIterations = 10;
		this.zpp_inner.step(deltaTime,velocityIterations,positionIterations);
	}
	,get_timeStamp: function() {
		return this.zpp_inner.stamp;
	}
	,get_elapsedTime: function() {
		return this.zpp_inner.time;
	}
	,interactionType: function(shape1,shape2) {
		if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null).zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null).zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) return null;
		if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null)) return null;
		var s1 = shape1.zpp_inner;
		var s2 = shape2.zpp_inner;
		var _g = this.zpp_inner.interactionType(s1,s2,s1.body,s2.body);
		switch(_g) {
		case 0:
			if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
		case 1:
			if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
		case 2:
			if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
		default:
			return null;
		}
	}
	,shapesUnderPoint: function(point,filter,output) {
		var ret = this.zpp_inner.shapesUnderPoint((function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)),filter == null?null:filter.zpp_inner,output);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,bodiesUnderPoint: function(point,filter,output) {
		var ret = this.zpp_inner.bodiesUnderPoint((function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)),filter == null?null:filter.zpp_inner,output);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,shapesInAABB: function(aabb,containment,strict,filter,output) {
		if(strict == null) strict = true;
		if(containment == null) containment = false;
		return this.zpp_inner.shapesInAABB(aabb,strict,containment,filter == null?null:filter.zpp_inner,output);
	}
	,bodiesInAABB: function(aabb,containment,strict,filter,output) {
		if(strict == null) strict = true;
		if(containment == null) containment = false;
		return this.zpp_inner.bodiesInAABB(aabb,strict,containment,filter == null?null:filter.zpp_inner,output);
	}
	,shapesInCircle: function(position,radius,containment,filter,output) {
		if(containment == null) containment = false;
		var ret = this.zpp_inner.shapesInCircle(position,radius,containment,filter == null?null:filter.zpp_inner,output);
		if(position.zpp_inner.weak) {
			position.dispose();
			true;
		} else false;
		return ret;
	}
	,bodiesInCircle: function(position,radius,containment,filter,output) {
		if(containment == null) containment = false;
		var ret = this.zpp_inner.bodiesInCircle(position,radius,containment,filter == null?null:filter.zpp_inner,output);
		if(position.zpp_inner.weak) {
			position.dispose();
			true;
		} else false;
		return ret;
	}
	,shapesInShape: function(shape,containment,filter,output) {
		if(containment == null) containment = false;
		return this.zpp_inner.shapesInShape(shape.zpp_inner,containment,filter == null?null:filter.zpp_inner,output);
	}
	,bodiesInShape: function(shape,containment,filter,output) {
		if(containment == null) containment = false;
		return this.zpp_inner.bodiesInShape(shape.zpp_inner,containment,filter == null?null:filter.zpp_inner,output);
	}
	,shapesInBody: function(body,filter,output) {
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		var _g = body.zpp_inner.wrap_shapes.iterator();
		while(_g.hasNext()) {
			var shape;
			_g.zpp_critical = false;
			shape = _g.zpp_inner.at(_g.zpp_i++);
			var cur = this.shapesInShape(shape,false,filter,ret);
		}
		return ret;
	}
	,bodiesInBody: function(body,filter,output) {
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		var _g = body.zpp_inner.wrap_shapes.iterator();
		while(_g.hasNext()) {
			var shape;
			_g.zpp_critical = false;
			shape = _g.zpp_inner.at(_g.zpp_i++);
			var cur = this.bodiesInShape(shape,false,filter,ret);
		}
		return ret;
	}
	,convexCast: function(shape,deltaTime,liveSweep,filter) {
		if(liveSweep == null) liveSweep = false;
		return this.zpp_inner.convexCast(shape.zpp_inner,deltaTime,filter,liveSweep);
	}
	,convexMultiCast: function(shape,deltaTime,liveSweep,filter,output) {
		if(liveSweep == null) liveSweep = false;
		return this.zpp_inner.convexMultiCast(shape.zpp_inner,deltaTime,filter,liveSweep,output);
	}
	,rayCast: function(ray,inner,filter) {
		if(inner == null) inner = false;
		return this.zpp_inner.rayCast(ray,inner,filter);
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		if(inner == null) inner = false;
		return this.zpp_inner.rayMultiCast(ray,inner,filter,output);
	}
	,__class__: nape.space.Space
	,__properties__: {get_elapsedTime:"get_elapsedTime",get_timeStamp:"get_timeStamp",get_listeners:"get_listeners",get_arbiters:"get_arbiters",get_world:"get_world",get_liveConstraints:"get_liveConstraints",get_constraints:"get_constraints",get_liveBodies:"get_liveBodies",get_bodies:"get_bodies",get_compounds:"get_compounds",set_worldLinearDrag:"set_worldLinearDrag",get_worldLinearDrag:"get_worldLinearDrag",set_worldAngularDrag:"set_worldAngularDrag",get_worldAngularDrag:"get_worldAngularDrag",set_sortContacts:"set_sortContacts",get_sortContacts:"get_sortContacts",get_broadphase:"get_broadphase",set_gravity:"set_gravity",get_gravity:"get_gravity",get_userData:"get_userData"}
};
nape.util = {};
nape.util.Debug = function() {
	this.cullingEnabled = false;
	this.colour = null;
	this.drawConstraints = false;
	this.drawShapeAngleIndicators = false;
	this.drawShapeDetail = false;
	this.drawBodyDetail = false;
	this.drawBodies = false;
	this.drawSensorArbiters = false;
	this.drawFluidArbiters = false;
	this.drawCollisionArbiters = false;
	this.zpp_inner = null;
	this.drawCollisionArbiters = false;
	this.drawFluidArbiters = false;
	this.drawSensorArbiters = false;
	this.drawBodies = true;
	this.drawShapeAngleIndicators = true;
	this.drawBodyDetail = false;
	this.drawShapeDetail = false;
	this.drawConstraints = false;
	this.cullingEnabled = false;
	this.colour = null;
};
$hxClasses["nape.util.Debug"] = nape.util.Debug;
nape.util.Debug.__name__ = ["nape","util","Debug"];
nape.util.Debug.version = function() {
	return "Nape 2.0.19";
};
nape.util.Debug.clearObjectPools = function() {
	while(nape.constraint.ConstraintIterator.zpp_pool != null) {
		var nxt = nape.constraint.ConstraintIterator.zpp_pool.zpp_next;
		nape.constraint.ConstraintIterator.zpp_pool.zpp_next = null;
		nape.constraint.ConstraintIterator.zpp_pool = nxt;
	}
	while(nape.phys.InteractorIterator.zpp_pool != null) {
		var nxt1 = nape.phys.InteractorIterator.zpp_pool.zpp_next;
		nape.phys.InteractorIterator.zpp_pool.zpp_next = null;
		nape.phys.InteractorIterator.zpp_pool = nxt1;
	}
	while(nape.phys.BodyIterator.zpp_pool != null) {
		var nxt2 = nape.phys.BodyIterator.zpp_pool.zpp_next;
		nape.phys.BodyIterator.zpp_pool.zpp_next = null;
		nape.phys.BodyIterator.zpp_pool = nxt2;
	}
	while(nape.phys.CompoundIterator.zpp_pool != null) {
		var nxt3 = nape.phys.CompoundIterator.zpp_pool.zpp_next;
		nape.phys.CompoundIterator.zpp_pool.zpp_next = null;
		nape.phys.CompoundIterator.zpp_pool = nxt3;
	}
	while(nape.callbacks.ListenerIterator.zpp_pool != null) {
		var nxt4 = nape.callbacks.ListenerIterator.zpp_pool.zpp_next;
		nape.callbacks.ListenerIterator.zpp_pool.zpp_next = null;
		nape.callbacks.ListenerIterator.zpp_pool = nxt4;
	}
	while(nape.callbacks.CbTypeIterator.zpp_pool != null) {
		var nxt5 = nape.callbacks.CbTypeIterator.zpp_pool.zpp_next;
		nape.callbacks.CbTypeIterator.zpp_pool.zpp_next = null;
		nape.callbacks.CbTypeIterator.zpp_pool = nxt5;
	}
	while(nape.geom.ConvexResultIterator.zpp_pool != null) {
		var nxt6 = nape.geom.ConvexResultIterator.zpp_pool.zpp_next;
		nape.geom.ConvexResultIterator.zpp_pool.zpp_next = null;
		nape.geom.ConvexResultIterator.zpp_pool = nxt6;
	}
	while(nape.geom.GeomPolyIterator.zpp_pool != null) {
		var nxt7 = nape.geom.GeomPolyIterator.zpp_pool.zpp_next;
		nape.geom.GeomPolyIterator.zpp_pool.zpp_next = null;
		nape.geom.GeomPolyIterator.zpp_pool = nxt7;
	}
	while(nape.geom.Vec2Iterator.zpp_pool != null) {
		var nxt8 = nape.geom.Vec2Iterator.zpp_pool.zpp_next;
		nape.geom.Vec2Iterator.zpp_pool.zpp_next = null;
		nape.geom.Vec2Iterator.zpp_pool = nxt8;
	}
	while(nape.geom.RayResultIterator.zpp_pool != null) {
		var nxt9 = nape.geom.RayResultIterator.zpp_pool.zpp_next;
		nape.geom.RayResultIterator.zpp_pool.zpp_next = null;
		nape.geom.RayResultIterator.zpp_pool = nxt9;
	}
	while(nape.shape.ShapeIterator.zpp_pool != null) {
		var nxt10 = nape.shape.ShapeIterator.zpp_pool.zpp_next;
		nape.shape.ShapeIterator.zpp_pool.zpp_next = null;
		nape.shape.ShapeIterator.zpp_pool = nxt10;
	}
	while(nape.shape.EdgeIterator.zpp_pool != null) {
		var nxt11 = nape.shape.EdgeIterator.zpp_pool.zpp_next;
		nape.shape.EdgeIterator.zpp_pool.zpp_next = null;
		nape.shape.EdgeIterator.zpp_pool = nxt11;
	}
	while(nape.dynamics.ContactIterator.zpp_pool != null) {
		var nxt12 = nape.dynamics.ContactIterator.zpp_pool.zpp_next;
		nape.dynamics.ContactIterator.zpp_pool.zpp_next = null;
		nape.dynamics.ContactIterator.zpp_pool = nxt12;
	}
	while(nape.dynamics.ArbiterIterator.zpp_pool != null) {
		var nxt13 = nape.dynamics.ArbiterIterator.zpp_pool.zpp_next;
		nape.dynamics.ArbiterIterator.zpp_pool.zpp_next = null;
		nape.dynamics.ArbiterIterator.zpp_pool = nxt13;
	}
	while(nape.dynamics.InteractionGroupIterator.zpp_pool != null) {
		var nxt14 = nape.dynamics.InteractionGroupIterator.zpp_pool.zpp_next;
		nape.dynamics.InteractionGroupIterator.zpp_pool.zpp_next = null;
		nape.dynamics.InteractionGroupIterator.zpp_pool = nxt14;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool != null) {
		var nxt15 = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = nxt15;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool != null) {
		var nxt16 = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = nxt16;
	}
	while(zpp_nape.phys.ZPP_Material.zpp_pool != null) {
		var nxt17 = zpp_nape.phys.ZPP_Material.zpp_pool.next;
		zpp_nape.phys.ZPP_Material.zpp_pool.next = null;
		zpp_nape.phys.ZPP_Material.zpp_pool = nxt17;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool != null) {
		var nxt18 = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = nxt18;
	}
	while(zpp_nape.phys.ZPP_FluidProperties.zpp_pool != null) {
		var nxt19 = zpp_nape.phys.ZPP_FluidProperties.zpp_pool.next;
		zpp_nape.phys.ZPP_FluidProperties.zpp_pool.next = null;
		zpp_nape.phys.ZPP_FluidProperties.zpp_pool = nxt19;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool != null) {
		var nxt20 = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = nxt20;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool != null) {
		var nxt21 = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = nxt21;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool != null) {
		var nxt22 = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = nxt22;
	}
	while(zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool != null) {
		var nxt23 = zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool.next;
		zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool.next = null;
		zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = nxt23;
	}
	while(zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool != null) {
		var nxt24 = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = nxt24;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool != null) {
		var nxt25 = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = nxt25;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool != null) {
		var nxt26 = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = nxt26;
	}
	while(zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool != null) {
		var nxt27 = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = nxt27;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool != null) {
		var nxt28 = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = nxt28;
	}
	while(zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool != null) {
		var nxt29 = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = nxt29;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool != null) {
		var nxt30 = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = nxt30;
	}
	while(zpp_nape.callbacks.ZPP_CbSet.zpp_pool != null) {
		var nxt31 = zpp_nape.callbacks.ZPP_CbSet.zpp_pool.next;
		zpp_nape.callbacks.ZPP_CbSet.zpp_pool.next = null;
		zpp_nape.callbacks.ZPP_CbSet.zpp_pool = nxt31;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool != null) {
		var nxt32 = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = nxt32;
	}
	while(zpp_nape.callbacks.ZPP_Callback.zpp_pool != null) {
		var nxt33 = zpp_nape.callbacks.ZPP_Callback.zpp_pool.next;
		zpp_nape.callbacks.ZPP_Callback.zpp_pool.next = null;
		zpp_nape.callbacks.ZPP_Callback.zpp_pool = nxt33;
	}
	while(zpp_nape.geom.ZPP_GeomVert.zpp_pool != null) {
		var nxt34 = zpp_nape.geom.ZPP_GeomVert.zpp_pool.next;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool.next = null;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = nxt34;
	}
	while(zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool != null) {
		var nxt35 = zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool.next;
		zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool.next = null;
		zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = nxt35;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool != null) {
		var nxt36 = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = nxt36;
	}
	while(zpp_nape.geom.ZPP_Mat23.zpp_pool != null) {
		var nxt37 = zpp_nape.geom.ZPP_Mat23.zpp_pool.next;
		zpp_nape.geom.ZPP_Mat23.zpp_pool.next = null;
		zpp_nape.geom.ZPP_Mat23.zpp_pool = nxt37;
	}
	while(zpp_nape.geom.ZPP_CutVert.zpp_pool != null) {
		var nxt38 = zpp_nape.geom.ZPP_CutVert.zpp_pool.next;
		zpp_nape.geom.ZPP_CutVert.zpp_pool.next = null;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = nxt38;
	}
	while(zpp_nape.geom.ZPP_CutInt.zpp_pool != null) {
		var nxt39 = zpp_nape.geom.ZPP_CutInt.zpp_pool.next;
		zpp_nape.geom.ZPP_CutInt.zpp_pool.next = null;
		zpp_nape.geom.ZPP_CutInt.zpp_pool = nxt39;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool != null) {
		var nxt40 = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = nxt40;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool != null) {
		var nxt41 = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = nxt41;
	}
	while(zpp_nape.geom.ZPP_Vec2.zpp_pool != null) {
		var nxt42 = zpp_nape.geom.ZPP_Vec2.zpp_pool.next;
		zpp_nape.geom.ZPP_Vec2.zpp_pool.next = null;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = nxt42;
	}
	while(zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool != null) {
		var nxt43 = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = nxt43;
	}
	while(zpp_nape.geom.ZPP_PartitionVertex.zpp_pool != null) {
		var nxt44 = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool.next;
		zpp_nape.geom.ZPP_PartitionVertex.zpp_pool.next = null;
		zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = nxt44;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool != null) {
		var nxt45 = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = nxt45;
	}
	while(zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool != null) {
		var nxt46 = zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool.next;
		zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool.next = null;
		zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = nxt46;
	}
	while(zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool != null) {
		var nxt47 = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = nxt47;
	}
	while(zpp_nape.geom.ZPP_PartitionPair.zpp_pool != null) {
		var nxt48 = zpp_nape.geom.ZPP_PartitionPair.zpp_pool.next;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool.next = null;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool = nxt48;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool != null) {
		var nxt49 = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = nxt49;
	}
	while(zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool != null) {
		var nxt50 = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = nxt50;
	}
	while(zpp_nape.geom.ZPP_SimplifyV.zpp_pool != null) {
		var nxt51 = zpp_nape.geom.ZPP_SimplifyV.zpp_pool.next;
		zpp_nape.geom.ZPP_SimplifyV.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimplifyV.zpp_pool = nxt51;
	}
	while(zpp_nape.geom.ZPP_SimplifyP.zpp_pool != null) {
		var nxt52 = zpp_nape.geom.ZPP_SimplifyP.zpp_pool.next;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool = nxt52;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool != null) {
		var nxt53 = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = nxt53;
	}
	while(zpp_nape.geom.ZPP_AABB.zpp_pool != null) {
		var nxt54 = zpp_nape.geom.ZPP_AABB.zpp_pool.next;
		zpp_nape.geom.ZPP_AABB.zpp_pool.next = null;
		zpp_nape.geom.ZPP_AABB.zpp_pool = nxt54;
	}
	while(zpp_nape.geom.ZPP_ToiEvent.zpp_pool != null) {
		var nxt55 = zpp_nape.geom.ZPP_ToiEvent.zpp_pool.next;
		zpp_nape.geom.ZPP_ToiEvent.zpp_pool.next = null;
		zpp_nape.geom.ZPP_ToiEvent.zpp_pool = nxt55;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool != null) {
		var nxt56 = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = nxt56;
	}
	while(zpp_nape.geom.ZPP_SimpleVert.zpp_pool != null) {
		var nxt57 = zpp_nape.geom.ZPP_SimpleVert.zpp_pool.next;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool = nxt57;
	}
	while(zpp_nape.geom.ZPP_SimpleSeg.zpp_pool != null) {
		var nxt58 = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool.next;
		zpp_nape.geom.ZPP_SimpleSeg.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = nxt58;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool != null) {
		var nxt59 = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = nxt59;
	}
	while(zpp_nape.geom.ZPP_MarchSpan.zpp_pool != null) {
		var nxt60 = zpp_nape.geom.ZPP_MarchSpan.zpp_pool.next;
		zpp_nape.geom.ZPP_MarchSpan.zpp_pool.next = null;
		zpp_nape.geom.ZPP_MarchSpan.zpp_pool = nxt60;
	}
	while(zpp_nape.geom.ZPP_MarchPair.zpp_pool != null) {
		var nxt61 = zpp_nape.geom.ZPP_MarchPair.zpp_pool.next;
		zpp_nape.geom.ZPP_MarchPair.zpp_pool.next = null;
		zpp_nape.geom.ZPP_MarchPair.zpp_pool = nxt61;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool != null) {
		var nxt62 = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = nxt62;
	}
	while(zpp_nape.geom.ZPP_SimpleEvent.zpp_pool != null) {
		var nxt63 = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool.next;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = nxt63;
	}
	while(zpp_nape.util.Hashable2_Boolfalse.zpp_pool != null) {
		var nxt64 = zpp_nape.util.Hashable2_Boolfalse.zpp_pool.next;
		zpp_nape.util.Hashable2_Boolfalse.zpp_pool.next = null;
		zpp_nape.util.Hashable2_Boolfalse.zpp_pool = nxt64;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool != null) {
		var nxt65 = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = nxt65;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool != null) {
		var nxt66 = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = nxt66;
	}
	while(zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool != null) {
		var nxt67 = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = nxt67;
	}
	while(zpp_nape.shape.ZPP_Edge.zpp_pool != null) {
		var nxt68 = zpp_nape.shape.ZPP_Edge.zpp_pool.next;
		zpp_nape.shape.ZPP_Edge.zpp_pool.next = null;
		zpp_nape.shape.ZPP_Edge.zpp_pool = nxt68;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool != null) {
		var nxt69 = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = nxt69;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool != null) {
		var nxt70 = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = nxt70;
	}
	while(zpp_nape.space.ZPP_SweepData.zpp_pool != null) {
		var nxt71 = zpp_nape.space.ZPP_SweepData.zpp_pool.next;
		zpp_nape.space.ZPP_SweepData.zpp_pool.next = null;
		zpp_nape.space.ZPP_SweepData.zpp_pool = nxt71;
	}
	while(zpp_nape.space.ZPP_AABBNode.zpp_pool != null) {
		var nxt72 = zpp_nape.space.ZPP_AABBNode.zpp_pool.next;
		zpp_nape.space.ZPP_AABBNode.zpp_pool.next = null;
		zpp_nape.space.ZPP_AABBNode.zpp_pool = nxt72;
	}
	while(zpp_nape.space.ZPP_AABBPair.zpp_pool != null) {
		var nxt73 = zpp_nape.space.ZPP_AABBPair.zpp_pool.next;
		zpp_nape.space.ZPP_AABBPair.zpp_pool.next = null;
		zpp_nape.space.ZPP_AABBPair.zpp_pool = nxt73;
	}
	while(zpp_nape.dynamics.ZPP_Contact.zpp_pool != null) {
		var nxt74 = zpp_nape.dynamics.ZPP_Contact.zpp_pool.next;
		zpp_nape.dynamics.ZPP_Contact.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_Contact.zpp_pool = nxt74;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool != null) {
		var nxt75 = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = nxt75;
	}
	while(zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool != null) {
		var nxt76 = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = nxt76;
	}
	while(zpp_nape.space.ZPP_Island.zpp_pool != null) {
		var nxt77 = zpp_nape.space.ZPP_Island.zpp_pool.next;
		zpp_nape.space.ZPP_Island.zpp_pool.next = null;
		zpp_nape.space.ZPP_Island.zpp_pool = nxt77;
	}
	while(zpp_nape.space.ZPP_Component.zpp_pool != null) {
		var nxt78 = zpp_nape.space.ZPP_Component.zpp_pool.next;
		zpp_nape.space.ZPP_Component.zpp_pool.next = null;
		zpp_nape.space.ZPP_Component.zpp_pool = nxt78;
	}
	while(zpp_nape.space.ZPP_CallbackSet.zpp_pool != null) {
		var nxt79 = zpp_nape.space.ZPP_CallbackSet.zpp_pool.next;
		zpp_nape.space.ZPP_CallbackSet.zpp_pool.next = null;
		zpp_nape.space.ZPP_CallbackSet.zpp_pool = nxt79;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool != null) {
		var nxt80 = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = nxt80;
	}
	while(zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool != null) {
		var nxt81 = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = nxt81;
	}
	while(zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool != null) {
		var nxt82 = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = nxt82;
	}
	while(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool != null) {
		var nxt83 = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = nxt83;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool != null) {
		var nxt84 = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = nxt84;
	}
	while(zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool != null) {
		var nxt85 = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = nxt85;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool != null) {
		var nxt86 = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = nxt86;
	}
	while(zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool != null) {
		var nxt87 = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = nxt87;
	}
	while(zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool != null) {
		var nxt88 = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = nxt88;
	}
	while(zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool != null) {
		var nxt89 = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = nxt89;
	}
	while(zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool != null) {
		var nxt90 = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = nxt90;
	}
	while(zpp_nape.util.ZNPNode_ConvexResult.zpp_pool != null) {
		var nxt91 = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool.next;
		zpp_nape.util.ZNPNode_ConvexResult.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = nxt91;
	}
	while(zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool != null) {
		var nxt92 = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = nxt92;
	}
	while(zpp_nape.util.ZNPNode_RayResult.zpp_pool != null) {
		var nxt93 = zpp_nape.util.ZNPNode_RayResult.zpp_pool.next;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool = nxt93;
	}
	while(zpp_nape.util.ZPP_PubPool.poolGeomPoly != null) {
		var nxt94 = zpp_nape.util.ZPP_PubPool.poolGeomPoly.zpp_pool;
		zpp_nape.util.ZPP_PubPool.poolGeomPoly.zpp_pool = null;
		zpp_nape.util.ZPP_PubPool.poolGeomPoly = nxt94;
	}
	while(zpp_nape.util.ZPP_PubPool.poolVec2 != null) {
		var nxt95 = zpp_nape.util.ZPP_PubPool.poolVec2.zpp_pool;
		zpp_nape.util.ZPP_PubPool.poolVec2.zpp_pool = null;
		zpp_nape.util.ZPP_PubPool.poolVec2 = nxt95;
	}
	while(zpp_nape.util.ZPP_PubPool.poolVec3 != null) {
		var nxt96 = zpp_nape.util.ZPP_PubPool.poolVec3.zpp_pool;
		zpp_nape.util.ZPP_PubPool.poolVec3.zpp_pool = null;
		zpp_nape.util.ZPP_PubPool.poolVec3 = nxt96;
	}
};
nape.util.Debug.createGraphic = function(body) {
	var ret = new openfl.display.Shape();
	var graphics = ret.get_graphics();
	var idc = Std["int"](16777215 * Math.exp(-body.zpp_inner_i.id / 1500));
	var _r = ((idc & 16711680) >> 16) * 0.7;
	var _g = ((idc & 65280) >> 8) * 0.7;
	var _b = (idc & 255) * 0.7;
	var col = (_r | 0) << 16 | (_g | 0) << 8 | (_b | 0);
	graphics.lineStyle(0.1,col,1);
	var _g1 = body.zpp_inner.wrap_shapes.iterator();
	while(_g1.hasNext()) {
		var s;
		_g1.zpp_critical = false;
		s = _g1.zpp_inner.at(_g1.zpp_i++);
		if(s.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			var c;
			if(s.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) c = s.zpp_inner.circle.outer_zn; else c = null;
			graphics.drawCircle(((function($this) {
				var $r;
				if(c.zpp_inner.wrap_localCOM == null) {
					if(c.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) c.zpp_inner.circle.setupLocalCOM(); else c.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).get_x(),((function($this) {
				var $r;
				if(c.zpp_inner.wrap_localCOM == null) {
					if(c.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) c.zpp_inner.circle.setupLocalCOM(); else c.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).get_y(),c.zpp_inner_zn.radius);
		} else {
			var p;
			if(s.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) p = s.zpp_inner.polygon.outer_zn; else p = null;
			graphics.moveTo(((function($this) {
				var $r;
				if(s.zpp_inner.wrap_localCOM == null) {
					if(s.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.zpp_inner.circle.setupLocalCOM(); else s.zpp_inner.polygon.setupLocalCOM();
				}
				$r = s.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).get_x(),((function($this) {
				var $r;
				if(s.zpp_inner.wrap_localCOM == null) {
					if(s.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.zpp_inner.circle.setupLocalCOM(); else s.zpp_inner.polygon.setupLocalCOM();
				}
				$r = s.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).get_y());
			var _g11 = 0;
			var _g2 = ((function($this) {
				var $r;
				if(p.zpp_inner_zn.wrap_gverts == null) p.zpp_inner_zn.getgverts();
				$r = p.zpp_inner_zn.wrap_gverts;
				return $r;
			}(this))).get_length();
			while(_g11 < _g2) {
				var i = _g11++;
				var px = ((function($this) {
					var $r;
					if(p.zpp_inner_zn.wrap_lverts == null) p.zpp_inner_zn.getlverts();
					$r = p.zpp_inner_zn.wrap_lverts;
					return $r;
				}(this))).at(i);
				graphics.lineTo((function($this) {
					var $r;
					px.zpp_inner.validate();
					$r = px.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					px.zpp_inner.validate();
					$r = px.zpp_inner.y;
					return $r;
				}(this)));
			}
			var px1 = ((function($this) {
				var $r;
				if(p.zpp_inner_zn.wrap_lverts == null) p.zpp_inner_zn.getlverts();
				$r = p.zpp_inner_zn.wrap_lverts;
				return $r;
			}(this))).at(0);
			graphics.lineTo((function($this) {
				var $r;
				px1.zpp_inner.validate();
				$r = px1.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				px1.zpp_inner.validate();
				$r = px1.zpp_inner.y;
				return $r;
			}(this)));
		}
		if(s.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			var c1;
			if(s.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) c1 = s.zpp_inner.circle.outer_zn; else c1 = null;
			graphics.moveTo(((function($this) {
				var $r;
				if(c1.zpp_inner.wrap_localCOM == null) {
					if(c1.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) c1.zpp_inner.circle.setupLocalCOM(); else c1.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c1.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).get_x() + c1.zpp_inner_zn.radius * 0.3,((function($this) {
				var $r;
				if(c1.zpp_inner.wrap_localCOM == null) {
					if(c1.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) c1.zpp_inner.circle.setupLocalCOM(); else c1.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c1.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).get_y());
			graphics.lineTo(((function($this) {
				var $r;
				if(c1.zpp_inner.wrap_localCOM == null) {
					if(c1.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) c1.zpp_inner.circle.setupLocalCOM(); else c1.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c1.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).get_x() + c1.zpp_inner_zn.radius,((function($this) {
				var $r;
				if(c1.zpp_inner.wrap_localCOM == null) {
					if(c1.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) c1.zpp_inner.circle.setupLocalCOM(); else c1.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c1.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).get_y());
		}
	}
	return ret;
};
nape.util.Debug.prototype = {
	get_bgColour: function() {
		return this.zpp_inner.bg_col;
	}
	,set_bgColour: function(bgColour) {
		this.zpp_inner.d_shape.setbg(bgColour);
		return this.zpp_inner.bg_col;
	}
	,get_display: function() {
		return this.zpp_inner.d_shape.shape;
	}
	,get_transform: function() {
		if(this.zpp_inner.xform == null) this.zpp_inner.setform();
		return this.zpp_inner.xform.outer;
	}
	,set_transform: function(transform) {
		((function($this) {
			var $r;
			if($this.zpp_inner.xform == null) $this.zpp_inner.setform();
			$r = $this.zpp_inner.xform.outer;
			return $r;
		}(this))).set(transform);
		if(this.zpp_inner.xform == null) this.zpp_inner.setform();
		return this.zpp_inner.xform.outer;
	}
	,clear: function() {
	}
	,flush: function() {
	}
	,draw: function(object) {
	}
	,drawLine: function(start,end,colour) {
	}
	,drawCurve: function(start,control,end,colour) {
	}
	,drawCircle: function(position,radius,colour) {
	}
	,drawAABB: function(aabb,colour) {
	}
	,drawFilledTriangle: function(p0,p1,p2,colour) {
	}
	,drawFilledCircle: function(position,radius,colour) {
	}
	,drawPolygon: function(polygon,colour) {
	}
	,drawFilledPolygon: function(polygon,colour) {
	}
	,drawSpring: function(start,end,colour,coils,radius) {
		if(radius == null) radius = 3.0;
		if(coils == null) coils = 3;
	}
	,__class__: nape.util.Debug
	,__properties__: {set_transform:"set_transform",get_transform:"get_transform",get_display:"get_display",set_bgColour:"set_bgColour",get_bgColour:"get_bgColour"}
};
nape.util.ShapeDebug = function(width,height,bgColour) {
	if(bgColour == null) bgColour = 3355443;
	this.thickness = 0.0;
	this.zpp_inner_zn = null;
	nape.util.Debug.call(this);
	this.zpp_inner_zn = new zpp_nape.util.ZPP_ShapeDebug(width,height);
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner.d_shape.setbg(bgColour);
	this.zpp_inner.bg_col;
	this.thickness = 0.1;
};
$hxClasses["nape.util.ShapeDebug"] = nape.util.ShapeDebug;
nape.util.ShapeDebug.__name__ = ["nape","util","ShapeDebug"];
nape.util.ShapeDebug.__super__ = nape.util.Debug;
nape.util.ShapeDebug.prototype = $extend(nape.util.Debug.prototype,{
	clear: function() {
		this.zpp_inner_zn.graphics.clear();
	}
	,drawLine: function(start,end,colour) {
		var g = this.zpp_inner_zn.graphics;
		g.lineStyle(this.thickness,colour & 16777215,1);
		if(this.zpp_inner.xnull) {
			g.moveTo((function($this) {
				var $r;
				start.zpp_inner.validate();
				$r = start.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				start.zpp_inner.validate();
				$r = start.zpp_inner.y;
				return $r;
			}(this)));
			g.lineTo((function($this) {
				var $r;
				end.zpp_inner.validate();
				$r = end.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				end.zpp_inner.validate();
				$r = end.zpp_inner.y;
				return $r;
			}(this)));
			if(start.zpp_inner.weak) {
				start.dispose();
				true;
			} else false;
			if(end.zpp_inner.weak) {
				end.dispose();
				true;
			} else false;
		} else {
			var v = this.zpp_inner.xform.outer.transform(start);
			g.moveTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)));
			v.dispose();
			v = this.zpp_inner.xform.outer.transform(end);
			g.lineTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)));
			v.dispose();
		}
	}
	,drawCurve: function(start,control,end,colour) {
		var g = this.zpp_inner_zn.graphics;
		g.lineStyle(this.thickness,colour & 16777215,1);
		if(this.zpp_inner.xnull) {
			g.moveTo((function($this) {
				var $r;
				start.zpp_inner.validate();
				$r = start.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				start.zpp_inner.validate();
				$r = start.zpp_inner.y;
				return $r;
			}(this)));
			g.curveTo((function($this) {
				var $r;
				control.zpp_inner.validate();
				$r = control.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				control.zpp_inner.validate();
				$r = control.zpp_inner.y;
				return $r;
			}(this)),(function($this) {
				var $r;
				end.zpp_inner.validate();
				$r = end.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				end.zpp_inner.validate();
				$r = end.zpp_inner.y;
				return $r;
			}(this)));
			if(start.zpp_inner.weak) {
				start.dispose();
				true;
			} else false;
			if(control.zpp_inner.weak) {
				control.dispose();
				true;
			} else false;
			if(end.zpp_inner.weak) {
				end.dispose();
				true;
			} else false;
		} else {
			var u = this.zpp_inner.xform.outer.transform(start);
			var v = this.zpp_inner.xform.outer.transform(control);
			var q = this.zpp_inner.xform.outer.transform(end);
			g.moveTo((function($this) {
				var $r;
				u.zpp_inner.validate();
				$r = u.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				u.zpp_inner.validate();
				$r = u.zpp_inner.y;
				return $r;
			}(this)));
			g.curveTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)),(function($this) {
				var $r;
				q.zpp_inner.validate();
				$r = q.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				q.zpp_inner.validate();
				$r = q.zpp_inner.y;
				return $r;
			}(this)));
			u.dispose();
			v.dispose();
			q.dispose();
		}
	}
	,drawCircle: function(position,radius,colour) {
		var g = this.zpp_inner_zn.graphics;
		g.lineStyle(this.thickness,colour & 16777215,1);
		if(this.zpp_inner.xnull) {
			g.drawCircle((function($this) {
				var $r;
				position.zpp_inner.validate();
				$r = position.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				position.zpp_inner.validate();
				$r = position.zpp_inner.y;
				return $r;
			}(this)),radius);
			if(position.zpp_inner.weak) {
				position.dispose();
				true;
			} else false;
		} else {
			var v = this.zpp_inner.xform.outer.transform(position);
			g.drawCircle((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)),radius * this.zpp_inner.xdet);
			v.dispose();
		}
	}
	,drawAABB: function(aabb,colour) {
		var g = this.zpp_inner_zn.graphics;
		g.lineStyle(this.thickness,colour & 16777215,1);
		if(this.zpp_inner.xnull) g.drawRect((function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.minx;
			return $r;
		}(this)),(function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.miny;
			return $r;
		}(this)),(function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.width();
			return $r;
		}(this)),(function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.height();
			return $r;
		}(this))); else {
			var v = this.zpp_inner.xform.outer.transform(aabb.zpp_inner.getmin());
			var w = nape.geom.Vec2.get((function($this) {
				var $r;
				aabb.zpp_inner.validate();
				$r = aabb.zpp_inner.width();
				return $r;
			}(this)),0,null);
			var w2 = this.zpp_inner.xform.outer.transform(w,true);
			var h = nape.geom.Vec2.get(0,(function($this) {
				var $r;
				aabb.zpp_inner.validate();
				$r = aabb.zpp_inner.height();
				return $r;
			}(this)),null);
			var h2 = this.zpp_inner.xform.outer.transform(h,true);
			g.moveTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)));
			g.lineTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				w2.zpp_inner.validate();
				$r = w2.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)) + (function($this) {
				var $r;
				w2.zpp_inner.validate();
				$r = w2.zpp_inner.y;
				return $r;
			}(this)));
			g.lineTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				w2.zpp_inner.validate();
				$r = w2.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				h2.zpp_inner.validate();
				$r = h2.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)) + (function($this) {
				var $r;
				w2.zpp_inner.validate();
				$r = w2.zpp_inner.y;
				return $r;
			}(this)) + (function($this) {
				var $r;
				h2.zpp_inner.validate();
				$r = h2.zpp_inner.y;
				return $r;
			}(this)));
			g.lineTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				h2.zpp_inner.validate();
				$r = h2.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)) + (function($this) {
				var $r;
				h2.zpp_inner.validate();
				$r = h2.zpp_inner.y;
				return $r;
			}(this)));
			g.lineTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)));
			v.dispose();
			w.dispose();
			w2.dispose();
			h.dispose();
			h2.dispose();
		}
	}
	,drawFilledTriangle: function(p0,p1,p2,colour) {
		var g = this.zpp_inner_zn.graphics;
		g.lineStyle(0,0,0);
		g.beginFill(colour & 16777215,1);
		if(this.zpp_inner.xnull) {
			g.moveTo((function($this) {
				var $r;
				p0.zpp_inner.validate();
				$r = p0.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				p0.zpp_inner.validate();
				$r = p0.zpp_inner.y;
				return $r;
			}(this)));
			g.lineTo((function($this) {
				var $r;
				p1.zpp_inner.validate();
				$r = p1.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				p1.zpp_inner.validate();
				$r = p1.zpp_inner.y;
				return $r;
			}(this)));
			g.lineTo((function($this) {
				var $r;
				p2.zpp_inner.validate();
				$r = p2.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				p2.zpp_inner.validate();
				$r = p2.zpp_inner.y;
				return $r;
			}(this)));
			if(p0.zpp_inner.weak) {
				p0.dispose();
				true;
			} else false;
			if(p1.zpp_inner.weak) {
				p1.dispose();
				true;
			} else false;
			if(p2.zpp_inner.weak) {
				p2.dispose();
				true;
			} else false;
		} else {
			var v = this.zpp_inner.xform.outer.transform(p0);
			g.moveTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)));
			v.dispose();
			v = this.zpp_inner.xform.outer.transform(p1);
			g.lineTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)));
			v.dispose();
			v = this.zpp_inner.xform.outer.transform(p2);
			g.lineTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)));
			v.dispose();
		}
		g.endFill();
	}
	,drawFilledCircle: function(position,radius,colour) {
		var g = this.zpp_inner_zn.graphics;
		g.lineStyle(0,0,0);
		g.beginFill(colour & 16777215,1);
		if(this.zpp_inner.xnull) {
			g.drawCircle((function($this) {
				var $r;
				position.zpp_inner.validate();
				$r = position.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				position.zpp_inner.validate();
				$r = position.zpp_inner.y;
				return $r;
			}(this)),radius);
			if(position.zpp_inner.weak) {
				position.dispose();
				true;
			} else false;
		} else {
			var v = this.zpp_inner.xform.outer.transform(position);
			g.drawCircle((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)),radius * this.zpp_inner.xdet);
			v.dispose();
		}
		g.endFill();
	}
	,drawPolygon: function(polygon,colour) {
		var g = this.zpp_inner_zn.graphics;
		g.lineStyle(this.thickness,colour & 16777215,1.0);
		var fst = null;
		var fsttime = true;
		if(this.zpp_inner.xnull) {
			if((polygon instanceof Array) && polygon.__enum__ == null) {
				var lv = polygon;
				var _g = 0;
				while(_g < lv.length) {
					var vite = lv[_g];
					++_g;
					var p = vite;
					if(fsttime) {
						fst = nape.geom.Vec2.get((function($this) {
							var $r;
							p.zpp_inner.validate();
							$r = p.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p.zpp_inner.validate();
							$r = p.zpp_inner.y;
							return $r;
						}(this)),false);
						g.moveTo((function($this) {
							var $r;
							p.zpp_inner.validate();
							$r = p.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p.zpp_inner.validate();
							$r = p.zpp_inner.y;
							return $r;
						}(this)));
					} else g.lineTo((function($this) {
						var $r;
						p.zpp_inner.validate();
						$r = p.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						p.zpp_inner.validate();
						$r = p.zpp_inner.y;
						return $r;
					}(this)));
					fsttime = false;
				}
			} else if(js.Boot.__instanceof(polygon,nape.geom.Vec2List)) {
				var lv1 = polygon;
				var _g1 = lv1.iterator();
				while(_g1.hasNext()) {
					var p1;
					_g1.zpp_critical = false;
					p1 = _g1.zpp_inner.at(_g1.zpp_i++);
					if(fsttime) {
						fst = nape.geom.Vec2.get((function($this) {
							var $r;
							p1.zpp_inner.validate();
							$r = p1.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p1.zpp_inner.validate();
							$r = p1.zpp_inner.y;
							return $r;
						}(this)),false);
						g.moveTo((function($this) {
							var $r;
							p1.zpp_inner.validate();
							$r = p1.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p1.zpp_inner.validate();
							$r = p1.zpp_inner.y;
							return $r;
						}(this)));
					} else g.lineTo((function($this) {
						var $r;
						p1.zpp_inner.validate();
						$r = p1.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						p1.zpp_inner.validate();
						$r = p1.zpp_inner.y;
						return $r;
					}(this)));
					fsttime = false;
				}
			} else if(js.Boot.__instanceof(polygon,nape.geom.GeomPoly)) {
				var lv2 = polygon;
				var verts = lv2.zpp_inner.vertices;
				if(verts != null) {
					var vite1 = verts;
					do {
						var p2 = nape.geom.Vec2.get(vite1.x,vite1.y,null);
						vite1 = vite1.next;
						if(fsttime) {
							fst = nape.geom.Vec2.get((function($this) {
								var $r;
								p2.zpp_inner.validate();
								$r = p2.zpp_inner.x;
								return $r;
							}(this)),(function($this) {
								var $r;
								p2.zpp_inner.validate();
								$r = p2.zpp_inner.y;
								return $r;
							}(this)),false);
							g.moveTo((function($this) {
								var $r;
								p2.zpp_inner.validate();
								$r = p2.zpp_inner.x;
								return $r;
							}(this)),(function($this) {
								var $r;
								p2.zpp_inner.validate();
								$r = p2.zpp_inner.y;
								return $r;
							}(this)));
						} else g.lineTo((function($this) {
							var $r;
							p2.zpp_inner.validate();
							$r = p2.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p2.zpp_inner.validate();
							$r = p2.zpp_inner.y;
							return $r;
						}(this)));
						fsttime = false;
						p2.dispose();
					} while(vite1 != verts);
				}
			} else {
			}
			g.lineTo((function($this) {
				var $r;
				fst.zpp_inner.validate();
				$r = fst.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				fst.zpp_inner.validate();
				$r = fst.zpp_inner.y;
				return $r;
			}(this)));
			fst.dispose();
		} else {
			if((polygon instanceof Array) && polygon.__enum__ == null) {
				var lv3 = polygon;
				var _g2 = 0;
				while(_g2 < lv3.length) {
					var vite2 = lv3[_g2];
					++_g2;
					var p3 = vite2;
					var v = this.zpp_inner.xform.outer.transform(p3);
					if(fsttime) {
						fst = v;
						g.moveTo((function($this) {
							var $r;
							v.zpp_inner.validate();
							$r = v.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							v.zpp_inner.validate();
							$r = v.zpp_inner.y;
							return $r;
						}(this)));
					} else g.lineTo((function($this) {
						var $r;
						v.zpp_inner.validate();
						$r = v.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						v.zpp_inner.validate();
						$r = v.zpp_inner.y;
						return $r;
					}(this)));
					if(!fsttime) v.dispose();
					fsttime = false;
				}
			} else if(js.Boot.__instanceof(polygon,nape.geom.Vec2List)) {
				var lv4 = polygon;
				var _g3 = lv4.iterator();
				while(_g3.hasNext()) {
					var p4;
					_g3.zpp_critical = false;
					p4 = _g3.zpp_inner.at(_g3.zpp_i++);
					var v1 = this.zpp_inner.xform.outer.transform(p4);
					if(fsttime) {
						fst = v1;
						g.moveTo((function($this) {
							var $r;
							v1.zpp_inner.validate();
							$r = v1.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							v1.zpp_inner.validate();
							$r = v1.zpp_inner.y;
							return $r;
						}(this)));
					} else g.lineTo((function($this) {
						var $r;
						v1.zpp_inner.validate();
						$r = v1.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						v1.zpp_inner.validate();
						$r = v1.zpp_inner.y;
						return $r;
					}(this)));
					if(!fsttime) v1.dispose();
					fsttime = false;
				}
			} else if(js.Boot.__instanceof(polygon,nape.geom.GeomPoly)) {
				var lv5 = polygon;
				var verts1 = lv5.zpp_inner.vertices;
				if(verts1 != null) {
					var vite3 = verts1;
					do {
						var p5 = nape.geom.Vec2.get(vite3.x,vite3.y,null);
						vite3 = vite3.next;
						var v2 = this.zpp_inner.xform.outer.transform(p5);
						if(fsttime) {
							fst = v2;
							g.moveTo((function($this) {
								var $r;
								v2.zpp_inner.validate();
								$r = v2.zpp_inner.x;
								return $r;
							}(this)),(function($this) {
								var $r;
								v2.zpp_inner.validate();
								$r = v2.zpp_inner.y;
								return $r;
							}(this)));
						} else g.lineTo((function($this) {
							var $r;
							v2.zpp_inner.validate();
							$r = v2.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							v2.zpp_inner.validate();
							$r = v2.zpp_inner.y;
							return $r;
						}(this)));
						if(!fsttime) v2.dispose();
						fsttime = false;
						p5.dispose();
					} while(vite3 != verts1);
				}
			} else {
			}
			g.lineTo((function($this) {
				var $r;
				fst.zpp_inner.validate();
				$r = fst.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				fst.zpp_inner.validate();
				$r = fst.zpp_inner.y;
				return $r;
			}(this)));
			fst.dispose();
		}
		if((polygon instanceof Array) && polygon.__enum__ == null) {
			var lv6 = polygon;
			var i = 0;
			while(i < lv6.length) {
				var cur = lv6[i];
				if(cur.zpp_inner.weak?(function($this) {
					var $r;
					cur.dispose();
					$r = true;
					return $r;
				}(this)):false) {
					lv6.splice(i,1);
					continue;
				}
				i++;
			}
		} else if(js.Boot.__instanceof(polygon,nape.geom.Vec2List)) {
			var lv7 = polygon;
			if(lv7.zpp_inner._validate != null) lv7.zpp_inner._validate();
			var ins = lv7.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x = cur1.elt;
				if(x.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
						true;
					} else false;
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
	,drawFilledPolygon: function(polygon,colour) {
		var g = this.zpp_inner_zn.graphics;
		g.beginFill(colour & 16777215,1.0);
		g.lineStyle(0,0,0);
		var fst = null;
		var fsttime = true;
		if(this.zpp_inner.xnull) {
			if((polygon instanceof Array) && polygon.__enum__ == null) {
				var lv = polygon;
				var _g = 0;
				while(_g < lv.length) {
					var vite = lv[_g];
					++_g;
					var p = vite;
					if(fsttime) {
						fst = nape.geom.Vec2.get((function($this) {
							var $r;
							p.zpp_inner.validate();
							$r = p.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p.zpp_inner.validate();
							$r = p.zpp_inner.y;
							return $r;
						}(this)),false);
						g.moveTo((function($this) {
							var $r;
							p.zpp_inner.validate();
							$r = p.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p.zpp_inner.validate();
							$r = p.zpp_inner.y;
							return $r;
						}(this)));
					} else g.lineTo((function($this) {
						var $r;
						p.zpp_inner.validate();
						$r = p.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						p.zpp_inner.validate();
						$r = p.zpp_inner.y;
						return $r;
					}(this)));
					fsttime = false;
				}
			} else if(js.Boot.__instanceof(polygon,nape.geom.Vec2List)) {
				var lv1 = polygon;
				var _g1 = lv1.iterator();
				while(_g1.hasNext()) {
					var p1;
					_g1.zpp_critical = false;
					p1 = _g1.zpp_inner.at(_g1.zpp_i++);
					if(fsttime) {
						fst = nape.geom.Vec2.get((function($this) {
							var $r;
							p1.zpp_inner.validate();
							$r = p1.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p1.zpp_inner.validate();
							$r = p1.zpp_inner.y;
							return $r;
						}(this)),false);
						g.moveTo((function($this) {
							var $r;
							p1.zpp_inner.validate();
							$r = p1.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p1.zpp_inner.validate();
							$r = p1.zpp_inner.y;
							return $r;
						}(this)));
					} else g.lineTo((function($this) {
						var $r;
						p1.zpp_inner.validate();
						$r = p1.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						p1.zpp_inner.validate();
						$r = p1.zpp_inner.y;
						return $r;
					}(this)));
					fsttime = false;
				}
			} else if(js.Boot.__instanceof(polygon,nape.geom.GeomPoly)) {
				var lv2 = polygon;
				var verts = lv2.zpp_inner.vertices;
				if(verts != null) {
					var vite1 = verts;
					do {
						var p2 = nape.geom.Vec2.get(vite1.x,vite1.y,null);
						vite1 = vite1.next;
						if(fsttime) {
							fst = nape.geom.Vec2.get((function($this) {
								var $r;
								p2.zpp_inner.validate();
								$r = p2.zpp_inner.x;
								return $r;
							}(this)),(function($this) {
								var $r;
								p2.zpp_inner.validate();
								$r = p2.zpp_inner.y;
								return $r;
							}(this)),false);
							g.moveTo((function($this) {
								var $r;
								p2.zpp_inner.validate();
								$r = p2.zpp_inner.x;
								return $r;
							}(this)),(function($this) {
								var $r;
								p2.zpp_inner.validate();
								$r = p2.zpp_inner.y;
								return $r;
							}(this)));
						} else g.lineTo((function($this) {
							var $r;
							p2.zpp_inner.validate();
							$r = p2.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p2.zpp_inner.validate();
							$r = p2.zpp_inner.y;
							return $r;
						}(this)));
						fsttime = false;
						p2.dispose();
					} while(vite1 != verts);
				}
			} else {
			}
			g.lineTo((function($this) {
				var $r;
				fst.zpp_inner.validate();
				$r = fst.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				fst.zpp_inner.validate();
				$r = fst.zpp_inner.y;
				return $r;
			}(this)));
			fst.dispose();
		} else {
			if((polygon instanceof Array) && polygon.__enum__ == null) {
				var lv3 = polygon;
				var _g2 = 0;
				while(_g2 < lv3.length) {
					var vite2 = lv3[_g2];
					++_g2;
					var p3 = vite2;
					var v = this.zpp_inner.xform.outer.transform(p3);
					if(fsttime) {
						fst = v;
						g.moveTo((function($this) {
							var $r;
							v.zpp_inner.validate();
							$r = v.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							v.zpp_inner.validate();
							$r = v.zpp_inner.y;
							return $r;
						}(this)));
					} else g.lineTo((function($this) {
						var $r;
						v.zpp_inner.validate();
						$r = v.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						v.zpp_inner.validate();
						$r = v.zpp_inner.y;
						return $r;
					}(this)));
					if(!fsttime) v.dispose();
					fsttime = false;
				}
			} else if(js.Boot.__instanceof(polygon,nape.geom.Vec2List)) {
				var lv4 = polygon;
				var _g3 = lv4.iterator();
				while(_g3.hasNext()) {
					var p4;
					_g3.zpp_critical = false;
					p4 = _g3.zpp_inner.at(_g3.zpp_i++);
					var v1 = this.zpp_inner.xform.outer.transform(p4);
					if(fsttime) {
						fst = v1;
						g.moveTo((function($this) {
							var $r;
							v1.zpp_inner.validate();
							$r = v1.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							v1.zpp_inner.validate();
							$r = v1.zpp_inner.y;
							return $r;
						}(this)));
					} else g.lineTo((function($this) {
						var $r;
						v1.zpp_inner.validate();
						$r = v1.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						v1.zpp_inner.validate();
						$r = v1.zpp_inner.y;
						return $r;
					}(this)));
					if(!fsttime) v1.dispose();
					fsttime = false;
				}
			} else if(js.Boot.__instanceof(polygon,nape.geom.GeomPoly)) {
				var lv5 = polygon;
				var verts1 = lv5.zpp_inner.vertices;
				if(verts1 != null) {
					var vite3 = verts1;
					do {
						var p5 = nape.geom.Vec2.get(vite3.x,vite3.y,null);
						vite3 = vite3.next;
						var v2 = this.zpp_inner.xform.outer.transform(p5);
						if(fsttime) {
							fst = v2;
							g.moveTo((function($this) {
								var $r;
								v2.zpp_inner.validate();
								$r = v2.zpp_inner.x;
								return $r;
							}(this)),(function($this) {
								var $r;
								v2.zpp_inner.validate();
								$r = v2.zpp_inner.y;
								return $r;
							}(this)));
						} else g.lineTo((function($this) {
							var $r;
							v2.zpp_inner.validate();
							$r = v2.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							v2.zpp_inner.validate();
							$r = v2.zpp_inner.y;
							return $r;
						}(this)));
						if(!fsttime) v2.dispose();
						fsttime = false;
						p5.dispose();
					} while(vite3 != verts1);
				}
			} else {
			}
			g.lineTo((function($this) {
				var $r;
				fst.zpp_inner.validate();
				$r = fst.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				fst.zpp_inner.validate();
				$r = fst.zpp_inner.y;
				return $r;
			}(this)));
			fst.dispose();
		}
		g.endFill();
		if((polygon instanceof Array) && polygon.__enum__ == null) {
			var lv6 = polygon;
			var i = 0;
			while(i < lv6.length) {
				var cur = lv6[i];
				if(cur.zpp_inner.weak?(function($this) {
					var $r;
					cur.dispose();
					$r = true;
					return $r;
				}(this)):false) {
					lv6.splice(i,1);
					continue;
				}
				i++;
			}
		} else if(js.Boot.__instanceof(polygon,nape.geom.Vec2List)) {
			var lv7 = polygon;
			if(lv7.zpp_inner._validate != null) lv7.zpp_inner._validate();
			var ins = lv7.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x = cur1.elt;
				if(x.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
						true;
					} else false;
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
	,draw: function(object) {
		if(this.zpp_inner.xnull) {
			if(js.Boot.__instanceof(object,nape.space.Space)) this.zpp_inner_zn.draw_space((js.Boot.__cast(object , nape.space.Space)).zpp_inner,null,1.0,true); else if(js.Boot.__instanceof(object,nape.phys.Compound)) this.zpp_inner_zn.draw_compound((js.Boot.__cast(object , nape.phys.Compound)).zpp_inner,null,1.0,true); else if(js.Boot.__instanceof(object,nape.phys.Body)) this.zpp_inner_zn.draw_body((js.Boot.__cast(object , nape.phys.Body)).zpp_inner,null,1.0,true); else if(js.Boot.__instanceof(object,nape.shape.Shape)) this.zpp_inner_zn.draw_shape((js.Boot.__cast(object , nape.shape.Shape)).zpp_inner,null,1.0,true); else if(js.Boot.__instanceof(object,nape.constraint.Constraint)) (js.Boot.__cast(object , nape.constraint.Constraint)).zpp_inner.draw(this); else {
			}
		} else if(js.Boot.__instanceof(object,nape.space.Space)) this.zpp_inner_zn.draw_space((js.Boot.__cast(object , nape.space.Space)).zpp_inner,this.zpp_inner.xform,this.zpp_inner.xdet,false); else if(js.Boot.__instanceof(object,nape.phys.Body)) this.zpp_inner_zn.draw_body((js.Boot.__cast(object , nape.phys.Body)).zpp_inner,this.zpp_inner.xform,this.zpp_inner.xdet,false); else if(js.Boot.__instanceof(object,nape.shape.Shape)) this.zpp_inner_zn.draw_shape((js.Boot.__cast(object , nape.shape.Shape)).zpp_inner,this.zpp_inner.xform,this.zpp_inner.xdet,false); else if(js.Boot.__instanceof(object,nape.constraint.Constraint)) (js.Boot.__cast(object , nape.constraint.Constraint)).zpp_inner.draw(this); else {
		}
	}
	,drawSpring: function(start,end,colour,coils,radius) {
		if(radius == null) radius = 3.0;
		if(coils == null) coils = 3;
		if(coils == 0) this.drawLine(start,end,colour); else {
			var dx;
			dx = (function($this) {
				var $r;
				end.zpp_inner.validate();
				$r = end.zpp_inner.x;
				return $r;
			}(this)) - (function($this) {
				var $r;
				start.zpp_inner.validate();
				$r = start.zpp_inner.x;
				return $r;
			}(this));
			var dy;
			dy = (function($this) {
				var $r;
				end.zpp_inner.validate();
				$r = end.zpp_inner.y;
				return $r;
			}(this)) - (function($this) {
				var $r;
				start.zpp_inner.validate();
				$r = start.zpp_inner.y;
				return $r;
			}(this));
			var t = 1.0 / (coils * 4);
			dx *= t;
			dy *= t;
			var nx = 0.0;
			var ny = 0.0;
			nx = dx;
			ny = dy;
			if(nx * nx + ny * ny < 0.1) return;
			var d = nx * nx + ny * ny;
			var imag = 1.0 / Math.sqrt(d);
			var t1 = imag;
			nx *= t1;
			ny *= t1;
			var t2 = nx;
			nx = -ny;
			ny = t2;
			var t3 = radius * 2;
			nx *= t3;
			ny *= t3;
			var u = nape.geom.Vec2.get((function($this) {
				var $r;
				start.zpp_inner.validate();
				$r = start.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				start.zpp_inner.validate();
				$r = start.zpp_inner.y;
				return $r;
			}(this)),false);
			var v = nape.geom.Vec2.get(null,null,null);
			var q = nape.geom.Vec2.get(null,null,null);
			var _g = 0;
			while(_g < coils) {
				var i = _g++;
				v.set_x((function($this) {
					var $r;
					u.zpp_inner.validate();
					$r = u.zpp_inner.x;
					return $r;
				}(this)) + dx + nx);
				v.set_y((function($this) {
					var $r;
					u.zpp_inner.validate();
					$r = u.zpp_inner.y;
					return $r;
				}(this)) + dy + ny);
				q.set_x((function($this) {
					var $r;
					u.zpp_inner.validate();
					$r = u.zpp_inner.x;
					return $r;
				}(this)) + dx * 2);
				q.set_y((function($this) {
					var $r;
					u.zpp_inner.validate();
					$r = u.zpp_inner.y;
					return $r;
				}(this)) + dy * 2);
				this.drawCurve(u,v,q,colour);
				u.set_x((function($this) {
					var $r;
					q.zpp_inner.validate();
					$r = q.zpp_inner.x;
					return $r;
				}(this)));
				u.set_y((function($this) {
					var $r;
					q.zpp_inner.validate();
					$r = q.zpp_inner.y;
					return $r;
				}(this)));
				v.set_x((function($this) {
					var $r;
					u.zpp_inner.validate();
					$r = u.zpp_inner.x;
					return $r;
				}(this)) + dx - nx);
				v.set_y((function($this) {
					var $r;
					u.zpp_inner.validate();
					$r = u.zpp_inner.y;
					return $r;
				}(this)) + dy - ny);
				q.set_x((function($this) {
					var $r;
					u.zpp_inner.validate();
					$r = u.zpp_inner.x;
					return $r;
				}(this)) + dx * 2);
				q.set_y((function($this) {
					var $r;
					u.zpp_inner.validate();
					$r = u.zpp_inner.y;
					return $r;
				}(this)) + dy * 2);
				this.drawCurve(u,v,q,colour);
				u.set_x((function($this) {
					var $r;
					q.zpp_inner.validate();
					$r = q.zpp_inner.x;
					return $r;
				}(this)));
				u.set_y((function($this) {
					var $r;
					q.zpp_inner.validate();
					$r = q.zpp_inner.y;
					return $r;
				}(this)));
			}
			u.dispose();
			v.dispose();
			q.dispose();
		}
		if(start.zpp_inner.weak) {
			start.dispose();
			true;
		} else false;
		if(end.zpp_inner.weak) {
			end.dispose();
			true;
		} else false;
	}
	,__class__: nape.util.ShapeDebug
});
openfl.IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl.IAssetCache;
openfl.IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl.IAssetCache.prototype = {
	__class__: openfl.IAssetCache
};
openfl.AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe.ds.StringMap();
	this.font = new haxe.ds.StringMap();
	this.sound = new haxe.ds.StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl.AssetCache;
openfl.AssetCache.__name__ = ["openfl","AssetCache"];
openfl.AssetCache.__interfaces__ = [openfl.IAssetCache];
openfl.AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe.ds.StringMap();
			this.font = new haxe.ds.StringMap();
			this.sound = new haxe.ds.StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.bitmapData.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.sound.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.sound.remove(key2);
			}
		}
	}
	,getBitmapData: function(id) {
		return this.bitmapData.get(id);
	}
	,getFont: function(id) {
		return this.font.get(id);
	}
	,getSound: function(id) {
		return this.sound.get(id);
	}
	,hasBitmapData: function(id) {
		return this.bitmapData.exists(id);
	}
	,hasFont: function(id) {
		return this.font.exists(id);
	}
	,hasSound: function(id) {
		return this.sound.exists(id);
	}
	,removeBitmapData: function(id) {
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.set(id,bitmapData);
	}
	,setFont: function(id,font) {
		this.font.set(id,font);
	}
	,setSound: function(id,sound) {
		this.sound.set(id,sound);
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl.AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
openfl.Assets = function() { };
$hxClasses["openfl.Assets"] = openfl.Assets;
openfl.Assets.__name__ = ["openfl","Assets"];
openfl.Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) useWeakReference = false;
	if(priority == null) priority = 0;
	if(useCapture == null) useCapture = false;
	openfl.Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl.Assets.dispatchEvent = function(event) {
	return openfl.Assets.dispatcher.dispatchEvent(event);
};
openfl.Assets.exists = function(id,type) {
	return lime.Assets.exists(id,type);
};
openfl.Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl.Assets.cache.getBitmapData(id);
		if(openfl.Assets.isValidBitmapData(bitmapData)) return bitmapData;
	}
	var image = lime.Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl.display.BitmapData.fromImage(image);
		if(useCache && openfl.Assets.cache.get_enabled()) openfl.Assets.cache.setBitmapData(id,bitmapData1);
		return bitmapData1;
	}
	return null;
};
openfl.Assets.getBytes = function(id) {
	return lime.Assets.getBytes(id);
};
openfl.Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasFont(id)) return openfl.Assets.cache.getFont(id);
	var font = lime.Assets.getFont(id,false);
	if(font != null) return font;
	return new openfl.text.Font();
};
openfl.Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime.Assets.libraries.get(name);
};
openfl.Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			if(library.isLocal(symbolName,"MOVIE_CLIP")) return library.getMovieClip(symbolName); else null;
		} else null;
	} else null;
	return null;
};
openfl.Assets.getMusic = function(id,useCache) {
	if(useCache == null) useCache = true;
	var path = lime.Assets.getPath(id);
	if(path != null) return new openfl.media.Sound(new openfl.net.URLRequest(path));
	return null;
};
openfl.Assets.getPath = function(id) {
	return lime.Assets.getPath(id);
};
openfl.Assets.getSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasSound(id)) {
		var sound = openfl.Assets.cache.getSound(id);
		if(openfl.Assets.isValidSound(sound)) return sound;
	}
	var path = lime.Assets.getPath(id);
	if(path != null) return new openfl.media.Sound(new openfl.net.URLRequest(path));
	return null;
};
openfl.Assets.getText = function(id) {
	return lime.Assets.getText(id);
};
openfl.Assets.hasEventListener = function(type) {
	return openfl.Assets.dispatcher.hasEventListener(type);
};
openfl.Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl.Assets.cache.hasBitmapData(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(openfl.Assets.cache.hasFont(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl.Assets.cache.hasSound(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
openfl.Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null;
	return true;
};
openfl.Assets.isValidSound = function(sound) {
	return true;
};
openfl.Assets.list = function(type) {
	return lime.Assets.list(type);
};
openfl.Assets.loadBitmapData = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl.Assets.cache.getBitmapData(id);
		if(openfl.Assets.isValidBitmapData(bitmapData)) {
			handler(bitmapData);
			return;
		}
	}
	lime.Assets.loadImage(id,function(image) {
		if(image != null) {
			var bitmapData1 = openfl.display.BitmapData.fromImage(image);
			if(useCache && openfl.Assets.cache.get_enabled()) openfl.Assets.cache.setBitmapData(id,bitmapData1);
			handler(bitmapData1);
		}
	},false);
};
openfl.Assets.loadBytes = function(id,handler) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			library.loadBytes(symbolName,handler);
			return;
		} else null;
	} else null;
	handler(null);
};
openfl.Assets.loadFont = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasFont(id)) {
		handler(openfl.Assets.cache.getFont(id));
		return;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(useCache && openfl.Assets.cache.get_enabled()) library.loadFont(symbolName,function(font) {
				openfl.Assets.cache.setFont(id,font);
				handler(font);
			}); else library.loadFont(symbolName,handler);
			return;
		} else null;
	} else null;
	handler(null);
};
openfl.Assets.loadLibrary = function(name,handler) {
	lime.Assets.loadLibrary(name,handler);
};
openfl.Assets.loadMusic = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	handler(openfl.Assets.getMusic(id,useCache));
};
openfl.Assets.loadMovieClip = function(id,handler) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			library.loadMovieClip(symbolName,handler);
			return;
		} else null;
	} else null;
	handler(null);
};
openfl.Assets.loadSound = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	handler(openfl.Assets.getSound(id,useCache));
};
openfl.Assets.loadText = function(id,handler) {
	lime.Assets.loadText(id,handler);
};
openfl.Assets.registerLibrary = function(name,library) {
	lime.Assets.registerLibrary(name,library);
};
openfl.Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) capture = false;
	openfl.Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl.Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl.Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
};
openfl.Assets.unloadLibrary = function(name) {
	lime.Assets.unloadLibrary(name);
};
openfl.Assets.library_onEvent = function(library,type) {
	if(type == "change") {
		openfl.Assets.cache.clear();
		openfl.Assets.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
	}
};
openfl.AssetLibrary = function() {
	lime.AssetLibrary.call(this);
};
$hxClasses["openfl.AssetLibrary"] = openfl.AssetLibrary;
openfl.AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl.AssetLibrary.__super__ = lime.AssetLibrary;
openfl.AssetLibrary.prototype = $extend(lime.AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,getMusic: function(id) {
		return this.getSound(id);
	}
	,getSound: function(id) {
		return null;
	}
	,loadMovieClip: function(id,handler) {
		handler(this.getMovieClip(id));
	}
	,loadMusic: function(id,handler) {
		handler(this.getMusic(id));
	}
	,loadSound: function(id,handler) {
		handler(this.getSound(id));
	}
	,__class__: openfl.AssetLibrary
});
openfl._Assets = {};
openfl._Assets.AssetType_Impl_ = function() { };
$hxClasses["openfl._Assets.AssetType_Impl_"] = openfl._Assets.AssetType_Impl_;
openfl._Assets.AssetType_Impl_.__name__ = ["openfl","_Assets","AssetType_Impl_"];
openfl.display.MovieClip = function() {
	openfl.display.Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
};
$hxClasses["openfl.display.MovieClip"] = openfl.display.MovieClip;
openfl.display.MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl.display.MovieClip.__super__ = openfl.display.Sprite;
openfl.display.MovieClip.prototype = $extend(openfl.display.Sprite.prototype,{
	gotoAndPlay: function(frame,scene) {
	}
	,gotoAndStop: function(frame,scene) {
	}
	,nextFrame: function() {
	}
	,play: function() {
	}
	,prevFrame: function() {
	}
	,stop: function() {
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl.display.MovieClip
	,__properties__: $extend(openfl.display.Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
openfl.display.LoaderInfo = function() {
	openfl.events.EventDispatcher.call(this);
	this.applicationDomain = openfl.system.ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl.display.LoaderInfo;
openfl.display.LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl.display.LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl.display.LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl.events.UncaughtErrorEvents();
	if(loader != null) loaderInfo.loader = loader; else loaderInfo.url = openfl.display.LoaderInfo.__rootURL;
	return loaderInfo;
};
openfl.display.LoaderInfo.__super__ = openfl.events.EventDispatcher;
openfl.display.LoaderInfo.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	__class__: openfl.display.LoaderInfo
});
openfl.system = {};
openfl.system.ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl.system.ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl.system.ApplicationDomain;
openfl.system.ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl.system.ApplicationDomain.prototype = {
	getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl.system.ApplicationDomain
};
openfl.events.UncaughtErrorEvents = function(target) {
	openfl.events.EventDispatcher.call(this,target);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl.events.UncaughtErrorEvents;
openfl.events.UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl.events.UncaughtErrorEvents.__super__ = openfl.events.EventDispatcher;
openfl.events.UncaughtErrorEvents.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	__class__: openfl.events.UncaughtErrorEvents
});
openfl.geom.Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
	this.__array = new Float32Array([a,b,c,d,tx,ty,0,0,1]);
};
$hxClasses["openfl.geom.Matrix"] = openfl.geom.Matrix;
openfl.geom.Matrix.__name__ = ["openfl","geom","Matrix"];
openfl.geom.Matrix.prototype = {
	clone: function() {
		return new openfl.geom.Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.x = 0;
			vector3D.y = 0;
			vector3D.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl.geom.Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		return matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new openfl.geom.Matrix();
		result.a = this.a * m.a + this.b * m.c;
		result.b = this.a * m.b + this.b * m.d;
		result.c = this.c * m.a + this.d * m.c;
		result.d = this.c * m.b + this.d * m.d;
		result.tx = this.tx * m.a + this.ty * m.c + m.tx;
		result.ty = this.tx * m.b + this.ty * m.d + m.ty;
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl.geom.Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		var m = new openfl.geom.Matrix();
		m.tx = dx;
		m.ty = dy;
		this.concat(m);
	}
	,toArray: function(transpose) {
		if(transpose == null) transpose = false;
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = 0;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = this.tx;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: openfl.geom.Matrix
};
openfl.Lib = function() { };
$hxClasses["openfl.Lib"] = openfl.Lib;
openfl.Lib.__name__ = ["openfl","Lib"];
openfl.Lib.application = null;
openfl.Lib["as"] = function(v,c) {
	if(js.Boot.__instanceof(v,c)) return v; else return null;
};
openfl.Lib.attach = function(name) {
	return new openfl.display.MovieClip();
};
openfl.Lib.embed = $hx_exports.openfl.embed = function(elementName,width,height,background,assetsPrefix) {
	lime.system.System.embed(elementName,width,height,background,assetsPrefix);
};
openfl.Lib.getTimer = function() {
	return lime.system.System.getTimer();
};
openfl.Lib.getURL = function(request,target) {
	if(target == null) target = "_blank";
	window.open(request.url,target);
};
openfl.Lib.notImplemented = function(api) {
	if(!openfl.Lib.__sentWarnings.exists(api)) {
		openfl.Lib.__sentWarnings.set(api,true);
		null;
	}
};
openfl.Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl.Lib.trace = function(arg) {
	haxe.Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 146, className : "openfl.Lib", methodName : "trace"});
};
openfl.Memory = function() { };
$hxClasses["openfl.Memory"] = openfl.Memory;
openfl.Memory.__name__ = ["openfl","Memory"];
openfl.Memory.gcRef = null;
openfl.Memory.len = null;
openfl.Memory._setPositionTemporarily = function(position,action) {
	var oldPosition = openfl.Memory.gcRef.position;
	openfl.Memory.gcRef.position = position;
	var value = action();
	openfl.Memory.gcRef.position = oldPosition;
	return value;
};
openfl.Memory.getByte = function(addr) {
	return openfl.Memory.gcRef.data.getInt8(addr);
};
openfl.Memory.getDouble = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readDouble();
	});
};
openfl.Memory.getFloat = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readFloat();
	});
};
openfl.Memory.getI32 = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readInt();
	});
};
openfl.Memory.getUI16 = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readUnsignedShort();
	});
};
openfl.Memory.select = function(inBytes) {
	openfl.Memory.gcRef = inBytes;
	if(inBytes != null) openfl.Memory.len = inBytes.length; else openfl.Memory.len = 0;
};
openfl.Memory.setByte = function(addr,v) {
	openfl.Memory.gcRef.data.setUint8(addr,v);
};
openfl.Memory.setDouble = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeDouble(v);
	});
};
openfl.Memory.setFloat = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeFloat(v);
	});
};
openfl.Memory.setI16 = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeUnsignedShort(v);
	});
};
openfl.Memory.setI32 = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeInt(v);
	});
};
openfl._Vector = {};
openfl._Vector.Vector_Impl_ = function() { };
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl._Vector.Vector_Impl_;
openfl._Vector.Vector_Impl_.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl._Vector.Vector_Impl_.__properties__ = {set_fixed:"set_fixed",get_fixed:"get_fixed",set_length:"set_length",get_length:"get_length"}
openfl._Vector.Vector_Impl_._new = function(length,fixed) {
	if(fixed == null) fixed = false;
	if(length == null) length = 0;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(length);
	this1.data = this2;
	this1.length = length;
	this1.fixed = fixed;
	return this1;
};
openfl._Vector.Vector_Impl_.concat = function(this1,a) {
	var vectorData = new openfl.VectorData();
	if(a != null) vectorData.length = this1.length + a.length; else vectorData.length = this1.length;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(vectorData.length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
	if(a != null) haxe.ds._Vector.Vector_Impl_.blit(a.data,0,vectorData.data,this1.length,a.length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.copy = function(this1) {
	var vectorData = new openfl.VectorData();
	vectorData.length = this1.length;
	vectorData.fixed = this1.fixed;
	var this2;
	this2 = new Array(this1.length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.iterator = function(this1) {
	return new openfl.VectorDataIterator(this1);
};
openfl._Vector.Vector_Impl_.join = function(this1,sep) {
	var output = "";
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(i > 0) output += sep;
		output += Std.string(this1.data[i]);
	}
	return output;
};
openfl._Vector.Vector_Impl_.pop = function(this1) {
	var value = null;
	if(!this1.fixed) {
		if(this1.length > 0) {
			this1.length--;
			value = this1.data[this1.length];
		}
	}
	return value;
};
openfl._Vector.Vector_Impl_.push = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
		this1.data[this1.length - 1] = x;
	}
	return this1.length;
};
openfl._Vector.Vector_Impl_.reverse = function(this1) {
	var data;
	var this2;
	this2 = new Array(this1.length);
	data = this2;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		data[this1.length - 1 - i] = this1.data[i];
	}
	this1.data = data;
};
openfl._Vector.Vector_Impl_.shift = function(this1) {
	if(!this1.fixed && this1.length > 0) {
		this1.length--;
		var value = this1.data[0];
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,1,this1.data,0,this1.length);
		return value;
	}
	return null;
};
openfl._Vector.Vector_Impl_.unshift = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,1,this1.data.length);
			this1.data = data;
		} else haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,this1.data,1,this1.length - 1);
		this1.data[0] = x;
	}
};
openfl._Vector.Vector_Impl_.slice = function(this1,pos,end) {
	if(end == null) end = 0;
	if(pos == null) pos = 0;
	if(pos < 0) pos += this1.length;
	if(end <= 0) end += this1.length;
	if(end > this1.length) end = this1.length;
	var length = end - pos;
	if(length <= 0 || length > this1.length) length = this1.length;
	var vectorData = new openfl.VectorData();
	vectorData.length = end - pos;
	vectorData.fixed = true;
	var this2;
	this2 = new Array(length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.sort = function(this1,f) {
	var array = haxe.ds._Vector.Vector_Impl_.toArray(this1.data);
	array.sort(f);
	var vec;
	var this2;
	this2 = new Array(array.length);
	vec = this2;
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = array[i];
	}
	this1.data = vec;
};
openfl._Vector.Vector_Impl_.splice = function(this1,pos,len) {
	if(pos < 0) pos += this1.length;
	if(pos + len > this1.length) len = this1.length - pos;
	if(len < 0) len = 0;
	var vectorData = new openfl.VectorData();
	vectorData.length = len;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(len);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,len);
	if(len > 0) {
		this1.length -= len;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
	}
	return vectorData;
};
openfl._Vector.Vector_Impl_.toString = function(this1) {
	return haxe.ds._Vector.Vector_Impl_.toArray(this1.data).toString();
};
openfl._Vector.Vector_Impl_.indexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var _g1 = from;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this1.data[i] == x) {
			value = i;
			break;
		}
	}
	return value;
};
openfl._Vector.Vector_Impl_.lastIndexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var i = this1.length - 1;
	while(i >= from) {
		if(this1.data[i] == x) {
			value = i;
			break;
		}
		i--;
	}
	return value;
};
openfl._Vector.Vector_Impl_.ofArray = function(a) {
	var vectorData = new openfl.VectorData();
	vectorData.length = a.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(a.length);
	vec = this1;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = a[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl._Vector.Vector_Impl_.convert = function(v) {
	return v;
};
openfl._Vector.Vector_Impl_.get = function(this1,index) {
	return this1.data[index];
};
openfl._Vector.Vector_Impl_.set = function(this1,key,value) {
	if(!this1.fixed) {
		if(key >= this1.length) this1.length = key + 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	return this1.data[key] = value;
};
openfl._Vector.Vector_Impl_.fromArray = function(value) {
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl._Vector.Vector_Impl_.toArray = function(this1) {
	var value = new Array();
	var _g1 = 0;
	var _g = this1.data.length;
	while(_g1 < _g) {
		var i = _g1++;
		value.push(this1.data[i]);
	}
	return value;
};
openfl._Vector.Vector_Impl_.fromHaxeVector = function(value) {
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	vectorData.data = value;
	return vectorData;
};
openfl._Vector.Vector_Impl_.toHaxeVector = function(this1) {
	return this1.data;
};
openfl._Vector.Vector_Impl_.fromVectorData = function(value) {
	return value;
};
openfl._Vector.Vector_Impl_.toVectorData = function(this1) {
	return this1;
};
openfl._Vector.Vector_Impl_.get_length = function(this1) {
	return this1.length;
};
openfl._Vector.Vector_Impl_.set_length = function(this1,value) {
	if(!this1.fixed) {
		if(value > this1.length) {
			var data;
			var this2;
			this2 = new Array(value);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value)));
			this1.data = data;
		}
		this1.length = value;
	}
	return value;
};
openfl._Vector.Vector_Impl_.get_fixed = function(this1) {
	return this1.fixed;
};
openfl._Vector.Vector_Impl_.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl.VectorData = function() {
	this.length = 0;
};
$hxClasses["openfl.VectorData"] = openfl.VectorData;
openfl.VectorData.__name__ = ["openfl","VectorData"];
openfl.VectorData.prototype = {
	__class__: openfl.VectorData
};
openfl.VectorDataIterator = function(data) {
	this.index = 0;
	this.vectorData = data;
};
$hxClasses["openfl.VectorDataIterator"] = openfl.VectorDataIterator;
openfl.VectorDataIterator.__name__ = ["openfl","VectorDataIterator"];
openfl.VectorDataIterator.prototype = {
	hasNext: function() {
		return this.index < this.vectorData.length;
	}
	,next: function() {
		var index = this.index++;
		return this.vectorData.data[index];
	}
	,__class__: openfl.VectorDataIterator
};
openfl._internal = {};
openfl._internal.renderer = {};
openfl._internal.renderer.AbstractRenderer = function(width,height) {
	this.width = width;
	this.height = height;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl._internal.renderer.AbstractRenderer.prototype = {
	render: function(stage) {
	}
	,renderShape: function(shape) {
	}
	,resize: function(width,height) {
	}
	,__class__: openfl._internal.renderer.AbstractRenderer
};
openfl._internal.renderer.RenderSession = function() {
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl._internal.renderer.RenderSession;
openfl._internal.renderer.RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl._internal.renderer.RenderSession.prototype = {
	__class__: openfl._internal.renderer.RenderSession
};
openfl._internal.renderer.canvas = {};
openfl._internal.renderer.canvas.CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl._internal.renderer.canvas.CanvasBitmap;
openfl._internal.renderer.canvas.CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl._internal.renderer.canvas.CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		bitmap.bitmapData.__sync();
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__worldTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.webkitImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) context.drawImage(bitmap.bitmapData.__image.get_src(),0,0); else context.drawImage(bitmap.bitmapData.__image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.webkitImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
openfl._internal.renderer.canvas.CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl._internal.renderer.canvas.CanvasGraphics;
openfl._internal.renderer.canvas.CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill = null;
openfl._internal.renderer.canvas.CanvasGraphics.bitmapStroke = null;
openfl._internal.renderer.canvas.CanvasGraphics.bitmapRepeat = null;
openfl._internal.renderer.canvas.CanvasGraphics.bounds = null;
openfl._internal.renderer.canvas.CanvasGraphics.fillCommands = null;
openfl._internal.renderer.canvas.CanvasGraphics.graphics = null;
openfl._internal.renderer.canvas.CanvasGraphics.hasFill = null;
openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = null;
openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = null;
openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = null;
openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands = null;
openfl._internal.renderer.canvas.CanvasGraphics.context = null;
openfl._internal.renderer.canvas.CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat) {
	bitmap.__sync();
	return openfl._internal.renderer.canvas.CanvasGraphics.context.createPattern(bitmap.__image.get_src(),bitmapRepeat?"repeat":"no-repeat");
	return null;
};
openfl._internal.renderer.canvas.CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	context.fillStyle = context.createPattern(bitmap.__image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	context.fill();
	return canvas;
};
openfl._internal.renderer.canvas.CanvasGraphics.endFill = function() {
	openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
	openfl._internal.renderer.canvas.CanvasGraphics.playCommands(openfl._internal.renderer.canvas.CanvasGraphics.fillCommands,false);
	openfl._internal.renderer.canvas.CanvasGraphics.fillCommands = [];
};
openfl._internal.renderer.canvas.CanvasGraphics.endStroke = function() {
	openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
	openfl._internal.renderer.canvas.CanvasGraphics.playCommands(openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands,true);
	openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
	openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands = [];
};
openfl._internal.renderer.canvas.CanvasGraphics.closePath = function() {
	if(openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle == null) return;
	openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
	openfl._internal.renderer.canvas.CanvasGraphics.context.stroke();
	openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
};
openfl._internal.renderer.canvas.CanvasGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl._internal.renderer.canvas.CanvasGraphics.SIN45;
	var cx2 = -rx + rx * openfl._internal.renderer.canvas.CanvasGraphics.TAN22;
	var cy1 = -ry + ry * openfl._internal.renderer.canvas.CanvasGraphics.SIN45;
	var cy2 = -ry + ry * openfl._internal.renderer.canvas.CanvasGraphics.TAN22;
	openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(xe,ye - ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x + rx,ye);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x,y + ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(xe - rx,y);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(xe,ye - ry);
};
openfl._internal.renderer.canvas.CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl._internal.renderer.canvas.CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = Math.NEGATIVE_INFINITY;
	var tmp = Math.NEGATIVE_INFINITY;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe.ds._Vector.Vector_Impl_.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl._internal.renderer.canvas.CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	openfl._internal.renderer.canvas.CanvasGraphics.bounds = openfl._internal.renderer.canvas.CanvasGraphics.graphics.__bounds;
	var offsetX = openfl._internal.renderer.canvas.CanvasGraphics.bounds.x;
	var offsetY = openfl._internal.renderer.canvas.CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var _g = 0;
	while(_g < commands.length) {
		var command = commands[_g];
		++_g;
		switch(command[1]) {
		case 3:
			var y = command[7];
			var x = command[6];
			var cy2 = command[5];
			var cx2 = command[4];
			var cy1 = command[3];
			var cx1 = command[2];
			openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
			break;
		case 4:
			var y1 = command[5];
			var x1 = command[4];
			var cy = command[3];
			var cx = command[2];
			openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
			break;
		case 5:
			var radius = command[4];
			var y2 = command[3];
			var x2 = command[2];
			openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x2 - offsetX + radius,y2 - offsetY);
			openfl._internal.renderer.canvas.CanvasGraphics.context.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2,true);
			break;
		case 6:
			var height = command[5];
			var width = command[4];
			var y3 = command[3];
			var x3 = command[2];
			x3 -= offsetX;
			y3 -= offsetY;
			var kappa = .5522848;
			var ox = width / 2 * kappa;
			var oy = height / 2 * kappa;
			var xe = x3 + width;
			var ye = y3 + height;
			var xm = x3 + width / 2;
			var ym = y3 + height / 2;
			openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x3,ym);
			openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(x3,ym - oy,xm - ox,y3,xm,y3);
			openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(xm + ox,y3,xe,ym - oy,xe,ym);
			openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x3,ym + oy,x3,ym);
			break;
		case 8:
			var ry = command[7];
			var rx = command[6];
			var height1 = command[5];
			var width1 = command[4];
			var y4 = command[3];
			var x4 = command[2];
			openfl._internal.renderer.canvas.CanvasGraphics.drawRoundRect(x4 - offsetX,y4 - offsetY,width1,height1,rx,ry);
			break;
		case 15:
			var y5 = command[3];
			var x5 = command[2];
			openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x5 - offsetX,y5 - offsetY);
			positionX = x5;
			positionY = y5;
			break;
		case 16:
			var y6 = command[3];
			var x6 = command[2];
			openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x6 - offsetX,y6 - offsetY);
			positionX = x6;
			positionY = y6;
			closeGap = true;
			startX = x6;
			startY = y6;
			break;
		case 12:
			var miterLimit = command[9];
			var joints = command[8];
			var caps = command[7];
			var scaleMode = command[6];
			var pixelHinting = command[5];
			var alpha = command[4];
			var color = command[3];
			var thickness = command[2];
			if(stroke && openfl._internal.renderer.canvas.CanvasGraphics.hasStroke) {
				openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
				openfl._internal.renderer.canvas.CanvasGraphics.context.stroke();
				openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
			}
			openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(thickness == null) openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = false; else {
				openfl._internal.renderer.canvas.CanvasGraphics.context.lineWidth = thickness;
				if(joints == null) openfl._internal.renderer.canvas.CanvasGraphics.context.lineJoin = "round"; else openfl._internal.renderer.canvas.CanvasGraphics.context.lineJoin = Std.string(joints).toLowerCase();
				if(caps == null) openfl._internal.renderer.canvas.CanvasGraphics.context.lineCap = "round"; else switch(caps[1]) {
				case 0:
					openfl._internal.renderer.canvas.CanvasGraphics.context.lineCap = "butt";
					break;
				default:
					openfl._internal.renderer.canvas.CanvasGraphics.context.lineCap = Std.string(caps).toLowerCase();
				}
				if(miterLimit == null) openfl._internal.renderer.canvas.CanvasGraphics.context.miterLimit = 3; else openfl._internal.renderer.canvas.CanvasGraphics.context.miterLimit = miterLimit;
				if(alpha == 1 || alpha == null) if(color == null) openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "#000000"; else openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(color & 16777215,6); else {
					var r = (color & 16711680) >>> 16;
					var g = (color & 65280) >>> 8;
					var b = color & 255;
					if(color == null) openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "#000000"; else openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
				}
				openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = true;
			}
			break;
		case 14:
			var focalPointRatio = command[9];
			var interpolationMethod = command[8];
			var spreadMethod = command[7];
			var matrix = command[6];
			var ratios = command[5];
			var alphas = command[4];
			var colors = command[3];
			var type = command[2];
			if(stroke && openfl._internal.renderer.canvas.CanvasGraphics.hasStroke) openfl._internal.renderer.canvas.CanvasGraphics.closePath();
			openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = openfl._internal.renderer.canvas.CanvasGraphics.createGradientPattern(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
			openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = true;
			break;
		case 13:
			var smooth = command[5];
			var repeat = command[4];
			var matrix1 = command[3];
			var bitmap = command[2];
			if(stroke && openfl._internal.renderer.canvas.CanvasGraphics.hasStroke) openfl._internal.renderer.canvas.CanvasGraphics.closePath();
			openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = openfl._internal.renderer.canvas.CanvasGraphics.createBitmapFill(bitmap,repeat);
			openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = true;
			break;
		case 0:
			var smooth1 = command[5];
			var repeat1 = command[4];
			var matrix2 = command[3];
			var bitmap1 = command[2];
			openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = openfl._internal.renderer.canvas.CanvasGraphics.createBitmapFill(bitmap1,true);
			openfl._internal.renderer.canvas.CanvasGraphics.hasFill = true;
			if(matrix2 != null) {
				openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = matrix2;
				openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = new openfl.geom.Matrix(matrix2.a,matrix2.b,matrix2.c,matrix2.d,matrix2.tx,matrix2.ty);
				openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = null;
				openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var alpha1 = command[3];
			var rgb = command[2];
			if(alpha1 < 0.005) openfl._internal.renderer.canvas.CanvasGraphics.hasFill = false; else {
				if(alpha1 == 1) openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = "#" + StringTools.hex(rgb,6); else {
					var r1 = (rgb & 16711680) >>> 16;
					var g1 = (rgb & 65280) >>> 8;
					var b1 = rgb & 255;
					openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = "rgba(" + r1 + ", " + g1 + ", " + b1 + ", " + alpha1 + ")";
				}
				openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill = null;
				openfl._internal.renderer.canvas.CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			var focalPointRatio1 = command[9];
			var interpolationMethod1 = command[8];
			var spreadMethod1 = command[7];
			var matrix3 = command[6];
			var ratios1 = command[5];
			var alphas1 = command[4];
			var colors1 = command[3];
			var type1 = command[2];
			openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = openfl._internal.renderer.canvas.CanvasGraphics.createGradientPattern(type1,colors1,alphas1,ratios1,matrix3,spreadMethod1,interpolationMethod1,focalPointRatio1);
			openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill = null;
			openfl._internal.renderer.canvas.CanvasGraphics.hasFill = true;
			break;
		case 7:
			var height2 = command[5];
			var width2 = command[4];
			var y7 = command[3];
			var x7 = command[2];
			var optimizationUsed = false;
			if(openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill != null) {
				var st = 0;
				var sr = 0;
				var sb = 0;
				var sl = 0;
				var canOptimizeMatrix = true;
				if(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix != null) {
					if(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.b != 0 || openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.c != 0) canOptimizeMatrix = false; else {
						var stl = openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.transformPoint(new openfl.geom.Point(x7,y7));
						var sbr = openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.transformPoint(new openfl.geom.Point(x7 + width2,y7 + height2));
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = y7;
					sl = x7;
					sb = y7 + height2;
					sr = x7 + width2;
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill.width && sb <= openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					openfl._internal.renderer.canvas.CanvasGraphics.context.drawImage(openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill.__image.get_src(),sl,st,sr - sl,sb - st,x7 - offsetX,y7 - offsetY,width2,height2);
				}
			}
			if(!optimizationUsed) openfl._internal.renderer.canvas.CanvasGraphics.context.rect(x7 - offsetX,y7 - offsetY,width2,height2);
			break;
		default:
		}
	}
	if(stroke && openfl._internal.renderer.canvas.CanvasGraphics.hasStroke) {
		if(openfl._internal.renderer.canvas.CanvasGraphics.hasFill && closeGap) openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
		openfl._internal.renderer.canvas.CanvasGraphics.context.stroke();
	}
	if(!stroke) {
		if(openfl._internal.renderer.canvas.CanvasGraphics.hasFill || openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill != null) {
			openfl._internal.renderer.canvas.CanvasGraphics.context.translate(-openfl._internal.renderer.canvas.CanvasGraphics.bounds.x,-openfl._internal.renderer.canvas.CanvasGraphics.bounds.y);
			if(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix != null) {
				openfl._internal.renderer.canvas.CanvasGraphics.context.transform(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.a,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.b,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.c,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.d,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.tx,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.ty);
				openfl._internal.renderer.canvas.CanvasGraphics.context.fill();
				openfl._internal.renderer.canvas.CanvasGraphics.context.transform(openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.a,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.b,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.c,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.d,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.tx,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.ty);
			} else openfl._internal.renderer.canvas.CanvasGraphics.context.fill();
			openfl._internal.renderer.canvas.CanvasGraphics.context.translate(openfl._internal.renderer.canvas.CanvasGraphics.bounds.x,openfl._internal.renderer.canvas.CanvasGraphics.bounds.y);
			openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
		}
	}
};
openfl._internal.renderer.canvas.CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	switch(type[1]) {
	case 0:
		if(matrix == null) matrix = new openfl.geom.Matrix();
		var point = matrix.transformPoint(new openfl.geom.Point(1638.4,0));
		gradientFill = openfl._internal.renderer.canvas.CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,(point.x - matrix.tx) / 2);
		break;
	case 1:
		var matrix1;
		if(matrix != null) matrix1 = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty); else matrix1 = new openfl.geom.Matrix();
		var point1 = matrix1.transformPoint(new openfl.geom.Point(-819.2,0));
		var point2 = matrix1.transformPoint(new openfl.geom.Point(819.2,0));
		gradientFill = openfl._internal.renderer.canvas.CanvasGraphics.context.createLinearGradient(point1.x,point1.y,point2.x,point2.y);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = (rgb & 16711680) >>> 16;
		var g = (rgb & 65280) >>> 8;
		var b = rgb & 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	return gradientFill;
};
openfl._internal.renderer.canvas.CanvasGraphics.render = function(graphics,renderSession) {
	if(graphics.__dirty) {
		openfl._internal.renderer.canvas.CanvasGraphics.graphics = graphics;
		openfl._internal.renderer.canvas.CanvasGraphics.bounds = graphics.__bounds;
		if(!graphics.__visible || graphics.__commands.length == 0 || openfl._internal.renderer.canvas.CanvasGraphics.bounds == null || openfl._internal.renderer.canvas.CanvasGraphics.bounds.width == 0 || openfl._internal.renderer.canvas.CanvasGraphics.bounds.height == 0) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl._internal.renderer.canvas.CanvasGraphics.context = graphics.__context;
			graphics.__canvas.width = Math.ceil(openfl._internal.renderer.canvas.CanvasGraphics.bounds.width);
			graphics.__canvas.height = Math.ceil(openfl._internal.renderer.canvas.CanvasGraphics.bounds.height);
			var offsetX = openfl._internal.renderer.canvas.CanvasGraphics.bounds.x;
			var offsetY = openfl._internal.renderer.canvas.CanvasGraphics.bounds.y;
			openfl._internal.renderer.canvas.CanvasGraphics.fillCommands = new Array();
			openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands = new Array();
			openfl._internal.renderer.canvas.CanvasGraphics.hasFill = false;
			openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = false;
			openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill = null;
			openfl._internal.renderer.canvas.CanvasGraphics.bitmapRepeat = false;
			var _g = 0;
			var _g1 = graphics.__commands;
			try {
				while(_g < _g1.length) {
					var command = _g1[_g];
					++_g;
					switch(command[1]) {
					case 3:case 4:case 15:case 16:
						openfl._internal.renderer.canvas.CanvasGraphics.fillCommands.push(command);
						openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands.push(command);
						break;
					case 11:
						openfl._internal.renderer.canvas.CanvasGraphics.endFill();
						openfl._internal.renderer.canvas.CanvasGraphics.endStroke();
						openfl._internal.renderer.canvas.CanvasGraphics.hasFill = false;
						openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill = null;
						break;
					case 12:case 14:case 13:
						openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands.push(command);
						break;
					case 0:case 1:case 2:
						openfl._internal.renderer.canvas.CanvasGraphics.endFill();
						openfl._internal.renderer.canvas.CanvasGraphics.endStroke();
						openfl._internal.renderer.canvas.CanvasGraphics.fillCommands.push(command);
						openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands.push(command);
						break;
					case 5:case 6:case 7:case 8:
						openfl._internal.renderer.canvas.CanvasGraphics.fillCommands.push(command);
						openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands.push(command);
						break;
					case 10:
						var culling = command[5];
						var uvtData = command[4];
						var indices = command[3];
						var vertices = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.endFill();
						openfl._internal.renderer.canvas.CanvasGraphics.endStroke();
						var v = vertices;
						var ind = indices;
						var uvt = uvtData;
						var pattern = null;
						var colorFill = openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill == null;
						if(colorFill && uvt != null) throw "__break__";
						if(!colorFill) {
							if(uvtData == null) {
								var this1;
								this1 = new openfl.VectorData();
								var this2;
								this2 = new Array(0);
								this1.data = this2;
								this1.length = 0;
								this1.fixed = false;
								uvtData = this1;
								var _g3 = 0;
								var _g2 = v.length / 2 | 0;
								while(_g3 < _g2) {
									var i = _g3++;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data;
											var this3;
											this3 = new Array(uvtData.data.length + 10);
											data = this3;
											haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data,0,uvtData.data.length);
											uvtData.data = data;
										}
										uvtData.data[uvtData.length - 1] = v.data[i * 2] / openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill.width;
									}
									uvtData.length;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data1;
											var this4;
											this4 = new Array(uvtData.data.length + 10);
											data1 = this4;
											haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data1,0,uvtData.data.length);
											uvtData.data = data1;
										}
										uvtData.data[uvtData.length - 1] = v.data[i * 2 + 1] / openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill.height;
									}
									uvtData.length;
								}
							}
							var skipT = uvtData.length != v.length;
							var normalizedUVT = openfl._internal.renderer.canvas.CanvasGraphics.normalizeUVT(uvtData,skipT);
							var maxUVT = normalizedUVT.max;
							uvt = normalizedUVT.uvt;
							if(maxUVT > 1) pattern = openfl._internal.renderer.canvas.CanvasGraphics.createTempPatternCanvas(openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill,openfl._internal.renderer.canvas.CanvasGraphics.bitmapRepeat,openfl._internal.renderer.canvas.CanvasGraphics.bounds.width | 0,openfl._internal.renderer.canvas.CanvasGraphics.bounds.height | 0); else pattern = openfl._internal.renderer.canvas.CanvasGraphics.createTempPatternCanvas(openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill,openfl._internal.renderer.canvas.CanvasGraphics.bitmapRepeat,openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill.width,openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill.height);
						}
						var i1 = 0;
						var l = ind.length;
						var a;
						var b;
						var c;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x1;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i1 < l) {
							a = i1;
							b = i1 + 1;
							c = i1 + 2;
							iax = ind.data[a] * 2;
							iay = ind.data[a] * 2 + 1;
							ibx = ind.data[b] * 2;
							iby = ind.data[b] * 2 + 1;
							icx = ind.data[c] * 2;
							icy = ind.data[c] * 2 + 1;
							x1 = v.data[iax];
							y1 = v.data[iay];
							x2 = v.data[ibx];
							y2 = v.data[iby];
							x3 = v.data[icx];
							y3 = v.data[icy];
							switch(culling[1]) {
							case 2:
								if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
									i1 += 3;
									continue;
								}
								break;
							case 0:
								if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
									i1 += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
								openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x1,y1);
								openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x2,y2);
								openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x3,y3);
								openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
								openfl._internal.renderer.canvas.CanvasGraphics.context.fill();
								i1 += 3;
								continue;
							}
							openfl._internal.renderer.canvas.CanvasGraphics.context.save();
							openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
							openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x1,y1);
							openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x2,y2);
							openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x3,y3);
							openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
							openfl._internal.renderer.canvas.CanvasGraphics.context.clip();
							uvx1 = uvt.data[iax] * pattern.width;
							uvx2 = uvt.data[ibx] * pattern.width;
							uvx3 = uvt.data[icx] * pattern.width;
							uvy1 = uvt.data[iay] * pattern.height;
							uvy2 = uvt.data[iby] * pattern.height;
							uvy3 = uvt.data[icy] * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i1 += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							openfl._internal.renderer.canvas.CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl._internal.renderer.canvas.CanvasGraphics.context.drawImage(pattern,0,0);
							openfl._internal.renderer.canvas.CanvasGraphics.context.restore();
							i1 += 3;
						}
						break;
					case 9:
						var count = command[6];
						var flags = command[5];
						var smooth = command[4];
						var tileData = command[3];
						var sheet = command[2];
						var useScale = (flags & 1) > 0;
						var useRotation = (flags & 2) > 0;
						var useTransform = (flags & 16) > 0;
						var useRGB = (flags & 4) > 0;
						var useAlpha = (flags & 8) > 0;
						var useRect = (flags & 32) > 0;
						var useOrigin = (flags & 64) > 0;
						var useBlendAdd = (flags & 65536) > 0;
						if(useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
						if(useScale) {
							scaleIndex = numValues;
							numValues++;
						}
						if(useRotation) {
							rotationIndex = numValues;
							numValues++;
						}
						if(useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if(useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if(useAlpha) {
							alphaIndex = numValues;
							numValues++;
						}
						var totalCount = tileData.length;
						if(count >= 0 && totalCount > count) totalCount = count;
						var itemCount = totalCount / numValues | 0;
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface;
						sheet.__bitmap.__sync();
						surface = sheet.__bitmap.__image.get_src();
						if(useBlendAdd) openfl._internal.renderer.canvas.CanvasGraphics.context.globalCompositeOperation = "lighter";
						while(index < totalCount) {
							var tileID;
							if(!useRect) tileID = tileData[index + 2] | 0; else tileID = -1;
							if(!useRect && tileID != previousTileID) {
								rect = sheet.__tileRects[tileID];
								center = sheet.__centerPoints[tileID];
								previousTileID = tileID;
							} else if(useRect) {
								rect = sheet.__rectTile;
								rect.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
								center = sheet.__point;
								if(useOrigin) {
									center.x = tileData[index + 6];
									center.y = tileData[index + 7];
								} else {
									center.x = 0;
									center.y = 0;
								}
							}
							if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								openfl._internal.renderer.canvas.CanvasGraphics.context.save();
								openfl._internal.renderer.canvas.CanvasGraphics.context.translate(tileData[index],tileData[index + 1]);
								if(useRotation) openfl._internal.renderer.canvas.CanvasGraphics.context.rotate(tileData[index + rotationIndex]);
								var scale = 1.0;
								if(useScale) scale = tileData[index + scaleIndex];
								if(useTransform) openfl._internal.renderer.canvas.CanvasGraphics.context.transform(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
								if(useAlpha) openfl._internal.renderer.canvas.CanvasGraphics.context.globalAlpha = tileData[index + alphaIndex];
								openfl._internal.renderer.canvas.CanvasGraphics.context.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
								openfl._internal.renderer.canvas.CanvasGraphics.context.restore();
							}
							index += numValues;
						}
						if(useBlendAdd) openfl._internal.renderer.canvas.CanvasGraphics.context.globalCompositeOperation = "source-over";
						break;
					default:
						openfl.Lib.notImplemented("CanvasGraphics");
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			if(openfl._internal.renderer.canvas.CanvasGraphics.fillCommands.length > 0) openfl._internal.renderer.canvas.CanvasGraphics.endFill();
			if(openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands.length > 0) openfl._internal.renderer.canvas.CanvasGraphics.endStroke();
			graphics.__bitmap = openfl.display.BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl._internal.renderer.canvas.CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.length != 0) {
		var context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cy1 = command[4];
				var cx2 = command[3];
				var cx1 = command[2];
				context.bezierCurveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
				positionX = x;
				positionY = y;
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy = command[3];
				var cx = command[2];
				context.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
				positionX = x1;
				positionY = y1;
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				context.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2,true);
				break;
			case 6:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				x3 -= offsetX;
				y3 -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x3 + width;
				var ye = y3 + height;
				var xm = x3 + width / 2;
				var ym = y3 + height / 2;
				context.moveTo(x3,ym);
				context.bezierCurveTo(x3,ym - oy,xm - ox,y3,xm,y3);
				context.bezierCurveTo(xm + ox,y3,xe,ym - oy,xe,ym);
				context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				context.bezierCurveTo(xm - ox,ye,x3,ym + oy,x3,ym);
				break;
			case 7:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				context.rect(x4 - offsetX,y4 - offsetY,width1,height1);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				openfl._internal.renderer.canvas.CanvasGraphics.drawRoundRect(x5 - offsetX,y5 - offsetY,width2,height2,rx,ry);
				break;
			case 15:
				var y6 = command[3];
				var x6 = command[2];
				context.lineTo(x6 - offsetX,y6 - offsetY);
				positionX = x6;
				positionY = y6;
				break;
			case 16:
				var y7 = command[3];
				var x7 = command[2];
				context.moveTo(x7 - offsetX,y7 - offsetY);
				positionX = x7;
				positionY = y7;
				break;
			default:
			}
		}
	}
};
openfl._internal.renderer.canvas.CanvasRenderer = function(width,height,context) {
	openfl._internal.renderer.AbstractRenderer.call(this,width,height);
	this.context = context;
	this.renderSession = new openfl._internal.renderer.RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl._internal.renderer.canvas.MaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl._internal.renderer.canvas.CanvasRenderer;
openfl._internal.renderer.canvas.CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl._internal.renderer.canvas.CanvasRenderer.__super__ = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.canvas.CanvasRenderer.prototype = $extend(openfl._internal.renderer.AbstractRenderer.prototype,{
	render: function(stage) {
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!stage.__transparent && stage.__clearBeforeRender) {
			this.context.fillStyle = stage.__colorString;
			this.context.fillRect(0,0,stage.stageWidth,stage.stageHeight);
		} else if(stage.__transparent && stage.__clearBeforeRender) this.context.clearRect(0,0,stage.stageWidth,stage.stageHeight);
		stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl._internal.renderer.canvas.CanvasRenderer
});
openfl._internal.renderer.canvas.CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl._internal.renderer.canvas.CanvasShape;
openfl._internal.renderer.canvas.CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl._internal.renderer.canvas.CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl._internal.renderer.canvas.CanvasGraphics.render(graphics,renderSession);
		if(graphics.__canvas != null) {
			if(shape.__mask != null) renderSession.maskManager.pushMask(shape.__mask);
			var context = renderSession.context;
			var scrollRect = shape.get_scrollRect();
			context.globalAlpha = shape.__worldAlpha;
			var transform = shape.__worldTransform;
			if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			if(scrollRect == null) context.drawImage(graphics.__canvas,graphics.__bounds.x,graphics.__bounds.y); else context.drawImage(graphics.__canvas,scrollRect.x - graphics.__bounds.x,scrollRect.y - graphics.__bounds.y,scrollRect.width,scrollRect.height,graphics.__bounds.x + scrollRect.x,graphics.__bounds.y + scrollRect.y,scrollRect.width,scrollRect.height);
			if(shape.__mask != null) renderSession.maskManager.popMask();
		}
	}
};
openfl._internal.renderer.canvas.CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl._internal.renderer.canvas.CanvasTextField;
openfl._internal.renderer.canvas.CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl._internal.renderer.canvas.CanvasTextField.context = null;
openfl._internal.renderer.canvas.CanvasTextField.render = function(textField,renderSession) {
	if(!textField.__renderable || textField.__worldAlpha <= 0) return;
	openfl._internal.renderer.canvas.CanvasTextField.update(textField);
	if(textField.__canvas != null) {
		var context = renderSession.context;
		context.globalAlpha = textField.__worldAlpha;
		var transform = textField.__worldTransform;
		var scrollRect = textField.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(scrollRect == null) context.drawImage(textField.__canvas,0,0); else context.drawImage(textField.__canvas,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
	}
};
openfl._internal.renderer.canvas.CanvasTextField.renderText = function(textField,text,format,offsetX) {
	openfl._internal.renderer.canvas.CanvasTextField.context.font = textField.__getFont(format);
	openfl._internal.renderer.canvas.CanvasTextField.context.textBaseline = "top";
	openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(format.color,6);
	var lines = text.split("\n");
	var yOffset = 0;
	var _g = 0;
	while(_g < lines.length) {
		var line = lines[_g];
		++_g;
		var _g1 = format.align;
		switch(_g1[1]) {
		case 3:
			openfl._internal.renderer.canvas.CanvasTextField.context.textAlign = "center";
			openfl._internal.renderer.canvas.CanvasTextField.context.fillText(line,textField.__width / 2,2 + yOffset,textField.__width - 4);
			break;
		case 1:
			openfl._internal.renderer.canvas.CanvasTextField.context.textAlign = "end";
			openfl._internal.renderer.canvas.CanvasTextField.context.fillText(line,textField.__width - 2,2 + yOffset,textField.__width - 4);
			break;
		default:
			openfl._internal.renderer.canvas.CanvasTextField.context.textAlign = "start";
			openfl._internal.renderer.canvas.CanvasTextField.context.fillText(line,2 + offsetX,2 + yOffset,textField.__width - 4);
		}
		yOffset += textField.get_textHeight();
	}
};
openfl._internal.renderer.canvas.CanvasTextField.update = function(textField) {
	if(textField.__dirty) {
		if((textField.__text == null || textField.__text == "") && !textField.background && !textField.border || (textField.get_width() <= 0 || textField.get_height() <= 0) && textField.autoSize != openfl.text.TextFieldAutoSize.LEFT) {
			textField.__canvas = null;
			textField.__context = null;
			textField.__dirty = false;
		} else {
			if(textField.__canvas == null) {
				textField.__canvas = window.document.createElement("canvas");
				textField.__context = textField.__canvas.getContext("2d");
			}
			openfl._internal.renderer.canvas.CanvasTextField.context = textField.__context;
			if(textField.__text != null && textField.__text != "") {
				var text = textField.get_text();
				if(textField.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						mask += "*";
					}
					text = mask;
				}
				var measurements = textField.__measureText();
				var textWidth = 0.0;
				var _g1 = 0;
				while(_g1 < measurements.length) {
					var measurement = measurements[_g1];
					++_g1;
					textWidth += measurement;
				}
				if(textField.autoSize == openfl.text.TextFieldAutoSize.LEFT) textField.__width = textWidth + 4;
				textField.__canvas.width = Math.ceil(textField.__width);
				textField.__canvas.height = Math.ceil(textField.__height);
				if(textField.border || textField.background) {
					textField.__context.rect(0.5,0.5,textField.__width - 1,textField.__height - 1);
					if(textField.background) {
						openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.backgroundColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.fill();
					}
					if(textField.border) {
						openfl._internal.renderer.canvas.CanvasTextField.context.lineWidth = 1;
						openfl._internal.renderer.canvas.CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.borderColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.stroke();
					}
				}
				if(textField.__hasFocus && textField.__selectionStart == textField.__cursorPosition && textField.__showCursor) {
					var cursorOffset = textField.__getTextWidth(text.substring(0,textField.__cursorPosition));
					openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.__textFormat.color,6);
					openfl._internal.renderer.canvas.CanvasTextField.context.fillRect(cursorOffset,5,1,textField.__textFormat.size - 5);
				} else if(textField.__hasFocus && Math.abs(textField.__selectionStart - textField.__cursorPosition) > 0 && !textField.__isKeyDown) {
					var lowPos = Std["int"](Math.min(textField.__selectionStart,textField.__cursorPosition));
					var highPos = Std["int"](Math.max(textField.__selectionStart,textField.__cursorPosition));
					var xPos = textField.__getTextWidth(text.substring(0,lowPos));
					var widthPos = textField.__getTextWidth(text.substring(lowPos,highPos));
					openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.__textFormat.color,6);
					openfl._internal.renderer.canvas.CanvasTextField.context.fillRect(xPos,5,widthPos,textField.__textFormat.size - 5);
				}
				if(textField.__ranges == null) openfl._internal.renderer.canvas.CanvasTextField.renderText(textField,text,textField.__textFormat,0); else {
					var currentIndex = 0;
					var range;
					var offsetX = 0.0;
					var _g11 = 0;
					var _g2 = textField.__ranges.length;
					while(_g11 < _g2) {
						var i1 = _g11++;
						range = textField.__ranges[i1];
						openfl._internal.renderer.canvas.CanvasTextField.renderText(textField,text.substring(range.start,range.end),range.format,offsetX);
						offsetX += measurements[i1];
					}
				}
			} else {
				if(textField.autoSize == openfl.text.TextFieldAutoSize.LEFT) textField.__width = 4;
				textField.__canvas.width = Math.ceil(textField.__width);
				textField.__canvas.height = Math.ceil(textField.__height);
				if(textField.border || textField.background) {
					if(textField.border) openfl._internal.renderer.canvas.CanvasTextField.context.rect(0.5,0.5,textField.__width - 1,textField.__height - 1); else textField.__context.rect(0,0,textField.__width,textField.__height);
					if(textField.background) {
						openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.backgroundColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.fill();
					}
					if(textField.border) {
						openfl._internal.renderer.canvas.CanvasTextField.context.lineWidth = 1;
						openfl._internal.renderer.canvas.CanvasTextField.context.lineCap = "square";
						openfl._internal.renderer.canvas.CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.borderColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.stroke();
					}
				}
			}
			textField.__dirty = false;
			return true;
		}
	}
	return false;
};
openfl._internal.renderer.canvas.MaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.canvas.MaskManager"] = openfl._internal.renderer.canvas.MaskManager;
openfl._internal.renderer.canvas.MaskManager.__name__ = ["openfl","_internal","renderer","canvas","MaskManager"];
openfl._internal.renderer.canvas.MaskManager.prototype = {
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getTransform();
		context.setTransform(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderMask(this.renderSession);
		context.clip();
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl._internal.renderer.canvas.MaskManager
};
openfl._internal.renderer.dom = {};
openfl._internal.renderer.dom.DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl._internal.renderer.dom.DOMBitmap;
openfl._internal.renderer.dom.DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl._internal.renderer.dom.DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.bitmapData.__image.buffer.__srcImage != null) openfl._internal.renderer.dom.DOMBitmap.renderImage(bitmap,renderSession); else openfl._internal.renderer.dom.DOMBitmap.renderCanvas(bitmap,renderSession);
	} else {
		if(bitmap.__image != null) {
			renderSession.element.removeChild(bitmap.__image);
			bitmap.__image = null;
			bitmap.__style = null;
		}
		if(bitmap.__canvas != null) {
			renderSession.element.removeChild(bitmap.__canvas);
			bitmap.__canvas = null;
			bitmap.__style = null;
		}
	}
};
openfl._internal.renderer.dom.DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		if(!bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.webkitImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl._internal.renderer.dom.DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	bitmap.bitmapData.__sync();
	bitmap.__canvas.width = bitmap.bitmapData.width;
	bitmap.__canvas.height = bitmap.bitmapData.height;
	bitmap.__context.globalAlpha = bitmap.__worldAlpha;
	bitmap.__context.drawImage(bitmap.bitmapData.__image.buffer.__srcCanvas,0,0);
	openfl._internal.renderer.dom.DOMRenderer.applyStyle(bitmap,renderSession,true,false,true);
};
openfl._internal.renderer.dom.DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.__image.buffer.__srcImage.src;
		openfl._internal.renderer.dom.DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl._internal.renderer.dom.DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
openfl._internal.renderer.dom.DOMRenderer = function(width,height,element) {
	openfl._internal.renderer.AbstractRenderer.call(this,width,height);
	this.element = element;
	this.renderSession = new openfl._internal.renderer.RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('')
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	if(prefix.lowercase == "webkit") this.renderSession.transformProperty = "-webkit-transform"; else this.renderSession.transformProperty = "transform";
	if(prefix.lowercase == "webkit") this.renderSession.transformOriginProperty = "-webkit-transform-origin"; else this.renderSession.transformOriginProperty = "transform-origin";
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl._internal.renderer.dom.DOMRenderer;
openfl._internal.renderer.dom.DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl._internal.renderer.dom.DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__worldTransformChanged) style.setProperty(renderSession.transformProperty,displayObject.__worldTransform.to3DString(renderSession.roundPixels),null);
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null); else style.removeProperty("opacity");
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) style.removeProperty("clip"); else {
			var clip = displayObject.__worldClip.transform(displayObject.__worldTransform.clone().invert());
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl._internal.renderer.dom.DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldZ = -1;
};
openfl._internal.renderer.dom.DOMRenderer.__super__ = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.dom.DOMRenderer.prototype = $extend(openfl._internal.renderer.AbstractRenderer.prototype,{
	render: function(stage) {
		this.element.style.background = stage.__colorString;
		this.renderSession.z = 1;
		stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl._internal.renderer.dom.DOMRenderer
});
openfl._internal.renderer.dom.DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl._internal.renderer.dom.DOMShape;
openfl._internal.renderer.dom.DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl._internal.renderer.dom.DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			openfl._internal.renderer.canvas.CanvasGraphics.render(graphics,renderSession);
			if(graphics.__canvas != null) {
				if(shape.__canvas == null) {
					shape.__canvas = window.document.createElement("canvas");
					shape.__context = shape.__canvas.getContext("2d");
					openfl._internal.renderer.dom.DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
				shape.__canvas.width = graphics.__canvas.width;
				shape.__canvas.height = graphics.__canvas.height;
				shape.__context.globalAlpha = shape.__worldAlpha;
				shape.__context.drawImage(graphics.__canvas,0,0);
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			if(shape.__worldTransformChanged || graphics.__transformDirty) {
				graphics.__transformDirty = false;
				var transform = new openfl.geom.Matrix();
				transform.translate(graphics.__bounds.x,graphics.__bounds.y);
				transform = transform.mult(shape.__worldTransform);
				shape.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)":"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
			}
			openfl._internal.renderer.dom.DOMRenderer.applyStyle(shape,renderSession,false,false,true);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
openfl._internal.renderer.dom.DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl._internal.renderer.dom.DOMTextField;
openfl._internal.renderer.dom.DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl._internal.renderer.dom.DOMTextField.render = function(textField,renderSession) {
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textField.__text != "" || textField.background || textField.border) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl._internal.renderer.dom.DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("cursor","inherit",null);
				}
				var style = textField.__style;
				textField.__div.innerHTML = textField.__text;
				if(textField.background) style.setProperty("background-color","#" + StringTools.hex(textField.backgroundColor,6),null); else style.removeProperty("background-color");
				if(textField.border) style.setProperty("border","solid 1px #" + StringTools.hex(textField.borderColor,6),null); else style.removeProperty("border");
				style.setProperty("font",textField.__getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textField.autoSize != openfl.text.TextFieldAutoSize.NONE) style.setProperty("width","auto",null); else style.setProperty("width",textField.__width + "px",null);
				style.setProperty("height",textField.__height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g[1]) {
				case 3:
					style.setProperty("text-align","center",null);
					break;
				case 1:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) openfl._internal.renderer.dom.DOMRenderer.applyStyle(textField,renderSession,true,true,false);
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
openfl._internal.renderer.opengl = {};
openfl._internal.renderer.opengl.GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl._internal.renderer.opengl.GLBitmap;
openfl._internal.renderer.opengl.GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl._internal.renderer.opengl.GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var i;
	var j;
	renderSession.spriteBatch.render(bitmap);
};
openfl._internal.renderer.opengl.GLRenderer = function(width,height,gl,transparent,antialias,preserveDrawingBuffer) {
	if(preserveDrawingBuffer == null) preserveDrawingBuffer = false;
	if(antialias == null) antialias = false;
	if(transparent == null) transparent = false;
	if(height == null) height = 600;
	if(width == null) width = 800;
	openfl._internal.renderer.AbstractRenderer.call(this,width,height);
	this.transparent = transparent;
	this.preserveDrawingBuffer = preserveDrawingBuffer;
	this.width = width;
	this.height = height;
	this.options = { alpha : transparent, antialias : antialias, premultipliedAlpha : transparent, stencil : true, preserveDrawingBuffer : preserveDrawingBuffer};
	this._glContextId = openfl._internal.renderer.opengl.GLRenderer.glContextId++;
	this.gl = gl;
	openfl._internal.renderer.opengl.GLRenderer.glContexts[this._glContextId] = gl;
	if(openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL == null) {
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL = new haxe.ds.EnumValueMap();
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.NORMAL,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.ADD,[gl.SRC_ALPHA,gl.DST_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.MULTIPLY,[gl.DST_COLOR,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.SCREEN,[gl.SRC_ALPHA,gl.ONE]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.ALPHA,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.DARKEN,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.DIFFERENCE,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.ERASE,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.HARDLIGHT,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.INVERT,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.LAYER,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.LIGHTEN,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.OVERLAY,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.SUBTRACT,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
	}
	this.projection = new openfl.geom.Point();
	this.projection.x = this.width / 2;
	this.projection.y = -this.height / 2;
	this.offset = new openfl.geom.Point(0,0);
	this.resize(this.width,this.height);
	this.contextLost = false;
	this.shaderManager = new openfl._internal.renderer.opengl.utils.ShaderManager(gl);
	this.spriteBatch = new openfl._internal.renderer.opengl.utils.SpriteBatch(gl);
	this.maskManager = new openfl._internal.renderer.opengl.utils.MaskManager(gl);
	this.filterManager = new openfl._internal.renderer.opengl.utils.FilterManager(gl,this.transparent);
	this.stencilManager = new openfl._internal.renderer.opengl.utils.StencilManager(gl);
	this.blendModeManager = new openfl._internal.renderer.opengl.utils.BlendModeManager(gl);
	this.renderSession = new openfl._internal.renderer.RenderSession();
	this.renderSession.gl = this.gl;
	this.renderSession.drawCount = 0;
	this.renderSession.shaderManager = this.shaderManager;
	this.renderSession.maskManager = this.maskManager;
	this.renderSession.filterManager = this.filterManager;
	this.renderSession.blendModeManager = this.blendModeManager;
	this.renderSession.spriteBatch = this.spriteBatch;
	this.renderSession.stencilManager = this.stencilManager;
	this.renderSession.renderer = this;
	gl.useProgram(this.shaderManager.defaultShader.program);
	gl.disable(gl.DEPTH_TEST);
	gl.disable(gl.CULL_FACE);
	gl.enable(gl.BLEND);
	gl.colorMask(true,true,true,this.transparent);
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl._internal.renderer.opengl.GLRenderer;
openfl._internal.renderer.opengl.GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl._internal.renderer.opengl.GLRenderer.__super__ = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.opengl.GLRenderer.prototype = $extend(openfl._internal.renderer.AbstractRenderer.prototype,{
	destroy: function() {
		openfl._internal.renderer.opengl.GLRenderer.glContexts[this._glContextId] = null;
		this.projection = null;
		this.offset = null;
		this.shaderManager.destroy();
		this.spriteBatch.destroy();
		this.maskManager.destroy();
		this.filterManager.destroy();
		this.shaderManager = null;
		this.spriteBatch = null;
		this.maskManager = null;
		this.filterManager = null;
		this.gl = null;
		this.renderSession = null;
	}
	,handleContextLost: function(event) {
		event.preventDefault();
		this.contextLost = true;
	}
	,handleContextRestored: function() {
		var gl = this.gl;
		openfl._internal.renderer.opengl.GLRenderer.glContextId++;
		this.shaderManager.setContext(gl);
		this.spriteBatch.setContext(gl);
		this.maskManager.setContext(gl);
		this.filterManager.setContext(gl);
		this.renderSession.gl = gl;
		gl.disable(gl.DEPTH_TEST);
		gl.disable(gl.CULL_FACE);
		gl.enable(gl.BLEND);
		gl.colorMask(true,true,true,this.transparent);
		gl.viewport(0,0,this.width,this.height);
		this.contextLost = false;
	}
	,render: function(stage) {
		if(this.contextLost) return;
		var gl = this.gl;
		gl.viewport(0,0,this.width,this.height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,null);
		if(this.transparent) gl.clearColor(0,0,0,0); else gl.clearColor(stage.__colorSplit[0] | 0,stage.__colorSplit[1] | 0,stage.__colorSplit[2] | 0,1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		this.renderDisplayObject(stage,this.projection);
	}
	,renderDisplayObject: function(displayObject,projection,buffer) {
		this.renderSession.blendModeManager.setBlendMode(openfl.display.BlendMode.NORMAL);
		this.renderSession.drawCount = 0;
		this.renderSession.currentBlendMode = null;
		this.renderSession.projection = projection;
		this.renderSession.offset = this.offset;
		this.spriteBatch.begin(this.renderSession);
		this.filterManager.begin(this.renderSession,buffer);
		displayObject.__renderGL(this.renderSession);
		this.spriteBatch.end();
	}
	,resize: function(width,height) {
		openfl._internal.renderer.AbstractRenderer.prototype.resize.call(this,width,height);
		this.gl.viewport(0,0,width,height);
		this.projection.x = width / 2;
		this.projection.y = -height / 2;
	}
	,__class__: openfl._internal.renderer.opengl.GLRenderer
});
openfl._internal.renderer.opengl.GLTextField = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLTextField"] = openfl._internal.renderer.opengl.GLTextField;
openfl._internal.renderer.opengl.GLTextField.__name__ = ["openfl","_internal","renderer","opengl","GLTextField"];
openfl._internal.renderer.opengl.GLTextField.render = function(textField,renderSession) {
	if(!textField.__renderable || textField.__worldAlpha <= 0) return;
	var gl = renderSession.gl;
	var changed = openfl._internal.renderer.canvas.CanvasTextField.update(textField);
	if(textField.__texture == null) {
		textField.__texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D,textField.__texture);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
		changed = true;
	}
	if(changed) {
		gl.bindTexture(gl.TEXTURE_2D,textField.__texture);
		gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,textField.__canvas);
		gl.bindTexture(gl.TEXTURE_2D,null);
	}
};
openfl._internal.renderer.opengl.shaders = {};
openfl._internal.renderer.opengl.shaders.AbstractShader = function(gl) {
	this._UID = openfl._internal.renderer.opengl.shaders.AbstractShader.__UID++;
	this.gl = gl;
	this.program = null;
	this.attributes = [];
};
$hxClasses["openfl._internal.renderer.opengl.shaders.AbstractShader"] = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.AbstractShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","AbstractShader"];
openfl._internal.renderer.opengl.shaders.AbstractShader.compileProgram = function(gl,vertexSrc,fragmentSrc) {
	var fragmentShader = openfl._internal.renderer.opengl.shaders.AbstractShader.CompileFragmentShader(gl,fragmentSrc);
	var vertexShader = openfl._internal.renderer.opengl.shaders.AbstractShader.CompileVertexShader(gl,vertexSrc);
	var shaderProgram = gl.createProgram();
	if(fragmentShader != null && vertexShader != null) {
		gl.attachShader(shaderProgram,vertexShader);
		gl.attachShader(shaderProgram,fragmentShader);
		gl.linkProgram(shaderProgram);
		if(gl.getProgramParameter(shaderProgram,gl.LINK_STATUS) == 0) null;
	}
	return shaderProgram;
};
openfl._internal.renderer.opengl.shaders.AbstractShader.CompileVertexShader = function(gl,shaderSrc) {
	return openfl._internal.renderer.opengl.shaders.AbstractShader._CompileShader(gl,shaderSrc,gl.VERTEX_SHADER);
};
openfl._internal.renderer.opengl.shaders.AbstractShader.CompileFragmentShader = function(gl,shaderSrc) {
	return openfl._internal.renderer.opengl.shaders.AbstractShader._CompileShader(gl,shaderSrc,gl.FRAGMENT_SHADER);
};
openfl._internal.renderer.opengl.shaders.AbstractShader._CompileShader = function(gl,shaderSrc,shaderType) {
	var src = shaderSrc.join("\n");
	var shader = gl.createShader(shaderType);
	gl.shaderSource(shader,src);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) return null;
	return shader;
};
openfl._internal.renderer.opengl.shaders.AbstractShader.prototype = {
	destroy: function() {
		if(this.program != null) this.gl.deleteProgram(this.program);
		this.uniforms = null;
		this.gl = null;
		this.attributes = null;
	}
	,init: function() {
		var gl = this.gl;
		var program = openfl._internal.renderer.opengl.shaders.AbstractShader.compileProgram(gl,this.vertexSrc,this.fragmentSrc);
		gl.useProgram(program);
		this.program = program;
	}
	,__class__: openfl._internal.renderer.opengl.shaders.AbstractShader
};
openfl._internal.renderer.opengl.shaders.ComplexPrimitiveShader = function(gl) {
	openfl._internal.renderer.opengl.shaders.AbstractShader.call(this,gl);
	this.fragmentSrc = ["precision mediump float;","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.vertexSrc = ["attribute vec2 aVertexPosition;","uniform mat3 translationMatrix;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","uniform vec3 tint;","uniform float alpha;","uniform vec3 color;","varying vec4 vColor;","void main(void) {","   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);","   v -= offsetVector.xyx;","   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);","   vColor = vec4(color * alpha * tint, alpha);","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders.ComplexPrimitiveShader"] = openfl._internal.renderer.opengl.shaders.ComplexPrimitiveShader;
openfl._internal.renderer.opengl.shaders.ComplexPrimitiveShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","ComplexPrimitiveShader"];
openfl._internal.renderer.opengl.shaders.ComplexPrimitiveShader.__super__ = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.ComplexPrimitiveShader.prototype = $extend(openfl._internal.renderer.opengl.shaders.AbstractShader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders.AbstractShader.prototype.init.call(this);
		var gl = this.gl;
		this.projectionVector = gl.getUniformLocation(this.program,"projectionVector");
		this.offsetVector = gl.getUniformLocation(this.program,"offsetVector");
		this.tintColor = gl.getUniformLocation(this.program,"tint");
		this.color = gl.getUniformLocation(this.program,"color");
		this.aVertexPosition = gl.getAttribLocation(this.program,"aVertexPosition");
		this.attributes = [this.aVertexPosition];
		this.translationMatrix = gl.getUniformLocation(this.program,"translationMatrix");
		this.alpha = gl.getUniformLocation(this.program,"alpha");
	}
	,__class__: openfl._internal.renderer.opengl.shaders.ComplexPrimitiveShader
});
openfl._internal.renderer.opengl.shaders.DefaultShader = function(gl) {
	openfl._internal.renderer.opengl.shaders.AbstractShader.call(this,gl);
	this.fragmentSrc = ["precision lowp float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor ;","}"];
	this.textureCount = 0;
	this.attributes = [];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders.DefaultShader"] = openfl._internal.renderer.opengl.shaders.DefaultShader;
openfl._internal.renderer.opengl.shaders.DefaultShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","DefaultShader"];
openfl._internal.renderer.opengl.shaders.DefaultShader.__super__ = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.DefaultShader.prototype = $extend(openfl._internal.renderer.opengl.shaders.AbstractShader.prototype,{
	init: function() {
		if(this.vertexSrc == null) this.vertexSrc = openfl._internal.renderer.opengl.shaders.DefaultShader.defaultVertexSrc;
		openfl._internal.renderer.opengl.shaders.AbstractShader.prototype.init.call(this);
		var gl = this.gl;
		this.uSampler = gl.getUniformLocation(this.program,"uSampler");
		this.projectionVector = gl.getUniformLocation(this.program,"projectionVector");
		this.offsetVector = gl.getUniformLocation(this.program,"offsetVector");
		this.dimensions = gl.getUniformLocation(this.program,"dimensions");
		this.aVertexPosition = gl.getAttribLocation(this.program,"aVertexPosition");
		this.aTextureCoord = gl.getAttribLocation(this.program,"aTextureCoord");
		this.colorAttribute = gl.getAttribLocation(this.program,"aColor");
		if(this.colorAttribute == -1) this.colorAttribute = 2;
		this.attributes = [this.aVertexPosition,this.aTextureCoord,this.colorAttribute];
		if(this.uniforms != null) {
			var $it0 = this.uniforms.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				this.uniforms.get(key).uniformLocation = gl.getUniformLocation(this.program,key);
			}
		}
		this.initUniforms();
	}
	,initSampler2D: function(uniform) {
		if(uniform.value == null || uniform.value.baseTexture == null || uniform.value.baseTexture.hasLoaded == null) return;
		var gl = this.gl;
		gl.activeTexture(Reflect.field(gl,"TEXTURE" + this.textureCount));
		gl.bindTexture(gl.TEXTURE_2D,uniform.value.baseTexture._glTextures[openfl._internal.renderer.opengl.GLRenderer.glContextId]);
		if(uniform.textureData != null) {
			var data = uniform.textureData;
			var magFilter;
			if(data.magFilter != 0) magFilter = data.magFilter; else magFilter = gl.LINEAR;
			var minFilter;
			if(data.minFilter != 0) minFilter = data.minFilter; else minFilter = gl.LINEAR;
			var wrapS;
			if(data.wrapS != 0) wrapS = data.wrapS; else wrapS = gl.CLAMP_TO_EDGE;
			var wrapT;
			if(data.wrapT != 0) wrapT = data.wrapT; else wrapT = gl.CLAMP_TO_EDGE;
			var format;
			if(data.luminance != 0) format = gl.LUMINANCE; else format = gl.RGBA;
			if(data.repeat) {
				wrapS = gl.REPEAT;
				wrapT = gl.REPEAT;
			}
			gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,data.flip);
			if(data.width != 0) {
				var width;
				if(data.width != 0) width = data.width; else width = 512;
				var height;
				if(data.height != 0) height = data.height; else height = 2;
				var border;
				if(data.border != 0) border = data.border; else border = 0;
				gl.texImage2D(gl.TEXTURE_2D,0,format,width,height,border,format,gl.UNSIGNED_BYTE,null);
			} else gl.texImage2D(gl.TEXTURE_2D,0,format,gl.RGBA,gl.UNSIGNED_BYTE,uniform.value.baseTexture.source);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,magFilter);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,minFilter);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,wrapS);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,wrapT);
		}
		gl.uniform1i(uniform.uniformLocation,this.textureCount);
		uniform._init = true;
		this.textureCount++;
	}
	,initUniforms: function() {
		this.textureCount = 1;
		var gl = this.gl;
		var uniform;
		if(this.uniforms == null) return;
		var $it0 = this.uniforms.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			uniform = this.uniforms.get(key);
			var type = uniform.type;
			if(type == "sampler2D") {
				uniform._init = false;
				if(uniform.value != null) this.initSampler2D(uniform);
			} else if(type == "mat2" || type == "mat3" || type == "mat4") {
				uniform.glMatrix = true;
				uniform.glValueLength = 1;
				if(type == "mat2") uniform.glFunc = $bind(gl,gl.uniformMatrix2fv); else if(type == "mat3") uniform.glFunc = $bind(gl,gl.uniformMatrix3fv); else if(type == "mat4") uniform.glFunc = $bind(gl,gl.uniformMatrix4fv);
			} else {
				uniform.glFunc = Reflect.field(gl,"uniform" + type);
				if(type == "2f" || type == "2i") uniform.glValueLength = 2; else if(type == "3f" || type == "3i") uniform.glValueLength = 3; else if(type == "4f" || type == "4i") uniform.glValueLength = 4; else uniform.glValueLength = 1;
			}
		}
	}
	,syncUniforms: function() {
		this.textureCount = 1;
		var uniform;
		var gl = this.gl;
		if(this.uniforms == null) return;
		var $it0 = this.uniforms.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			uniform = this.uniforms.get(key);
			if(uniform.glValueLength == 1) {
				if(uniform.glMatrix == true) uniform.glFunc.call(gl,uniform.uniformLocation,uniform.transpose,uniform.value); else uniform.glFunc.call(gl,uniform.uniformLocation,uniform.value);
			} else if(uniform.glValueLength == 2) uniform.glFunc.call(gl,uniform.uniformLocation,uniform.value.x,uniform.value.y); else if(uniform.glValueLength == 3) uniform.glFunc.call(gl,uniform.uniformLocation,uniform.value.x,uniform.value.y,uniform.value.z); else if(uniform.glValueLength == 4) uniform.glFunc.call(gl,uniform.uniformLocation,uniform.value.x,uniform.value.y,uniform.value.z,uniform.value.w); else if(uniform.type == "sampler2D") {
				if(uniform._init) {
					gl.activeTexture(Reflect.field(gl,"TEXTURE" + this.textureCount));
					var tex = uniform.value.getTexture();
					gl.bindTexture(gl.TEXTURE_2D,tex);
					gl.uniform1i(uniform.uniformLocation,this.textureCount);
					this.textureCount++;
				} else this.initSampler2D(uniform);
			}
		}
	}
	,__class__: openfl._internal.renderer.opengl.shaders.DefaultShader
});
openfl._internal.renderer.opengl.shaders.DrawTrianglesShader = function(gl) {
	openfl._internal.renderer.opengl.shaders.AbstractShader.call(this,gl);
	this.vertexSrc = ["attribute vec2 aVertexPosition;","attribute vec2 aTextureCoord;","attribute vec4 aColor;","uniform mat3 translationMatrix;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","varying vec2 vPos;","varying vec4 vColor;","void main(void) {","   vec3 v = vec3(aVertexPosition , 1.0);","   v -= offsetVector.xyx;","   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);","   vPos = aTextureCoord;","   vColor = aColor;","}"];
	this.fragmentSrc = ["precision mediump float;","uniform sampler2D sampler;","uniform vec3 color;","uniform bool useTexture;","uniform float alpha;","varying vec2 vPos;","varying vec4 vColor;","vec4 tmp;","void main(void) {","   if(useTexture) {","       tmp = texture2D(sampler, vPos);","   } else {","       tmp = vec4(color, 1.);","   }","   float a = tmp.a * vColor.a * alpha;","   gl_FragColor = vec4(vec3((tmp.rgb * vColor.rgb) * a), a);","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders.DrawTrianglesShader"] = openfl._internal.renderer.opengl.shaders.DrawTrianglesShader;
openfl._internal.renderer.opengl.shaders.DrawTrianglesShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","DrawTrianglesShader"];
openfl._internal.renderer.opengl.shaders.DrawTrianglesShader.__super__ = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.DrawTrianglesShader.prototype = $extend(openfl._internal.renderer.opengl.shaders.AbstractShader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders.AbstractShader.prototype.init.call(this);
		this.translationMatrix = this.gl.getUniformLocation(this.program,"translationMatrix");
		this.projectionVector = this.gl.getUniformLocation(this.program,"projectionVector");
		this.offsetVector = this.gl.getUniformLocation(this.program,"offsetVector");
		this.sampler = this.gl.getUniformLocation(this.program,"sampler");
		this.alpha = this.gl.getUniformLocation(this.program,"alpha");
		this.color = this.gl.getUniformLocation(this.program,"color");
		this.useTexture = this.gl.getUniformLocation(this.program,"useTexture");
		this.aVertexPosition = this.gl.getAttribLocation(this.program,"aVertexPosition");
		this.aTextureCoord = this.gl.getAttribLocation(this.program,"aTextureCoord");
		this.colorAttribute = this.gl.getAttribLocation(this.program,"aColor");
		this.attributes = [this.aVertexPosition,this.aTextureCoord,this.colorAttribute];
	}
	,__class__: openfl._internal.renderer.opengl.shaders.DrawTrianglesShader
});
openfl._internal.renderer.opengl.shaders.FastShader = function(gl) {
	openfl._internal.renderer.opengl.shaders.AbstractShader.call(this,gl);
	this.fragmentSrc = ["precision lowp float;","varying vec2 vTextureCoord;","varying float vColor;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor ;","}"];
	this.vertexSrc = ["attribute vec2 aVertexPosition;","attribute vec2 aPositionCoord;","attribute vec2 aScale;","attribute float aRotation;","attribute vec2 aTextureCoord;","attribute float aColor;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","uniform mat3 uMatrix;","varying vec2 vTextureCoord;","varying float vColor;","const vec2 center = vec2(-1.0, 1.0);","void main(void) {","   vec2 v;","   vec2 sv = aVertexPosition * aScale;","   v.x = (sv.x) * cos(aRotation) - (sv.y) * sin(aRotation);","   v.y = (sv.x) * sin(aRotation) + (sv.y) * cos(aRotation);","   v = ( uMatrix * vec3(v + aPositionCoord , 1.0) ).xy ;","   gl_Position = vec4( ( v / projectionVector) + center , 0.0, 1.0);","   vTextureCoord = aTextureCoord;","   vColor = aColor;","}"];
	this.textureCount = 0;
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders.FastShader"] = openfl._internal.renderer.opengl.shaders.FastShader;
openfl._internal.renderer.opengl.shaders.FastShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","FastShader"];
openfl._internal.renderer.opengl.shaders.FastShader.__super__ = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.FastShader.prototype = $extend(openfl._internal.renderer.opengl.shaders.AbstractShader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders.AbstractShader.prototype.init.call(this);
		var gl = this.gl;
		this.uSampler = gl.getUniformLocation(this.program,"uSampler");
		this.projectionVector = gl.getUniformLocation(this.program,"projectionVector");
		this.offsetVector = gl.getUniformLocation(this.program,"offsetVector");
		this.dimensions = gl.getUniformLocation(this.program,"dimensions");
		this.uMatrix = gl.getUniformLocation(this.program,"uMatrix");
		this.aVertexPosition = gl.getAttribLocation(this.program,"aVertexPosition");
		this.aPositionCoord = gl.getAttribLocation(this.program,"aPositionCoord");
		this.aScale = gl.getAttribLocation(this.program,"aScale");
		this.aRotation = gl.getAttribLocation(this.program,"aRotation");
		this.aTextureCoord = gl.getAttribLocation(this.program,"aTextureCoord");
		this.colorAttribute = gl.getAttribLocation(this.program,"aColor");
		if(this.colorAttribute == -1) this.colorAttribute = 2;
		this.attributes = [this.aVertexPosition,this.aPositionCoord,this.aScale,this.aRotation,this.aTextureCoord,this.colorAttribute];
	}
	,__class__: openfl._internal.renderer.opengl.shaders.FastShader
});
openfl._internal.renderer.opengl.shaders.FillShader = function(gl) {
	openfl._internal.renderer.opengl.shaders.AbstractShader.call(this,gl);
	this.vertexSrc = ["attribute vec2 aVertexPosition;","uniform mat3 translationMatrix;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","void main(void) {","   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);","   v -= offsetVector.xyx;","   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);","}"];
	this.fragmentSrc = ["precision mediump float;","uniform vec3 color;","uniform float alpha;","void main(void) {","   gl_FragColor = vec4((color * alpha), alpha);","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders.FillShader"] = openfl._internal.renderer.opengl.shaders.FillShader;
openfl._internal.renderer.opengl.shaders.FillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","FillShader"];
openfl._internal.renderer.opengl.shaders.FillShader.__super__ = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.FillShader.prototype = $extend(openfl._internal.renderer.opengl.shaders.AbstractShader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders.AbstractShader.prototype.init.call(this);
		this.translationMatrix = this.gl.getUniformLocation(this.program,"translationMatrix");
		this.projectionVector = this.gl.getUniformLocation(this.program,"projectionVector");
		this.offsetVector = this.gl.getUniformLocation(this.program,"offsetVector");
		this.color = this.gl.getUniformLocation(this.program,"color");
		this.alpha = this.gl.getUniformLocation(this.program,"alpha");
		this.aVertexPosition = this.gl.getAttribLocation(this.program,"aVertexPosition");
		this.attributes = [this.aVertexPosition];
	}
	,__class__: openfl._internal.renderer.opengl.shaders.FillShader
});
openfl._internal.renderer.opengl.shaders.PatternFillShader = function(gl) {
	openfl._internal.renderer.opengl.shaders.AbstractShader.call(this,gl);
	this.vertexSrc = ["attribute vec2 aVertexPosition;","uniform mat3 translationMatrix;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","uniform mat3 patternMatrix;","varying vec2 vPos;","void main(void) {","   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);","   v -= offsetVector.xyx;","   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);","   vPos = (patternMatrix * vec3(aVertexPosition, 1)).xy;","}"];
	this.fragmentSrc = ["precision mediump float;","uniform float alpha;","uniform vec2 patternTL;","uniform vec2 patternBR;","uniform sampler2D sampler;","varying vec2 vPos;","void main(void) {","   vec2 pos = mix(patternTL, patternBR, vPos);","   vec4 tcol = texture2D(sampler, pos);","   gl_FragColor = vec4(tcol.rgb * alpha, tcol.a * alpha);","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders.PatternFillShader"] = openfl._internal.renderer.opengl.shaders.PatternFillShader;
openfl._internal.renderer.opengl.shaders.PatternFillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","PatternFillShader"];
openfl._internal.renderer.opengl.shaders.PatternFillShader.__super__ = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.PatternFillShader.prototype = $extend(openfl._internal.renderer.opengl.shaders.AbstractShader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders.AbstractShader.prototype.init.call(this);
		this.translationMatrix = this.gl.getUniformLocation(this.program,"translationMatrix");
		this.projectionVector = this.gl.getUniformLocation(this.program,"projectionVector");
		this.offsetVector = this.gl.getUniformLocation(this.program,"offsetVector");
		this.patternMatrix = this.gl.getUniformLocation(this.program,"patternMatrix");
		this.patternTL = this.gl.getUniformLocation(this.program,"patternTL");
		this.patternBR = this.gl.getUniformLocation(this.program,"patternBR");
		this.sampler = this.gl.getUniformLocation(this.program,"sampler");
		this.alpha = this.gl.getUniformLocation(this.program,"alpha");
		this.aVertexPosition = this.gl.getAttribLocation(this.program,"aVertexPosition");
		this.attributes = [this.aVertexPosition];
	}
	,__class__: openfl._internal.renderer.opengl.shaders.PatternFillShader
});
openfl._internal.renderer.opengl.shaders.PrimitiveShader = function(gl) {
	openfl._internal.renderer.opengl.shaders.AbstractShader.call(this,gl);
	this.fragmentSrc = ["precision mediump float;","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.vertexSrc = ["attribute vec2 aVertexPosition;","attribute vec4 aColor;","uniform mat3 translationMatrix;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","uniform float alpha;","uniform vec3 tint;","varying vec4 vColor;","void main(void) {","   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);","   v -= offsetVector.xyx;","   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);","   vColor = aColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders.PrimitiveShader"] = openfl._internal.renderer.opengl.shaders.PrimitiveShader;
openfl._internal.renderer.opengl.shaders.PrimitiveShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","PrimitiveShader"];
openfl._internal.renderer.opengl.shaders.PrimitiveShader.__super__ = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.PrimitiveShader.prototype = $extend(openfl._internal.renderer.opengl.shaders.AbstractShader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders.AbstractShader.prototype.init.call(this);
		var gl = this.gl;
		this.projectionVector = gl.getUniformLocation(this.program,"projectionVector");
		this.offsetVector = gl.getUniformLocation(this.program,"offsetVector");
		this.tintColor = gl.getUniformLocation(this.program,"tint");
		this.aVertexPosition = gl.getAttribLocation(this.program,"aVertexPosition");
		this.colorAttribute = gl.getAttribLocation(this.program,"aColor");
		this.attributes = [this.aVertexPosition,this.colorAttribute];
		this.translationMatrix = gl.getUniformLocation(this.program,"translationMatrix");
		this.alpha = gl.getUniformLocation(this.program,"alpha");
	}
	,__class__: openfl._internal.renderer.opengl.shaders.PrimitiveShader
});
openfl._internal.renderer.opengl.shaders.StripShader = function(gl) {
	openfl._internal.renderer.opengl.shaders.AbstractShader.call(this,gl);
	this.fragmentSrc = ["precision mediump float;","varying vec2 vTextureCoord;","uniform float alpha;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y));","}"];
	this.vertexSrc = ["attribute vec2 aVertexPosition;","attribute vec2 aTextureCoord;","uniform mat3 translationMatrix;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","varying vec2 vTextureCoord;","void main(void) {","   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);","   v -= offsetVector.xyx;","   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);","   vTextureCoord = aTextureCoord;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders.StripShader"] = openfl._internal.renderer.opengl.shaders.StripShader;
openfl._internal.renderer.opengl.shaders.StripShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","StripShader"];
openfl._internal.renderer.opengl.shaders.StripShader.__super__ = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.StripShader.prototype = $extend(openfl._internal.renderer.opengl.shaders.AbstractShader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders.AbstractShader.prototype.init.call(this);
		var gl = this.gl;
		this.uSampler = gl.getUniformLocation(this.program,"uSampler");
		this.projectionVector = gl.getUniformLocation(this.program,"projectionVector");
		this.offsetVector = gl.getUniformLocation(this.program,"offsetVector");
		this.colorAttribute = gl.getAttribLocation(this.program,"aColor");
		this.aVertexPosition = gl.getAttribLocation(this.program,"aVertexPosition");
		this.aTextureCoord = gl.getAttribLocation(this.program,"aTextureCoord");
		this.attributes = [this.aVertexPosition,this.aTextureCoord];
		this.translationMatrix = gl.getUniformLocation(this.program,"translationMatrix");
		this.alpha = gl.getUniformLocation(this.program,"alpha");
	}
	,__class__: openfl._internal.renderer.opengl.shaders.StripShader
});
openfl._internal.renderer.opengl.utils = {};
openfl._internal.renderer.opengl.utils.BlendModeManager = function(gl) {
	this.gl = gl;
	this.currentBlendMode = null;
};
$hxClasses["openfl._internal.renderer.opengl.utils.BlendModeManager"] = openfl._internal.renderer.opengl.utils.BlendModeManager;
openfl._internal.renderer.opengl.utils.BlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","utils","BlendModeManager"];
openfl._internal.renderer.opengl.utils.BlendModeManager.prototype = {
	destroy: function() {
		this.gl = null;
	}
	,setBlendMode: function(blendMode) {
		if(blendMode == null) blendMode = openfl.display.BlendMode.NORMAL;
		if(this.currentBlendMode == blendMode) return false;
		this.currentBlendMode = blendMode;
		var blendModeWebGL = openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.get(this.currentBlendMode);
		this.gl.blendFunc(blendModeWebGL[0],blendModeWebGL[1]);
		return true;
	}
	,__class__: openfl._internal.renderer.opengl.utils.BlendModeManager
};
openfl._internal.renderer.opengl.utils.DrawPath = function() {
	this.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
	this.points = [];
	this.isRemovable = true;
	this.fillIndex = 0;
	this.line = new openfl._internal.renderer.opengl.utils.LineStyle();
	this.fill = openfl._internal.renderer.opengl.utils.FillType.None;
};
$hxClasses["openfl._internal.renderer.opengl.utils.DrawPath"] = openfl._internal.renderer.opengl.utils.DrawPath;
openfl._internal.renderer.opengl.utils.DrawPath.__name__ = ["openfl","_internal","renderer","opengl","utils","DrawPath"];
openfl._internal.renderer.opengl.utils.DrawPath.getStack = function(graphics,gl) {
	return openfl._internal.renderer.opengl.utils.PathBuiler.build(graphics,gl);
};
openfl._internal.renderer.opengl.utils.DrawPath.prototype = {
	update: function(line,fill,fillIndex) {
		this.updateLine(line);
		this.fill = fill;
		this.fillIndex = fillIndex;
	}
	,updateLine: function(line) {
		this.line.width = line.width;
		this.line.color = line.color & 16777215;
		if(line.alpha == null) this.line.alpha = 1; else this.line.alpha = line.alpha;
		if(line.scaleMode == null) this.line.scaleMode = openfl.display.LineScaleMode.NORMAL; else this.line.scaleMode = line.scaleMode;
		if(line.caps == null) this.line.caps = openfl.display.CapsStyle.ROUND; else this.line.caps = line.caps;
		if(line.joints == null) this.line.joints = openfl.display.JointStyle.ROUND; else this.line.joints = line.joints;
		this.line.miterLimit = line.miterLimit;
	}
	,__class__: openfl._internal.renderer.opengl.utils.DrawPath
};
openfl._internal.renderer.opengl.utils.PathBuiler = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PathBuiler"] = openfl._internal.renderer.opengl.utils.PathBuiler;
openfl._internal.renderer.opengl.utils.PathBuiler.__name__ = ["openfl","_internal","renderer","opengl","utils","PathBuiler"];
openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = null;
openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths = null;
openfl._internal.renderer.opengl.utils.PathBuiler.__line = null;
openfl._internal.renderer.opengl.utils.PathBuiler.__fill = null;
openfl._internal.renderer.opengl.utils.PathBuiler.closePath = function() {
	var l = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length;
	if(l <= 0) return;
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type == openfl._internal.renderer.opengl.utils.GraphicType.Polygon && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.fill != openfl._internal.renderer.opengl.utils.FillType.None) {
		var sx = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[0];
		var sy = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[1];
		var ex = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[l - 2];
		var ey = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[l - 1];
		if(!(sx == ex && sy == ey)) {
			openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(sx);
			openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(sy);
		}
	}
};
openfl._internal.renderer.opengl.utils.PathBuiler.endFill = function() {
	openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
	openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex++;
};
openfl._internal.renderer.opengl.utils.PathBuiler.moveTo = function(x,y) {
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(x);
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(y);
	openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
};
openfl._internal.renderer.opengl.utils.PathBuiler.graphicDataPop = function() {
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
};
openfl._internal.renderer.opengl.utils.PathBuiler.build = function(graphics,gl) {
	var glStack = null;
	var bounds = graphics.__bounds;
	openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths = new Array();
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
	openfl._internal.renderer.opengl.utils.PathBuiler.__line = new openfl._internal.renderer.opengl.utils.LineStyle();
	openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
	openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex = 0;
	glStack = graphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId];
	if(glStack == null) glStack = graphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId] = new openfl._internal.renderer.opengl.utils.GLStack(gl);
	if(!graphics.__visible || graphics.__commands.length == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
	} else {
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmap = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.endFill();
				if(bitmap != null) openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.Texture(bitmap,matrix,repeat,smooth); else openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) {
					if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [];
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
					openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				}
				break;
			case 1:
				var alpha = command[3];
				var rgb = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.endFill();
				if(alpha > 0) openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.Color(rgb & 16777215,alpha); else openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) {
					if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [];
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
					openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				}
				break;
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cx2 = command[4];
				var cy = command[3];
				var cx = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.moveTo(0,0);
				var n = 20;
				var dt = 0;
				var dt2 = 0;
				var dt3 = 0;
				var t2 = 0;
				var t3 = 0;
				var points = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points;
				var fromX = points[points.length - 2];
				var fromY = points[points.length - 1];
				var px = 0;
				var py = 0;
				var tmp = 0;
				var _g3 = 1;
				var _g2 = n + 1;
				while(_g3 < _g2) {
					var i = _g3++;
					tmp = i / n;
					dt = 1 - tmp;
					dt2 = dt * dt;
					dt3 = dt2 * dt;
					t2 = tmp * tmp;
					t3 = t2 * tmp;
					px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
					py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
					points.push(px);
					points.push(py);
				}
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy1 = command[3];
				var cx1 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.moveTo(0,0);
				var xa = 0;
				var ya = 0;
				var n1 = 20;
				var points1 = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points;
				var fromX1 = points1[points1.length - 2];
				var fromY1 = points1[points1.length - 1];
				var px1 = 0;
				var py1 = 0;
				var tmp1 = 0;
				var _g31 = 1;
				var _g21 = n1 + 1;
				while(_g31 < _g21) {
					var i1 = _g31++;
					tmp1 = i1 / n1;
					xa = fromX1 + (cx1 - fromX1) * tmp1;
					ya = fromY1 + (cy1 - fromY1) * tmp1;
					px1 = xa + (cx1 + (x1 - cx1) * tmp1 - xa) * tmp1;
					py1 = ya + (cy1 + (y1 - cy1) * tmp1 - ya) * tmp1;
					points1.push(px1);
					points1.push(py1);
				}
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Circle;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x2,y2,radius];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 6:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Ellipse;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x3,y3,width,height];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 7:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Rectangle(false);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x4,y4,width1,height1];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				if(ry == -1) ry = rx;
				rx *= 0.5;
				ry *= 0.5;
				if(rx > width2 / 2) rx = width2 / 2;
				if(ry > height2 / 2) ry = height2 / 2;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Rectangle(true);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x5,y5,width2,height2,rx,ry];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 11:
				openfl._internal.renderer.opengl.utils.PathBuiler.endFill();
				break;
			case 12:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha1 = command[4];
				var color = command[3];
				var thickness = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.__line = new openfl._internal.renderer.opengl.utils.LineStyle();
				if(thickness == null || thickness == Math.NaN || thickness < 0) openfl._internal.renderer.opengl.utils.PathBuiler.__line.width = 0; else if(thickness == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__line.width = 1; else openfl._internal.renderer.opengl.utils.PathBuiler.__line.width = thickness;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.color = color;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.alpha = alpha1;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.scaleMode = scaleMode;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.caps = caps;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.joints = joints;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.miterLimit = miterLimit;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [];
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 15:
				var y6 = command[3];
				var x6 = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(x6);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(y6);
				break;
			case 16:
				var y7 = command[3];
				var x7 = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.moveTo(x7,y7);
				break;
			case 10:
				var blendMode = command[7];
				var colors = command[6];
				var culling = command[5];
				var uvtData = command[4];
				var indices = command[3];
				var vertices = command[2];
				var isColor;
				{
					var _g22 = openfl._internal.renderer.opengl.utils.PathBuiler.__fill;
					switch(_g22[1]) {
					case 1:
						isColor = true;
						break;
					default:
						isColor = false;
					}
				}
				if(isColor && uvtData != null) continue;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
				if(uvtData == null) {
					var this1;
					this1 = new openfl.VectorData();
					var this2;
					this2 = new Array(0);
					this1.data = this2;
					this1.length = 0;
					this1.fixed = false;
					uvtData = this1;
					{
						var _g23 = openfl._internal.renderer.opengl.utils.PathBuiler.__fill;
						switch(_g23[1]) {
						case 2:
							var b = _g23[2];
							var _g4 = 0;
							var _g32 = vertices.length / 2 | 0;
							while(_g4 < _g32) {
								var i2 = _g4++;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data;
										var this3;
										this3 = new Array(uvtData.data.length + 10);
										data = this3;
										haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data,0,uvtData.data.length);
										uvtData.data = data;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i2 * 2] / b.width;
								}
								uvtData.length;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data1;
										var this4;
										this4 = new Array(uvtData.data.length + 10);
										data1 = this4;
										haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data1,0,uvtData.data.length);
										uvtData.data = data1;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i2 * 2 + 1] / b.height;
								}
								uvtData.length;
							}
							break;
						default:
						}
					}
				}
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable = false;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 9:
				var count = command[6];
				var flags = command[5];
				var smooth1 = command[4];
				var tileData = command[3];
				var sheet = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex++;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.DrawTiles(sheet,tileData,smooth1,flags,count);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable = false;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			default:
			}
		}
		openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
	}
	graphics.__drawPaths = openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths;
	return glStack;
};
openfl._internal.renderer.opengl.utils.LineStyle = function() {
	this.width = 0;
	this.color = 0;
	this.alpha = 1;
	this.scaleMode = openfl.display.LineScaleMode.NORMAL;
	this.caps = openfl.display.CapsStyle.ROUND;
	this.joints = openfl.display.JointStyle.ROUND;
	this.miterLimit = 3;
};
$hxClasses["openfl._internal.renderer.opengl.utils.LineStyle"] = openfl._internal.renderer.opengl.utils.LineStyle;
openfl._internal.renderer.opengl.utils.LineStyle.__name__ = ["openfl","_internal","renderer","opengl","utils","LineStyle"];
openfl._internal.renderer.opengl.utils.LineStyle.prototype = {
	__class__: openfl._internal.renderer.opengl.utils.LineStyle
};
openfl._internal.renderer.opengl.utils.FillType = $hxClasses["openfl._internal.renderer.opengl.utils.FillType"] = { __ename__ : true, __constructs__ : ["None","Color","Texture","Gradient"] };
openfl._internal.renderer.opengl.utils.FillType.None = ["None",0];
openfl._internal.renderer.opengl.utils.FillType.None.toString = $estr;
openfl._internal.renderer.opengl.utils.FillType.None.__enum__ = openfl._internal.renderer.opengl.utils.FillType;
openfl._internal.renderer.opengl.utils.FillType.Color = function(color,alpha) { var $x = ["Color",1,color,alpha]; $x.__enum__ = openfl._internal.renderer.opengl.utils.FillType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.FillType.Texture = function(bitmap,matrix,repeat,smooth) { var $x = ["Texture",2,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl._internal.renderer.opengl.utils.FillType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.FillType.Gradient = ["Gradient",3];
openfl._internal.renderer.opengl.utils.FillType.Gradient.toString = $estr;
openfl._internal.renderer.opengl.utils.FillType.Gradient.__enum__ = openfl._internal.renderer.opengl.utils.FillType;
openfl._internal.renderer.opengl.utils.FilterManager = function(gl,transparent) {
	this.transparent = transparent;
	this.filterStack = [];
	this.offsetX = 0;
	this.offsetY = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterManager"] = openfl._internal.renderer.opengl.utils.FilterManager;
openfl._internal.renderer.opengl.utils.FilterManager.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterManager"];
openfl._internal.renderer.opengl.utils.FilterManager.prototype = {
	applyFilterPass: function(filter,filterArea,width,height) {
		var gl = this.gl;
		var shader = filter.shaders[openfl._internal.renderer.opengl.GLRenderer.glContextId];
		if(shader == null) {
			shader = new openfl._internal.renderer.opengl.shaders.DefaultShader(gl);
			shader.fragmentSrc = filter.fragmentSrc;
			shader.uniforms = filter.uniforms;
			shader.init();
			filter.shaders[openfl._internal.renderer.opengl.GLRenderer.glContextId] = shader;
		}
		this.renderSession.shaderManager.setShader(shader);
		gl.uniform2f(shader.projectionVector,width / 2,-height / 2);
		gl.uniform2f(shader.offsetVector,0,0);
		if(filter.uniforms.dimensions != null) {
			filter.uniforms.dimensions.value[0] = this.width + 0.0;
			filter.uniforms.dimensions.value[1] = this.height + 0.0;
			filter.uniforms.dimensions.value[2] = this.vertexArray[0];
			filter.uniforms.dimensions.value[3] = this.vertexArray[5];
		}
		shader.syncUniforms();
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.vertexAttribPointer(shader.aVertexPosition,2,gl.FLOAT,false,0,0);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		gl.vertexAttribPointer(shader.aTextureCoord,2,gl.FLOAT,false,0,0);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.colorBuffer);
		gl.vertexAttribPointer(shader.colorAttribute,2,gl.FLOAT,false,0,0);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.drawElements(gl.TRIANGLES,6,gl.UNSIGNED_SHORT,0);
		this.renderSession.drawCount++;
	}
	,begin: function(renderSession,buffer) {
		this.renderSession = renderSession;
		this.defaultShader = renderSession.shaderManager.defaultShader;
		var projection = renderSession.projection;
		this.width = projection.x * 2 | 0;
		this.height = -projection.y * 2 | 0;
		this.buffer = buffer;
	}
	,destroy: function() {
		var gl = this.gl;
		this.filterStack = null;
		this.offsetX = 0;
		this.offsetY = 0;
		var _g = 0;
		var _g1 = this.texturePool;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			texture.destroy();
		}
		this.texturePool = null;
		gl.deleteBuffer(this.vertexBuffer);
		gl.deleteBuffer(this.uvBuffer);
		gl.deleteBuffer(this.colorBuffer);
		gl.deleteBuffer(this.indexBuffer);
	}
	,initShaderBuffers: function() {
		var gl = this.gl;
		this.vertexBuffer = gl.createBuffer();
		this.uvBuffer = gl.createBuffer();
		this.colorBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
		this.vertexArray = new Float32Array([0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.vertexArray,gl.STATIC_DRAW);
		this.uvArray = new Float32Array([0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.uvArray,gl.STATIC_DRAW);
		this.colorArray = new Float32Array([1.0,16777215,1.0,16777215,1.0,16777215,1.0,16777215]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.colorBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.colorArray,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,1,3,2]),gl.STATIC_DRAW);
	}
	,popFilter: function() {
		var gl = this.gl;
		var filterBlock = this.filterStack.pop();
		var filterArea = filterBlock._filterArea;
		var texture = filterBlock._glFilterTexture;
		var projection = this.renderSession.projection;
		var offset = this.renderSession.offset;
		if(filterBlock.filterPasses.length > 1) {
			gl.viewport(0,0,filterArea.width | 0,filterArea.height | 0);
			gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
			this.vertexArray[0] = 0;
			this.vertexArray[1] = filterArea.height;
			this.vertexArray[2] = filterArea.width;
			this.vertexArray[3] = filterArea.height;
			this.vertexArray[4] = 0;
			this.vertexArray[5] = 0;
			this.vertexArray[6] = filterArea.width;
			this.vertexArray[7] = 0;
			gl.bufferSubData(gl.ARRAY_BUFFER,0,this.vertexArray);
			gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
			this.uvArray[2] = filterArea.width / this.width;
			this.uvArray[5] = filterArea.height / this.height;
			this.uvArray[6] = filterArea.width / this.width;
			this.uvArray[7] = filterArea.height / this.height;
			gl.bufferSubData(gl.ARRAY_BUFFER,0,this.uvArray);
			var inputTexture = texture;
			var outputTexture = this.texturePool.pop();
			if(outputTexture == null) outputTexture = new openfl._internal.renderer.opengl.utils.FilterTexture(gl,this.width,this.height);
			outputTexture.resize(this.width,this.height);
			gl.bindFramebuffer(gl.FRAMEBUFFER,outputTexture.frameBuffer);
			gl.clear(gl.COLOR_BUFFER_BIT);
			gl.disable(gl.BLEND);
			var _g1 = 0;
			var _g = filterBlock.filterPasses.length - 1 | 0;
			while(_g1 < _g) {
				var i = _g1++;
				var filterPass = filterBlock.filterPasses[i];
				gl.bindFramebuffer(gl.FRAMEBUFFER,outputTexture.frameBuffer);
				gl.activeTexture(gl.TEXTURE0);
				gl.bindTexture(gl.TEXTURE_2D,inputTexture.texture);
				this.applyFilterPass(filterPass,filterArea,filterArea.width | 0,filterArea.height | 0);
				var temp = inputTexture;
				inputTexture = outputTexture;
				outputTexture = temp;
			}
			gl.enable(gl.BLEND);
			texture = inputTexture;
			this.texturePool.push(outputTexture);
		}
		var filter = filterBlock.filterPasses[filterBlock.filterPasses.length - 1 | 0];
		this.offsetX -= filterArea.x;
		this.offsetY -= filterArea.y;
		var sizeX = this.width;
		var sizeY = this.height;
		var offsetX = 0.0;
		var offsetY = 0.0;
		var buffer = this.buffer;
		if(this.filterStack.length == 0) gl.colorMask(true,true,true,true); else {
			var currentFilter = this.filterStack[this.filterStack.length - 1];
			filterArea = currentFilter._filterArea;
			sizeX = filterArea.width | 0;
			sizeY = filterArea.height | 0;
			offsetX = filterArea.x;
			offsetY = filterArea.y;
			buffer = currentFilter._glFilterTexture.frameBuffer;
		}
		projection.x = sizeX / 2;
		projection.y = -sizeY / 2;
		offset.x = offsetX;
		offset.y = offsetY;
		filterArea = filterBlock._filterArea;
		var x = filterArea.x - offsetX;
		var y = filterArea.y - offsetY;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		this.vertexArray[0] = x;
		this.vertexArray[1] = y + filterArea.height;
		this.vertexArray[2] = x + filterArea.width;
		this.vertexArray[3] = y + filterArea.height;
		this.vertexArray[4] = x;
		this.vertexArray[5] = y;
		this.vertexArray[6] = x + filterArea.width;
		this.vertexArray[7] = y;
		gl.bufferSubData(gl.ARRAY_BUFFER,0,this.vertexArray);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		this.uvArray[2] = filterArea.width / this.width;
		this.uvArray[5] = filterArea.height / this.height;
		this.uvArray[6] = filterArea.width / this.width;
		this.uvArray[7] = filterArea.height / this.height;
		gl.bufferSubData(gl.ARRAY_BUFFER,0,this.uvArray);
		gl.viewport(0,0,sizeX,sizeY);
		gl.bindFramebuffer(gl.FRAMEBUFFER,buffer);
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D,texture.texture);
		this.applyFilterPass(filter,filterArea,sizeX,sizeY);
		this.renderSession.shaderManager.setShader(this.defaultShader);
		gl.uniform2f(this.defaultShader.projectionVector,sizeX / 2,-sizeY / 2);
		gl.uniform2f(this.defaultShader.offsetVector,-offsetX,-offsetY);
		this.texturePool.push(texture);
		filterBlock._glFilterTexture = null;
	}
	,pushFilter: function(filterBlock) {
		var gl = this.gl;
		var projection = this.renderSession.projection;
		var offset = this.renderSession.offset;
		if(filterBlock.target.filterArea != null) filterBlock._filterArea = filterBlock.target.filterArea; else filterBlock._filterArea = filterBlock.target.getBounds();
		this.filterStack.push(filterBlock);
		var filter = filterBlock.filterPasses[0];
		this.offsetX += filterBlock._filterArea.x;
		this.offsetY += filterBlock._filterArea.y;
		var texture = this.texturePool.pop();
		if(texture == null) texture = new openfl._internal.renderer.opengl.utils.FilterTexture(gl,this.width,this.height); else texture.resize(this.width,this.height);
		gl.bindTexture(gl.TEXTURE_2D,texture.texture);
		var filterArea = filterBlock._filterArea;
		var padding = filter.padding;
		filterArea.x -= padding;
		filterArea.y -= padding;
		filterArea.width += padding * 2;
		filterArea.height += padding * 2;
		if(filterArea.x < 0) filterArea.x = 0;
		if(filterArea.width > this.width) filterArea.width = this.width;
		if(filterArea.y < 0) filterArea.y = 0;
		if(filterArea.height > this.height) filterArea.height = this.height;
		gl.bindFramebuffer(gl.FRAMEBUFFER,texture.frameBuffer);
		gl.viewport(0,0,filterArea.width | 0,filterArea.height | 0);
		projection.x = filterArea.width / 2;
		projection.y = -filterArea.height / 2;
		offset.x = -filterArea.x;
		offset.y = -filterArea.y;
		this.renderSession.shaderManager.setShader(this.defaultShader);
		gl.uniform2f(this.defaultShader.projectionVector,filterArea.width / 2,-filterArea.height / 2);
		gl.uniform2f(this.defaultShader.offsetVector,-filterArea.x,-filterArea.y);
		gl.colorMask(true,true,true,true);
		gl.clearColor(0,0,0,0);
		gl.clear(gl.COLOR_BUFFER_BIT);
		filterBlock._glFilterTexture = texture;
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.texturePool = [];
		this.initShaderBuffers();
	}
	,__class__: openfl._internal.renderer.opengl.utils.FilterManager
};
openfl._internal.renderer.opengl.utils.FilterTexture = function(gl,width,height,smoothing) {
	if(smoothing == null) smoothing = true;
	this.gl = gl;
	this.frameBuffer = gl.createFramebuffer();
	this.texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D,this.texture);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	gl.bindFramebuffer(gl.FRAMEBUFFER,this.frameBuffer);
	gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.texture,0);
	this.renderBuffer = gl.createRenderbuffer();
	gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderBuffer);
	gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.renderBuffer);
	this.resize(width,height);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterTexture"] = openfl._internal.renderer.opengl.utils.FilterTexture;
openfl._internal.renderer.opengl.utils.FilterTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterTexture"];
openfl._internal.renderer.opengl.utils.FilterTexture.prototype = {
	clear: function() {
		var gl = this.gl;
		gl.clearColor(0,0,0,0);
		gl.clear(gl.COLOR_BUFFER_BIT);
	}
	,destroy: function() {
		var gl = this.gl;
		gl.deleteFramebuffer(this.frameBuffer);
		gl.deleteTexture(this.texture);
		this.frameBuffer = null;
		this.texture = null;
	}
	,resize: function(width,height) {
		if(this.width == width && this.height == height) return;
		this.width = width;
		this.height = height;
		var gl = this.gl;
		gl.bindTexture(gl.TEXTURE_2D,this.texture);
		gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,width,height,0,gl.RGBA,gl.UNSIGNED_BYTE,null);
		gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderBuffer);
		gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_STENCIL,width,height);
	}
	,__class__: openfl._internal.renderer.opengl.utils.FilterTexture
};
openfl.geom.Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl.geom.Rectangle;
openfl.geom.Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl.geom.Rectangle.prototype = {
	clone: function() {
		return new openfl.geom.Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new openfl.geom.Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new openfl.geom.Rectangle();
		return new openfl.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = tx0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new openfl.geom.Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new openfl.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toLimeRectangle: function() {
		return new lime.math.Rectangle(this.x,this.y,this.width,this.height);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl.geom.Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl.geom.Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl.geom.Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl.geom.Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.GraphicsRenderer"] = openfl._internal.renderer.opengl.utils.GraphicsRenderer;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.__name__ = ["openfl","_internal","renderer","opengl","utils","GraphicsRenderer"];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastVertsBuffer = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastBucketMode = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastTexture = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastTextureRepeat = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastTextureSmooth = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildCircle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height;
	if(rectData.length == 3) height = width; else height = rectData[3];
	if(path.type == openfl._internal.renderer.opengl.utils.GraphicType.Ellipse) {
		width /= 2;
		height /= 2;
		x += width;
		y += height;
	}
	if(localCoords) {
		x -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
		y -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
	}
	var totalSegs = 40;
	var seg = Math.PI * 2 / totalSegs;
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	if(bucket != null) {
		var verts = bucket.verts;
		var indices = bucket.indices;
		var vertPos = verts.length / 2 | 0;
		indices.push(vertPos);
		var _g1 = 0;
		var _g = totalSegs + 1;
		while(_g1 < _g) {
			var i = _g1++;
			verts.push(x);
			verts.push(y);
			verts.push(x + Math.sin(seg * i) * width);
			verts.push(y + Math.cos(seg * i) * height);
			indices.push(vertPos++);
			indices.push(vertPos++);
		}
		indices.push(vertPos - 1);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [];
		var _g11 = 0;
		var _g2 = totalSegs + 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			path.points.push(x + Math.sin(seg * i1) * width);
			path.points.push(y + Math.cos(seg * i1) * height);
		}
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket.line);
		path.points = tempPoints;
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildComplexPoly = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	if(path.points.length < 6) return;
	var points = path.points.slice();
	if(localCoords) {
		var _g1 = 0;
		var _g = points.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			points[i * 2] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			points[i * 2 + 1] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
		}
	}
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	bucket.drawMode = glStack.gl.TRIANGLE_FAN;
	bucket.verts = points;
	var indices = bucket.indices;
	var length = points.length / 2 | 0;
	var _g2 = 0;
	while(_g2 < length) {
		var i1 = _g2++;
		indices.push(i1);
	}
	if(path.line.width > 0) openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket.line,localCoords);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine = function(path,bucket,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points;
	if(points.length == 0) return;
	if(localCoords) {
		var _g1 = 0;
		var _g = points.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			points[i * 2] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			points[i * 2 + 1] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
		}
	}
	if(path.line.width % 2 > 0) {
		var _g11 = 0;
		var _g2 = points.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			points[i1] += 0.5;
		}
	}
	var firstPoint = new openfl.geom.Point(points[0],points[1]);
	var lastPoint = new openfl.geom.Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
	if(firstPoint.x == lastPoint.x && firstPoint.y == lastPoint.y) {
		points = points.slice();
		points.pop();
		points.pop();
		lastPoint = new openfl.geom.Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
		var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
		var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
		points.unshift(midPointY);
		points.unshift(midPointX);
		points.push(midPointX);
		points.push(midPointY);
	}
	var verts = bucket.verts;
	var indices = bucket.indices;
	var length = points.length / 2 | 0;
	var indexCount = points.length;
	var indexStart = verts.length / 6 | 0;
	var width = path.line.width / 2;
	var color = openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgb(path.line.color);
	var alpha = path.line.alpha;
	var r = color[0] * alpha;
	var g = color[1] * alpha;
	var b = color[2] * alpha;
	var px;
	var py;
	var p1x;
	var p1y;
	var p2x;
	var p2y;
	var p3x;
	var p3y;
	var perpx;
	var perpy;
	var perp2x;
	var perp2y;
	var perp3x;
	var perp3y;
	var a1;
	var b1;
	var c1;
	var a2;
	var b2;
	var c2;
	var denom;
	var pdist;
	var dist;
	p1x = points[0];
	p1y = points[1];
	p2x = points[2];
	p2y = points[3];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p1x - perpx);
	verts.push(p1y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p1x + perpx);
	verts.push(p1y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	var _g12 = 1;
	var _g3 = length - 1;
	while(_g12 < _g3) {
		var i2 = _g12++;
		p1x = points[(i2 - 1) * 2];
		p1y = points[(i2 - 1) * 2 + 1];
		p2x = points[i2 * 2];
		p2y = points[i2 * 2 + 1];
		p3x = points[(i2 + 1) * 2];
		p3y = points[(i2 + 1) * 2 + 1];
		perpx = -(p1y - p2y);
		perpy = p1x - p2x;
		dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
		perpx = perpx / dist;
		perpy = perpy / dist;
		perpx = perpx * width;
		perpy = perpy * width;
		perp2x = -(p2y - p3y);
		perp2y = p2x - p3x;
		dist = Math.sqrt(Math.abs(perp2x * perp2x + perp2y * perp2y));
		perp2x = perp2x / dist;
		perp2y = perp2y / dist;
		perp2x = perp2x * width;
		perp2y = perp2y * width;
		a1 = -perpy + p1y - (-perpy + p2y);
		b1 = -perpx + p2x - (-perpx + p1x);
		c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
		a2 = -perp2y + p3y - (-perp2y + p2y);
		b2 = -perp2x + p2x - (-perp2x + p3x);
		c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);
		denom = a1 * b2 - a2 * b1;
		if(Math.abs(denom) < 0.1) {
			denom += 10.1;
			verts.push(p2x - perpx);
			verts.push(p2y - perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perpx);
			verts.push(p2y + perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			continue;
		}
		px = (b1 * c2 - b2 * c1) / denom;
		py = (a2 * c1 - a1 * c2) / denom;
		pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);
		if(pdist > 19600) {
			perp3x = perpx - perp2x;
			perp3y = perpy - perp2y;
			dist = Math.sqrt(Math.abs(perp3x * perp3x + perp3y * perp3y));
			perp3x = perp3x / dist;
			perp3y = perp3y / dist;
			perp3x = perp3x * width;
			perp3y = perp3y * width;
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perp3x);
			verts.push(p2y + perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			indexCount++;
		} else {
			verts.push(px);
			verts.push(py);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - (px - p2x));
			verts.push(p2y - (py - p2y));
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
		}
	}
	p1x = points[(length - 2) * 2];
	p1y = points[(length - 2) * 2 + 1];
	p2x = points[(length - 1) * 2];
	p2y = points[(length - 1) * 2 + 1];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	if(!Math.isFinite(dist)) null;
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p2x - perpx);
	verts.push(p2y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p2x + perpx);
	verts.push(p2y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	indices.push(indexStart);
	var _g4 = 0;
	while(_g4 < indexCount) {
		var i3 = _g4++;
		indices.push(indexStart++);
	}
	indices.push(indexStart - 1);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildPoly = function(path,glStack) {
	if(path.points.length < 6) return;
	var points = path.points;
	var l = points.length;
	var sx = points[0];
	var sy = points[1];
	var ex = points[l - 2];
	var ey = points[l - 1];
	if(sx != ex || sy != ey) {
		points.push(sx);
		points.push(sy);
	}
	var length = points.length / 2 | 0;
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	var verts = bucket.verts;
	var indices = bucket.indices;
	if(bucket != null) {
		var triangles = openfl._internal.renderer.opengl.utils.PolyK.triangulate(points);
		var vertPos = verts.length / 2;
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i + 1] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			i += 3;
		}
		var _g = 0;
		while(_g < length) {
			var i1 = _g++;
			verts.push(points[i1 * 2]);
			verts.push(points[i1 * 2 + 1]);
		}
	}
	if(path.line.width > 0) openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket.line);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height = rectData[3];
	if(localCoords) {
		x -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
		y -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
	}
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	if(bucket != null) {
		var verts = bucket.verts;
		var indices = bucket.indices;
		var vertPos = verts.length / 2 | 0;
		verts.push(x);
		verts.push(y);
		verts.push(x + width);
		verts.push(y);
		verts.push(x);
		verts.push(y + height);
		verts.push(x + width);
		verts.push(y + height);
		indices.push(vertPos);
		indices.push(vertPos);
		indices.push(vertPos + 1);
		indices.push(vertPos + 2);
		indices.push(vertPos + 3);
		indices.push(vertPos + 3);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [x,y,x + width,y,x + width,y + height,x,y + height,x,y];
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket.line);
		path.points = tempPoints;
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRoundedRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points.slice();
	var x = points[0];
	var y = points[1];
	var width = points[2];
	var height = points[3];
	var radius = points[4];
	if(localCoords) {
		x -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
		y -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
	}
	var recPoints = [];
	recPoints.push(x);
	recPoints.push(y + radius);
	recPoints = recPoints.concat(openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve(x,y + height - radius,x,y + height,x + radius,y + height));
	recPoints = recPoints.concat(openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve(x + width - radius,y + height,x + width,y + height,x + width,y + height - radius));
	recPoints = recPoints.concat(openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve(x + width,y + radius,x + width,y,x + width - radius,y));
	recPoints = recPoints.concat(openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve(x + radius,y,x,y,x,y + radius));
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	if(bucket != null) {
		var verts = bucket.verts;
		var indices = bucket.indices;
		var vecPos = verts.length / 2;
		var triangles = openfl._internal.renderer.opengl.utils.PolyK.triangulate(recPoints);
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i + 1] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			i += 3;
		}
		i = 0;
		while(i < recPoints.length) {
			verts.push(recPoints[i]);
			verts.push(recPoints[++i]);
			i++;
		}
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = recPoints;
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket.line);
		path.points = tempPoints;
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildDrawTriangles = function(path,object,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var args = path.type.slice(2);
	var vertices = args[0];
	var indices = args[1];
	var uvtData = args[2];
	var culling = args[3];
	var colors = args[4];
	var blendMode = args[5];
	var a;
	var b;
	var c;
	var d;
	var tx;
	var ty;
	if(localCoords) {
		a = 1.0;
		b = 0.0;
		c = 0.0;
		d = 1.0;
		tx = 0.0;
		ty = 0.0;
	} else {
		a = object.__worldTransform.a;
		b = object.__worldTransform.b;
		c = object.__worldTransform.c;
		d = object.__worldTransform.d;
		tx = object.__worldTransform.tx;
		ty = object.__worldTransform.ty;
	}
	var hasColors = colors != null && colors.length > 0;
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	bucket.rawVerts = true;
	bucket.glLength = indices.length;
	bucket.stride = 8;
	var vertsLength = bucket.glLength * bucket.stride;
	var verts;
	if(bucket.glVerts == null || bucket.glVerts.length < vertsLength) {
		verts = new Float32Array(vertsLength);
		bucket.glVerts = verts;
	} else verts = bucket.glVerts;
	var v0 = 0;
	var v1 = 0;
	var v2 = 0;
	var i0 = 0;
	var i1 = 0;
	var i2 = 0;
	var x0 = 0.0;
	var y0 = 0.0;
	var x1 = 0.0;
	var y1 = 0.0;
	var x2 = 0.0;
	var y2 = 0.0;
	var idx = 0;
	var color = [1.,1.,1.,1.];
	var ctmp = color;
	var _g1 = 0;
	var _g = indices.length / 3 | 0;
	while(_g1 < _g) {
		var i = _g1++;
		i0 = indices.data[i * 3];
		i1 = indices.data[i * 3 + 1];
		i2 = indices.data[i * 3 + 2];
		v0 = i0 * 2;
		v1 = i1 * 2;
		v2 = i2 * 2;
		x0 = vertices.data[v0];
		y0 = vertices.data[v0 + 1];
		x1 = vertices.data[v1];
		y1 = vertices.data[v1 + 1];
		x2 = vertices.data[v2];
		y2 = vertices.data[v2 + 1];
		if(localCoords) {
			x0 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			y0 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
			x1 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			y1 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
			x2 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			y2 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
		}
		switch(culling[1]) {
		case 2:
			if(!((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0)) continue;
			break;
		case 0:
			if((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0) continue;
			break;
		default:
		}
		verts[idx++] = a * x0 + c * y0 + tx;
		verts[idx++] = b * x0 + d * y0 + ty;
		verts[idx++] = uvtData.data[v0];
		verts[idx++] = uvtData.data[v0 + 1];
		if(hasColors) {
			ctmp = openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgba(colors.data[i0]);
			verts[idx++] = ctmp[0];
			verts[idx++] = ctmp[1];
			verts[idx++] = ctmp[2];
			verts[idx++] = ctmp[3];
		} else {
			verts[idx++] = color[0];
			verts[idx++] = color[1];
			verts[idx++] = color[2];
			verts[idx++] = color[3];
		}
		verts[idx++] = a * x1 + c * y1 + tx;
		verts[idx++] = b * x1 + d * y1 + ty;
		verts[idx++] = uvtData.data[v1];
		verts[idx++] = uvtData.data[v1 + 1];
		if(hasColors) {
			ctmp = openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgba(colors.data[i1]);
			verts[idx++] = ctmp[0];
			verts[idx++] = ctmp[1];
			verts[idx++] = ctmp[2];
			verts[idx++] = ctmp[3];
		} else {
			verts[idx++] = color[0];
			verts[idx++] = color[1];
			verts[idx++] = color[2];
			verts[idx++] = color[3];
		}
		verts[idx++] = a * x2 + c * y2 + tx;
		verts[idx++] = b * x2 + d * y2 + ty;
		verts[idx++] = uvtData.data[v2];
		verts[idx++] = uvtData.data[v2 + 1];
		if(hasColors) {
			ctmp = openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgba(colors.data[i2]);
			verts[idx++] = ctmp[0];
			verts[idx++] = ctmp[1];
			verts[idx++] = ctmp[2];
			verts[idx++] = ctmp[3];
		} else {
			verts[idx++] = color[0];
			verts[idx++] = color[1];
			verts[idx++] = color[2];
			verts[idx++] = color[3];
		}
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildDrawTiles = function(path,glStack) {
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve = function(fromX,fromY,cpX,cpY,toX,toY) {
	var xa;
	var ya;
	var xb;
	var yb;
	var x;
	var y;
	var n = 20;
	var points = [];
	var getPt = function(n1,n2,perc) {
		var diff = n2 - n1;
		return n1 + diff * perc;
	};
	var j = 0.0;
	var _g1 = 0;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		j = i / n;
		xa = getPt(fromX,cpX,j);
		ya = getPt(fromY,cpY,j);
		xb = getPt(cpX,toX,j);
		yb = getPt(cpY,toY,j);
		x = getPt(xa,xb,j);
		y = getPt(ya,yb,j);
		points.push(x);
		points.push(y);
	}
	return points;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.render = function(object,renderSession) {
	var graphics = object.__graphics;
	var spritebatch = renderSession.spriteBatch;
	var dirty = graphics.__dirty;
	if(graphics.__commands.length <= 0) return;
	if(dirty) openfl._internal.renderer.opengl.utils.GraphicsRenderer.updateGraphics(object,renderSession.gl,object.cacheAsBitmap);
	if(object.cacheAsBitmap) {
		if(dirty) {
			var gl = renderSession.gl;
			var bounds = graphics.__bounds;
			var texture = graphics.__cachedTexture;
			var w = Math.floor(bounds.width + 0.5);
			var h = Math.floor(bounds.height + 0.5);
			if(texture == null) {
				texture = new openfl._internal.renderer.opengl.utils.FilterTexture(gl,w,h,false);
				graphics.__cachedTexture = texture;
			}
			texture.resize(w,h);
			gl.bindFramebuffer(gl.FRAMEBUFFER,texture.frameBuffer);
			gl.viewport(0,0,w,h);
			texture.clear();
			openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderGraphics(object,renderSession,new openfl.geom.Point(w / 2,-h / 2),true);
			gl.bindFramebuffer(gl.FRAMEBUFFER,null);
			gl.viewport(0,0,renderSession.renderer.width,renderSession.renderer.height);
		}
		if(!spritebatch.drawing) spritebatch.begin(renderSession);
		spritebatch.renderCachedGraphics(object);
	} else openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderGraphics(object,renderSession,renderSession.projection,false);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderGraphics = function(object,renderSession,projection,localCoords) {
	if(localCoords == null) localCoords = false;
	var graphics = object.__graphics;
	var gl = renderSession.gl;
	var offset = renderSession.offset;
	var glStack = graphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId];
	var bucket;
	var translationMatrix;
	if(localCoords) translationMatrix = openfl.geom.Matrix.__identity; else translationMatrix = object.__worldTransform;
	var batchDrawing = renderSession.spriteBatch.drawing;
	var _g1 = 0;
	var _g = glStack.buckets.length;
	while(_g1 < _g) {
		var i = _g1++;
		batchDrawing = renderSession.spriteBatch.drawing;
		bucket = glStack.buckets[i];
		var _g2 = bucket.mode;
		switch(_g2[1]) {
		case 1:case 2:
			if(batchDrawing && !localCoords) renderSession.spriteBatch.end();
			renderSession.stencilManager.pushBucket(bucket,renderSession,projection,translationMatrix.toArray(true));
			var shader = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareShader(bucket,renderSession,object,projection,translationMatrix.toArray(false));
			openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderFill(bucket,shader,renderSession);
			renderSession.stencilManager.popBucket(object,bucket,renderSession);
			break;
		case 5:
			if(batchDrawing && !localCoords) renderSession.spriteBatch.end();
			var shader1 = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareShader(bucket,renderSession,object,projection,null);
			openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderDrawTriangles(bucket,shader1,renderSession);
			break;
		case 6:
			if(!batchDrawing) renderSession.spriteBatch.begin(renderSession);
			openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderDrawTiles(object,bucket,renderSession);
			break;
		default:
		}
		var _g21 = 0;
		var _g3 = bucket.data;
		while(_g21 < _g3.length) {
			var data = _g3[_g21];
			++_g21;
			if(data.line != null && data.line.verts.length > 0) {
				batchDrawing = renderSession.spriteBatch.drawing;
				if(batchDrawing && !localCoords) renderSession.spriteBatch.end();
				var shader2 = renderSession.shaderManager.primitiveShader;
				renderSession.shaderManager.setShader(shader2);
				gl.uniformMatrix3fv(shader2.translationMatrix,false,translationMatrix.toArray(true));
				gl.uniform2f(shader2.projectionVector,projection.x,-projection.y);
				gl.uniform2f(shader2.offsetVector,-offset.x,-offset.y);
				gl.uniform1f(shader2.alpha,object.__worldAlpha);
				gl.bindBuffer(gl.ARRAY_BUFFER,data.line.vertsBuffer);
				gl.vertexAttribPointer(shader2.aVertexPosition,2,gl.FLOAT,false,24,0);
				gl.vertexAttribPointer(shader2.colorAttribute,4,gl.FLOAT,false,24,8);
				gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,data.line.indexBuffer);
				gl.drawElements(gl.TRIANGLE_STRIP,data.line.indices.length,gl.UNSIGNED_SHORT,0);
			}
		}
		batchDrawing = renderSession.spriteBatch.drawing;
		if(!batchDrawing && !localCoords) renderSession.spriteBatch.begin(renderSession);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.updateGraphics = function(object,gl,localCoords) {
	if(localCoords == null) localCoords = false;
	var graphics = object.__graphics;
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectPosition.setTo(object.get_x(),object.get_y());
	if(graphics.__bounds != null) openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.copyFrom(graphics.__bounds);
	var glStack = null;
	if(graphics.__dirty) glStack = openfl._internal.renderer.opengl.utils.DrawPath.getStack(graphics,gl);
	graphics.set___dirty(false);
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var data = _g1[_g];
		++_g;
		data.reset();
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.bucketPool.push(data);
	}
	glStack.reset();
	var _g11 = glStack.lastIndex;
	var _g2 = graphics.__drawPaths.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var path = graphics.__drawPaths[i];
		{
			var _g21 = path.type;
			switch(_g21[1]) {
			case 0:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildComplexPoly(path,glStack,localCoords);
				break;
			case 1:
				var rounded = _g21[2];
				if(rounded) openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRoundedRectangle(path,glStack,localCoords); else openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRectangle(path,glStack,localCoords);
				break;
			case 2:case 3:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildCircle(path,glStack,localCoords);
				break;
			case 4:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildDrawTriangles(path,object,glStack,localCoords);
				break;
			case 5:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
				break;
			}
		}
		glStack.lastIndex++;
	}
	glStack.upload();
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket = function(path,glStack) {
	var bucket = null;
	{
		var _g = path.fill;
		switch(_g[1]) {
		case 1:
			var a = _g[3];
			var c = _g[2];
			bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl._internal.renderer.opengl.utils.BucketMode.Fill);
			if(c == null) bucket.color = [0,0,0]; else bucket.color = [(c >> 16 & 255) / 255,(c >> 8 & 255) / 255,(c & 255) / 255];
			bucket.alpha = a;
			bucket.uploadTileBuffer = true;
			break;
		case 2:
			var s = _g[5];
			var r = _g[4];
			var m = _g[3];
			var b = _g[2];
			bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl._internal.renderer.opengl.utils.BucketMode.PatternFill);
			bucket.bitmap = b;
			bucket.textureRepeat = r;
			bucket.textureSmooth = s;
			bucket.texture = b.getTexture(glStack.gl);
			bucket.uploadTileBuffer = true;
			var tMatrix = bucket.textureMatrix;
			tMatrix.identity();
			var pMatrix;
			if(m == null) pMatrix = new openfl.geom.Matrix(); else pMatrix = new openfl.geom.Matrix(m.a,m.b,m.c,m.d,m.tx,m.ty);
			pMatrix = pMatrix.invert();
			pMatrix.__translateTransformed(new openfl.geom.Point(-openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectPosition.x,-openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectPosition.y));
			var tx = pMatrix.tx / b.width;
			var ty = pMatrix.ty / b.height;
			tMatrix.concat(pMatrix);
			bucket.textureTL.x = tx;
			bucket.textureTL.y = ty;
			bucket.textureBR.x = tx + 1;
			bucket.textureBR.y = ty + 1;
			tMatrix.scale(1 / b.width,1 / b.height);
			bucket.textureMatrix = tMatrix;
			break;
		default:
			bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl._internal.renderer.opengl.utils.BucketMode.Line);
			bucket.uploadTileBuffer = false;
		}
	}
	{
		var _g1 = path.type;
		switch(_g1[1]) {
		case 4:
			bucket.mode = openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles;
			bucket.uploadTileBuffer = false;
			break;
		case 5:
			bucket.mode = openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles;
			bucket.uploadTileBuffer = false;
			break;
		default:
		}
	}
	bucket.graphicType = path.type;
	var bucketData = bucket.getData();
	return bucketData;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.getBucket = function(glStack,mode) {
	var b = openfl._internal.renderer.opengl.utils.GraphicsRenderer.bucketPool.pop();
	if(b == null) b = new openfl._internal.renderer.opengl.utils.GLBucket(glStack.gl);
	b.mode = mode;
	glStack.buckets.push(b);
	return b;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket = function(fillIndex,glStack,mode) {
	var bucket;
	if(glStack.buckets.length == 0) bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.getBucket(glStack,mode); else {
		bucket = glStack.buckets[glStack.buckets.length - 1];
		if(bucket.fillIndex != fillIndex) bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.getBucket(glStack,mode);
	}
	bucket.dirty = true;
	bucket.fillIndex = fillIndex;
	return bucket;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareShader = function(bucket,renderSession,object,projection,translationMatrix) {
	var gl = renderSession.gl;
	var offset = renderSession.offset;
	var shader = null;
	var _g = bucket.mode;
	switch(_g[1]) {
	case 1:
		shader = renderSession.shaderManager.fillShader;
		break;
	case 2:
		shader = renderSession.shaderManager.patternFillShader;
		break;
	case 5:
		shader = renderSession.shaderManager.drawTrianglesShader;
		break;
	default:
		shader = null;
	}
	if(shader == null) return null;
	var newShader = renderSession.shaderManager.setShader(shader);
	gl.uniform2f(shader.projectionVector,projection.x,-projection.y);
	gl.uniform2f(shader.offsetVector,-offset.x,-offset.y);
	gl.uniform1f(shader.alpha,object.__worldAlpha * bucket.alpha);
	var _g1 = bucket.mode;
	switch(_g1[1]) {
	case 1:
		gl.uniformMatrix3fv(shader.translationMatrix,false,translationMatrix);
		gl.uniform3fv(shader.color,new Float32Array(bucket.color));
		break;
	case 2:
		gl.uniformMatrix3fv(shader.translationMatrix,false,translationMatrix);
		gl.uniform1i(shader.sampler,0);
		gl.uniform2f(shader.patternTL,bucket.textureTL.x,bucket.textureTL.y);
		gl.uniform2f(shader.patternBR,bucket.textureBR.x,bucket.textureBR.y);
		gl.uniformMatrix3fv(shader.patternMatrix,false,bucket.textureMatrix.toArray(false));
		break;
	case 5:
		if(bucket.texture != null) {
			gl.uniform1i(shader.useTexture,1);
			gl.uniform1i(shader.sampler,0);
		} else {
			gl.uniform1i(shader.useTexture,0);
			gl.uniform3fv(shader.color,new Float32Array(bucket.color));
		}
		break;
	default:
	}
	return shader;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderFill = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	if(bucket.mode == openfl._internal.renderer.opengl.utils.BucketMode.PatternFill && bucket.texture != null) openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindTexture(gl,bucket);
	gl.bindBuffer(gl.ARRAY_BUFFER,bucket.tileBuffer);
	gl.vertexAttribPointer(shader.aVertexPosition,4,gl.SHORT,false,0,0);
	gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderDrawTriangles = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	var _g = 0;
	var _g1 = bucket.data;
	while(_g < _g1.length) {
		var data = _g1[_g];
		++_g;
		if(data.destroyed) continue;
		if(bucket.texture == null) {
		} else openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindTexture(gl,bucket);
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindDrawTrianglesBuffer(gl,shader,data);
		gl.drawArrays(gl.TRIANGLES,data.glStart,data.glLength);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderDrawTiles = function(object,bucket,renderSession) {
	var args = bucket.graphicType.slice(2);
	renderSession.spriteBatch.renderTiles(object,args[0],args[1],args[2],args[3],args[4]);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindDrawTrianglesBuffer = function(gl,shader,data) {
	gl.bindBuffer(gl.ARRAY_BUFFER,data.vertsBuffer);
	var stride = data.stride * 4;
	gl.vertexAttribPointer(shader.aVertexPosition,2,gl.FLOAT,false,stride,0);
	gl.vertexAttribPointer(shader.aTextureCoord,2,gl.FLOAT,false,stride,8);
	gl.vertexAttribPointer(shader.colorAttribute,4,gl.FLOAT,false,stride,16);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindTexture = function(gl,bucket) {
	gl.bindTexture(gl.TEXTURE_2D,bucket.texture);
	if(bucket.textureRepeat && bucket.bitmap.__image.get_powerOfTwo()) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	}
	if(bucket.textureSmooth) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgb = function(hex) {
	if(hex == null) return [0,0,0]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255];
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgba = function(hex) {
	if(hex == null) return [1,1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255,(hex >> 24 & 255) / 255];
};
openfl._internal.renderer.opengl.utils.GLStack = function(gl) {
	this.lastIndex = 0;
	this.gl = gl;
	this.buckets = [];
	this.lastIndex = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLStack"] = openfl._internal.renderer.opengl.utils.GLStack;
openfl._internal.renderer.opengl.utils.GLStack.__name__ = ["openfl","_internal","renderer","opengl","utils","GLStack"];
openfl._internal.renderer.opengl.utils.GLStack.prototype = {
	reset: function() {
		this.buckets = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var _g = 0;
		var _g1 = this.buckets;
		while(_g < _g1.length) {
			var bucket = _g1[_g];
			++_g;
			if(bucket.dirty) bucket.upload();
		}
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLStack
};
openfl._internal.renderer.opengl.utils.GLBucket = function(gl) {
	this.uploadTileBuffer = true;
	this.textureSmooth = true;
	this.textureRepeat = false;
	this.data = [];
	this.fillIndex = 0;
	this.gl = gl;
	this.color = [0,0,0];
	this.lastIndex = 0;
	this.alpha = 1;
	this.dirty = true;
	this.mode = openfl._internal.renderer.opengl.utils.BucketMode.Fill;
	this.textureMatrix = new openfl.geom.Matrix();
	this.textureTL = new openfl.geom.Point();
	this.textureBR = new openfl.geom.Point(1,1);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucket"] = openfl._internal.renderer.opengl.utils.GLBucket;
openfl._internal.renderer.opengl.utils.GLBucket.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucket"];
openfl._internal.renderer.opengl.utils.GLBucket.prototype = {
	getData: function() {
		var result = null;
		var remove = false;
		var _g = 0;
		var _g1 = this.data;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d.destroyed) {
				result = d;
				remove = true;
				break;
			}
		}
		if(result == null) result = new openfl._internal.renderer.opengl.utils.GLBucketData(this.gl);
		result.destroyed = false;
		result.parent = this;
		if(remove) HxOverrides.remove(this.data,result);
		this.data.push(result);
		return result;
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.data;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			d.destroy();
		}
		this.fillIndex = 0;
		this.uploadTileBuffer = true;
		this.graphicType = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
	}
	,upload: function() {
		if(this.uploadTileBuffer) {
			if(this.tileBuffer == null) {
				this.tileBuffer = this.gl.createBuffer();
				this.tile = [0,0,0,0,4096,0,1,0,0,4096,0,1,4096,4096,1,1];
				this.glTile = new Int16Array(this.tile);
			}
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.tileBuffer);
			this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glTile,this.gl.STATIC_DRAW);
			this.uploadTileBuffer = false;
		}
		var _g = 0;
		var _g1 = this.data;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(!d.destroyed) d.upload();
		}
		this.dirty = false;
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLBucket
};
openfl._internal.renderer.opengl.utils.GLBucketData = function(gl,initLine) {
	if(initLine == null) initLine = true;
	this.destroyed = false;
	this.rawIndices = false;
	this.stride = 0;
	this.rawVerts = false;
	this.lastVertsSize = 0;
	this.glStart = 0;
	this.glLength = 0;
	this.gl = gl;
	this.drawMode = gl.TRIANGLE_STRIP;
	this.verts = [];
	this.vertsBuffer = gl.createBuffer();
	this.indices = [];
	this.indexBuffer = gl.createBuffer();
	if(initLine) this.line = new openfl._internal.renderer.opengl.utils.GLBucketData(gl,false);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucketData"] = openfl._internal.renderer.opengl.utils.GLBucketData;
openfl._internal.renderer.opengl.utils.GLBucketData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucketData"];
openfl._internal.renderer.opengl.utils.GLBucketData.prototype = {
	destroy: function() {
		this.destroyed = true;
		this.verts = [];
		this.indices = [];
		this.glLength = 0;
		this.glStart = 0;
		this.stride = 0;
		this.rawVerts = false;
		this.rawIndices = false;
		if(this.line != null) this.line.destroy();
	}
	,upload: function() {
		if(this.rawVerts && this.glVerts != null && this.glVerts.length > 0 || this.verts.length > 0) {
			if(!this.rawVerts) this.glVerts = new Float32Array(this.verts);
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.vertsBuffer);
			if(this.glVerts.length <= this.lastVertsSize) {
				var end = this.glLength * 4 * this.stride;
				if(this.glLength > 0 && this.lastVertsSize > end) {
					var view = this.glVerts.subarray(0,end);
					this.gl.bufferSubData(this.gl.ARRAY_BUFFER,0,view);
					view = null;
				} else this.gl.bufferSubData(this.gl.ARRAY_BUFFER,0,this.glVerts);
			} else {
				this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glVerts,this.gl.STREAM_DRAW);
				this.lastVertsSize = this.glVerts.length;
			}
		}
		if(this.glLength == 0 && (this.rawIndices && this.glIndices != null && this.glIndices.length > 0 || this.indices.length > 0)) {
			if(!this.rawIndices) this.glIndices = new Uint16Array(this.indices);
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STREAM_DRAW);
		}
		if(this.line != null) this.line.upload();
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLBucketData
};
openfl._internal.renderer.opengl.utils.BucketMode = $hxClasses["openfl._internal.renderer.opengl.utils.BucketMode"] = { __ename__ : true, __constructs__ : ["None","Fill","PatternFill","Line","PatternLine","DrawTriangles","DrawTiles"] };
openfl._internal.renderer.opengl.utils.BucketMode.None = ["None",0];
openfl._internal.renderer.opengl.utils.BucketMode.None.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.None.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.Fill = ["Fill",1];
openfl._internal.renderer.opengl.utils.BucketMode.Fill.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.Fill.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.PatternFill = ["PatternFill",2];
openfl._internal.renderer.opengl.utils.BucketMode.PatternFill.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.PatternFill.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.Line = ["Line",3];
openfl._internal.renderer.opengl.utils.BucketMode.Line.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.Line.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.PatternLine = ["PatternLine",4];
openfl._internal.renderer.opengl.utils.BucketMode.PatternLine.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.PatternLine.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles = ["DrawTriangles",5];
openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles = ["DrawTiles",6];
openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.GLGraphicsData = function(gl) {
	this.indices = [];
	this.data = [];
	this.lastIndex = 0;
	this.mode = 0;
	this.dirty = true;
	this.alpha = 1.0;
	this.tint = [1.0,1.0,1.0];
	this.gl = gl;
	this.dataBuffer = gl.createBuffer();
	this.indexBuffer = gl.createBuffer();
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLGraphicsData"] = openfl._internal.renderer.opengl.utils.GLGraphicsData;
openfl._internal.renderer.opengl.utils.GLGraphicsData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLGraphicsData"];
openfl._internal.renderer.opengl.utils.GLGraphicsData.prototype = {
	reset: function() {
		this.data = [];
		this.indices = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		this.glData = new Float32Array(this.data);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.dataBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glData,this.gl.STATIC_DRAW);
		this.glIndices = new Uint16Array(this.indices);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STATIC_DRAW);
		this.dirty = false;
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLGraphicsData
};
openfl._internal.renderer.opengl.utils.PolyK = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PolyK"] = openfl._internal.renderer.opengl.utils.PolyK;
openfl._internal.renderer.opengl.utils.PolyK.__name__ = ["openfl","_internal","renderer","opengl","utils","PolyK"];
openfl._internal.renderer.opengl.utils.PolyK.triangulate = function(p) {
	var sign = true;
	var n = p.length >> 1;
	if(n < 3) return [];
	var tgs = [];
	var avl;
	var _g = [];
	var _g1 = 0;
	while(_g1 < n) {
		var i = _g1++;
		_g.push(i);
	}
	avl = _g;
	var i1 = 0;
	var al = n;
	var earFound = false;
	while(al > 3) {
		var i0 = avl[i1 % al];
		var i11 = avl[(i1 + 1) % al];
		var i2 = avl[(i1 + 2) % al];
		var ax = p[2 * i0];
		var ay = p[2 * i0 + 1];
		var bx = p[2 * i11];
		var by = p[2 * i11 + 1];
		var cx = p[2 * i2];
		var cy = p[2 * i2 + 1];
		earFound = false;
		if(openfl._internal.renderer.opengl.utils.PolyK._convex(ax,ay,bx,by,cx,cy,sign)) {
			earFound = true;
			var _g11 = 0;
			while(_g11 < al) {
				var j = _g11++;
				var vi = avl[j];
				if(vi == i0 || vi == i11 || vi == i2) continue;
				if(openfl._internal.renderer.opengl.utils.PolyK._PointInTriangle(p[2 * vi],p[2 * vi + 1],ax,ay,bx,by,cx,cy)) {
					earFound = false;
					break;
				}
			}
		}
		if(earFound) {
			tgs.push(i0);
			tgs.push(i11);
			tgs.push(i2);
			avl.splice((i1 + 1) % al,1);
			al--;
			i1 = 0;
		} else if(i1++ > 3 * al) {
			if(sign) {
				tgs = [];
				var _g12 = [];
				var _g2 = 0;
				while(_g2 < n) {
					var k = _g2++;
					_g12.push(k);
				}
				avl = _g12;
				i1 = 0;
				al = n;
				sign = false;
			} else return [];
		}
	}
	tgs.push(avl[0]);
	tgs.push(avl[1]);
	tgs.push(avl[2]);
	return tgs;
};
openfl._internal.renderer.opengl.utils.PolyK._PointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax | 0;
	var v0y = cy - ay | 0;
	var v1x = bx - ax | 0;
	var v1y = by - ay | 0;
	var v2x = px - ax | 0;
	var v2y = py - ay | 0;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	return u >= 0 && v >= 0 && u + v < 1;
};
openfl._internal.renderer.opengl.utils.PolyK._convex = function(ax,ay,bx,by,cx,cy,sign) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0 == sign;
};
openfl._internal.renderer.opengl.utils.GraphicType = $hxClasses["openfl._internal.renderer.opengl.utils.GraphicType"] = { __ename__ : true, __constructs__ : ["Polygon","Rectangle","Circle","Ellipse","DrawTriangles","DrawTiles"] };
openfl._internal.renderer.opengl.utils.GraphicType.Polygon = ["Polygon",0];
openfl._internal.renderer.opengl.utils.GraphicType.Polygon.toString = $estr;
openfl._internal.renderer.opengl.utils.GraphicType.Polygon.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType;
openfl._internal.renderer.opengl.utils.GraphicType.Rectangle = function(rounded) { var $x = ["Rectangle",1,rounded]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.GraphicType.Circle = ["Circle",2];
openfl._internal.renderer.opengl.utils.GraphicType.Circle.toString = $estr;
openfl._internal.renderer.opengl.utils.GraphicType.Circle.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType;
openfl._internal.renderer.opengl.utils.GraphicType.Ellipse = ["Ellipse",3];
openfl._internal.renderer.opengl.utils.GraphicType.Ellipse.toString = $estr;
openfl._internal.renderer.opengl.utils.GraphicType.Ellipse.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType;
openfl._internal.renderer.opengl.utils.GraphicType.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",4,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.GraphicType.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",5,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils._GraphicsRenderer = {};
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_"] = openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_;
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_.__name__ = ["openfl","_internal","renderer","opengl","utils","_GraphicsRenderer","RenderMode_Impl_"];
openfl._internal.renderer.opengl.utils.MaskManager = function(gl) {
	this.maskStack = [];
	this.maskPosition = 0;
	this.setContext(gl);
	this.reverse = false;
	this.count = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.MaskManager"] = openfl._internal.renderer.opengl.utils.MaskManager;
openfl._internal.renderer.opengl.utils.MaskManager.__name__ = ["openfl","_internal","renderer","opengl","utils","MaskManager"];
openfl._internal.renderer.opengl.utils.MaskManager.prototype = {
	destroy: function() {
		this.maskStack = null;
		this.gl = null;
	}
	,popMask: function(maskData,renderSession) {
		var gl = this.gl;
		renderSession.stencilManager.popStencil(maskData,maskData._webGL[openfl._internal.renderer.opengl.GLRenderer.glContextId].data[0],renderSession);
	}
	,pushMask: function(maskData,renderSession) {
		var gl = renderSession.gl;
		if(maskData.dirty) openfl._internal.renderer.opengl.utils.GraphicsRenderer.updateGraphics(maskData,gl);
		if(maskData._webGL[openfl._internal.renderer.opengl.GLRenderer.glContextId].data.length == 0) return;
		renderSession.stencilManager.pushStencil(maskData,maskData._webGL[openfl._internal.renderer.opengl.GLRenderer.glContextId].data[0],renderSession);
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,__class__: openfl._internal.renderer.opengl.utils.MaskManager
};
openfl._internal.renderer.opengl.utils.ShaderManager = function(gl) {
	this.maxAttibs = 10;
	this.attribState = [];
	this.tempAttribState = [];
	this.shaderMap = [];
	var _g1 = 0;
	var _g = this.maxAttibs;
	while(_g1 < _g) {
		var i = _g1++;
		this.attribState[i] = false;
	}
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.ShaderManager"] = openfl._internal.renderer.opengl.utils.ShaderManager;
openfl._internal.renderer.opengl.utils.ShaderManager.__name__ = ["openfl","_internal","renderer","opengl","utils","ShaderManager"];
openfl._internal.renderer.opengl.utils.ShaderManager.prototype = {
	destroy: function() {
		this.attribState = null;
		this.tempAttribState = null;
		this.primitiveShader.destroy();
		this.defaultShader.destroy();
		this.fastShader.destroy();
		this.stripShader.destroy();
		this.fillShader.destroy();
		this.patternFillShader.destroy();
		this.drawTrianglesShader.destroy();
		this.gl = null;
	}
	,setAttribs: function(attribs) {
		var _g1 = 0;
		var _g = this.tempAttribState.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.tempAttribState[i] = false;
		}
		var _g11 = 0;
		var _g2 = attribs.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var attribId = attribs[i1];
			this.tempAttribState[attribId] = true;
		}
		var gl = this.gl;
		var _g12 = 0;
		var _g3 = this.attribState.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			if(this.attribState[i2] != this.tempAttribState[i2]) {
				this.attribState[i2] = this.tempAttribState[i2];
				if(this.tempAttribState[i2]) gl.enableVertexAttribArray(i2); else gl.disableVertexAttribArray(i2);
			}
		}
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.primitiveShader = new openfl._internal.renderer.opengl.shaders.PrimitiveShader(gl);
		this.complexPrimitiveShader = new openfl._internal.renderer.opengl.shaders.ComplexPrimitiveShader(gl);
		this.defaultShader = new openfl._internal.renderer.opengl.shaders.DefaultShader(gl);
		this.fastShader = new openfl._internal.renderer.opengl.shaders.FastShader(gl);
		this.stripShader = new openfl._internal.renderer.opengl.shaders.StripShader(gl);
		this.fillShader = new openfl._internal.renderer.opengl.shaders.FillShader(gl);
		this.patternFillShader = new openfl._internal.renderer.opengl.shaders.PatternFillShader(gl);
		this.drawTrianglesShader = new openfl._internal.renderer.opengl.shaders.DrawTrianglesShader(gl);
		this.setShader(this.defaultShader);
	}
	,setShader: function(shader) {
		if(this._currentId == shader._UID) return false;
		this._currentId = shader._UID;
		this.currentShader = shader;
		this.gl.useProgram(shader.program);
		this.setAttribs(shader.attributes);
		return true;
	}
	,__class__: openfl._internal.renderer.opengl.utils.ShaderManager
};
openfl._internal.renderer.opengl.utils.SpriteBatch = function(gl) {
	this.states = [];
	this.vertSize = 6;
	this.size = Math.floor(Math.pow(2,16) / this.vertSize);
	var numVerts = this.size * 4 * this.vertSize;
	var numIndices = this.size * 6;
	this.vertices = new Float32Array(numVerts);
	this.indices = new Uint16Array(numIndices);
	this.lastIndexCount = 0;
	var i = 0;
	var j = 0;
	while(i < numIndices) {
		this.indices[i] = j;
		this.indices[i + 1] = j + 1;
		this.indices[i + 2] = j + 2;
		this.indices[i + 3] = j;
		this.indices[i + 4] = j + 2;
		this.indices[i + 5] = j + 3;
		i += 6;
		j += 4;
	}
	this.drawing = false;
	this.currentBatchSize = 0;
	this.currentBaseTexture = null;
	this.setContext(gl);
	this.dirty = true;
	this.currentState = new openfl._internal.renderer.opengl.utils._SpriteBatch.State();
};
$hxClasses["openfl._internal.renderer.opengl.utils.SpriteBatch"] = openfl._internal.renderer.opengl.utils.SpriteBatch;
openfl._internal.renderer.opengl.utils.SpriteBatch.__name__ = ["openfl","_internal","renderer","opengl","utils","SpriteBatch"];
openfl._internal.renderer.opengl.utils.SpriteBatch.prototype = {
	begin: function(renderSession) {
		this.renderSession = renderSession;
		this.shader = renderSession.shaderManager.defaultShader;
		this.drawing = true;
		this.start();
	}
	,destroy: function() {
		this.vertices = null;
		this.indices = null;
		this.gl.deleteBuffer(this.vertexBuffer);
		this.gl.deleteBuffer(this.indexBuffer);
		this.currentBaseTexture = null;
		this.gl = null;
	}
	,end: function() {
		this.flush();
		this.drawing = false;
	}
	,flush: function() {
		if(this.currentBatchSize == 0) return;
		var gl = this.gl;
		this.renderSession.shaderManager.setShader(this.renderSession.shaderManager.defaultShader);
		if(this.dirty) {
			this.dirty = false;
			gl.activeTexture(gl.TEXTURE0);
			gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
			var projection = this.renderSession.projection;
			gl.uniform2f(this.shader.projectionVector,projection.x,projection.y);
			var stride = this.vertSize * 4;
			gl.vertexAttribPointer(this.shader.aVertexPosition,2,gl.FLOAT,false,stride,0);
			gl.vertexAttribPointer(this.shader.aTextureCoord,2,gl.FLOAT,false,stride,8);
			gl.vertexAttribPointer(this.shader.colorAttribute,2,gl.FLOAT,false,stride,16);
		}
		if(this.currentBatchSize > this.size * 0.5) gl.bufferSubData(gl.ARRAY_BUFFER,0,this.vertices); else {
			var view = this.vertices.subarray(0,this.currentBatchSize * 4 * this.vertSize);
			gl.bufferSubData(gl.ARRAY_BUFFER,0,view);
		}
		var nextState;
		var batchSize = 0;
		var start = 0;
		this.currentState.texture = null;
		this.currentState.textureSmooth = true;
		this.currentState.blendMode = this.renderSession.blendModeManager.currentBlendMode;
		var j = this.currentBatchSize;
		var _g = 0;
		while(_g < j) {
			var i = _g++;
			nextState = this.states[i];
			if(this.currentState.texture != nextState.texture || this.currentState.blendMode != nextState.blendMode) {
				this.renderBatch(this.currentState,batchSize,start);
				start = i;
				batchSize = 0;
				this.currentState.texture = nextState.texture;
				this.currentState.textureSmooth = nextState.textureSmooth;
				this.currentState.blendMode = nextState.blendMode;
				this.renderSession.blendModeManager.setBlendMode(this.currentState.blendMode);
			}
			batchSize++;
		}
		this.renderBatch(this.currentState,batchSize,start);
		this.currentBatchSize = 0;
	}
	,render: function(sprite) {
		var bitmapData = sprite.bitmapData;
		var texture = bitmapData.getTexture(this.gl);
		if(bitmapData == null) return;
		if(this.currentBatchSize >= this.size) {
			this.flush();
			this.currentState.texture = texture;
		}
		var uvs = bitmapData.__uvData;
		if(uvs == null) return;
		var alpha = sprite.__worldAlpha;
		var tint = 16777215;
		var aX = 0;
		var aY = 0;
		var index = this.currentBatchSize * 4 * this.vertSize;
		this.fillVertices(index,aX,aY,bitmapData.width,bitmapData.height,tint,alpha,uvs,sprite.__worldTransform);
		this.setState(this.currentBatchSize,texture,null,sprite.blendMode);
		this.currentBatchSize++;
	}
	,renderCachedGraphics: function(object) {
		var cachedTexture = object.__graphics.__cachedTexture;
		if(cachedTexture == null) return;
		if(this.currentBatchSize >= this.size) {
			this.flush();
			this.currentBaseTexture = cachedTexture.texture;
		}
		var alpha = object.__worldAlpha;
		var tint = 16777215;
		var aX = 0;
		var aY = 0;
		var uvs = new openfl.display.TextureUvs();
		uvs.x0 = 0;
		uvs.y0 = 1;
		uvs.x1 = 1;
		uvs.y1 = 1;
		uvs.x2 = 1;
		uvs.y2 = 0;
		uvs.x3 = 0;
		uvs.y3 = 0;
		var index = this.currentBatchSize * 4 * this.vertSize;
		var worldTransform = object.__worldTransform.clone();
		worldTransform.__translateTransformed(new openfl.geom.Point(object.__graphics.__bounds.x,object.__graphics.__bounds.y));
		this.fillVertices(index,aX,aY,cachedTexture.width,cachedTexture.height,tint,alpha,uvs,worldTransform);
		this.setState(this.currentBatchSize,cachedTexture.texture,null,object.blendMode);
		this.currentBatchSize++;
	}
	,renderTiles: function(object,sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var texture = sheet.__bitmap.getTexture(this.gl);
		if(texture == null) return;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var blendMode;
		var _g = flags & 983040;
		switch(_g) {
		case 65536:
			blendMode = openfl.display.BlendMode.ADD;
			break;
		case 131072:
			blendMode = openfl.display.BlendMode.MULTIPLY;
			break;
		case 262144:
			blendMode = openfl.display.BlendMode.SCREEN;
			break;
		default:
			blendMode = openfl.display.BlendMode.NORMAL;
		}
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var scaleIndex = 0;
		var rotationIndex = 0;
		var rgbIndex = 0;
		var alphaIndex = 0;
		var transformIndex = 0;
		var numValues = 3;
		if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
		if(useScale) {
			scaleIndex = numValues;
			numValues++;
		}
		if(useRotation) {
			rotationIndex = numValues;
			numValues++;
		}
		if(useTransform) {
			transformIndex = numValues;
			numValues += 4;
		}
		if(useRGB) {
			rgbIndex = numValues;
			numValues += 3;
		}
		if(useAlpha) {
			alphaIndex = numValues;
			numValues++;
		}
		var totalCount = tileData.length;
		if(count >= 0 && totalCount > count) totalCount = count;
		var itemCount = totalCount / numValues | 0;
		var iIndex = 0;
		var tileID = -1;
		var rect = sheet.__rectTile;
		var tileUV = sheet.__rectUV;
		var center = sheet.__point;
		var x = 0.0;
		var y = 0.0;
		var alpha = 1.0;
		var tint = 16777215;
		var scale = 1.0;
		var rotation = 0.0;
		var cosTheta = 1.0;
		var sinTheta = 0.0;
		var a = 0.0;
		var b = 0.0;
		var c = 0.0;
		var d = 0.0;
		var tx = 0.0;
		var ty = 0.0;
		var ox = 0.0;
		var oy = 0.0;
		var matrix = new openfl.geom.Matrix();
		var oMatrix = object.__worldTransform;
		var uvs = new openfl.display.TextureUvs();
		var bIndex = 0;
		while(iIndex < totalCount) {
			if(this.currentBatchSize >= this.size) {
				this.flush();
				this.currentBaseTexture = texture;
			}
			x = tileData[iIndex];
			y = tileData[iIndex + 1];
			if(useRect) {
				tileID = -1;
				rect.x = tileData[iIndex + 2];
				rect.y = tileData[iIndex + 3];
				rect.width = tileData[iIndex + 4];
				rect.height = tileData[iIndex + 5];
				if(useOrigin) {
					center.x = tileData[iIndex + 6];
					center.y = tileData[iIndex + 7];
				} else {
					center.x = 0;
					center.y = 0;
				}
				tileUV.setTo(rect.get_left() / sheet.__bitmap.width,rect.get_top() / sheet.__bitmap.height,rect.get_right() / sheet.__bitmap.width,rect.get_bottom() / sheet.__bitmap.height);
			} else {
				tileID = (tileData[iIndex + 2] == null?0:tileData[iIndex + 2]) | 0;
				rect = sheet.__tileRects[tileID];
				center = sheet.__centerPoints[tileID];
				tileUV = sheet.__tileUVs[tileID];
			}
			if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
				alpha = 1;
				tint = 16777215;
				a = 1;
				b = 0;
				c = 0;
				d = 1;
				tx = 0;
				ty = 0;
				scale = 1.0;
				rotation = 0.0;
				cosTheta = 1.0;
				sinTheta = 0.0;
				matrix.identity();
				if(useAlpha) alpha = tileData[iIndex + alphaIndex];
				if(useRGB) tint = (tileData[iIndex + rgbIndex] * 255 | 0) << 16 | (tileData[iIndex + rgbIndex + 1] * 255 | 0) << 8 | (tileData[iIndex + rgbIndex + 2] * 255 | 0);
				if(useScale) scale = tileData[iIndex + scaleIndex];
				if(useRotation) {
					rotation = tileData[iIndex + rotationIndex];
					cosTheta = Math.cos(rotation);
					sinTheta = Math.sin(rotation);
				}
				if(useTransform) {
					a = tileData[iIndex + transformIndex];
					b = tileData[iIndex + transformIndex + 1];
					c = tileData[iIndex + transformIndex + 2];
					d = tileData[iIndex + transformIndex + 3];
				} else {
					a = scale * cosTheta;
					b = scale * sinTheta;
					c = -b;
					d = a;
				}
				ox = center.x * a + center.y * c;
				oy = center.x * b + center.y * d;
				tx = x - ox;
				ty = y - oy;
				matrix.a = a * oMatrix.a + b * oMatrix.c;
				matrix.b = a * oMatrix.b + b * oMatrix.d;
				matrix.c = c * oMatrix.a + d * oMatrix.c;
				matrix.d = c * oMatrix.b + d * oMatrix.d;
				matrix.tx = tx * oMatrix.a + ty * oMatrix.c;
				matrix.ty = tx * oMatrix.b + ty * oMatrix.d;
				uvs.x0 = tileUV.x;
				uvs.y0 = tileUV.y;
				uvs.x1 = tileUV.width;
				uvs.y1 = tileUV.y;
				uvs.x2 = tileUV.width;
				uvs.y2 = tileUV.height;
				uvs.x3 = tileUV.x;
				uvs.y3 = tileUV.height;
				bIndex = this.currentBatchSize * 4 * this.vertSize;
				this.fillVertices(bIndex,0,0,rect.width,rect.height,tint,alpha,uvs,matrix);
				this.setState(this.currentBatchSize,texture,smooth,blendMode);
				this.currentBatchSize++;
			}
			iIndex += numValues;
		}
	}
	,fillVertices: function(index,aX,aY,width,height,tint,alpha,uvs,matrix) {
		var w0;
		var w1;
		var h0;
		var h1;
		w0 = width * (1 - aX);
		w1 = width * -aX;
		h0 = height * (1 - aY);
		h1 = height * -aY;
		var a = matrix.a;
		var b = matrix.b;
		var c = matrix.c;
		var d = matrix.d;
		var tx = matrix.tx;
		var ty = matrix.ty;
		this.vertices[index++] = a * w1 + c * h1 + tx;
		this.vertices[index++] = d * h1 + b * w1 + ty;
		this.vertices[index++] = uvs.x0;
		this.vertices[index++] = uvs.y0;
		this.vertices[index++] = alpha;
		this.vertices[index++] = tint;
		this.vertices[index++] = a * w0 + c * h1 + tx;
		this.vertices[index++] = d * h1 + b * w0 + ty;
		this.vertices[index++] = uvs.x1;
		this.vertices[index++] = uvs.y1;
		this.vertices[index++] = alpha;
		this.vertices[index++] = tint;
		this.vertices[index++] = a * w0 + c * h0 + tx;
		this.vertices[index++] = d * h0 + b * w0 + ty;
		this.vertices[index++] = uvs.x2;
		this.vertices[index++] = uvs.y2;
		this.vertices[index++] = alpha;
		this.vertices[index++] = tint;
		this.vertices[index++] = a * w1 + c * h0 + tx;
		this.vertices[index++] = d * h0 + b * w1 + ty;
		this.vertices[index++] = uvs.x3;
		this.vertices[index++] = uvs.y3;
		this.vertices[index++] = alpha;
		this.vertices[index++] = tint;
	}
	,setState: function(index,texture,smooth,blendMode) {
		if(smooth == null) smooth = true;
		var state = this.states[this.currentBatchSize];
		if(state == null) state = this.states[this.currentBatchSize] = new openfl._internal.renderer.opengl.utils._SpriteBatch.State();
		state.texture = texture;
		state.textureSmooth = smooth;
		state.blendMode = blendMode;
	}
	,renderBatch: function(state,size,startIndex) {
		if(size == 0) return;
		this.gl.bindTexture(this.gl.TEXTURE_2D,state.texture);
		if(state.textureSmooth) {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
		} else {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
		}
		this.gl.drawElements(this.gl.TRIANGLES,size * 6,this.gl.UNSIGNED_SHORT,startIndex * 6 * 2);
		this.renderSession.drawCount++;
	}
	,renderTilingSprite: function(tilingSprite) {
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.vertexBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,this.indices,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.vertices,gl.DYNAMIC_DRAW);
		this.currentBlendMode = null;
	}
	,start: function() {
		this.dirty = true;
	}
	,stop: function() {
		this.flush();
	}
	,__class__: openfl._internal.renderer.opengl.utils.SpriteBatch
};
openfl._internal.renderer.opengl.utils._SpriteBatch = {};
openfl._internal.renderer.opengl.utils._SpriteBatch.State = function() {
	this.textureSmooth = true;
};
$hxClasses["openfl._internal.renderer.opengl.utils._SpriteBatch.State"] = openfl._internal.renderer.opengl.utils._SpriteBatch.State;
openfl._internal.renderer.opengl.utils._SpriteBatch.State.__name__ = ["openfl","_internal","renderer","opengl","utils","_SpriteBatch","State"];
openfl._internal.renderer.opengl.utils._SpriteBatch.State.prototype = {
	__class__: openfl._internal.renderer.opengl.utils._SpriteBatch.State
};
openfl._internal.renderer.opengl.utils.StencilManager = function(gl) {
	this.stencilStack = [];
	this.bucketStack = [];
	this.setContext(gl);
	this.reverse = true;
	this.count = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.StencilManager"] = openfl._internal.renderer.opengl.utils.StencilManager;
openfl._internal.renderer.opengl.utils.StencilManager.__name__ = ["openfl","_internal","renderer","opengl","utils","StencilManager"];
openfl._internal.renderer.opengl.utils.StencilManager.prototype = {
	prepareGraphics: function(bucketData,renderSession,projection,translationMatrix) {
		var offset = renderSession.offset;
		var shader = renderSession.shaderManager.fillShader;
		renderSession.shaderManager.setShader(shader);
		this.gl.uniformMatrix3fv(shader.translationMatrix,false,translationMatrix);
		this.gl.uniform2f(shader.projectionVector,projection.x,-projection.y);
		this.gl.uniform2f(shader.offsetVector,-offset.x,-offset.y);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,bucketData.vertsBuffer);
		this.gl.vertexAttribPointer(shader.aVertexPosition,2,this.gl.FLOAT,false,8,0);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,bucketData.indexBuffer);
	}
	,pushBucket: function(bucket,renderSession,projection,translationMatrix) {
		if(this.bucketStack.length == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.gl.stencilMask(255);
		}
		this.bucketStack.push(bucket);
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(this.gl.NEVER,1,255);
		this.gl.stencilOp(this.gl.INVERT,this.gl.KEEP,this.gl.KEEP);
		this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		var _g = 0;
		var _g1 = bucket.data;
		while(_g < _g1.length) {
			var bucketData = _g1[_g];
			++_g;
			if(bucketData.destroyed) continue;
			this.prepareGraphics(bucketData,renderSession,projection,translationMatrix);
			this.gl.drawElements(bucketData.drawMode,bucketData.glIndices.length,this.gl.UNSIGNED_SHORT,0);
		}
		this.gl.colorMask(true,true,true,true);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.stencilFunc(this.gl.EQUAL,255,255);
	}
	,popBucket: function(object,bucket,renderSession) {
		this.bucketStack.pop();
		if(this.bucketStack.length == 0) this.gl.disable(this.gl.STENCIL_TEST);
	}
	,bindGraphics: function(object,glData,renderSession) {
		var graphics = object.__graphics;
		var projection = renderSession.projection;
		var offset = renderSession.offset;
		if(glData.mode == 1) {
			var shader = renderSession.shaderManager.complexPrimitiveShader;
			renderSession.shaderManager.setShader(shader);
			this.gl.uniformMatrix3fv(shader.translationMatrix,false,object.__worldTransform.toArray(true));
			this.gl.uniform2f(shader.projectionVector,projection.x,-projection.y);
			this.gl.uniform2f(shader.offsetVector,-offset.x,-offset.y);
			this.gl.uniform3fv(shader.tintColor,new Float32Array([1.,1.,1.]));
			this.gl.uniform3fv(shader.color,new Float32Array(glData.tint));
			this.gl.uniform1f(shader.alpha,object.__worldAlpha * glData.alpha);
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER,glData.dataBuffer);
			this.gl.vertexAttribPointer(shader.aVertexPosition,2,this.gl.FLOAT,false,8,0);
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,glData.indexBuffer);
		} else {
			var shader1 = renderSession.shaderManager.primitiveShader;
			renderSession.shaderManager.setShader(shader1);
			this.gl.uniformMatrix3fv(shader1.translationMatrix,false,object.__worldTransform.toArray(true));
			this.gl.uniform2f(shader1.projectionVector,projection.x,-projection.y);
			this.gl.uniform2f(shader1.offsetVector,-offset.x,-offset.y);
			this.gl.uniform3fv(shader1.tintColor,new Float32Array([1.,1.,1.]));
			this.gl.uniform1f(shader1.alpha,object.__worldAlpha);
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER,glData.dataBuffer);
			this.gl.vertexAttribPointer(shader1.aVertexPosition,2,this.gl.FLOAT,false,24,0);
			this.gl.vertexAttribPointer(shader1.colorAttribute,4,this.gl.FLOAT,false,24,8);
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,glData.indexBuffer);
		}
	}
	,destroy: function() {
		this.stencilStack = null;
		this.bucketStack = null;
		this.gl = null;
	}
	,popStencil: function(object,glData,renderSession) {
		this.stencilStack.pop();
		this.count--;
		if(this.stencilStack.length == 0) this.gl.disable(this.gl.STENCIL_TEST); else {
			var level = this.count;
			this.bindGraphics(object,glData,renderSession);
			this.gl.colorMask(false,false,false,false);
			if(glData.mode == 1) {
				this.reverse = !this.reverse;
				if(this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
				this.gl.stencilFunc(this.gl.ALWAYS,0,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
				this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			} else {
				if(!this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			}
			this.gl.colorMask(true,true,true,true);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		}
	}
	,pushStencil: function(object,glData,renderSession) {
		this.bindGraphics(object,glData,renderSession);
		if(this.stencilStack.length == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.reverse = true;
			this.count = 0;
		}
		this.stencilStack.push(glData);
		var level = this.count;
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(this.gl.ALWAYS,0,255);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
		if(glData.mode == 1) {
			this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
			if(this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
			if(this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
			this.reverse = !this.reverse;
		} else {
			if(!this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
			if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
		}
		this.gl.colorMask(true,true,true,true);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.count++;
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,__class__: openfl._internal.renderer.opengl.utils.StencilManager
};
openfl.display.Application = function() {
	this.__mouseOutStack = [];
	lime.app.Application.call(this);
	openfl.Lib.application = this;
};
$hxClasses["openfl.display.Application"] = openfl.display.Application;
openfl.display.Application.__name__ = ["openfl","display","Application"];
openfl.display.Application.__super__ = lime.app.Application;
openfl.display.Application.prototype = $extend(lime.app.Application.prototype,{
	convertKeyCode: function(keyCode) {
		switch(keyCode) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 39:
			return 222;
		case 44:
			return 188;
		case 45:
			return 189;
		case 46:
			return 190;
		case 47:
			return 191;
		case 48:
			return 48;
		case 49:
			return 49;
		case 50:
			return 50;
		case 51:
			return 51;
		case 52:
			return 52;
		case 53:
			return 53;
		case 54:
			return 54;
		case 55:
			return 55;
		case 56:
			return 56;
		case 57:
			return 57;
		case 59:
			return 186;
		case 61:
			return 187;
		case 91:
			return 219;
		case 92:
			return 220;
		case 93:
			return 221;
		case 96:
			return 192;
		case 97:
			return 65;
		case 98:
			return 66;
		case 99:
			return 67;
		case 100:
			return 68;
		case 101:
			return 69;
		case 102:
			return 70;
		case 103:
			return 71;
		case 104:
			return 72;
		case 105:
			return 73;
		case 106:
			return 74;
		case 107:
			return 75;
		case 108:
			return 76;
		case 109:
			return 77;
		case 110:
			return 78;
		case 111:
			return 79;
		case 112:
			return 80;
		case 113:
			return 81;
		case 114:
			return 82;
		case 115:
			return 83;
		case 116:
			return 84;
		case 117:
			return 85;
		case 118:
			return 86;
		case 119:
			return 87;
		case 120:
			return 88;
		case 121:
			return 89;
		case 122:
			return 90;
		case 127:
			return 46;
		case 1073741881:
			return 20;
		case 1073741882:
			return 112;
		case 1073741883:
			return 113;
		case 1073741884:
			return 114;
		case 1073741885:
			return 115;
		case 1073741886:
			return 116;
		case 1073741887:
			return 117;
		case 1073741888:
			return 118;
		case 1073741889:
			return 119;
		case 1073741890:
			return 120;
		case 1073741891:
			return 121;
		case 1073741892:
			return 122;
		case 1073741893:
			return 123;
		case 1073741897:
			return 45;
		case 1073741898:
			return 36;
		case 1073741899:
			return 33;
		case 1073741901:
			return 35;
		case 1073741902:
			return 34;
		case 1073741903:
			return 39;
		case 1073741904:
			return 37;
		case 1073741905:
			return 40;
		case 1073741906:
			return 38;
		case 1073741908:
			return 111;
		case 1073741909:
			return 106;
		case 1073741910:
			return 109;
		case 1073741911:
			return 107;
		case 1073741912:
			return 108;
		case 1073741913:
			return 97;
		case 1073741914:
			return 98;
		case 1073741915:
			return 99;
		case 1073741916:
			return 100;
		case 1073741917:
			return 101;
		case 1073741918:
			return 102;
		case 1073741919:
			return 103;
		case 1073741920:
			return 104;
		case 1073741921:
			return 105;
		case 1073741922:
			return 96;
		case 1073741923:
			return 110;
		case 1073741928:
			return 124;
		case 1073741929:
			return 125;
		case 1073741930:
			return 126;
		case 1073742048:
			return 17;
		case 1073742049:
			return 16;
		case 1073742050:
			return 18;
		case 1073742052:
			return 17;
		case 1073742053:
			return 16;
		case 1073742054:
			return 18;
		default:
			return keyCode;
		}
	}
	,create: function(config) {
		lime.app.Application.prototype.create.call(this,config);
		this.stage = new openfl.display.Stage(this.windows[0].__width,this.windows[0].__height,config.background);
		this.stage.addChild(openfl.Lib.current);
		this.stage.align = openfl.display.StageAlign.TOP_LEFT;
		this.stage.scaleMode = openfl.display.StageScaleMode.NO_SCALE;
	}
	,onKey: function(event) {
		var stack = new Array();
		if(this.stage.__focus == null) this.stage.__getInteractive(stack); else this.stage.__focus.__getInteractive(stack);
		if(stack.length > 0) {
			stack.reverse();
			this.stage.__fireEvent(event,stack);
		}
	}
	,onKeyDown: function(keyCode,modifier) {
		var keyCode1 = this.convertKeyCode(keyCode);
		var charCode = keyCode1;
		this.onKey(new openfl.events.KeyboardEvent(openfl.events.KeyboardEvent.KEY_DOWN,true,false,charCode,keyCode1,null,lime.ui._KeyModifier.KeyModifier_Impl_.get_ctrlKey(modifier),lime.ui._KeyModifier.KeyModifier_Impl_.get_altKey(modifier),lime.ui._KeyModifier.KeyModifier_Impl_.get_shiftKey(modifier),lime.ui._KeyModifier.KeyModifier_Impl_.get_metaKey(modifier)));
	}
	,onKeyUp: function(keyCode,modifier) {
		var keyCode1 = this.convertKeyCode(keyCode);
		var charCode = keyCode1;
		this.onKey(new openfl.events.KeyboardEvent(openfl.events.KeyboardEvent.KEY_UP,true,false,charCode,keyCode1,null,lime.ui._KeyModifier.KeyModifier_Impl_.get_ctrlKey(modifier),lime.ui._KeyModifier.KeyModifier_Impl_.get_altKey(modifier),lime.ui._KeyModifier.KeyModifier_Impl_.get_shiftKey(modifier),lime.ui._KeyModifier.KeyModifier_Impl_.get_metaKey(modifier)));
	}
	,onMouse: function(type,x,y,button) {
		if(button > 2) return;
		this.stage.__mouseX = x;
		this.stage.__mouseY = y;
		var stack = [];
		var target = null;
		var targetPoint = new openfl.geom.Point(x,y);
		if(this.stage.__hitTest(x,y,false,stack,true)) target = stack[stack.length - 1]; else {
			target = this.stage;
			stack = [this.stage];
		}
		this.stage.__fireEvent(openfl.events.MouseEvent.__create(type,button,target == this.stage?targetPoint:target.globalToLocal(targetPoint),target),stack);
		var clickType;
		switch(type) {
		case openfl.events.MouseEvent.MOUSE_UP:
			clickType = openfl.events.MouseEvent.CLICK;
			break;
		case openfl.events.MouseEvent.MIDDLE_MOUSE_UP:
			clickType = openfl.events.MouseEvent.MIDDLE_CLICK;
			break;
		case openfl.events.MouseEvent.RIGHT_MOUSE_UP:
			clickType = openfl.events.MouseEvent.RIGHT_CLICK;
			break;
		default:
			clickType = null;
		}
		if(clickType != null) {
			this.stage.__fireEvent(openfl.events.MouseEvent.__create(clickType,button,target == this.stage?targetPoint:target.globalToLocal(targetPoint),target),stack);
			if(type == openfl.events.MouseEvent.MOUSE_UP && (js.Boot.__cast(target , openfl.display.InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl.Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.stage.__fireEvent(openfl.events.MouseEvent.__create(openfl.events.MouseEvent.DOUBLE_CLICK,button,target == this.stage?targetPoint:target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else this.__lastClickTime = currentTime;
			}
		}
		if(js.Boot.__instanceof(target,openfl.display.Sprite)) {
			var targetSprite = target;
			if(targetSprite.buttonMode && targetSprite.useHandCursor) lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.POINTER); else lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.ARROW);
		} else if(js.Boot.__instanceof(target,openfl.display.SimpleButton)) {
			var targetButton = target;
			if(targetButton.useHandCursor) lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.POINTER); else lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.ARROW);
		} else if(js.Boot.__instanceof(target,openfl.text.TextField)) {
			var targetTextField = target;
			if(targetTextField.type == openfl.text.TextFieldType.INPUT) lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.TEXT); else lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.ARROW);
		} else lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.ARROW);
		var _g = 0;
		var _g1 = this.__mouseOutStack;
		while(_g < _g1.length) {
			var target1 = _g1[_g];
			++_g;
			if(HxOverrides.indexOf(stack,target1,0) == -1) {
				HxOverrides.remove(this.__mouseOutStack,target1);
				var localPoint = target1.globalToLocal(targetPoint);
				target1.dispatchEvent(new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_OUT,false,false,localPoint.x,localPoint.y,target1));
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target2 = stack[_g2];
			++_g2;
			if(HxOverrides.indexOf(this.__mouseOutStack,target2,0) == -1) {
				if(target2.hasEventListener(openfl.events.MouseEvent.MOUSE_OVER)) {
					var localPoint1 = target2.globalToLocal(targetPoint);
					target2.dispatchEvent(new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_OVER,false,false,localPoint1.x,localPoint1.y,target2));
				}
				if(target2.hasEventListener(openfl.events.MouseEvent.MOUSE_OUT)) this.__mouseOutStack.push(target2);
			}
		}
		if(this.stage.__dragObject != null) this.stage.__drag(targetPoint);
	}
	,onMouseDown: function(x,y,button) {
		var type;
		switch(button) {
		case 1:
			type = openfl.events.MouseEvent.MIDDLE_MOUSE_DOWN;
			break;
		case 2:
			type = openfl.events.MouseEvent.RIGHT_MOUSE_DOWN;
			break;
		default:
			type = openfl.events.MouseEvent.MOUSE_DOWN;
		}
		this.onMouse(type,x,y,button);
	}
	,onMouseMove: function(x,y,button) {
		this.onMouse(openfl.events.MouseEvent.MOUSE_MOVE,x,y,0);
	}
	,onMouseUp: function(x,y,button) {
		var type;
		switch(button) {
		case 1:
			type = openfl.events.MouseEvent.MIDDLE_MOUSE_UP;
			break;
		case 2:
			type = openfl.events.MouseEvent.RIGHT_MOUSE_UP;
			break;
		default:
			type = openfl.events.MouseEvent.MOUSE_UP;
		}
		this.onMouse(type,x,y,button);
	}
	,onTouch: function(type,x,y,id) {
		var point = new openfl.geom.Point(x,y);
		this.stage.__mouseX = point.x;
		this.stage.__mouseY = point.y;
		var __stack = [];
		var mouseType;
		switch(type) {
		case "touchBegin":
			mouseType = openfl.events.MouseEvent.MOUSE_DOWN;
			break;
		case "touchMove":
			mouseType = openfl.events.MouseEvent.MOUSE_MOVE;
			break;
		case "touchEnd":
			mouseType = openfl.events.MouseEvent.MOUSE_UP;
			break;
		default:
			mouseType = null;
		}
		if(this.stage.__hitTest(x,y,false,__stack,true)) {
			var target = __stack[__stack.length - 1];
			var localPoint = target.globalToLocal(point);
			var touchEvent = openfl.events.TouchEvent.__create(type,null,localPoint,target);
			touchEvent.touchPointID = id;
			touchEvent.isPrimaryTouchPoint = true;
			var mouseEvent = openfl.events.MouseEvent.__create(mouseType,0,localPoint,target);
			mouseEvent.buttonDown = type != "touchEnd";
			this.stage.__fireEvent(touchEvent,__stack);
			this.stage.__fireEvent(mouseEvent,__stack);
		} else {
			var touchEvent1 = openfl.events.TouchEvent.__create(type,null,point,this.stage);
			touchEvent1.touchPointID = id;
			touchEvent1.isPrimaryTouchPoint = true;
			var mouseEvent1 = openfl.events.MouseEvent.__create(mouseType,0,point,this.stage);
			mouseEvent1.buttonDown = type != "touchEnd";
			this.stage.__fireEvent(touchEvent1,[this.stage]);
			this.stage.__fireEvent(mouseEvent1,[this.stage]);
		}
		if(type == "touchMove" && this.stage.__dragObject != null) this.stage.__drag(point);
	}
	,onTouchMove: function(x,y,id) {
		this.onTouch("touchMove",x,y,id);
	}
	,onTouchEnd: function(x,y,id) {
		this.onTouch("touchEnd",x,y,id);
	}
	,onTouchStart: function(x,y,id) {
		this.onTouch("touchBegin",x,y,id);
	}
	,onWindowActivate: function() {
		var event = new openfl.events.Event(openfl.events.Event.ACTIVATE);
		this.stage.__broadcast(event,true);
	}
	,onWindowDeactivate: function() {
		var event = new openfl.events.Event(openfl.events.Event.DEACTIVATE);
		this.stage.__broadcast(event,true);
	}
	,onWindowResize: function(width,height) {
		this.stage.stageWidth = width;
		this.stage.stageHeight = height;
		var event = new openfl.events.Event(openfl.events.Event.RESIZE);
		this.stage.__broadcast(event,false);
	}
	,render: function(context) {
		this.stage.__render(context);
	}
	,__class__: openfl.display.Application
});
openfl.display.Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) smoothing = false;
	openfl.display.DisplayObjectContainer.call(this);
	this.bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) this.pixelSnapping = openfl.display.PixelSnapping.AUTO;
};
$hxClasses["openfl.display.Bitmap"] = openfl.display.Bitmap;
openfl.display.Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl.display.Bitmap.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.Bitmap.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = new openfl.geom.Rectangle(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds = bounds.transform(this.__worldTransform);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || this.bitmapData == null) return false;
		var point = this.globalToLocal(new openfl.geom.Point(x,y));
		if(point.x > 0 && point.y > 0 && point.x <= this.bitmapData.width && point.y <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) stack.push(this);
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		openfl._internal.renderer.canvas.CanvasBitmap.render(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			if(this.bitmapData.__image.buffer.__srcImage != null) openfl._internal.renderer.dom.DOMBitmap.renderImage(this,renderSession); else openfl._internal.renderer.dom.DOMBitmap.renderCanvas(this,renderSession);
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		openfl._internal.renderer.opengl.GLBitmap.render(this,renderSession);
	}
	,__renderMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,get_height: function() {
		if(this.bitmapData != null) return this.bitmapData.height * this.get_scaleY();
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl.display.DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleY(value / this.bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) return this.bitmapData.width * this.get_scaleX();
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl.display.DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleX(value / this.bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl.display.Bitmap
});
openfl.display.TextureUvs = function() {
	this.y3 = 0;
	this.y2 = 0;
	this.y1 = 0;
	this.y0 = 0;
	this.x3 = 0;
	this.x2 = 0;
	this.x1 = 0;
	this.x0 = 0;
};
$hxClasses["openfl.display.TextureUvs"] = openfl.display.TextureUvs;
openfl.display.TextureUvs.__name__ = ["openfl","display","TextureUvs"];
openfl.display.TextureUvs.prototype = {
	__class__: openfl.display.TextureUvs
};
openfl.display.BitmapDataChannel = function() { };
$hxClasses["openfl.display.BitmapDataChannel"] = openfl.display.BitmapDataChannel;
openfl.display.BitmapDataChannel.__name__ = ["openfl","display","BitmapDataChannel"];
openfl.display.BlendMode = $hxClasses["openfl.display.BlendMode"] = { __ename__ : true, __constructs__ : ["ADD","ALPHA","DARKEN","DIFFERENCE","ERASE","HARDLIGHT","INVERT","LAYER","LIGHTEN","MULTIPLY","NORMAL","OVERLAY","SCREEN","SUBTRACT"] };
openfl.display.BlendMode.ADD = ["ADD",0];
openfl.display.BlendMode.ADD.toString = $estr;
openfl.display.BlendMode.ADD.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.ALPHA = ["ALPHA",1];
openfl.display.BlendMode.ALPHA.toString = $estr;
openfl.display.BlendMode.ALPHA.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.DARKEN = ["DARKEN",2];
openfl.display.BlendMode.DARKEN.toString = $estr;
openfl.display.BlendMode.DARKEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.DIFFERENCE = ["DIFFERENCE",3];
openfl.display.BlendMode.DIFFERENCE.toString = $estr;
openfl.display.BlendMode.DIFFERENCE.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.ERASE = ["ERASE",4];
openfl.display.BlendMode.ERASE.toString = $estr;
openfl.display.BlendMode.ERASE.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.HARDLIGHT = ["HARDLIGHT",5];
openfl.display.BlendMode.HARDLIGHT.toString = $estr;
openfl.display.BlendMode.HARDLIGHT.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.INVERT = ["INVERT",6];
openfl.display.BlendMode.INVERT.toString = $estr;
openfl.display.BlendMode.INVERT.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.LAYER = ["LAYER",7];
openfl.display.BlendMode.LAYER.toString = $estr;
openfl.display.BlendMode.LAYER.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.LIGHTEN = ["LIGHTEN",8];
openfl.display.BlendMode.LIGHTEN.toString = $estr;
openfl.display.BlendMode.LIGHTEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.MULTIPLY = ["MULTIPLY",9];
openfl.display.BlendMode.MULTIPLY.toString = $estr;
openfl.display.BlendMode.MULTIPLY.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.NORMAL = ["NORMAL",10];
openfl.display.BlendMode.NORMAL.toString = $estr;
openfl.display.BlendMode.NORMAL.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.OVERLAY = ["OVERLAY",11];
openfl.display.BlendMode.OVERLAY.toString = $estr;
openfl.display.BlendMode.OVERLAY.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.SCREEN = ["SCREEN",12];
openfl.display.BlendMode.SCREEN.toString = $estr;
openfl.display.BlendMode.SCREEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.SUBTRACT = ["SUBTRACT",13];
openfl.display.BlendMode.SUBTRACT.toString = $estr;
openfl.display.BlendMode.SUBTRACT.__enum__ = openfl.display.BlendMode;
openfl.display.CapsStyle = $hxClasses["openfl.display.CapsStyle"] = { __ename__ : true, __constructs__ : ["NONE","ROUND","SQUARE"] };
openfl.display.CapsStyle.NONE = ["NONE",0];
openfl.display.CapsStyle.NONE.toString = $estr;
openfl.display.CapsStyle.NONE.__enum__ = openfl.display.CapsStyle;
openfl.display.CapsStyle.ROUND = ["ROUND",1];
openfl.display.CapsStyle.ROUND.toString = $estr;
openfl.display.CapsStyle.ROUND.__enum__ = openfl.display.CapsStyle;
openfl.display.CapsStyle.SQUARE = ["SQUARE",2];
openfl.display.CapsStyle.SQUARE.toString = $estr;
openfl.display.CapsStyle.SQUARE.__enum__ = openfl.display.CapsStyle;
openfl.display.DirectRenderer = function(type) {
	if(type == null) type = "DirectRenderer";
	openfl.display.DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl.display.DirectRenderer;
openfl.display.DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl.display.DirectRenderer.__super__ = openfl.display.DisplayObject;
openfl.display.DirectRenderer.prototype = $extend(openfl.display.DisplayObject.prototype,{
	get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl.display.DirectRenderer
	,__properties__: $extend(openfl.display.DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
openfl.display.FPS = function(x,y,color) {
	if(color == null) color = 0;
	if(y == null) y = 10;
	if(x == null) x = 10;
	openfl.text.TextField.call(this);
	this.set_x(x);
	this.set_y(y);
	this.currentFPS = 0;
	this.selectable = false;
	this.mouseEnabled = false;
	this.set_defaultTextFormat(new openfl.text.TextFormat("_sans",12,color));
	this.set_text("FPS: ");
	this.cacheCount = 0;
	this.times = [];
	this.addEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.this_onEnterFrame));
};
$hxClasses["openfl.display.FPS"] = openfl.display.FPS;
openfl.display.FPS.__name__ = ["openfl","display","FPS"];
openfl.display.FPS.__super__ = openfl.text.TextField;
openfl.display.FPS.prototype = $extend(openfl.text.TextField.prototype,{
	this_onEnterFrame: function(event) {
		var currentTime = haxe.Timer.stamp();
		this.times.push(currentTime);
		while(this.times[0] < currentTime - 1) this.times.shift();
		var currentCount = this.times.length;
		this.currentFPS = Math.round((currentCount + this.cacheCount) / 2);
		if(currentCount != this.cacheCount) this.set_text("FPS: " + this.currentFPS);
		this.cacheCount = currentCount;
	}
	,__class__: openfl.display.FPS
});
openfl.display.FrameLabel = function(name,frame) {
	openfl.events.EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl.display.FrameLabel;
openfl.display.FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl.display.FrameLabel.__super__ = openfl.events.EventDispatcher;
openfl.display.FrameLabel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl.display.FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
openfl.display.GradientType = $hxClasses["openfl.display.GradientType"] = { __ename__ : true, __constructs__ : ["RADIAL","LINEAR"] };
openfl.display.GradientType.RADIAL = ["RADIAL",0];
openfl.display.GradientType.RADIAL.toString = $estr;
openfl.display.GradientType.RADIAL.__enum__ = openfl.display.GradientType;
openfl.display.GradientType.LINEAR = ["LINEAR",1];
openfl.display.GradientType.LINEAR.toString = $estr;
openfl.display.GradientType.LINEAR.__enum__ = openfl.display.GradientType;
openfl.display.Graphics = function() {
	this.__visible = true;
	this.__glStack = [];
	this.__dirty = true;
	this.__commands = [];
	this.__commands = new Array();
	this.__halfStrokeWidth = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__hardware = true;
	this.moveTo(0,0);
	this.renderX = 0;
	this.renderY = 0;
	this.renderWidth = 0;
	this.renderHeight = 0;
};
$hxClasses["openfl.display.Graphics"] = openfl.display.Graphics;
openfl.display.Graphics.__name__ = ["openfl","display","Graphics"];
openfl.display.Graphics.prototype = {
	beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.push(openfl.display.DrawCommand.BeginBitmapFill(bitmap,matrix != null?new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty):null,repeat,smooth));
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		this.__commands.push(openfl.display.DrawCommand.BeginFill(color & 16777215,alpha));
		if(alpha > 0) this.__visible = true;
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.__commands.push(openfl.display.DrawCommand.BeginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio));
		this.__hardware = false;
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands = new Array();
		this.__halfStrokeWidth = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.__hardware = true;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds.clone();
		this.__commands = sourceGraphics.__commands.slice();
		this.set___dirty(true);
		this.__halfStrokeWidth = sourceGraphics.__halfStrokeWidth;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		var ix1;
		var iy1;
		var ix2;
		var iy2;
		ix1 = anchorX;
		ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			if(t2 > 0 && t2 < 1) ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
		}
		iy1 = anchorY;
		iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v1 = controlY1 - this.__positionX;
			var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			if(t11 > 0 && t11 < 1) iy1 = this.__calculateBezierCubicPoint(t11,this.__positionX,controlY1,controlY2,anchorY);
			if(t21 > 0 && t21 < 1) iy2 = this.__calculateBezierCubicPoint(t21,this.__positionX,controlY1,controlY2,anchorY);
		}
		this.__inflateBounds(ix1 - this.__halfStrokeWidth,iy1 - this.__halfStrokeWidth);
		this.__inflateBounds(ix1 + this.__halfStrokeWidth,iy1 + this.__halfStrokeWidth);
		this.__inflateBounds(ix2 - this.__halfStrokeWidth,iy2 - this.__halfStrokeWidth);
		this.__inflateBounds(ix2 + this.__halfStrokeWidth,iy2 + this.__halfStrokeWidth);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.push(openfl.display.DrawCommand.CubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) ix = anchorX; else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) iy = anchorY; else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__halfStrokeWidth,iy - this.__halfStrokeWidth);
		this.__inflateBounds(ix + this.__halfStrokeWidth,iy + this.__halfStrokeWidth);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.push(openfl.display.DrawCommand.CurveTo(controlX,controlY,anchorX,anchorY));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) return;
		this.__inflateBounds(x - radius - this.__halfStrokeWidth,y - radius - this.__halfStrokeWidth);
		this.__inflateBounds(x + radius + this.__halfStrokeWidth,y + radius + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawCircle(x,y,radius));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawEllipse(x,y,width,height));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		openfl.Lib.notImplemented("Graphics.drawGraphicsData");
	}
	,drawPath: function(commands,data,winding) {
		var dataIndex = 0;
		var _g = 0;
		while(_g < commands.length) {
			var command = commands.data[_g];
			++_g;
			switch(command) {
			case 1:
				this.moveTo(data.data[dataIndex],data.data[dataIndex + 1]);
				dataIndex += 2;
				break;
			case 2:
				this.lineTo(data.data[dataIndex],data.data[dataIndex + 1]);
				dataIndex += 2;
				break;
			case 3:
				this.curveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3]);
				dataIndex += 4;
				break;
			case 6:
				this.cubicCurveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3],data.data[dataIndex + 4],data.data[dataIndex + 5]);
				dataIndex += 6;
				break;
			default:
			}
		}
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawRect(x,y,width,height));
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,rx,ry) {
		if(ry == null) ry = -1;
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawRoundRect(x,y,width,height,rx,ry));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		openfl.Lib.notImplemented("Graphics.drawRoundRectComplex");
	}
	,drawTiles: function(sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		this.__inflateBounds(this.renderX,this.renderY);
		this.__inflateBounds(this.renderWidth,this.renderHeight);
		this.__commands.push(openfl.display.DrawCommand.DrawTiles(sheet,tileData,smooth,flags,count));
		this.set___dirty(true);
		this.__visible = true;
	}
	,drawTriangles: function(vertices,indices,uvtData,culling,colors,blendMode) {
		if(blendMode == null) blendMode = 0;
		var vlen = vertices.length / 2 | 0;
		if(culling == null) culling = openfl.display.TriangleCulling.NONE;
		if(indices == null) {
			if(vlen % 3 != 0) throw new openfl.errors.ArgumentError("Not enough vertices to close a triangle.");
			var this1;
			this1 = new openfl.VectorData();
			var this2;
			this2 = new Array(0);
			this1.data = this2;
			this1.length = 0;
			this1.fixed = false;
			indices = this1;
			var _g = 0;
			while(_g < vlen) {
				var i = _g++;
				if(!indices.fixed) {
					indices.length++;
					if(indices.data.length < indices.length) {
						var data;
						var this3;
						this3 = new Array(indices.data.length + 10);
						data = this3;
						haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data,0,indices.data.length);
						indices.data = data;
					}
					indices.data[indices.length - 1] = i;
				}
				indices.length;
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = Math.NEGATIVE_INFINITY;
		var tmpy = Math.NEGATIVE_INFINITY;
		var maxX = Math.NEGATIVE_INFINITY;
		var maxY = Math.NEGATIVE_INFINITY;
		var _g1 = 0;
		while(_g1 < vlen) {
			var i1 = _g1++;
			tmpx = vertices.data[i1 * 2];
			tmpy = vertices.data[i1 * 2 + 1];
			if(maxX < tmpx) maxX = tmpx;
			if(maxY < tmpy) maxY = tmpy;
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.push(openfl.display.DrawCommand.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode));
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.push(openfl.display.DrawCommand.EndFill);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.push(openfl.display.DrawCommand.LineBitmapStyle(bitmap,matrix != null?new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty):null,repeat,smooth));
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.__commands.push(openfl.display.DrawCommand.LineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio));
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(thickness > this.__halfStrokeWidth) this.__halfStrokeWidth = thickness / 2; else this.__halfStrokeWidth = this.__halfStrokeWidth;
		this.__commands.push(openfl.display.DrawCommand.LineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit));
		if(thickness != null) this.__visible = true;
	}
	,lineTo: function(x,y) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.LineTo(x,y));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.push(openfl.display.DrawCommand.MoveTo(x,y));
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) return;
		var bounds = this.__bounds.transform(matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) return false;
		var bounds = this.__bounds.transform(matrix);
		return x > bounds.x && y > bounds.y && x <= bounds.get_right() && y <= bounds.get_bottom();
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl.geom.Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
		if(y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) this.__owner.__setRenderDirty();
		return this.__dirty = value;
	}
	,__class__: openfl.display.Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
openfl.display.DrawCommand = $hxClasses["openfl.display.DrawCommand"] = { __ename__ : true, __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CubicCurveTo","CurveTo","DrawCircle","DrawEllipse","DrawRect","DrawRoundRect","DrawTiles","DrawTriangles","EndFill","LineStyle","LineBitmapStyle","LineGradientStyle","LineTo","MoveTo","DrawPathC","OverrideMatrix"] };
openfl.display.DrawCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.BeginGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.CubicCurveTo = function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) { var $x = ["CubicCurveTo",3,controlX1,controlY1,controlX2,controlY2,anchorX,anchorY]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",4,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawCircle = function(x,y,radius) { var $x = ["DrawCircle",5,x,y,radius]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawEllipse = function(x,y,width,height) { var $x = ["DrawEllipse",6,x,y,width,height]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawRect = function(x,y,width,height) { var $x = ["DrawRect",7,x,y,width,height]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawRoundRect = function(x,y,width,height,rx,ry) { var $x = ["DrawRoundRect",8,x,y,width,height,rx,ry]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",9,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",10,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.EndFill = ["EndFill",11];
openfl.display.DrawCommand.EndFill.toString = $estr;
openfl.display.DrawCommand.EndFill.__enum__ = openfl.display.DrawCommand;
openfl.display.DrawCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",12,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.LineBitmapStyle = function(bitmap,matrix,repeat,smooth) { var $x = ["LineBitmapStyle",13,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.LineGradientStyle = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["LineGradientStyle",14,type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.LineTo = function(x,y) { var $x = ["LineTo",15,x,y]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.MoveTo = function(x,y) { var $x = ["MoveTo",16,x,y]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawPathC = function(commands,data,winding) { var $x = ["DrawPathC",17,commands,data,winding]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",18,matrix]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.GraphicsPathCommand = function() { };
$hxClasses["openfl.display.GraphicsPathCommand"] = openfl.display.GraphicsPathCommand;
openfl.display.GraphicsPathCommand.__name__ = ["openfl","display","GraphicsPathCommand"];
openfl.display.GraphicsPathWinding = $hxClasses["openfl.display.GraphicsPathWinding"] = { __ename__ : true, __constructs__ : ["EVEN_ODD","NON_ZERO"] };
openfl.display.GraphicsPathWinding.EVEN_ODD = ["EVEN_ODD",0];
openfl.display.GraphicsPathWinding.EVEN_ODD.toString = $estr;
openfl.display.GraphicsPathWinding.EVEN_ODD.__enum__ = openfl.display.GraphicsPathWinding;
openfl.display.GraphicsPathWinding.NON_ZERO = ["NON_ZERO",1];
openfl.display.GraphicsPathWinding.NON_ZERO.toString = $estr;
openfl.display.GraphicsPathWinding.NON_ZERO.__enum__ = openfl.display.GraphicsPathWinding;
openfl.display.IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl.display.IGraphicsData;
openfl.display.IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl.display.IGraphicsData.prototype = {
	__class__: openfl.display.IGraphicsData
};
openfl.display.GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : true, __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END"] };
openfl.display.GraphicsDataType.STROKE = ["STROKE",0];
openfl.display.GraphicsDataType.STROKE.toString = $estr;
openfl.display.GraphicsDataType.STROKE.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.SOLID = ["SOLID",1];
openfl.display.GraphicsDataType.SOLID.toString = $estr;
openfl.display.GraphicsDataType.SOLID.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl.display.GraphicsDataType.GRADIENT.toString = $estr;
openfl.display.GraphicsDataType.GRADIENT.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.PATH = ["PATH",3];
openfl.display.GraphicsDataType.PATH.toString = $estr;
openfl.display.GraphicsDataType.PATH.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.BITMAP = ["BITMAP",4];
openfl.display.GraphicsDataType.BITMAP.toString = $estr;
openfl.display.GraphicsDataType.BITMAP.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.END = ["END",5];
openfl.display.GraphicsDataType.END.toString = $estr;
openfl.display.GraphicsDataType.END.__enum__ = openfl.display.GraphicsDataType;
openfl.display.InterpolationMethod = $hxClasses["openfl.display.InterpolationMethod"] = { __ename__ : true, __constructs__ : ["RGB","LINEAR_RGB"] };
openfl.display.InterpolationMethod.RGB = ["RGB",0];
openfl.display.InterpolationMethod.RGB.toString = $estr;
openfl.display.InterpolationMethod.RGB.__enum__ = openfl.display.InterpolationMethod;
openfl.display.InterpolationMethod.LINEAR_RGB = ["LINEAR_RGB",1];
openfl.display.InterpolationMethod.LINEAR_RGB.toString = $estr;
openfl.display.InterpolationMethod.LINEAR_RGB.__enum__ = openfl.display.InterpolationMethod;
openfl.display.JPEGEncoderOptions = function(quality) {
	if(quality == null) quality = 80;
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl.display.JPEGEncoderOptions;
openfl.display.JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl.display.JPEGEncoderOptions.prototype = {
	__class__: openfl.display.JPEGEncoderOptions
};
openfl.display.JointStyle = $hxClasses["openfl.display.JointStyle"] = { __ename__ : true, __constructs__ : ["MITER","ROUND","BEVEL"] };
openfl.display.JointStyle.MITER = ["MITER",0];
openfl.display.JointStyle.MITER.toString = $estr;
openfl.display.JointStyle.MITER.__enum__ = openfl.display.JointStyle;
openfl.display.JointStyle.ROUND = ["ROUND",1];
openfl.display.JointStyle.ROUND.toString = $estr;
openfl.display.JointStyle.ROUND.__enum__ = openfl.display.JointStyle;
openfl.display.JointStyle.BEVEL = ["BEVEL",2];
openfl.display.JointStyle.BEVEL.toString = $estr;
openfl.display.JointStyle.BEVEL.__enum__ = openfl.display.JointStyle;
openfl.display.LineScaleMode = $hxClasses["openfl.display.LineScaleMode"] = { __ename__ : true, __constructs__ : ["HORIZONTAL","NONE","NORMAL","VERTICAL"] };
openfl.display.LineScaleMode.HORIZONTAL = ["HORIZONTAL",0];
openfl.display.LineScaleMode.HORIZONTAL.toString = $estr;
openfl.display.LineScaleMode.HORIZONTAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.NONE = ["NONE",1];
openfl.display.LineScaleMode.NONE.toString = $estr;
openfl.display.LineScaleMode.NONE.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.NORMAL = ["NORMAL",2];
openfl.display.LineScaleMode.NORMAL.toString = $estr;
openfl.display.LineScaleMode.NORMAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.VERTICAL = ["VERTICAL",3];
openfl.display.LineScaleMode.VERTICAL.toString = $estr;
openfl.display.LineScaleMode.VERTICAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.Loader = function() {
	openfl.display.Sprite.call(this);
	this.contentLoaderInfo = openfl.display.LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl.display.Loader;
openfl.display.Loader.__name__ = ["openfl","display","Loader"];
openfl.display.Loader.__super__ = openfl.display.Sprite;
openfl.display.Loader.prototype = $extend(openfl.display.Sprite.prototype,{
	close: function() {
		openfl.Lib.notImplemented("Loader.close");
	}
	,load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
		if(extension.indexOf("?") != -1) extension = extension.split("?")[0];
		var transparent = true;
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null && request.contentType != "") switch(extension) {
		case "swf":
			this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
			break;
		case "jpg":case "jpeg":
			transparent = false;
			this.contentLoaderInfo.contentType = "image/jpeg";
			break;
		case "png":
			this.contentLoaderInfo.contentType = "image/png";
			break;
		case "gif":
			this.contentLoaderInfo.contentType = "image/gif";
			break;
		default:
			this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
		} else this.contentLoaderInfo.contentType = request.contentType;
		openfl.display.BitmapData.fromFile(request.url,$bind(this,this.BitmapData_onLoad),$bind(this,this.BitmapData_onError));
	}
	,loadBytes: function(buffer) {
		openfl.display.BitmapData.fromBytes(buffer,null,$bind(this,this.BitmapData_onLoad));
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl.events.Event(openfl.events.Event.UNLOAD);
			event.currentTarget = this;
			this.dispatchEvent(event);
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) gc = true;
		openfl.Lib.notImplemented("Loader.unloadAndStop");
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl.display.Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.contentLoaderInfo.content);
		var event = new openfl.events.Event(openfl.events.Event.COMPLETE);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function() {
		var event = new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl.display.Loader
});
openfl.display.OpenGLView = function() {
	openfl.display.DirectRenderer.call(this,"OpenGLView");
	if(!this.__added) {
		this.__added = true;
		null;
	}
};
$hxClasses["openfl.display.OpenGLView"] = openfl.display.OpenGLView;
openfl.display.OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl.display.OpenGLView.__properties__ = {get_isSupported:"get_isSupported"}
openfl.display.OpenGLView.isSupported = null;
openfl.display.OpenGLView.get_isSupported = function() {
	if(!window.WebGLRenderingContext) return false;
	if(lime.graphics.opengl.GL.context != null) return true; else {
		var canvas = window.document.createElement("canvas");
		var context = canvas.getContext("webgl");
		if(context == null) context = canvas.getContext("experimental-webgl");
		return context != null;
	}
	return true;
};
openfl.display.OpenGLView.__super__ = openfl.display.DirectRenderer;
openfl.display.OpenGLView.prototype = $extend(openfl.display.DirectRenderer.prototype,{
	__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl._internal.renderer.dom.DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.get_scrollRect() == null) rect = new openfl.geom.Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl.geom.Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
				if(this.__render != null) this.__render(rect);
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.get_scrollRect() == null) rect = new openfl.geom.Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl.geom.Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
			if(this.__render != null) this.__render(rect);
		}
	}
	,__class__: openfl.display.OpenGLView
});
openfl.display.PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) fastCompression = false;
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl.display.PNGEncoderOptions;
openfl.display.PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl.display.PNGEncoderOptions.prototype = {
	__class__: openfl.display.PNGEncoderOptions
};
openfl.display.PixelSnapping = $hxClasses["openfl.display.PixelSnapping"] = { __ename__ : true, __constructs__ : ["NEVER","AUTO","ALWAYS"] };
openfl.display.PixelSnapping.NEVER = ["NEVER",0];
openfl.display.PixelSnapping.NEVER.toString = $estr;
openfl.display.PixelSnapping.NEVER.__enum__ = openfl.display.PixelSnapping;
openfl.display.PixelSnapping.AUTO = ["AUTO",1];
openfl.display.PixelSnapping.AUTO.toString = $estr;
openfl.display.PixelSnapping.AUTO.__enum__ = openfl.display.PixelSnapping;
openfl.display.PixelSnapping.ALWAYS = ["ALWAYS",2];
openfl.display.PixelSnapping.ALWAYS.toString = $estr;
openfl.display.PixelSnapping.ALWAYS.__enum__ = openfl.display.PixelSnapping;
openfl.display.Preloader = function(display) {
	lime.app.Preloader.call(this);
	if(display != null) {
		this.display = display;
		openfl.Lib.current.addChild(display);
		if(js.Boot.__instanceof(display,NMEPreloader)) (js.Boot.__cast(display , NMEPreloader)).onInit();
	}
};
$hxClasses["openfl.display.Preloader"] = openfl.display.Preloader;
openfl.display.Preloader.__name__ = ["openfl","display","Preloader"];
openfl.display.Preloader.__super__ = lime.app.Preloader;
openfl.display.Preloader.prototype = $extend(lime.app.Preloader.prototype,{
	needLoad: function(value) {
		return (js.Boot.__cast(this.display , NMEPreloader)).needLoad(value);
	}
	,load: function(urls,types) {
		var sounds = [];
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "MUSIC":case "SOUND":
				var sound = haxe.io.Path.withoutExtension(url);
				if(!HxOverrides.remove(sounds,sound)) this.total++;
				sounds.push(sound);
				break;
			default:
			}
		}
		var _g3 = 0;
		while(_g3 < sounds.length) {
			var soundName = sounds[_g3];
			++_g3;
			var sound1 = new openfl.media.Sound();
			sound1.addEventListener(openfl.events.Event.COMPLETE,$bind(this,this.sound_onComplete));
			sound1.addEventListener(openfl.events.IOErrorEvent.IO_ERROR,$bind(this,this.sound_onIOError));
			sound1.load(new openfl.net.URLRequest(soundName + ".ogg"));
		}
		lime.app.Preloader.prototype.load.call(this,urls,types);
	}
	,start: function() {
		if(this.display != null && js.Boot.__instanceof(this.display,NMEPreloader)) {
			this.display.addEventListener(openfl.events.Event.COMPLETE,$bind(this,this.display_onComplete));
			(js.Boot.__cast(this.display , NMEPreloader)).onLoaded();
		} else lime.app.Preloader.prototype.start.call(this);
	}
	,update: function(loaded,total) {
		if(this.display != null && js.Boot.__instanceof(this.display,NMEPreloader)) (js.Boot.__cast(this.display , NMEPreloader)).onUpdate(loaded,total);
	}
	,display_onComplete: function(event) {
		this.display.removeEventListener(openfl.events.Event.COMPLETE,$bind(this,this.display_onComplete));
		openfl.Lib.current.removeChild(this.display);
		openfl.Lib.current.stage.set_focus(null);
		this.display = null;
		lime.app.Preloader.prototype.start.call(this);
	}
	,sound_onComplete: function(event) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,sound_onIOError: function(event) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: openfl.display.Preloader
});
openfl.display.Shape = function() {
	openfl.display.DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl.display.Shape;
openfl.display.Shape.__name__ = ["openfl","display","Shape"];
openfl.display.Shape.__super__ = openfl.display.DisplayObject;
openfl.display.Shape.prototype = $extend(openfl.display.DisplayObject.prototype,{
	__getBounds: function(rect,matrix) {
		if(this.__graphics != null) this.__graphics.__getBounds(rect,this.__worldTransform);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(this.get_visible() && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getTransform())) {
			if(!interactiveOnly) stack.push(this);
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		openfl._internal.renderer.canvas.CanvasShape.render(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl._internal.renderer.dom.DOMShape.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__graphics != null) openfl._internal.renderer.opengl.utils.GraphicsRenderer.render(this,renderSession);
	}
	,__renderMask: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.canvas.CanvasGraphics.renderMask(this.__graphics,renderSession);
	}
	,get_graphics: function() {
		if(this.__graphics == null) this.__graphics = new openfl.display.Graphics();
		return this.__graphics;
	}
	,__class__: openfl.display.Shape
	,__properties__: $extend(openfl.display.DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
openfl.display.SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl.display.DisplayObjectContainer.call(this);
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.mouseChildren = false;
	this.set_upState(upState != null?upState:this.__generateDefaultState());
	this.set_overState(overState != null?overState:this.__generateDefaultState());
	this.set_downState(downState != null?downState:this.__generateDefaultState());
	this.set_hitTestState(hitTestState != null?hitTestState:this.__generateDefaultState());
	this.set___currentState(this.upState);
};
$hxClasses["openfl.display.SimpleButton"] = openfl.display.SimpleButton;
openfl.display.SimpleButton.__name__ = ["openfl","display","SimpleButton"];
openfl.display.SimpleButton.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.SimpleButton.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	switchState: function(state) {
		if(this.__currentState != null && this.__currentState.parent == this) this.removeChild(this.__currentState);
		if(state != null) this.addChild(state);
	}
	,__generateDefaultState: function() {
		return new openfl.display.DisplayObject();
	}
	,set_downState: function(downState) {
		if(this.downState != null && this.__currentState == this.downState) this.set___currentState(downState);
		return this.downState = downState;
	}
	,set_hitTestState: function(hitTestState) {
		if(hitTestState != this.hitTestState) {
			if(this.hitTestState != null && this.hitTestState.parent == this) this.removeChild(this.hitTestState);
			this.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__this_onMouseDown));
			this.removeEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this.__this_onMouseOut));
			this.removeEventListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this.__this_onMouseOver));
			this.removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.__this_onMouseUp));
			if(hitTestState != null) {
				this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__this_onMouseDown));
				this.addEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this.__this_onMouseOut));
				this.addEventListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this.__this_onMouseOver));
				this.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.__this_onMouseUp));
				hitTestState.set_alpha(0.0);
				this.addChild(hitTestState);
			}
		}
		return this.hitTestState = hitTestState;
	}
	,set_overState: function(overState) {
		if(this.overState != null && this.__currentState == this.overState) this.set___currentState(overState);
		return this.overState = overState;
	}
	,get_soundTransform: function() {
		if(this.__soundTransform == null) this.__soundTransform = new openfl.media.SoundTransform();
		return new openfl.media.SoundTransform(this.__soundTransform.volume,this.__soundTransform.pan);
	}
	,set_soundTransform: function(value) {
		this.__soundTransform = new openfl.media.SoundTransform(value.volume,value.pan);
		return value;
	}
	,set_upState: function(upState) {
		if(this.upState != null && this.__currentState == this.upState) this.set___currentState(upState);
		return this.upState = upState;
	}
	,set___currentState: function(state) {
		if(this.__currentState == state) return state;
		this.switchState(state);
		return this.__currentState = state;
	}
	,__this_onMouseDown: function(event) {
		this.set___currentState(this.downState);
	}
	,__this_onMouseOut: function(event) {
		if(this.upState != this.__currentState) this.set___currentState(this.upState);
	}
	,__this_onMouseOver: function(event) {
		if(this.overState != this.__currentState) this.set___currentState(this.overState);
	}
	,__this_onMouseUp: function(event) {
		this.set___currentState(this.overState);
	}
	,__class__: openfl.display.SimpleButton
	,__properties__: $extend(openfl.display.DisplayObjectContainer.prototype.__properties__,{set___currentState:"set___currentState",set_upState:"set_upState",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_overState:"set_overState",set_hitTestState:"set_hitTestState",set_downState:"set_downState"})
});
openfl.display.SpreadMethod = $hxClasses["openfl.display.SpreadMethod"] = { __ename__ : true, __constructs__ : ["REPEAT","REFLECT","PAD"] };
openfl.display.SpreadMethod.REPEAT = ["REPEAT",0];
openfl.display.SpreadMethod.REPEAT.toString = $estr;
openfl.display.SpreadMethod.REPEAT.__enum__ = openfl.display.SpreadMethod;
openfl.display.SpreadMethod.REFLECT = ["REFLECT",1];
openfl.display.SpreadMethod.REFLECT.toString = $estr;
openfl.display.SpreadMethod.REFLECT.__enum__ = openfl.display.SpreadMethod;
openfl.display.SpreadMethod.PAD = ["PAD",2];
openfl.display.SpreadMethod.PAD.toString = $estr;
openfl.display.SpreadMethod.PAD.__enum__ = openfl.display.SpreadMethod;
openfl.display.Stage = function(width,height,color) {
	this.__mouseY = 0;
	this.__mouseX = 0;
	openfl.display.Sprite.call(this);
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else this.set_color(color);
	this.set_name(null);
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.stageWidth = width;
	this.stageHeight = height;
	this.stage = this;
	this.align = openfl.display.StageAlign.TOP_LEFT;
	this.allowsFullScreen = false;
	this.set_displayState(openfl.display.StageDisplayState.NORMAL);
	this.frameRate = 60;
	this.quality = openfl.display.StageQuality.HIGH;
	this.scaleMode = openfl.display.StageScaleMode.NO_SCALE;
	this.stageFocusRect = true;
	this.__clearBeforeRender = true;
	this.__stack = [];
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.stage3Ds = this1;
	var this3 = this.stage3Ds;
	var x = new openfl.display.Stage3D();
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
		this3.data[this3.length - 1] = x;
	}
	this3.length;
};
$hxClasses["openfl.display.Stage"] = openfl.display.Stage;
openfl.display.Stage.__name__ = ["openfl","display","Stage"];
openfl.display.Stage.__super__ = openfl.display.Sprite;
openfl.display.Stage.prototype = $extend(openfl.display.Sprite.prototype,{
	globalToLocal: function(pos) {
		return pos;
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos;
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) mouse = parent.globalToLocal(mouse);
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = openfl.events.EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
		} else {
			event.eventPhase = openfl.events.EventPhase.CAPTURING_PHASE;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__broadcast(event,false);
				if(event.__isCancelled) return;
			}
			event.eventPhase = openfl.events.EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
			if(event.__isCancelled) return;
			if(event.bubbles) {
				event.eventPhase = openfl.events.EventPhase.BUBBLING_PHASE;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__broadcast(event,false);
					if(event.__isCancelled) return;
					i1--;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		stack.push(this);
	}
	,__render: function(context) {
		this.__broadcast(new openfl.events.Event(openfl.events.Event.ENTER_FRAME),true);
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcast(new openfl.events.Event(openfl.events.Event.RENDER),true);
		}
		this.__renderable = true;
		this.__update(false,true);
		switch(context[1]) {
		case 0:
			var gl = context[2];
			if(this.__renderer == null) this.__renderer = new openfl._internal.renderer.opengl.GLRenderer(this.stageWidth,this.stageHeight,gl);
			this.__renderer.render(this);
			break;
		case 1:
			var context1 = context[2];
			if(this.__renderer == null) this.__renderer = new openfl._internal.renderer.canvas.CanvasRenderer(this.stageWidth,this.stageHeight,context1);
			this.__renderer.render(this);
			break;
		case 2:
			var element = context[2];
			if(this.__renderer == null) this.__renderer = new openfl._internal.renderer.dom.DOMRenderer(this.stageWidth,this.stageHeight,element);
			this.__renderer.render(this);
			break;
		default:
		}
	}
	,__resize: function() {
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) this.__dragBounds = null; else this.__dragBounds = bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = -this.__dragObject.get_width() / 2;
				this.__dragOffsetY = -this.__dragObject.get_height() / 2;
			} else {
				var mouse = new openfl.geom.Point(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) mouse = parent.globalToLocal(mouse);
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren) {
		if(transformOnly) {
			if(openfl.display.DisplayObject.__worldTransformDirty > 0) {
				openfl.display.Sprite.prototype.__update.call(this,true,updateChildren);
				if(updateChildren) {
					openfl.display.DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl.display.DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl.display.DisplayObject.__worldRenderDirty > 0) {
			openfl.display.Sprite.prototype.__update.call(this,false,updateChildren);
			if(updateChildren) {
				openfl.display.DisplayObject.__worldTransformDirty = 0;
				openfl.display.DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		}
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,canvas_onContextLost: function(event) {
	}
	,canvas_onContextRestored: function(event) {
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			if(this.__focus != null) {
				var event = new openfl.events.FocusEvent(openfl.events.FocusEvent.FOCUS_OUT,true,false,value,false,0);
				this.__stack = [];
				this.__focus.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event,this.__stack);
			}
			if(value != null) {
				var event1 = new openfl.events.FocusEvent(openfl.events.FocusEvent.FOCUS_IN,true,false,this.__focus,false,0);
				this.__stack = [];
				value.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event1,this.__stack);
			}
			this.__focus = value;
		}
		return this.__focus;
	}
	,set_displayState: function(value) {
		this.displayState = value;
		return value;
	}
	,__class__: openfl.display.Stage
	,__properties__: $extend(openfl.display.Sprite.prototype.__properties__,{set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",set_color:"set_color",get_color:"get_color"})
});
openfl.display.Stage3D = function() {
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["openfl.display.Stage3D"] = openfl.display.Stage3D;
openfl.display.Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl.display.Stage3D.__super__ = openfl.events.EventDispatcher;
openfl.display.Stage3D.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	requestContext3D: function(context3DRenderMode) {
		if(context3DRenderMode == null) context3DRenderMode = "";
		if(openfl.display.OpenGLView.get_isSupported()) {
			this.context3D = new openfl.display3D.Context3D();
			this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CONTEXT3D_CREATE));
		} else this.dispatchEvent(new openfl.events.ErrorEvent(openfl.events.ErrorEvent.ERROR));
	}
	,__class__: openfl.display.Stage3D
});
openfl.display.StageAlign = $hxClasses["openfl.display.StageAlign"] = { __ename__ : true, __constructs__ : ["TOP_RIGHT","TOP_LEFT","TOP","RIGHT","LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","BOTTOM"] };
openfl.display.StageAlign.TOP_RIGHT = ["TOP_RIGHT",0];
openfl.display.StageAlign.TOP_RIGHT.toString = $estr;
openfl.display.StageAlign.TOP_RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.TOP_LEFT = ["TOP_LEFT",1];
openfl.display.StageAlign.TOP_LEFT.toString = $estr;
openfl.display.StageAlign.TOP_LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.TOP = ["TOP",2];
openfl.display.StageAlign.TOP.toString = $estr;
openfl.display.StageAlign.TOP.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.RIGHT = ["RIGHT",3];
openfl.display.StageAlign.RIGHT.toString = $estr;
openfl.display.StageAlign.RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.LEFT = ["LEFT",4];
openfl.display.StageAlign.LEFT.toString = $estr;
openfl.display.StageAlign.LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT",5];
openfl.display.StageAlign.BOTTOM_RIGHT.toString = $estr;
openfl.display.StageAlign.BOTTOM_RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT",6];
openfl.display.StageAlign.BOTTOM_LEFT.toString = $estr;
openfl.display.StageAlign.BOTTOM_LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM = ["BOTTOM",7];
openfl.display.StageAlign.BOTTOM.toString = $estr;
openfl.display.StageAlign.BOTTOM.__enum__ = openfl.display.StageAlign;
openfl.display.StageDisplayState = $hxClasses["openfl.display.StageDisplayState"] = { __ename__ : true, __constructs__ : ["NORMAL","FULL_SCREEN","FULL_SCREEN_INTERACTIVE"] };
openfl.display.StageDisplayState.NORMAL = ["NORMAL",0];
openfl.display.StageDisplayState.NORMAL.toString = $estr;
openfl.display.StageDisplayState.NORMAL.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageDisplayState.FULL_SCREEN = ["FULL_SCREEN",1];
openfl.display.StageDisplayState.FULL_SCREEN.toString = $estr;
openfl.display.StageDisplayState.FULL_SCREEN.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE = ["FULL_SCREEN_INTERACTIVE",2];
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE.toString = $estr;
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageQuality = $hxClasses["openfl.display.StageQuality"] = { __ename__ : true, __constructs__ : ["BEST","HIGH","MEDIUM","LOW"] };
openfl.display.StageQuality.BEST = ["BEST",0];
openfl.display.StageQuality.BEST.toString = $estr;
openfl.display.StageQuality.BEST.__enum__ = openfl.display.StageQuality;
openfl.display.StageQuality.HIGH = ["HIGH",1];
openfl.display.StageQuality.HIGH.toString = $estr;
openfl.display.StageQuality.HIGH.__enum__ = openfl.display.StageQuality;
openfl.display.StageQuality.MEDIUM = ["MEDIUM",2];
openfl.display.StageQuality.MEDIUM.toString = $estr;
openfl.display.StageQuality.MEDIUM.__enum__ = openfl.display.StageQuality;
openfl.display.StageQuality.LOW = ["LOW",3];
openfl.display.StageQuality.LOW.toString = $estr;
openfl.display.StageQuality.LOW.__enum__ = openfl.display.StageQuality;
openfl.display.StageScaleMode = $hxClasses["openfl.display.StageScaleMode"] = { __ename__ : true, __constructs__ : ["SHOW_ALL","NO_SCALE","NO_BORDER","EXACT_FIT"] };
openfl.display.StageScaleMode.SHOW_ALL = ["SHOW_ALL",0];
openfl.display.StageScaleMode.SHOW_ALL.toString = $estr;
openfl.display.StageScaleMode.SHOW_ALL.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.NO_SCALE = ["NO_SCALE",1];
openfl.display.StageScaleMode.NO_SCALE.toString = $estr;
openfl.display.StageScaleMode.NO_SCALE.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.NO_BORDER = ["NO_BORDER",2];
openfl.display.StageScaleMode.NO_BORDER.toString = $estr;
openfl.display.StageScaleMode.NO_BORDER.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.EXACT_FIT = ["EXACT_FIT",3];
openfl.display.StageScaleMode.EXACT_FIT.toString = $estr;
openfl.display.StageScaleMode.EXACT_FIT.__enum__ = openfl.display.StageScaleMode;
openfl.display.TriangleCulling = $hxClasses["openfl.display.TriangleCulling"] = { __ename__ : true, __constructs__ : ["NEGATIVE","NONE","POSITIVE"] };
openfl.display.TriangleCulling.NEGATIVE = ["NEGATIVE",0];
openfl.display.TriangleCulling.NEGATIVE.toString = $estr;
openfl.display.TriangleCulling.NEGATIVE.__enum__ = openfl.display.TriangleCulling;
openfl.display.TriangleCulling.NONE = ["NONE",1];
openfl.display.TriangleCulling.NONE.toString = $estr;
openfl.display.TriangleCulling.NONE.__enum__ = openfl.display.TriangleCulling;
openfl.display.TriangleCulling.POSITIVE = ["POSITIVE",2];
openfl.display.TriangleCulling.POSITIVE.toString = $estr;
openfl.display.TriangleCulling.POSITIVE.__enum__ = openfl.display.TriangleCulling;
openfl.display3D = {};
openfl.display3D.Context3D = function() {
	this.disposed = false;
	this._yFlip = 1;
	this.vertexBuffersCreated = new Array();
	this.indexBuffersCreated = new Array();
	this.programsCreated = new Array();
	this.texturesCreated = new Array();
	this.samplerParameters = new Array();
	var _g1 = 0;
	var _g = openfl.display3D.Context3D.MAX_SAMPLERS;
	while(_g1 < _g) {
		var i = _g1++;
		this.samplerParameters[i] = new openfl.display3D._Context3D.SamplerState();
		this.samplerParameters[i].wrap = openfl.display3D.Context3DWrapMode.CLAMP;
		this.samplerParameters[i].filter = openfl.display3D.Context3DTextureFilter.LINEAR;
		this.samplerParameters[i].mipfilter = openfl.display3D.Context3DMipFilter.MIPNONE;
	}
	var stage = openfl.Lib.current.stage;
	this.ogl = new openfl.display.OpenGLView();
	this.ogl.set_scrollRect(new openfl.geom.Rectangle(0,0,stage.stageWidth,stage.stageHeight));
	this.scrollRect = this.ogl.get_scrollRect().clone();
	this.ogl.set_width(stage.stageWidth);
	this.ogl.set_height(stage.stageHeight);
	stage.addChildAt(this.ogl,0);
};
$hxClasses["openfl.display3D.Context3D"] = openfl.display3D.Context3D;
openfl.display3D.Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl.display3D.Context3D.prototype = {
	clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) mask = 17664;
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1;
		if(alpha == null) alpha = 1;
		if(blue == null) blue = 0;
		if(green == null) green = 0;
		if(red == null) red = 0;
		if(!this.drawing) {
			this.__updateBlendStatus();
			this.drawing = true;
		}
		lime.graphics.opengl.GL.context.clearColor(red,green,blue,alpha);
		lime.graphics.opengl.GL.context.clearDepth(depth);
		lime.graphics.opengl.GL.context.clearStencil(stencil);
		lime.graphics.opengl.GL.context.clear(mask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) enableDepthAndStencil = true;
		if(enableDepthAndStencil) {
			lime.graphics.opengl.GL.context.enable(2929);
			lime.graphics.opengl.GL.context.enable(2960);
		}
		this.ogl.set_scrollRect(new openfl.geom.Rectangle(0,0,width,height));
		this.ogl.set_width(width);
		this.ogl.set_height(height);
		this.scrollRect = this.ogl.get_scrollRect().clone();
		lime.graphics.opengl.GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl.display3D.textures.CubeTexture(lime.graphics.opengl.GL.context.createTexture(),size);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createIndexBuffer: function(numIndices) {
		var indexBuffer = new openfl.display3D.IndexBuffer3D(lime.graphics.opengl.GL.context.createBuffer(),numIndices);
		this.indexBuffersCreated.push(indexBuffer);
		return indexBuffer;
	}
	,createProgram: function() {
		var program = new openfl.display3D.Program3D(lime.graphics.opengl.GL.context.createProgram());
		this.programsCreated.push(program);
		return program;
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		var texture = new openfl.display3D.textures.RectangleTexture(lime.graphics.opengl.GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl.display3D.textures.Texture(lime.graphics.opengl.GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createVertexBuffer: function(numVertices,data32PerVertex) {
		var vertexBuffer = new openfl.display3D.VertexBuffer3D(lime.graphics.opengl.GL.context.createBuffer(),numVertices,data32PerVertex);
		this.vertexBuffersCreated.push(vertexBuffer);
		return vertexBuffer;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.vertexBuffersCreated;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			vertexBuffer.dispose();
		}
		this.vertexBuffersCreated = null;
		var _g2 = 0;
		var _g11 = this.indexBuffersCreated;
		while(_g2 < _g11.length) {
			var indexBuffer = _g11[_g2];
			++_g2;
			indexBuffer.dispose();
		}
		this.indexBuffersCreated = null;
		var _g3 = 0;
		var _g12 = this.programsCreated;
		while(_g3 < _g12.length) {
			var program = _g12[_g3];
			++_g3;
			program.dispose();
		}
		this.programsCreated = null;
		this.samplerParameters = null;
		var _g4 = 0;
		var _g13 = this.texturesCreated;
		while(_g4 < _g13.length) {
			var texture = _g13[_g4];
			++_g4;
			texture.dispose();
		}
		this.texturesCreated = null;
		if(this.framebuffer != null) {
			lime.graphics.opengl.GL.context.deleteFramebuffer(this.framebuffer);
			this.framebuffer = null;
		}
		if(this.renderbuffer != null) {
			lime.graphics.opengl.GL.context.deleteRenderbuffer(this.renderbuffer);
			this.renderbuffer = null;
		}
		this.disposed = true;
	}
	,drawToBitmapData: function(destination) {
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) numTriangles = -1;
		if(firstIndex == null) firstIndex = 0;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,"yflip");
		lime.graphics.opengl.GL.context.uniform1f(location,this._yFlip);
		if(!this.drawing) throw new openfl.errors.Error("Need to clear before drawing if the buffer has not been cleared since the last present() call.");
		var numIndices;
		if(numTriangles == -1) numIndices = indexBuffer.numIndices; else numIndices = numTriangles * 3;
		var byteOffset = firstIndex * 2;
		lime.graphics.opengl.GL.context.bindBuffer(34963,indexBuffer.glBuffer);
		lime.graphics.opengl.GL.context.drawElements(4,numIndices,5123,byteOffset);
	}
	,present: function() {
		this.drawing = false;
		lime.graphics.opengl.GL.context.useProgram(null);
		lime.graphics.opengl.GL.context.bindBuffer(34962,null);
		lime.graphics.opengl.GL.context.disable(2884);
		if(this.framebuffer != null) lime.graphics.opengl.GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime.graphics.opengl.GL.context.bindRenderbuffer(36161,null);
	}
	,removeRenderMethod: function(func) {
		this.ogl.set_render(null);
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.blendEnabled = true;
		this.blendSourceFactor = sourceFactor;
		this.blendDestinationFactor = destinationFactor;
		this.__updateBlendStatus();
	}
	,setColorMask: function(red,green,blue,alpha) {
		lime.graphics.opengl.GL.context.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		if(triangleFaceToCull == 0) lime.graphics.opengl.GL.context.disable(2884); else {
			lime.graphics.opengl.GL.context.enable(2884);
			switch(triangleFaceToCull) {
			case 1029:
				lime.graphics.opengl.GL.context.cullFace(1029);
				break;
			case 1028:
				lime.graphics.opengl.GL.context.cullFace(1028);
				break;
			case 1032:
				lime.graphics.opengl.GL.context.cullFace(1032);
				break;
			default:
				throw "Unknown Context3DTriangleFace type.";
			}
		}
		switch(triangleFaceToCull) {
		case 1029:
			this._yFlip = -1;
			break;
		case 1028:
			this._yFlip = 1;
			break;
		case 1032:
			this._yFlip = 1;
			break;
		case 0:
			this._yFlip = 1;
			break;
		default:
			throw "Unknown culling mode " + triangleFaceToCull + ".";
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		lime.graphics.opengl.GL.context.depthFunc(passCompareMode);
		lime.graphics.opengl.GL.context.depthMask(depthMask);
	}
	,setGLSLProgramConstantsFromByteArray: function(locationName,data,byteArrayOffset) {
		if(byteArrayOffset == null) byteArrayOffset = 0;
		data.position = byteArrayOffset;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime.graphics.opengl.GL.uniform4f(location,data.readFloat(),data.readFloat(),data.readFloat(),data.readFloat());
	}
	,setGLSLProgramConstantsFromMatrix: function(locationName,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime.graphics.opengl.GL.uniformMatrix4fv(location,!transposedMatrix,new Float32Array((function($this) {
			var $r;
			var this1 = matrix.rawData;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this1.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this1.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this))));
	}
	,setGLSLProgramConstantsFromVector4: function(locationName,data,startIndex) {
		if(startIndex == null) startIndex = 0;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime.graphics.opengl.GL.context.uniform4f(location,data[startIndex],data[startIndex + 1],data[startIndex + 2],data[startIndex + 3]);
	}
	,setGLSLTextureAt: function(locationName,texture,textureIndex) {
		switch(textureIndex) {
		case 0:
			lime.graphics.opengl.GL.context.activeTexture(33984);
			break;
		case 1:
			lime.graphics.opengl.GL.context.activeTexture(33985);
			break;
		case 2:
			lime.graphics.opengl.GL.context.activeTexture(33986);
			break;
		case 3:
			lime.graphics.opengl.GL.context.activeTexture(33987);
			break;
		case 4:
			lime.graphics.opengl.GL.context.activeTexture(33988);
			break;
		case 5:
			lime.graphics.opengl.GL.context.activeTexture(33989);
			break;
		case 6:
			lime.graphics.opengl.GL.context.activeTexture(33990);
			break;
		case 7:
			lime.graphics.opengl.GL.context.activeTexture(33991);
			break;
		default:
			throw "Does not support texture8 or more";
		}
		if(texture == null) {
			lime.graphics.opengl.GL.context.bindTexture(3553,null);
			lime.graphics.opengl.GL.context.bindTexture(34067,null);
			return;
		}
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		if(js.Boot.__instanceof(texture,openfl.display3D.textures.Texture)) {
			lime.graphics.opengl.GL.context.bindTexture(3553,(js.Boot.__cast(texture , openfl.display3D.textures.Texture)).glTexture);
			lime.graphics.opengl.GL.context.uniform1i(location,textureIndex);
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.RectangleTexture)) {
			lime.graphics.opengl.GL.context.bindTexture(3553,(js.Boot.__cast(texture , openfl.display3D.textures.RectangleTexture)).glTexture);
			lime.graphics.opengl.GL.context.uniform1i(location,textureIndex);
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.CubeTexture)) {
			lime.graphics.opengl.GL.context.bindTexture(34067,(js.Boot.__cast(texture , openfl.display3D.textures.CubeTexture)).glTexture);
			lime.graphics.opengl.GL.context.uniform1i(location,textureIndex);
		} else throw "Texture of type " + Type.getClassName(Type.getClass(texture)) + " not supported yet";
		var parameters = this.samplerParameters[textureIndex];
		if(parameters != null) this.setTextureParameters(texture,parameters.wrap,parameters.filter,parameters.mipfilter); else this.setTextureParameters(texture,openfl.display3D.Context3DWrapMode.CLAMP,openfl.display3D.Context3DTextureFilter.NEAREST,openfl.display3D.Context3DMipFilter.MIPNONE);
	}
	,setGLSLVertexBufferAt: function(locationName,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var location;
		if(this.currentProgram != null && this.currentProgram.glProgram != null) location = lime.graphics.opengl.GL.context.getAttribLocation(this.currentProgram.glProgram,locationName); else location = -1;
		if(buffer == null) {
			if(location > -1) lime.graphics.opengl.GL.context.disableVertexAttribArray(location);
			return;
		}
		lime.graphics.opengl.GL.context.bindBuffer(34962,buffer.glBuffer);
		var dimension = 4;
		var type = 5126;
		var numBytes = 4;
		if(format == openfl.display3D.Context3DVertexBufferFormat.BYTES_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_1) {
			dimension = 1;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_2) {
			dimension = 2;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_3) {
			dimension = 3;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else throw "Buffer format " + Std.string(format) + " is not supported";
		lime.graphics.opengl.GL.context.enableVertexAttribArray(location);
		lime.graphics.opengl.GL.context.vertexAttribPointer(location,dimension,type,false,buffer.data32PerVertex * numBytes,bufferOffset * numBytes);
	}
	,setProgram: function(program3D) {
		var glProgram = null;
		if(program3D != null) glProgram = program3D.glProgram;
		lime.graphics.opengl.GL.context.useProgram(glProgram);
		this.currentProgram = program3D;
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		data.position = byteArrayOffset;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromByteArray(locationName,data);
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var d = matrix.rawData;
		if(transposedMatrix) {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[4],d.data[8],d.data[12]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[1],d.data[5],d.data[9],d.data[13]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[2],d.data[6],d.data[10],d.data[14]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[3],d.data[7],d.data[11],d.data[15]],1);
		} else {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[1],d.data[2],d.data[3]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[4],d.data[5],d.data[6],d.data[7]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[8],d.data[9],d.data[10],d.data[11]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[12],d.data[13],d.data[14],d.data[15]],1);
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) numRegisters = 1;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var currentIndex = i * 4;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromVector4(locationName,data,currentIndex);
		}
	}
	,setRenderMethod: function(func) {
		this.ogl.set_render(function(rect) {
			func(null);
		});
	}
	,setRenderToBackBuffer: function() {
		lime.graphics.opengl.GL.context.disable(2929);
		lime.graphics.opengl.GL.context.disable(2960);
		lime.graphics.opengl.GL.context.disable(3089);
		if(this.framebuffer != null) lime.graphics.opengl.GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime.graphics.opengl.GL.context.bindRenderbuffer(36161,null);
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(antiAlias == null) antiAlias = 0;
		if(enableDepthAndStencil == null) enableDepthAndStencil = false;
		if(this.framebuffer == null) this.framebuffer = lime.graphics.opengl.GL.context.createFramebuffer();
		lime.graphics.opengl.GL.context.bindFramebuffer(36160,this.framebuffer);
		if(this.renderbuffer == null) this.renderbuffer = lime.graphics.opengl.GL.context.createRenderbuffer();
		lime.graphics.opengl.GL.context.bindRenderbuffer(36161,this.renderbuffer);
		lime.graphics.opengl.GL.context.renderbufferStorage(36161,6408,texture.width,texture.height);
		lime.graphics.opengl.GL.context.framebufferTexture2D(36160,36064,3553,texture.glTexture,0);
		lime.graphics.opengl.GL.context.renderbufferStorage(36161,34041,texture.width,texture.height);
		lime.graphics.opengl.GL.context.framebufferRenderbuffer(36160,33306,36161,this.renderbuffer);
		if(enableDepthAndStencil) {
			lime.graphics.opengl.GL.context.enable(2929);
			lime.graphics.opengl.GL.context.enable(2960);
		}
		lime.graphics.opengl.GL.context.bindTexture(3553,texture.glTexture);
		lime.graphics.opengl.GL.context.texImage2D(3553,0,6408,texture.width,texture.height,0,6408,5121,null);
		lime.graphics.opengl.GL.context.texParameteri(3553,10240,9729);
		lime.graphics.opengl.GL.context.texParameteri(3553,10241,9985);
		lime.graphics.opengl.GL.context.viewport(0,0,texture.width,texture.height);
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(0 <= sampler && sampler < openfl.display3D.Context3D.MAX_SAMPLERS) {
			this.samplerParameters[sampler].wrap = wrap;
			this.samplerParameters[sampler].filter = filter;
			this.samplerParameters[sampler].mipfilter = mipfilter;
		} else throw "Sampler is out of bounds.";
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle == null) {
			lime.graphics.opengl.GL.context.disable(3089);
			return;
		}
		lime.graphics.opengl.GL.context.enable(3089);
		lime.graphics.opengl.GL.context.scissor(rectangle.x | 0,rectangle.y | 0,rectangle.width | 0,rectangle.height | 0);
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		this.stencilCompareMode = compareMode;
		lime.graphics.opengl.GL.context.stencilOp(actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail);
		lime.graphics.opengl.GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) writeMask = 255;
		if(readMask == null) readMask = 255;
		this.stencilReadMask = readMask;
		this.stencilRef = referenceValue;
		lime.graphics.opengl.GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
		lime.graphics.opengl.GL.context.stencilMask(writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		var locationName = "fs" + sampler;
		this.setGLSLTextureAt(locationName,texture,sampler);
	}
	,setTextureParameters: function(texture,wrap,filter,mipfilter) {
		if(!openfl.display3D.Context3D.anisotropySupportTested) {
			var ext = lime.graphics.opengl.GL.context.getExtension("EXT_texture_filter_anisotropic");
			if(ext == null) ext = lime.graphics.opengl.GL.context.getExtension("MOZ_EXT_texture_filter_anisotropic");
			if(ext == null) ext = lime.graphics.opengl.GL.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			openfl.display3D.Context3D.supportsAnisotropy = ext != null;
			openfl.display3D.Context3D.anisotropySupportTested = true;
			lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
				var $r;
				var $int = openfl.display3D.Context3D.maxSupportedAnisotropy;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this)));
			openfl.display3D.Context3D.maxSupportedAnisotropy = lime.graphics.opengl.GL.context.getTexParameter(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT);
		}
		if(js.Boot.__instanceof(texture,openfl.display3D.textures.Texture)) {
			switch(wrap[1]) {
			case 0:
				lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
				lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
				break;
			case 1:
				lime.graphics.opengl.GL.context.texParameteri(3553,10242,10497);
				lime.graphics.opengl.GL.context.texParameteri(3553,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9729);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg = 2 < 0;
						var bNeg = a < 0;
						$r = aNeg != bNeg?aNeg:2 > a;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int1 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
					return $r;
				}(this)):2);
				break;
			case 1:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a1 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg1 = 4 < 0;
						var bNeg1 = a1 < 0;
						$r = aNeg1 != bNeg1?aNeg1:4 > a1;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int2 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
					return $r;
				}(this)):4);
				break;
			case 2:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a2 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg2 = 8 < 0;
						var bNeg2 = a2 < 0;
						$r = aNeg2 != bNeg2?aNeg2:8 > a2;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int3 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
					return $r;
				}(this)):8);
				break;
			case 3:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a3 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg3 = 16 < 0;
						var bNeg3 = a3 < 0;
						$r = aNeg3 != bNeg3?aNeg3:16 > a3;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int4 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
					return $r;
				}(this)):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime.graphics.opengl.GL.context.generateMipmap(3553);
				lime.graphics.opengl.GL.context.texParameteri(3553,10241,9987);
				break;
			case 1:
				lime.graphics.opengl.GL.context.generateMipmap(3553);
				lime.graphics.opengl.GL.context.texParameteri(3553,10241,9984);
				break;
			case 2:
				lime.graphics.opengl.GL.context.texParameteri(3553,10241,9729);
				break;
			}
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.RectangleTexture)) {
			lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
			lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
			switch(filter[1]) {
			case 4:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9729);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a4 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg4 = 2 < 0;
						var bNeg4 = a4 < 0;
						$r = aNeg4 != bNeg4?aNeg4:2 > a4;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int5 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
					return $r;
				}(this)):2);
				break;
			case 1:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a5 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg5 = 4 < 0;
						var bNeg5 = a5 < 0;
						$r = aNeg5 != bNeg5?aNeg5:4 > a5;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int6 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int6 < 0?4294967296.0 + int6:int6 + 0.0;
					return $r;
				}(this)):4);
				break;
			case 2:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a6 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg6 = 8 < 0;
						var bNeg6 = a6 < 0;
						$r = aNeg6 != bNeg6?aNeg6:8 > a6;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int7 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int7 < 0?4294967296.0 + int7:int7 + 0.0;
					return $r;
				}(this)):8);
				break;
			case 3:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a7 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg7 = 16 < 0;
						var bNeg7 = a7 < 0;
						$r = aNeg7 != bNeg7?aNeg7:16 > a7;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int8 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int8 < 0?4294967296.0 + int8:int8 + 0.0;
					return $r;
				}(this)):16);
				break;
			}
			lime.graphics.opengl.GL.context.texParameteri(3553,10241,9729);
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.CubeTexture)) {
			switch(wrap[1]) {
			case 0:
				lime.graphics.opengl.GL.context.texParameteri(34067,10242,33071);
				lime.graphics.opengl.GL.context.texParameteri(34067,10243,33071);
				break;
			case 1:
				lime.graphics.opengl.GL.context.texParameteri(34067,10242,10497);
				lime.graphics.opengl.GL.context.texParameteri(34067,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime.graphics.opengl.GL.context.texParameteri(34067,10240,9729);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime.graphics.opengl.GL.context.texParameteri(34067,10240,9728);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a8 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg8 = 2 < 0;
						var bNeg8 = a8 < 0;
						$r = aNeg8 != bNeg8?aNeg8:2 > a8;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int9 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int9 < 0?4294967296.0 + int9:int9 + 0.0;
					return $r;
				}(this)):2);
				break;
			case 1:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a9 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg9 = 4 < 0;
						var bNeg9 = a9 < 0;
						$r = aNeg9 != bNeg9?aNeg9:4 > a9;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int10 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int10 < 0?4294967296.0 + int10:int10 + 0.0;
					return $r;
				}(this)):4);
				break;
			case 2:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a10 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg10 = 8 < 0;
						var bNeg10 = a10 < 0;
						$r = aNeg10 != bNeg10?aNeg10:8 > a10;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int11 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int11 < 0?4294967296.0 + int11:int11 + 0.0;
					return $r;
				}(this)):8);
				break;
			case 3:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a11 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg11 = 16 < 0;
						var bNeg11 = a11 < 0;
						$r = aNeg11 != bNeg11?aNeg11:16 > a11;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int12 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int12 < 0?4294967296.0 + int12:int12 + 0.0;
					return $r;
				}(this)):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime.graphics.opengl.GL.context.texParameteri(34067,10241,9987);
				break;
			case 1:
				lime.graphics.opengl.GL.context.texParameteri(34067,10241,9984);
				break;
			case 2:
				lime.graphics.opengl.GL.context.texParameteri(34067,10241,9729);
				break;
			}
		} else throw "Texture of type " + Type.getClassName(Type.getClass(texture)) + " not supported yet";
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var locationName = "va" + index;
		this.setGLSLVertexBufferAt(locationName,buffer,bufferOffset,format);
	}
	,__getUniformLocationNameFromAgalRegisterIndex: function(programType,firstRegister) {
		if(programType == openfl.display3D.Context3DProgramType.VERTEX) return "vc" + firstRegister; else if(programType == openfl.display3D.Context3DProgramType.FRAGMENT) return "fc" + firstRegister;
		throw "Program Type " + Std.string(programType) + " not supported";
	}
	,__updateBlendStatus: function() {
		if(this.blendEnabled) {
			lime.graphics.opengl.GL.context.enable(3042);
			lime.graphics.opengl.GL.context.blendEquation(32774);
			lime.graphics.opengl.GL.context.blendFunc(this.blendSourceFactor,this.blendDestinationFactor);
		} else lime.graphics.opengl.GL.context.disable(3042);
	}
	,__class__: openfl.display3D.Context3D
};
openfl.display3D._Context3D = {};
openfl.display3D._Context3D.SamplerState = function() {
};
$hxClasses["openfl.display3D._Context3D.SamplerState"] = openfl.display3D._Context3D.SamplerState;
openfl.display3D._Context3D.SamplerState.__name__ = ["openfl","display3D","_Context3D","SamplerState"];
openfl.display3D._Context3D.SamplerState.prototype = {
	__class__: openfl.display3D._Context3D.SamplerState
};
openfl.display3D.Context3DClearMask = function() { };
$hxClasses["openfl.display3D.Context3DClearMask"] = openfl.display3D.Context3DClearMask;
openfl.display3D.Context3DClearMask.__name__ = ["openfl","display3D","Context3DClearMask"];
openfl.display3D.Context3DMipFilter = $hxClasses["openfl.display3D.Context3DMipFilter"] = { __ename__ : true, __constructs__ : ["MIPLINEAR","MIPNEAREST","MIPNONE"] };
openfl.display3D.Context3DMipFilter.MIPLINEAR = ["MIPLINEAR",0];
openfl.display3D.Context3DMipFilter.MIPLINEAR.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPLINEAR.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DMipFilter.MIPNEAREST = ["MIPNEAREST",1];
openfl.display3D.Context3DMipFilter.MIPNEAREST.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPNEAREST.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DMipFilter.MIPNONE = ["MIPNONE",2];
openfl.display3D.Context3DMipFilter.MIPNONE.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPNONE.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DProgramType = $hxClasses["openfl.display3D.Context3DProgramType"] = { __ename__ : true, __constructs__ : ["VERTEX","FRAGMENT"] };
openfl.display3D.Context3DProgramType.VERTEX = ["VERTEX",0];
openfl.display3D.Context3DProgramType.VERTEX.toString = $estr;
openfl.display3D.Context3DProgramType.VERTEX.__enum__ = openfl.display3D.Context3DProgramType;
openfl.display3D.Context3DProgramType.FRAGMENT = ["FRAGMENT",1];
openfl.display3D.Context3DProgramType.FRAGMENT.toString = $estr;
openfl.display3D.Context3DProgramType.FRAGMENT.__enum__ = openfl.display3D.Context3DProgramType;
openfl.display3D.Context3DTextureFilter = $hxClasses["openfl.display3D.Context3DTextureFilter"] = { __ename__ : true, __constructs__ : ["ANISOTROPIC2X","ANISOTROPIC4X","ANISOTROPIC8X","ANISOTROPIC16X","LINEAR","NEAREST"] };
openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X = ["ANISOTROPIC2X",0];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X = ["ANISOTROPIC4X",1];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X = ["ANISOTROPIC8X",2];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X = ["ANISOTROPIC16X",3];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.LINEAR = ["LINEAR",4];
openfl.display3D.Context3DTextureFilter.LINEAR.toString = $estr;
openfl.display3D.Context3DTextureFilter.LINEAR.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.NEAREST = ["NEAREST",5];
openfl.display3D.Context3DTextureFilter.NEAREST.toString = $estr;
openfl.display3D.Context3DTextureFilter.NEAREST.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFormat = $hxClasses["openfl.display3D.Context3DTextureFormat"] = { __ename__ : true, __constructs__ : ["BGRA","COMPRESSED","COMPRESSED_ALPHA"] };
openfl.display3D.Context3DTextureFormat.BGRA = ["BGRA",0];
openfl.display3D.Context3DTextureFormat.BGRA.toString = $estr;
openfl.display3D.Context3DTextureFormat.BGRA.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D.Context3DTextureFormat.COMPRESSED = ["COMPRESSED",1];
openfl.display3D.Context3DTextureFormat.COMPRESSED.toString = $estr;
openfl.display3D.Context3DTextureFormat.COMPRESSED.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA = ["COMPRESSED_ALPHA",2];
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA.toString = $estr;
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D._Context3DTriangleFace = {};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_ = function() { };
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_._new = function(a) {
	return a;
};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.fromInt = function(s) {
	return s;
};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.toInt = function(this1) {
	return this1;
};
openfl.display3D.Context3DVertexBufferFormat = $hxClasses["openfl.display3D.Context3DVertexBufferFormat"] = { __ename__ : true, __constructs__ : ["BYTES_4","FLOAT_1","FLOAT_2","FLOAT_3","FLOAT_4"] };
openfl.display3D.Context3DVertexBufferFormat.BYTES_4 = ["BYTES_4",0];
openfl.display3D.Context3DVertexBufferFormat.BYTES_4.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.BYTES_4.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1 = ["FLOAT_1",1];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2 = ["FLOAT_2",2];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3 = ["FLOAT_3",3];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4 = ["FLOAT_4",4];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DWrapMode = $hxClasses["openfl.display3D.Context3DWrapMode"] = { __ename__ : true, __constructs__ : ["CLAMP","REPEAT"] };
openfl.display3D.Context3DWrapMode.CLAMP = ["CLAMP",0];
openfl.display3D.Context3DWrapMode.CLAMP.toString = $estr;
openfl.display3D.Context3DWrapMode.CLAMP.__enum__ = openfl.display3D.Context3DWrapMode;
openfl.display3D.Context3DWrapMode.REPEAT = ["REPEAT",1];
openfl.display3D.Context3DWrapMode.REPEAT.toString = $estr;
openfl.display3D.Context3DWrapMode.REPEAT.__enum__ = openfl.display3D.Context3DWrapMode;
openfl.display3D.IndexBuffer3D = function(glBuffer,numIndices) {
	this.glBuffer = glBuffer;
	this.numIndices = numIndices;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl.display3D.IndexBuffer3D;
openfl.display3D.IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl.display3D.IndexBuffer3D.prototype = {
	dispose: function() {
		lime.graphics.opengl.GL.context.deleteBuffer(this.glBuffer);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerIndex = 2;
		lime.graphics.opengl.GL.context.bindBuffer(34963,this.glBuffer);
		var length = count * bytesPerIndex;
		var offset = byteArrayOffset + startOffset * bytesPerIndex;
		var indices;
		indices = new Int16Array(length);
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			indices[i] = byteArray.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.bufferData(34963,indices,35044);
	}
	,uploadFromVector: function(data,startOffset,count) {
		lime.graphics.opengl.GL.context.bindBuffer(34963,this.glBuffer);
		var indices;
		indices = new Int16Array(count);
		var _g1 = startOffset;
		var _g = startOffset + count;
		while(_g1 < _g) {
			var i = _g1++;
			indices[i] = data.data[i];
		}
		lime.graphics.opengl.GL.context.bufferData(34963,indices,35044);
	}
	,__class__: openfl.display3D.IndexBuffer3D
};
openfl.display3D.Program3D = function(program) {
	this.glProgram = program;
};
$hxClasses["openfl.display3D.Program3D"] = openfl.display3D.Program3D;
openfl.display3D.Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl.display3D.Program3D.prototype = {
	dispose: function() {
		lime.graphics.opengl.GL.context.deleteProgram(this.glProgram);
	}
	,upload: function(vertexShader,fragmentShader) {
		lime.graphics.opengl.GL.context.attachShader(this.glProgram,vertexShader);
		lime.graphics.opengl.GL.context.attachShader(this.glProgram,fragmentShader);
		lime.graphics.opengl.GL.context.linkProgram(this.glProgram);
		if(lime.graphics.opengl.GL.context.getProgramParameter(this.glProgram,35714) == 0) {
			var result = lime.graphics.opengl.GL.context.getProgramInfoLog(this.glProgram);
			if(result != "") throw result;
		}
	}
	,__class__: openfl.display3D.Program3D
};
openfl.display3D.VertexBuffer3D = function(glBuffer,numVertices,data32PerVertex) {
	this.glBuffer = glBuffer;
	this.numVertices = numVertices;
	this.data32PerVertex = data32PerVertex;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl.display3D.VertexBuffer3D;
openfl.display3D.VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl.display3D.VertexBuffer3D.prototype = {
	dispose: function() {
		lime.graphics.opengl.GL.context.deleteBuffer(this.glBuffer);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime.graphics.opengl.GL.context.bindBuffer(34962,this.glBuffer);
		var length = count * bytesPerVertex;
		var offset = byteArrayOffset + startOffset * bytesPerVertex;
		var float32Array;
		float32Array = new Float32Array(length);
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			float32Array[i] = byteArray.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.bufferData(34962,float32Array,35044);
	}
	,uploadFromFloat32Array: function(data,startVertex,numVertices) {
		lime.graphics.opengl.GL.context.bindBuffer(34962,this.glBuffer);
		lime.graphics.opengl.GL.context.bufferData(34962,data,35044);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime.graphics.opengl.GL.context.bindBuffer(34962,this.glBuffer);
		var length = numVertices * this.data32PerVertex;
		var offset = startVertex;
		var float32Array;
		float32Array = new Float32Array(length);
		var _g1 = startVertex;
		var _g = startVertex + length;
		while(_g1 < _g) {
			var i = _g1++;
			float32Array[i] = data.data[i];
		}
		lime.graphics.opengl.GL.context.bufferData(34962,float32Array,35044);
		float32Array = null;
	}
	,__class__: openfl.display3D.VertexBuffer3D
};
openfl.display3D.textures = {};
openfl.display3D.textures.TextureBase = function(glTexture,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	openfl.events.EventDispatcher.call(this);
	this.width = width;
	this.height = height;
	this.glTexture = glTexture;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl.display3D.textures.TextureBase.__super__ = openfl.events.EventDispatcher;
openfl.display3D.textures.TextureBase.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	dispose: function() {
		lime.graphics.opengl.GL.context.deleteTexture(this.glTexture);
	}
	,__class__: openfl.display3D.textures.TextureBase
});
openfl.display3D.textures.CubeTexture = function(glTexture,size) {
	openfl.display3D.textures.TextureBase.call(this,glTexture,size,size);
	this.size = size;
	this._textures = [];
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		this._textures[i] = lime.graphics.opengl.GL.context.createTexture();
	}
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl.display3D.textures.CubeTexture;
openfl.display3D.textures.CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl.display3D.textures.CubeTexture.__super__ = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.CubeTexture.prototype = $extend(openfl.display3D.textures.TextureBase.prototype,{
	glTextureAt: function(index) {
		return this._textures[index];
	}
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,side,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source = bitmapData.__image.get_data();
		lime.graphics.opengl.GL.context.bindTexture(34067,this.glTexture);
		switch(side) {
		case 0:
			lime.graphics.opengl.GL.context.texImage2D(34069,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 1:
			lime.graphics.opengl.GL.context.texImage2D(34070,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 2:
			lime.graphics.opengl.GL.context.texImage2D(34071,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 3:
			lime.graphics.opengl.GL.context.texImage2D(34072,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 4:
			lime.graphics.opengl.GL.context.texImage2D(34073,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 5:
			lime.graphics.opengl.GL.context.texImage2D(34074,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		default:
			throw "unknown side type";
		}
		lime.graphics.opengl.GL.context.bindTexture(34067,null);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) miplevel = 0;
	}
	,__class__: openfl.display3D.textures.CubeTexture
});
openfl.display3D.textures.RectangleTexture = function(glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl.display3D.textures.TextureBase.call(this,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl.display3D.textures.RectangleTexture;
openfl.display3D.textures.RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl.display3D.textures.RectangleTexture.__super__ = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.RectangleTexture.prototype = $extend(openfl.display3D.textures.TextureBase.prototype,{
	uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var p = lime.utils.ByteArray.__ofBuffer(bitmapData.__image.get_data().buffer);
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.uploadFromByteArray(p,0);
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		lime.graphics.opengl.GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) lime.graphics.opengl.GL.context.pixelStorei(37440,1);
		lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
		lime.graphics.opengl.GL.context.texParameteri(3553,10241,9728);
		lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
		lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
		var source = new Uint8Array(data.length);
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < data.length) {
			source[i] = data.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.texImage2D(3553,0,6408,this.width,this.height,0,6408,5121,source);
		lime.graphics.opengl.GL.context.bindTexture(3553,null);
	}
	,__class__: openfl.display3D.textures.RectangleTexture
});
openfl.display3D.textures.Texture = function(glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl.display3D.textures.TextureBase.call(this,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl.display3D.textures.Texture;
openfl.display3D.textures.Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl.display3D.textures.Texture.__super__ = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.Texture.prototype = $extend(openfl.display3D.textures.TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var p = lime.utils.ByteArray.__ofBuffer(bitmapData.__image.get_data().buffer);
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.uploadFromByteArray(p,0,miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) miplevel = 0;
		lime.graphics.opengl.GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) {
			lime.graphics.opengl.GL.context.pixelStorei(37440,1);
			lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
			lime.graphics.opengl.GL.context.texParameteri(3553,10241,9728);
			lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
			lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
		}
		var source = new Uint8Array(data.length);
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < data.length) {
			source[i] = data.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.texImage2D(3553,miplevel,6408,this.width,this.height,0,6408,5121,source);
		lime.graphics.opengl.GL.context.bindTexture(3553,null);
	}
	,__class__: openfl.display3D.textures.Texture
});
openfl.errors = {};
openfl.errors.Error = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl.errors.Error;
openfl.errors.Error.__name__ = ["openfl","errors","Error"];
openfl.errors.Error.prototype = {
	getStackTrace: function() {
		return haxe.CallStack.toString(haxe.CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) return this.message; else return "Error";
	}
	,__class__: openfl.errors.Error
};
openfl.errors.ArgumentError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage);
};
$hxClasses["openfl.errors.ArgumentError"] = openfl.errors.ArgumentError;
openfl.errors.ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl.errors.ArgumentError.__super__ = openfl.errors.Error;
openfl.errors.ArgumentError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.ArgumentError
});
openfl.errors.IOError = function(message) {
	if(message == null) message = "";
	openfl.errors.Error.call(this,message);
};
$hxClasses["openfl.errors.IOError"] = openfl.errors.IOError;
openfl.errors.IOError.__name__ = ["openfl","errors","IOError"];
openfl.errors.IOError.__super__ = openfl.errors.Error;
openfl.errors.IOError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.IOError
});
openfl.errors.RangeError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage,0);
};
$hxClasses["openfl.errors.RangeError"] = openfl.errors.RangeError;
openfl.errors.RangeError.__name__ = ["openfl","errors","RangeError"];
openfl.errors.RangeError.__super__ = openfl.errors.Error;
openfl.errors.RangeError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.RangeError
});
openfl.errors.TypeError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage,0);
};
$hxClasses["openfl.errors.TypeError"] = openfl.errors.TypeError;
openfl.errors.TypeError.__name__ = ["openfl","errors","TypeError"];
openfl.errors.TypeError.__super__ = openfl.errors.Error;
openfl.errors.TypeError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.TypeError
});
openfl.events.TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl.events.TextEvent;
openfl.events.TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl.events.TextEvent.__super__ = openfl.events.Event;
openfl.events.TextEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new openfl.events.TextEvent(this.type,this.bubbles,this.cancelable,this.text);
	}
	,toString: function() {
		return "[TextEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + "]";
	}
	,__class__: openfl.events.TextEvent
});
openfl.events.ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl.events.ErrorEvent;
openfl.events.ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl.events.ErrorEvent.__super__ = openfl.events.TextEvent;
openfl.events.ErrorEvent.prototype = $extend(openfl.events.TextEvent.prototype,{
	clone: function() {
		return new openfl.events.ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[ErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl.events.ErrorEvent
});
openfl.events._EventDispatcher = {};
openfl.events._EventDispatcher.Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl.events._EventDispatcher.Listener;
openfl.events._EventDispatcher.Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl.events._EventDispatcher.Listener.prototype = {
	match: function(callback,useCapture) {
		return Reflect.compareMethods(this.callback,callback) && this.useCapture == useCapture;
	}
	,__class__: openfl.events._EventDispatcher.Listener
};
openfl.events.EventPhase = $hxClasses["openfl.events.EventPhase"] = { __ename__ : true, __constructs__ : ["CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE"] };
openfl.events.EventPhase.CAPTURING_PHASE = ["CAPTURING_PHASE",0];
openfl.events.EventPhase.CAPTURING_PHASE.toString = $estr;
openfl.events.EventPhase.CAPTURING_PHASE.__enum__ = openfl.events.EventPhase;
openfl.events.EventPhase.AT_TARGET = ["AT_TARGET",1];
openfl.events.EventPhase.AT_TARGET.toString = $estr;
openfl.events.EventPhase.AT_TARGET.__enum__ = openfl.events.EventPhase;
openfl.events.EventPhase.BUBBLING_PHASE = ["BUBBLING_PHASE",2];
openfl.events.EventPhase.BUBBLING_PHASE.toString = $estr;
openfl.events.EventPhase.BUBBLING_PHASE.__enum__ = openfl.events.EventPhase;
openfl.events.FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) keyCode = 0;
	if(shiftKey == null) shiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl.events.FocusEvent;
openfl.events.FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl.events.FocusEvent.__super__ = openfl.events.Event;
openfl.events.FocusEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		var event = new openfl.events.FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return "[FocusEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " relatedObject=" + Std.string(this.relatedObject) + " shiftKey=" + Std.string(this.shiftKey) + " keyCode=" + this.keyCode + "]";
	}
	,__class__: openfl.events.FocusEvent
});
openfl.events.HTTPStatusEvent = function(type,bubbles,cancelable,status) {
	if(status == null) status = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.status = status;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl.events.HTTPStatusEvent;
openfl.events.HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl.events.HTTPStatusEvent.__super__ = openfl.events.Event;
openfl.events.HTTPStatusEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: openfl.events.HTTPStatusEvent
});
openfl.events.IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl.events.IOErrorEvent;
openfl.events.IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl.events.IOErrorEvent.__super__ = openfl.events.ErrorEvent;
openfl.events.IOErrorEvent.prototype = $extend(openfl.events.ErrorEvent.prototype,{
	clone: function() {
		return new openfl.events.IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[IOErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl.events.IOErrorEvent
});
openfl.events.KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(shiftKeyValue == null) shiftKeyValue = false;
	if(altKeyValue == null) altKeyValue = false;
	if(ctrlKeyValue == null) ctrlKeyValue = false;
	if(keyCodeValue == null) keyCodeValue = 0;
	if(charCodeValue == null) charCodeValue = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	if(keyLocationValue != null) this.keyLocation = keyLocationValue; else this.keyLocation = 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl.events.KeyboardEvent;
openfl.events.KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl.events.KeyboardEvent.__super__ = openfl.events.Event;
openfl.events.KeyboardEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new openfl.events.KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
	}
	,toString: function() {
		return "[KeyboardEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " charCode=" + this.charCode + " keyCode=" + this.keyCode + " keyLocation=" + Std.string(this.keyLocation) + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + "]";
	}
	,__class__: openfl.events.KeyboardEvent
});
openfl.events.MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["openfl.events.MouseEvent"] = openfl.events.MouseEvent;
openfl.events.MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl.events.MouseEvent.__create = function(type,button,local,target) {
	var delta = 2;
	switch(type) {
	case openfl.events.MouseEvent.MOUSE_DOWN:case openfl.events.MouseEvent.MIDDLE_MOUSE_DOWN:case openfl.events.MouseEvent.RIGHT_MOUSE_DOWN:
		openfl.events.MouseEvent.__buttonDown[button] = true;
		break;
	case openfl.events.MouseEvent.MOUSE_UP:case openfl.events.MouseEvent.MIDDLE_MOUSE_UP:case openfl.events.MouseEvent.RIGHT_MOUSE_UP:
		openfl.events.MouseEvent.__buttonDown[button] = false;
		break;
	}
	var pseudoEvent = new openfl.events.MouseEvent(type,true,false,local.x,local.y,null,false,false,false,openfl.events.MouseEvent.__buttonDown[button],delta);
	pseudoEvent.stageX = openfl.Lib.current.stage.get_mouseX();
	pseudoEvent.stageY = openfl.Lib.current.stage.get_mouseY();
	pseudoEvent.target = target;
	return pseudoEvent;
};
openfl.events.MouseEvent.__super__ = openfl.events.Event;
openfl.events.MouseEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new openfl.events.MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
	}
	,toString: function() {
		return "[MouseEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " localX=" + this.localX + " localY=" + this.localY + " relatedObject=" + Std.string(this.relatedObject) + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + " buttonDown=" + Std.string(this.buttonDown) + " delta=" + this.delta + "]";
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl.events.MouseEvent
});
openfl.events.ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) bytesTotal = 0;
	if(bytesLoaded == null) bytesLoaded = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl.events.ProgressEvent;
openfl.events.ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl.events.ProgressEvent.__super__ = openfl.events.Event;
openfl.events.ProgressEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new openfl.events.ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
	}
	,toString: function() {
		return "[ProgressEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " bytesLoaded=" + this.bytesLoaded + " bytesTotal=" + this.bytesTotal + "]";
	}
	,__class__: openfl.events.ProgressEvent
});
openfl.events.SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl.events.SecurityErrorEvent;
openfl.events.SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl.events.SecurityErrorEvent.__super__ = openfl.events.ErrorEvent;
openfl.events.SecurityErrorEvent.prototype = $extend(openfl.events.ErrorEvent.prototype,{
	clone: function() {
		return new openfl.events.SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[SecurityErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl.events.SecurityErrorEvent
});
openfl.events.TimerEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.TimerEvent"] = openfl.events.TimerEvent;
openfl.events.TimerEvent.__name__ = ["openfl","events","TimerEvent"];
openfl.events.TimerEvent.__super__ = openfl.events.Event;
openfl.events.TimerEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new openfl.events.TimerEvent(this.type,this.bubbles,this.cancelable);
	}
	,toString: function() {
		return "[TimerEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + "]";
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl.events.TimerEvent
});
openfl.events.TouchEvent = function(type,bubbles,cancelable,localX,localY,sizeX,sizeY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(sizeY == null) sizeY = 1;
	if(sizeX == null) sizeX = 1;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.pressure = 1;
	this.touchPointID = 0;
	this.isPrimaryTouchPoint = true;
};
$hxClasses["openfl.events.TouchEvent"] = openfl.events.TouchEvent;
openfl.events.TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl.events.TouchEvent.__create = function(type,touch,local,target) {
	var evt = new openfl.events.TouchEvent(type,true,false,local.x,local.y,null,null,null,false,false,false,false,0,null,0);
	evt.stageX = openfl.Lib.current.stage.get_mouseX();
	evt.stageY = openfl.Lib.current.stage.get_mouseY();
	evt.target = target;
	return evt;
};
openfl.events.TouchEvent.__super__ = openfl.events.Event;
openfl.events.TouchEvent.prototype = $extend(openfl.events.Event.prototype,{
	updateAfterEvent: function() {
	}
	,__class__: openfl.events.TouchEvent
});
openfl.filters = {};
openfl.filters.BitmapFilter = function() {
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl.filters.BitmapFilter;
openfl.filters.BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl.filters.BitmapFilter.prototype = {
	clone: function() {
		return new openfl.filters.BitmapFilter();
	}
	,__applyFilter: function(sourceData,targetData,sourceRect,destPoint) {
	}
	,__class__: openfl.filters.BitmapFilter
};
openfl.geom.ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) alphaOffset = 0;
	if(blueOffset == null) blueOffset = 0;
	if(greenOffset == null) greenOffset = 0;
	if(redOffset == null) redOffset = 0;
	if(alphaMultiplier == null) alphaMultiplier = 1;
	if(blueMultiplier == null) blueMultiplier = 1;
	if(greenMultiplier == null) greenMultiplier = 1;
	if(redMultiplier == null) redMultiplier = 1;
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl.geom.ColorTransform;
openfl.geom.ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl.geom.ColorTransform.prototype = {
	concat: function(second) {
		this.redMultiplier += second.redMultiplier;
		this.greenMultiplier += second.greenMultiplier;
		this.blueMultiplier += second.blueMultiplier;
		this.alphaMultiplier += second.alphaMultiplier;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		return new Float32Array([this.redMultiplier,0,0,0,this.redOffset / 255,0,this.greenMultiplier,0,0,this.greenOffset / 255,0,0,this.blueMultiplier,0,this.blueOffset / 255,0,0,0,this.alphaMultiplier,this.alphaOffset / 255]);
	}
	,__class__: openfl.geom.ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
openfl.geom.Matrix3D = function(v) {
	if(v != null && v.length == 16) this.rawData = v; else {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl.geom.Matrix3D;
openfl.geom.Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl.geom.Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl.geom.Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var this1 = m.rawData;
		if(!this1.fixed) {
			if(i >= this1.length) this1.length = i + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[i] = thisMat.rawData.data[i] + (toMat.rawData.data[i] - thisMat.rawData.data[i]) * percent;
	}
	return m;
};
openfl.geom.Matrix3D.getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl.geom.Matrix3D();
	var a1 = new openfl.geom.Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	var this1 = m.rawData;
	if(!this1.fixed) {
		if(0 >= this1.length) this1.length = 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	this1.data[0] = c + a1.x * a1.x * t;
	var this3 = m.rawData;
	if(!this3.fixed) {
		if(5 >= this3.length) this3.length = 6;
		if(this3.data.length < this3.length) {
			var data1;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data1 = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
			this3.data = data1;
		}
	}
	this3.data[5] = c + a1.y * a1.y * t;
	var this5 = m.rawData;
	if(!this5.fixed) {
		if(10 >= this5.length) this5.length = 11;
		if(this5.data.length < this5.length) {
			var data2;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data2 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
			this5.data = data2;
		}
	}
	this5.data[10] = c + a1.z * a1.z * t;
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	var this7 = m.rawData;
	if(!this7.fixed) {
		if(4 >= this7.length) this7.length = 5;
		if(this7.data.length < this7.length) {
			var data3;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data3 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
			this7.data = data3;
		}
	}
	this7.data[4] = tmp1 + tmp2;
	var this9 = m.rawData;
	if(!this9.fixed) {
		if(1 >= this9.length) this9.length = 2;
		if(this9.data.length < this9.length) {
			var data4;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data4 = this10;
			haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
			this9.data = data4;
		}
	}
	this9.data[1] = tmp1 - tmp2;
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	var this11 = m.rawData;
	if(!this11.fixed) {
		if(8 >= this11.length) this11.length = 9;
		if(this11.data.length < this11.length) {
			var data5;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data5 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
			this11.data = data5;
		}
	}
	this11.data[8] = tmp1 - tmp2;
	var this13 = m.rawData;
	if(!this13.fixed) {
		if(2 >= this13.length) this13.length = 3;
		if(this13.data.length < this13.length) {
			var data6;
			var this14;
			this14 = new Array(this13.data.length + 10);
			data6 = this14;
			haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
			this13.data = data6;
		}
	}
	this13.data[2] = tmp1 + tmp2;
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	var this15 = m.rawData;
	if(!this15.fixed) {
		if(9 >= this15.length) this15.length = 10;
		if(this15.data.length < this15.length) {
			var data7;
			var this16;
			this16 = new Array(this15.data.length + 10);
			data7 = this16;
			haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
			this15.data = data7;
		}
	}
	this15.data[9] = tmp1 + tmp2;
	var this17 = m.rawData;
	if(!this17.fixed) {
		if(6 >= this17.length) this17.length = 7;
		if(this17.data.length < this17.length) {
			var data8;
			var this18;
			this18 = new Array(this17.data.length + 10);
			data8 = this18;
			haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
			this17.data = data8;
		}
	}
	this17.data[6] = tmp1 - tmp2;
	return m;
};
openfl.geom.Matrix3D.prototype = {
	append: function(lhs) {
		var m111 = this.rawData.data[0];
		var m121 = this.rawData.data[4];
		var m131 = this.rawData.data[8];
		var m141 = this.rawData.data[12];
		var m112 = this.rawData.data[1];
		var m122 = this.rawData.data[5];
		var m132 = this.rawData.data[9];
		var m142 = this.rawData.data[13];
		var m113 = this.rawData.data[2];
		var m123 = this.rawData.data[6];
		var m133 = this.rawData.data[10];
		var m143 = this.rawData.data[14];
		var m114 = this.rawData.data[3];
		var m124 = this.rawData.data[7];
		var m134 = this.rawData.data[11];
		var m144 = this.rawData.data[15];
		var m211 = lhs.rawData.data[0];
		var m221 = lhs.rawData.data[4];
		var m231 = lhs.rawData.data[8];
		var m241 = lhs.rawData.data[12];
		var m212 = lhs.rawData.data[1];
		var m222 = lhs.rawData.data[5];
		var m232 = lhs.rawData.data[9];
		var m242 = lhs.rawData.data[13];
		var m213 = lhs.rawData.data[2];
		var m223 = lhs.rawData.data[6];
		var m233 = lhs.rawData.data[10];
		var m243 = lhs.rawData.data[14];
		var m214 = lhs.rawData.data[3];
		var m224 = lhs.rawData.data[7];
		var m234 = lhs.rawData.data[11];
		var m244 = lhs.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var m = openfl.geom.Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		this.append(new openfl.geom.Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,appendTranslation: function(x,y,z) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = this.rawData.data[12] + x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = this.rawData.data[13] + y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = this.rawData.data[14] + z;
	}
	,clone: function() {
		return new openfl.geom.Matrix3D((function($this) {
			var $r;
			var this1 = $this.rawData;
			var vectorData = new openfl.VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
			throw new openfl.errors.Error("Error, Column " + column + " out of bounds [0, ..., 3]");
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[1];
			vector3D.z = this.rawData.data[2];
			vector3D.w = this.rawData.data[3];
			break;
		case 1:
			vector3D.x = this.rawData.data[4];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[6];
			vector3D.w = this.rawData.data[7];
			break;
		case 2:
			vector3D.x = this.rawData.data[8];
			vector3D.y = this.rawData.data[9];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[11];
			break;
		case 3:
			vector3D.x = this.rawData.data[12];
			vector3D.y = this.rawData.data[13];
			vector3D.z = this.rawData.data[14];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new openfl.errors.Error("Error, Column " + column + " out of bounds [0, ..., 3]");
		}
	}
	,copyFrom: function(other) {
		var this1 = other.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		this.rawData = vectorData;
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = vector.length - index;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(c >= this1.length) this1.length = c + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[c] = vector.data[c + index];
		}
		if(transpose) this.transpose();
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = this.rawData.length;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var key = c + index;
			if(!vector.fixed) {
				if(key >= vector.length) vector.length = key + 1;
				if(vector.data.length < vector.length) {
					var data;
					var this1;
					this1 = new Array(vector.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vector.data,0,data,0,vector.data.length);
					vector.data = data;
				}
			}
			vector.data[key] = this.rawData.data[c];
		}
		if(transpose) this.transpose();
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(4 >= this3.length) this3.length = 5;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[4] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(8 >= this5.length) this5.length = 9;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[8] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(12 >= this7.length) this7.length = 13;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[12] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(1 >= this9.length) this9.length = 2;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[1] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(9 >= this13.length) this13.length = 10;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[9] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(13 >= this15.length) this15.length = 14;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[13] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(2 >= this17.length) this17.length = 3;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[2] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(6 >= this19.length) this19.length = 7;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[6] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(14 >= this23.length) this23.length = 15;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[14] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(3 >= this25.length) this25.length = 4;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[3] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(7 >= this27.length) this27.length = 8;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[7] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(11 >= this29.length) this29.length = 12;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[11] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
			throw new openfl.errors.Error("Error, Row " + Std.string((function($this) {
				var $r;
				var $int = row;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this))) + " out of bounds [0, ..., 3]");
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[4];
			vector3D.z = this.rawData.data[8];
			vector3D.w = this.rawData.data[12];
			break;
		case 1:
			vector3D.x = this.rawData.data[1];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[9];
			vector3D.w = this.rawData.data[13];
			break;
		case 2:
			vector3D.x = this.rawData.data[2];
			vector3D.y = this.rawData.data[6];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[14];
			break;
		case 3:
			vector3D.x = this.rawData.data[3];
			vector3D.y = this.rawData.data[7];
			vector3D.z = this.rawData.data[11];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new openfl.errors.Error("Error, Row " + row + " out of bounds [0, ..., 3]");
		}
	}
	,copyToMatrix3D: function(other) {
		var this1 = this.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		other.rawData = vectorData;
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) orientationStyle = openfl.geom.Orientation3D.EULER_ANGLES;
		var vec;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		vec = this1;
		var m = this.clone();
		var mr;
		var this3 = m.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this3.length;
		vectorData.fixed = this3.fixed;
		var this4;
		this4 = new Array(this3.length);
		vectorData.data = this4;
		haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,vectorData.data,0,this3.length);
		mr = vectorData;
		var pos = new openfl.geom.Vector3D(mr.data[12],mr.data[13],mr.data[14]);
		if(!mr.fixed) {
			if(12 >= mr.length) mr.length = 13;
			if(mr.data.length < mr.length) {
				var data;
				var this5;
				this5 = new Array(mr.data.length + 10);
				data = this5;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data,0,mr.data.length);
				mr.data = data;
			}
		}
		mr.data[12] = 0;
		if(!mr.fixed) {
			if(13 >= mr.length) mr.length = 14;
			if(mr.data.length < mr.length) {
				var data1;
				var this6;
				this6 = new Array(mr.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data1,0,mr.data.length);
				mr.data = data1;
			}
		}
		mr.data[13] = 0;
		if(!mr.fixed) {
			if(14 >= mr.length) mr.length = 15;
			if(mr.data.length < mr.length) {
				var data2;
				var this7;
				this7 = new Array(mr.data.length + 10);
				data2 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data2,0,mr.data.length);
				mr.data = data2;
			}
		}
		mr.data[14] = 0;
		var scale = new openfl.geom.Vector3D();
		scale.x = Math.sqrt(mr.data[0] * mr.data[0] + mr.data[1] * mr.data[1] + mr.data[2] * mr.data[2]);
		scale.y = Math.sqrt(mr.data[4] * mr.data[4] + mr.data[5] * mr.data[5] + mr.data[6] * mr.data[6]);
		scale.z = Math.sqrt(mr.data[8] * mr.data[8] + mr.data[9] * mr.data[9] + mr.data[10] * mr.data[10]);
		if(mr.data[0] * (mr.data[5] * mr.data[10] - mr.data[6] * mr.data[9]) - mr.data[1] * (mr.data[4] * mr.data[10] - mr.data[6] * mr.data[8]) + mr.data[2] * (mr.data[4] * mr.data[9] - mr.data[5] * mr.data[8]) < 0) scale.z = -scale.z;
		if(!mr.fixed) {
			if(0 >= mr.length) mr.length = 1;
			if(mr.data.length < mr.length) {
				var data3;
				var this8;
				this8 = new Array(mr.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data3,0,mr.data.length);
				mr.data = data3;
			}
		}
		mr.data[0] = mr.data[0] / scale.x;
		if(!mr.fixed) {
			if(1 >= mr.length) mr.length = 2;
			if(mr.data.length < mr.length) {
				var data4;
				var this9;
				this9 = new Array(mr.data.length + 10);
				data4 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data4,0,mr.data.length);
				mr.data = data4;
			}
		}
		mr.data[1] = mr.data[1] / scale.x;
		if(!mr.fixed) {
			if(2 >= mr.length) mr.length = 3;
			if(mr.data.length < mr.length) {
				var data5;
				var this10;
				this10 = new Array(mr.data.length + 10);
				data5 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data5,0,mr.data.length);
				mr.data = data5;
			}
		}
		mr.data[2] = mr.data[2] / scale.x;
		if(!mr.fixed) {
			if(4 >= mr.length) mr.length = 5;
			if(mr.data.length < mr.length) {
				var data6;
				var this11;
				this11 = new Array(mr.data.length + 10);
				data6 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data6,0,mr.data.length);
				mr.data = data6;
			}
		}
		mr.data[4] = mr.data[4] / scale.y;
		if(!mr.fixed) {
			if(5 >= mr.length) mr.length = 6;
			if(mr.data.length < mr.length) {
				var data7;
				var this12;
				this12 = new Array(mr.data.length + 10);
				data7 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data7,0,mr.data.length);
				mr.data = data7;
			}
		}
		mr.data[5] = mr.data[5] / scale.y;
		if(!mr.fixed) {
			if(6 >= mr.length) mr.length = 7;
			if(mr.data.length < mr.length) {
				var data8;
				var this13;
				this13 = new Array(mr.data.length + 10);
				data8 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data8,0,mr.data.length);
				mr.data = data8;
			}
		}
		mr.data[6] = mr.data[6] / scale.y;
		if(!mr.fixed) {
			if(8 >= mr.length) mr.length = 9;
			if(mr.data.length < mr.length) {
				var data9;
				var this14;
				this14 = new Array(mr.data.length + 10);
				data9 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data9,0,mr.data.length);
				mr.data = data9;
			}
		}
		mr.data[8] = mr.data[8] / scale.z;
		if(!mr.fixed) {
			if(9 >= mr.length) mr.length = 10;
			if(mr.data.length < mr.length) {
				var data10;
				var this15;
				this15 = new Array(mr.data.length + 10);
				data10 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data10,0,mr.data.length);
				mr.data = data10;
			}
		}
		mr.data[9] = mr.data[9] / scale.z;
		if(!mr.fixed) {
			if(10 >= mr.length) mr.length = 11;
			if(mr.data.length < mr.length) {
				var data11;
				var this16;
				this16 = new Array(mr.data.length + 10);
				data11 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data11,0,mr.data.length);
				mr.data = data11;
			}
		}
		mr.data[10] = mr.data[10] / scale.z;
		var rot = new openfl.geom.Vector3D();
		switch(orientationStyle[1]) {
		case 0:
			rot.w = Math.acos((mr.data[0] + mr.data[5] + mr.data[10] - 1) / 2);
			var len = Math.sqrt((mr.data[6] - mr.data[9]) * (mr.data[6] - mr.data[9]) + (mr.data[8] - mr.data[2]) * (mr.data[8] - mr.data[2]) + (mr.data[1] - mr.data[4]) * (mr.data[1] - mr.data[4]));
			if(len != 0) {
				rot.x = (mr.data[6] - mr.data[9]) / len;
				rot.y = (mr.data[8] - mr.data[2]) / len;
				rot.z = (mr.data[1] - mr.data[4]) / len;
			} else rot.x = rot.y = rot.z = 0;
			break;
		case 2:
			var tr = mr.data[0] + mr.data[5] + mr.data[10];
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.data[6] - mr.data[9]) / (4 * rot.w);
				rot.y = (mr.data[8] - mr.data[2]) / (4 * rot.w);
				rot.z = (mr.data[1] - mr.data[4]) / (4 * rot.w);
			} else if(mr.data[0] > mr.data[5] && mr.data[0] > mr.data[10]) {
				rot.x = Math.sqrt(1 + mr.data[0] - mr.data[5] - mr.data[10]) / 2;
				rot.w = (mr.data[6] - mr.data[9]) / (4 * rot.x);
				rot.y = (mr.data[1] + mr.data[4]) / (4 * rot.x);
				rot.z = (mr.data[8] + mr.data[2]) / (4 * rot.x);
			} else if(mr.data[5] > mr.data[10]) {
				rot.y = Math.sqrt(1 + mr.data[5] - mr.data[0] - mr.data[10]) / 2;
				rot.x = (mr.data[1] + mr.data[4]) / (4 * rot.y);
				rot.w = (mr.data[8] - mr.data[2]) / (4 * rot.y);
				rot.z = (mr.data[6] + mr.data[9]) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.data[10] - mr.data[0] - mr.data[5]) / 2;
				rot.x = (mr.data[8] + mr.data[2]) / (4 * rot.z);
				rot.y = (mr.data[6] + mr.data[9]) / (4 * rot.z);
				rot.w = (mr.data[1] - mr.data[4]) / (4 * rot.z);
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.data[2]);
			if(mr.data[2] != 1 && mr.data[2] != -1) {
				rot.x = Math.atan2(mr.data[6],mr.data[10]);
				rot.z = Math.atan2(mr.data[1],mr.data[0]);
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.data[4],mr.data[5]);
			}
			break;
		}
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data12;
				var this17;
				this17 = new Array(vec.data.length + 10);
				data12 = this17;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data12,0,vec.data.length);
				vec.data = data12;
			}
			vec.data[vec.length - 1] = pos;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data13;
				var this18;
				this18 = new Array(vec.data.length + 10);
				data13 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data13,0,vec.data.length);
				vec.data = data13;
			}
			vec.data[vec.length - 1] = rot;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data14;
				var this19;
				this19 = new Array(vec.data.length + 10);
				data14 = this19;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data14,0,vec.data.length);
				vec.data = data14;
			}
			vec.data[vec.length - 1] = scale;
		}
		vec.length;
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl.geom.Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[3],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[7],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[11],0);
	}
	,identity: function() {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = this.rawData.data[i] + (toMat.rawData.data[i] - this.rawData.data[i]) * percent;
		}
	}
	,invert: function() {
		var d = (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.data[0];
			var m21 = this.rawData.data[4];
			var m31 = this.rawData.data[8];
			var m41 = this.rawData.data[12];
			var m12 = this.rawData.data[1];
			var m22 = this.rawData.data[5];
			var m32 = this.rawData.data[9];
			var m42 = this.rawData.data[13];
			var m13 = this.rawData.data[2];
			var m23 = this.rawData.data[6];
			var m33 = this.rawData.data[10];
			var m43 = this.rawData.data[14];
			var m14 = this.rawData.data[3];
			var m24 = this.rawData.data[7];
			var m34 = this.rawData.data[11];
			var m44 = this.rawData.data[15];
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) at = new openfl.geom.Vector3D(0,0,-1);
		if(up == null) up = new openfl.geom.Vector3D(0,-1,0);
		var dir = new openfl.geom.Vector3D(at.x - pos.x,at.y - pos.y,at.z - pos.z);
		var vup = new openfl.geom.Vector3D(up.x,up.y,up.z,up.w);
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = new openfl.geom.Vector3D(dir.x,dir.y,dir.z,dir.w);
		dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
		vup = new openfl.geom.Vector3D(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
		if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new openfl.geom.Vector3D(-dir.y,dir.x,0); else vup = new openfl.geom.Vector3D(1,0,0);
		right = new openfl.geom.Vector3D(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
		right.normalize();
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = right.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(4 >= this3.length) this3.length = 5;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[4] = right.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(8 >= this5.length) this5.length = 9;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[8] = right.z;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(12 >= this7.length) this7.length = 13;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[12] = 0.0;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(1 >= this9.length) this9.length = 2;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[1] = vup.x;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = vup.y;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(9 >= this13.length) this13.length = 10;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[9] = vup.z;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(13 >= this15.length) this15.length = 14;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[13] = 0.0;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(2 >= this17.length) this17.length = 3;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[2] = dir.x;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(6 >= this19.length) this19.length = 7;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[6] = dir.y;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = dir.z;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(14 >= this23.length) this23.length = 15;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[14] = 0.0;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(3 >= this25.length) this25.length = 4;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[3] = pos.x;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(7 >= this27.length) this27.length = 8;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[7] = pos.y;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(11 >= this29.length) this29.length = 12;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[11] = pos.z;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = 1.0;
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.data[0];
		var m121 = rhs.rawData.data[4];
		var m131 = rhs.rawData.data[8];
		var m141 = rhs.rawData.data[12];
		var m112 = rhs.rawData.data[1];
		var m122 = rhs.rawData.data[5];
		var m132 = rhs.rawData.data[9];
		var m142 = rhs.rawData.data[13];
		var m113 = rhs.rawData.data[2];
		var m123 = rhs.rawData.data[6];
		var m133 = rhs.rawData.data[10];
		var m143 = rhs.rawData.data[14];
		var m114 = rhs.rawData.data[3];
		var m124 = rhs.rawData.data[7];
		var m134 = rhs.rawData.data[11];
		var m144 = rhs.rawData.data[15];
		var m211 = this.rawData.data[0];
		var m221 = this.rawData.data[4];
		var m231 = this.rawData.data[8];
		var m241 = this.rawData.data[12];
		var m212 = this.rawData.data[1];
		var m222 = this.rawData.data[5];
		var m232 = this.rawData.data[9];
		var m242 = this.rawData.data[13];
		var m213 = this.rawData.data[2];
		var m223 = this.rawData.data[6];
		var m233 = this.rawData.data[10];
		var m243 = this.rawData.data[14];
		var m214 = this.rawData.data[3];
		var m224 = this.rawData.data[7];
		var m234 = this.rawData.data[11];
		var m244 = this.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var m = openfl.geom.Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		this.prepend(new openfl.geom.Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl.geom.Matrix3D();
		m.set_position(new openfl.geom.Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.length < 3 || components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].z == 0) return false;
		if(orientationStyle == null) orientationStyle = openfl.geom.Orientation3D.EULER_ANGLES;
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.data[2].x;
		scale[4] = scale[5] = scale[6] = components.data[2].y;
		scale[8] = scale[9] = scale[10] = components.data[2].z;
		switch(orientationStyle[1]) {
		case 1:
			var cx = Math.cos(components.data[1].x);
			var cy = Math.cos(components.data[1].y);
			var cz = Math.cos(components.data[1].z);
			var sx = Math.sin(components.data[1].x);
			var sy = Math.sin(components.data[1].y);
			var sz = Math.sin(components.data[1].z);
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = cy * cz * scale[0];
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = cy * sz * scale[1];
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = -sy * scale[2];
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = 0;
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = (sx * sy * cz - cx * sz) * scale[4];
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = (sx * sy * sz + cx * cz) * scale[5];
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = sx * cy * scale[6];
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = 0;
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = (cx * sy * cz + sx * sz) * scale[8];
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = (cx * sy * sz - sx * cz) * scale[9];
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = cx * cy * scale[10];
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = 0;
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = components.data[0].x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = components.data[0].y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = components.data[0].z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = 1;
			break;
		default:
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,openfl.geom.Orientation3D.AXIS_ANGLE)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) this33.length = 1;
				if(this33.data.length < this33.length) {
					var data16;
					var this34;
					this34 = new Array(this33.data.length + 10);
					data16 = this34;
					haxe.ds._Vector.Vector_Impl_.blit(this33.data,0,data16,0,this33.data.length);
					this33.data = data16;
				}
			}
			this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(1 >= this35.length) this35.length = 2;
				if(this35.data.length < this35.length) {
					var data17;
					var this36;
					this36 = new Array(this35.data.length + 10);
					data17 = this36;
					haxe.ds._Vector.Vector_Impl_.blit(this35.data,0,data17,0,this35.data.length);
					this35.data = data17;
				}
			}
			this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(2 >= this37.length) this37.length = 3;
				if(this37.data.length < this37.length) {
					var data18;
					var this38;
					this38 = new Array(this37.data.length + 10);
					data18 = this38;
					haxe.ds._Vector.Vector_Impl_.blit(this37.data,0,data18,0,this37.data.length);
					this37.data = data18;
				}
			}
			this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(3 >= this39.length) this39.length = 4;
				if(this39.data.length < this39.length) {
					var data19;
					var this40;
					this40 = new Array(this39.data.length + 10);
					data19 = this40;
					haxe.ds._Vector.Vector_Impl_.blit(this39.data,0,data19,0,this39.data.length);
					this39.data = data19;
				}
			}
			this39.data[3] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(4 >= this41.length) this41.length = 5;
				if(this41.data.length < this41.length) {
					var data20;
					var this42;
					this42 = new Array(this41.data.length + 10);
					data20 = this42;
					haxe.ds._Vector.Vector_Impl_.blit(this41.data,0,data20,0,this41.data.length);
					this41.data = data20;
				}
			}
			this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(5 >= this43.length) this43.length = 6;
				if(this43.data.length < this43.length) {
					var data21;
					var this44;
					this44 = new Array(this43.data.length + 10);
					data21 = this44;
					haxe.ds._Vector.Vector_Impl_.blit(this43.data,0,data21,0,this43.data.length);
					this43.data = data21;
				}
			}
			this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this45 = this.rawData;
			if(!this45.fixed) {
				if(6 >= this45.length) this45.length = 7;
				if(this45.data.length < this45.length) {
					var data22;
					var this46;
					this46 = new Array(this45.data.length + 10);
					data22 = this46;
					haxe.ds._Vector.Vector_Impl_.blit(this45.data,0,data22,0,this45.data.length);
					this45.data = data22;
				}
			}
			this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this47 = this.rawData;
			if(!this47.fixed) {
				if(7 >= this47.length) this47.length = 8;
				if(this47.data.length < this47.length) {
					var data23;
					var this48;
					this48 = new Array(this47.data.length + 10);
					data23 = this48;
					haxe.ds._Vector.Vector_Impl_.blit(this47.data,0,data23,0,this47.data.length);
					this47.data = data23;
				}
			}
			this47.data[7] = 0;
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(8 >= this49.length) this49.length = 9;
				if(this49.data.length < this49.length) {
					var data24;
					var this50;
					this50 = new Array(this49.data.length + 10);
					data24 = this50;
					haxe.ds._Vector.Vector_Impl_.blit(this49.data,0,data24,0,this49.data.length);
					this49.data = data24;
				}
			}
			this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(9 >= this51.length) this51.length = 10;
				if(this51.data.length < this51.length) {
					var data25;
					var this52;
					this52 = new Array(this51.data.length + 10);
					data25 = this52;
					haxe.ds._Vector.Vector_Impl_.blit(this51.data,0,data25,0,this51.data.length);
					this51.data = data25;
				}
			}
			this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this53 = this.rawData;
			if(!this53.fixed) {
				if(10 >= this53.length) this53.length = 11;
				if(this53.data.length < this53.length) {
					var data26;
					var this54;
					this54 = new Array(this53.data.length + 10);
					data26 = this54;
					haxe.ds._Vector.Vector_Impl_.blit(this53.data,0,data26,0,this53.data.length);
					this53.data = data26;
				}
			}
			this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this55 = this.rawData;
			if(!this55.fixed) {
				if(11 >= this55.length) this55.length = 12;
				if(this55.data.length < this55.length) {
					var data27;
					var this56;
					this56 = new Array(this55.data.length + 10);
					data27 = this56;
					haxe.ds._Vector.Vector_Impl_.blit(this55.data,0,data27,0,this55.data.length);
					this55.data = data27;
				}
			}
			this55.data[11] = 0;
			var this57 = this.rawData;
			if(!this57.fixed) {
				if(12 >= this57.length) this57.length = 13;
				if(this57.data.length < this57.length) {
					var data28;
					var this58;
					this58 = new Array(this57.data.length + 10);
					data28 = this58;
					haxe.ds._Vector.Vector_Impl_.blit(this57.data,0,data28,0,this57.data.length);
					this57.data = data28;
				}
			}
			this57.data[12] = components.data[0].x;
			var this59 = this.rawData;
			if(!this59.fixed) {
				if(13 >= this59.length) this59.length = 14;
				if(this59.data.length < this59.length) {
					var data29;
					var this60;
					this60 = new Array(this59.data.length + 10);
					data29 = this60;
					haxe.ds._Vector.Vector_Impl_.blit(this59.data,0,data29,0,this59.data.length);
					this59.data = data29;
				}
			}
			this59.data[13] = components.data[0].y;
			var this61 = this.rawData;
			if(!this61.fixed) {
				if(14 >= this61.length) this61.length = 15;
				if(this61.data.length < this61.length) {
					var data30;
					var this62;
					this62 = new Array(this61.data.length + 10);
					data30 = this62;
					haxe.ds._Vector.Vector_Impl_.blit(this61.data,0,data30,0,this61.data.length);
					this61.data = data30;
				}
			}
			this61.data[14] = components.data[0].z;
			var this63 = this.rawData;
			if(!this63.fixed) {
				if(15 >= this63.length) this63.length = 16;
				if(this63.data.length < this63.length) {
					var data31;
					var this64;
					this64 = new Array(this63.data.length + 10);
					data31 = this64;
					haxe.ds._Vector.Vector_Impl_.blit(this63.data,0,data31,0,this63.data.length);
					this63.data = data31;
				}
			}
			this63.data[15] = 1;
		}
		if(components.data[2].x == 0) {
			var this65 = this.rawData;
			if(!this65.fixed) {
				if(0 >= this65.length) this65.length = 1;
				if(this65.data.length < this65.length) {
					var data32;
					var this66;
					this66 = new Array(this65.data.length + 10);
					data32 = this66;
					haxe.ds._Vector.Vector_Impl_.blit(this65.data,0,data32,0,this65.data.length);
					this65.data = data32;
				}
			}
			this65.data[0] = 1e-15;
		}
		if(components.data[2].y == 0) {
			var this67 = this.rawData;
			if(!this67.fixed) {
				if(5 >= this67.length) this67.length = 6;
				if(this67.data.length < this67.length) {
					var data33;
					var this68;
					this68 = new Array(this67.data.length + 10);
					data33 = this68;
					haxe.ds._Vector.Vector_Impl_.blit(this67.data,0,data33,0,this67.data.length);
					this67.data = data33;
				}
			}
			this67.data[5] = 1e-15;
		}
		if(components.data[2].z == 0) {
			var this69 = this.rawData;
			if(!this69.fixed) {
				if(10 >= this69.length) this69.length = 11;
				if(this69.data.length < this69.length) {
					var data34;
					var this70;
					this70 = new Array(this69.data.length + 10);
					data34 = this70;
					haxe.ds._Vector.Vector_Impl_.blit(this69.data,0,data34,0,this69.data.length);
					this69.data = data34;
				}
			}
			this69.data[10] = 1e-15;
		}
		return !(components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl.geom.Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14],x * this.rawData.data[3] + y * this.rawData.data[7] + z * this.rawData.data[11] + this.rawData.data[15]);
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		while(i + 3 <= vin.length) {
			var x = vin.data[i];
			var y = vin.data[i + 1];
			var z = vin.data[i + 2];
			if(!vout.fixed) {
				if(i >= vout.length) vout.length = i + 1;
				if(vout.data.length < vout.length) {
					var data;
					var this1;
					this1 = new Array(vout.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vout.data,0,data,0,vout.data.length);
					vout.data = data;
				}
			}
			vout.data[i] = x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12];
			var key = i + 1;
			if(!vout.fixed) {
				if(key >= vout.length) vout.length = key + 1;
				if(vout.data.length < vout.length) {
					var data1;
					var this2;
					this2 = new Array(vout.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(vout.data,0,data1,0,vout.data.length);
					vout.data = data1;
				}
			}
			vout.data[key] = x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13];
			var key1 = i + 2;
			if(!vout.fixed) {
				if(key1 >= vout.length) vout.length = key1 + 1;
				if(vout.data.length < vout.length) {
					var data2;
					var this3;
					this3 = new Array(vout.data.length + 10);
					data2 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(vout.data,0,data2,0,vout.data.length);
					vout.data = data2;
				}
			}
			vout.data[key1] = x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14];
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData;
		var this1 = this.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		oRawData = vectorData;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
		}
		this3.data[1] = oRawData.data[4];
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
		}
		this5.data[2] = oRawData.data[8];
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
		}
		this7.data[3] = oRawData.data[12];
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
		}
		this9.data[4] = oRawData.data[1];
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(6 >= this11.length) this11.length = 7;
			if(this11.data.length < this11.length) {
				var data4;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data4 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data4,0,this11.data.length);
				this11.data = data4;
			}
		}
		this11.data[6] = oRawData.data[9];
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(7 >= this13.length) this13.length = 8;
			if(this13.data.length < this13.length) {
				var data5;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data5 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data5,0,this13.data.length);
				this13.data = data5;
			}
		}
		this13.data[7] = oRawData.data[13];
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(8 >= this15.length) this15.length = 9;
			if(this15.data.length < this15.length) {
				var data6;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data6 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data6,0,this15.data.length);
				this15.data = data6;
			}
		}
		this15.data[8] = oRawData.data[2];
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(9 >= this17.length) this17.length = 10;
			if(this17.data.length < this17.length) {
				var data7;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data7 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data7,0,this17.data.length);
				this17.data = data7;
			}
		}
		this17.data[9] = oRawData.data[6];
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(11 >= this19.length) this19.length = 12;
			if(this19.data.length < this19.length) {
				var data8;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data8 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data8,0,this19.data.length);
				this19.data = data8;
			}
		}
		this19.data[11] = oRawData.data[14];
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(12 >= this21.length) this21.length = 13;
			if(this21.data.length < this21.length) {
				var data9;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data9 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data9,0,this21.data.length);
				this21.data = data9;
			}
		}
		this21.data[12] = oRawData.data[3];
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(13 >= this23.length) this23.length = 14;
			if(this23.data.length < this23.length) {
				var data10;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data10 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data10,0,this23.data.length);
				this23.data = data10;
			}
		}
		this23.data[13] = oRawData.data[7];
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(14 >= this25.length) this25.length = 15;
			if(this25.data.length < this25.length) {
				var data11;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data11 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data11,0,this25.data.length);
				this25.data = data11;
			}
		}
		this25.data[14] = oRawData.data[11];
	}
	,get_determinant: function() {
		return (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
	}
	,get_position: function() {
		return new openfl.geom.Vector3D(this.rawData.data[12],this.rawData.data[13],this.rawData.data[14]);
	}
	,set_position: function(val) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = val.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = val.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = val.z;
		return val;
	}
	,__class__: openfl.geom.Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
openfl.geom.Orientation3D = $hxClasses["openfl.geom.Orientation3D"] = { __ename__ : true, __constructs__ : ["AXIS_ANGLE","EULER_ANGLES","QUATERNION"] };
openfl.geom.Orientation3D.AXIS_ANGLE = ["AXIS_ANGLE",0];
openfl.geom.Orientation3D.AXIS_ANGLE.toString = $estr;
openfl.geom.Orientation3D.AXIS_ANGLE.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Orientation3D.EULER_ANGLES = ["EULER_ANGLES",1];
openfl.geom.Orientation3D.EULER_ANGLES.toString = $estr;
openfl.geom.Orientation3D.EULER_ANGLES.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Orientation3D.QUATERNION = ["QUATERNION",2];
openfl.geom.Orientation3D.QUATERNION.toString = $estr;
openfl.geom.Orientation3D.QUATERNION.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Transform = function(displayObject) {
	this.__colorTransform = new openfl.geom.ColorTransform();
	this.concatenatedColorTransform = new openfl.geom.ColorTransform();
	this.concatenatedMatrix = new openfl.geom.Matrix();
	this.pixelBounds = new openfl.geom.Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl.geom.Transform;
openfl.geom.Transform.__name__ = ["openfl","geom","Transform"];
openfl.geom.Transform.prototype = {
	get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		this.__colorTransform = value;
		if(value != null) this.__displayObject.set_alpha(value.alphaMultiplier);
		return this.__colorTransform;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			var matrix = new openfl.geom.Matrix();
			matrix.scale(this.__displayObject.get_scaleX(),this.__displayObject.get_scaleY());
			matrix.rotate(this.__displayObject.get_rotation() * (Math.PI / 180));
			matrix.translate(this.__displayObject.get_x(),this.__displayObject.get_y());
			return matrix;
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__displayObject.set_x(value.tx);
			this.__displayObject.set_y(value.ty);
			this.__displayObject.set_scaleX(Math.sqrt(value.a * value.a + value.b * value.b));
			this.__displayObject.set_scaleY(Math.sqrt(value.c * value.c + value.d * value.d));
			this.__displayObject.set_rotation(Math.atan2(value.b,value.a) * (180 / Math.PI));
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = new openfl.geom.Matrix();
			matrix.scale(this.__displayObject.get_scaleX(),this.__displayObject.get_scaleY());
			matrix.rotate(this.__displayObject.get_rotation() * (Math.PI / 180));
			matrix.translate(this.__displayObject.get_x(),this.__displayObject.get_y());
			return new openfl.geom.Matrix3D((function($this) {
				var $r;
				var value = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
				var vectorData = new openfl.VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(value.length);
					vec = this1;
					var _g1 = 0;
					var _g = value.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = value[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)));
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		if(this.__displayObject != null) {
			this.__displayObject.set_x(value.rawData.data[12]);
			this.__displayObject.set_y(value.rawData.data[13]);
			this.__displayObject.set_scaleX(Math.sqrt(value.rawData.data[0] * value.rawData.data[0] + value.rawData.data[1] * value.rawData.data[1]));
			this.__displayObject.set_scaleY(Math.sqrt(value.rawData.data[4] * value.rawData.data[4] + value.rawData.data[5] * value.rawData.data[5]));
			this.__displayObject.set_rotation(Math.atan2(value.rawData.data[1],value.rawData.data[0]) * (180 / Math.PI));
		}
		return value;
	}
	,__class__: openfl.geom.Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
openfl.geom.Vector3D = function(x,y,z,w) {
	if(w == null) w = 0;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl.geom.Vector3D;
openfl.geom.Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl.geom.Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl.geom.Vector3D.X_AXIS = null;
openfl.geom.Vector3D.Y_AXIS = null;
openfl.geom.Vector3D.Z_AXIS = null;
openfl.geom.Vector3D.angleBetween = function(a,b) {
	var a0 = new openfl.geom.Vector3D(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new openfl.geom.Vector3D(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
openfl.geom.Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl.geom.Vector3D.get_X_AXIS = function() {
	return new openfl.geom.Vector3D(1,0,0);
};
openfl.geom.Vector3D.get_Y_AXIS = function() {
	return new openfl.geom.Vector3D(0,1,0);
};
openfl.geom.Vector3D.get_Z_AXIS = function() {
	return new openfl.geom.Vector3D(0,0,1);
};
openfl.geom.Vector3D.prototype = {
	add: function(a) {
		return new openfl.geom.Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl.geom.Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl.geom.Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl.geom.Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl.geom.Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
openfl.media = {};
openfl.media.ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl.media.ID3Info;
openfl.media.ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl.media.ID3Info.prototype = {
	__class__: openfl.media.ID3Info
};
openfl.media.Sound = function(stream,context) {
	openfl.events.EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.length = 0;
	this.url = null;
	if(stream != null) this.load(stream,context);
};
$hxClasses["openfl.media.Sound"] = openfl.media.Sound;
openfl.media.Sound.__name__ = ["openfl","media","Sound"];
openfl.media.Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl.media.Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl.media.Sound.__super__ = openfl.events.EventDispatcher;
openfl.media.Sound.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	close: function() {
		if(openfl.media.Sound.__registeredSounds.exists(this.__soundID)) createjs.Sound.removeSound(this.__soundID);
	}
	,load: function(stream,context) {
		this.url = stream.url;
		this.__soundID = haxe.io.Path.withoutExtension(stream.url);
		if(!openfl.media.Sound.__registeredSounds.exists(this.__soundID)) {
			openfl.media.Sound.__registeredSounds.set(this.__soundID,true);
			createjs.Sound.addEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.addEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			createjs.Sound.registerSound(this.url,this.__soundID);
		} else this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength,forcePlayAsMusic) {
		if(forcePlayAsMusic == null) forcePlayAsMusic = false;
		openfl.Lib.notImplemented("Sound.loadCompressedDataFromByteArray");
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
		openfl.Lib.notImplemented("Sound.loadPCMFromByteArray");
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(sndTransform == null) sndTransform = new openfl.media.SoundTransform(1,0);
		var instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,loops,sndTransform.volume,sndTransform.pan);
		return new openfl.media.SoundChannel(instance);
	}
	,get_id3: function() {
		return new openfl.media.ID3Info();
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		this.__buffer = buffer;
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,SoundJS_onFileLoad: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
		}
	}
	,SoundJS_onFileError: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR));
		}
	}
	,__class__: openfl.media.Sound
	,__properties__: {get_id3:"get_id3"}
});
openfl.media.SoundChannel = function(soundInstance) {
	openfl.events.EventDispatcher.call(this,this);
	if(soundInstance != null) {
		this.__soundInstance = soundInstance;
		this.__soundInstance.addEventListener("complete",$bind(this,this.source_onComplete));
		this.__isValid = true;
	}
};
$hxClasses["openfl.media.SoundChannel"] = openfl.media.SoundChannel;
openfl.media.SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl.media.SoundChannel.__super__ = openfl.events.EventDispatcher;
openfl.media.SoundChannel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	stop: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
	}
	,__dispose: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
		this.__soundInstance = null;
	}
	,get_position: function() {
		if(!this.__isValid) return 0;
		return this.__soundInstance.getPosition();
	}
	,set_position: function(value) {
		if(!this.__isValid) return 0;
		this.__soundInstance.setPosition(value | 0);
		return this.__soundInstance.getPosition();
	}
	,get_soundTransform: function() {
		if(!this.__isValid) return new openfl.media.SoundTransform();
		return new openfl.media.SoundTransform(this.__soundInstance.getVolume(),this.__soundInstance.getPan());
	}
	,set_soundTransform: function(value) {
		if(!this.__isValid) return value;
		this.__soundInstance.setVolume(value.volume);
		this.__soundInstance.setPan(value.pan);
		return value;
	}
	,soundInstance_onComplete: function(_) {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.SOUND_COMPLETE));
	}
	,source_onComplete: function() {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.SOUND_COMPLETE));
	}
	,__class__: openfl.media.SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
openfl.media.SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	if(bufferTime == null) bufferTime = 0;
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl.media.SoundLoaderContext;
openfl.media.SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl.media.SoundLoaderContext.prototype = {
	__class__: openfl.media.SoundLoaderContext
};
openfl.media.SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl.media.SoundTransform;
openfl.media.SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl.media.SoundTransform.prototype = {
	clone: function() {
		return new openfl.media.SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl.media.SoundTransform
};
openfl.net = {};
openfl.net.URLLoader = function(request) {
	openfl.events.EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(openfl.net.URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["openfl.net.URLLoader"] = openfl.net.URLLoader;
openfl.net.URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl.net.URLLoader.__super__ = openfl.events.EventDispatcher;
openfl.net.URLLoader.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) self.onStatus(s);
			if(s != null && s >= 200 && s < 400) self.onData(subject.response); else if(s == null) self.onError("Failed to connect or resolve host"); else if(s == 12029) self.onError("Failed to connect to host"); else if(s == 12007) self.onError("Unknown host"); else if(s == 0) {
				self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
			} else self.onError("Http Error #" + subject.status);
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js.Boot.__instanceof(data,lime.utils.ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js.Boot.__instanceof(data,openfl.net.URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open(method,url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(method,url,true);
		} catch( e ) {
			this.onError(e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen();
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime.utils.ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var evt = new openfl.events.Event(openfl.events.Event.COMPLETE);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onError: function(msg) {
		var evt = new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onOpen: function() {
		var evt = new openfl.events.Event(openfl.events.Event.OPEN);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onProgress: function(event) {
		var evt = new openfl.events.ProgressEvent(openfl.events.ProgressEvent.PROGRESS);
		evt.currentTarget = this;
		evt.bytesLoaded = event.loaded;
		evt.bytesTotal = event.total;
		this.dispatchEvent(evt);
	}
	,onSecurityError: function(msg) {
		var evt = new openfl.events.SecurityErrorEvent(openfl.events.SecurityErrorEvent.SECURITY_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onStatus: function(status) {
		var evt = new openfl.events.HTTPStatusEvent(openfl.events.HTTPStatusEvent.HTTP_STATUS,false,false,status);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == openfl.net.URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = openfl.net.URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: openfl.net.URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
});
openfl.net.URLLoaderDataFormat = $hxClasses["openfl.net.URLLoaderDataFormat"] = { __ename__ : true, __constructs__ : ["BINARY","TEXT","VARIABLES"] };
openfl.net.URLLoaderDataFormat.BINARY = ["BINARY",0];
openfl.net.URLLoaderDataFormat.BINARY.toString = $estr;
openfl.net.URLLoaderDataFormat.BINARY.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLLoaderDataFormat.TEXT = ["TEXT",1];
openfl.net.URLLoaderDataFormat.TEXT.toString = $estr;
openfl.net.URLLoaderDataFormat.TEXT.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
openfl.net.URLLoaderDataFormat.VARIABLES.toString = $estr;
openfl.net.URLLoaderDataFormat.VARIABLES.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = openfl.net.URLRequestMethod.GET;
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl.net.URLRequest;
openfl.net.URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl.net.URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == openfl.net.URLRequestMethod.GET || this.data == null) return res;
		if(typeof(this.data) == "string" || js.Boot.__instanceof(this.data,lime.utils.ByteArray)) {
			res = res.slice();
			res.push(new openfl.net.URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: openfl.net.URLRequest
};
openfl.net.URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl.net.URLRequestHeader;
openfl.net.URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl.net.URLRequestHeader.prototype = {
	__class__: openfl.net.URLRequestHeader
};
openfl.net.URLRequestMethod = function() { };
$hxClasses["openfl.net.URLRequestMethod"] = openfl.net.URLRequestMethod;
openfl.net.URLRequestMethod.__name__ = ["openfl","net","URLRequestMethod"];
openfl.net.URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["openfl.net.URLVariables"] = openfl.net.URLVariables;
openfl.net.URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl.net.URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = new Array();
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: openfl.net.URLVariables
};
openfl.system.TouchscreenType = $hxClasses["openfl.system.TouchscreenType"] = { __ename__ : true, __constructs__ : ["FINGER","NONE","STYLUS"] };
openfl.system.TouchscreenType.FINGER = ["FINGER",0];
openfl.system.TouchscreenType.FINGER.toString = $estr;
openfl.system.TouchscreenType.FINGER.__enum__ = openfl.system.TouchscreenType;
openfl.system.TouchscreenType.NONE = ["NONE",1];
openfl.system.TouchscreenType.NONE.toString = $estr;
openfl.system.TouchscreenType.NONE.__enum__ = openfl.system.TouchscreenType;
openfl.system.TouchscreenType.STYLUS = ["STYLUS",2];
openfl.system.TouchscreenType.STYLUS.toString = $estr;
openfl.system.TouchscreenType.STYLUS.__enum__ = openfl.system.TouchscreenType;
openfl.system.Capabilities = function() { };
$hxClasses["openfl.system.Capabilities"] = openfl.system.Capabilities;
openfl.system.Capabilities.__name__ = ["openfl","system","Capabilities"];
openfl.system.Capabilities.__properties__ = {get_version:"get_version",get_screenResolutionY:"get_screenResolutionY",get_screenResolutionX:"get_screenResolutionX",get_screenDPI:"get_screenDPI",get_pixelAspectRatio:"get_pixelAspectRatio",get_os:"get_os",get_language:"get_language"}
openfl.system.Capabilities.language = null;
openfl.system.Capabilities.os = null;
openfl.system.Capabilities.pixelAspectRatio = null;
openfl.system.Capabilities.screenDPI = null;
openfl.system.Capabilities.screenResolutionX = null;
openfl.system.Capabilities.screenResolutionY = null;
openfl.system.Capabilities.version = null;
openfl.system.Capabilities.hasMultiChannelAudio = function(type) {
	return false;
};
openfl.system.Capabilities.get_os = function() {
	return "HTML5";
};
openfl.system.Capabilities.get_pixelAspectRatio = function() {
	return 1;
};
openfl.system.Capabilities.get_screenDPI = function() {
	if(openfl.system.Capabilities.screenDPI > 0) return openfl.system.Capabilities.screenDPI;
	var body = window.document.getElementsByTagName("body")[0];
	var testDiv = window.document.createElement("div");
	testDiv.style.width = testDiv.style.height = "1in";
	testDiv.style.padding = testDiv.style.margin = "0px";
	testDiv.style.position = "absolute";
	testDiv.style.top = "-100%";
	body.appendChild(testDiv);
	openfl.system.Capabilities.screenDPI = testDiv.offsetWidth;
	body.removeChild(testDiv);
	return openfl.system.Capabilities.screenDPI;
};
openfl.system.Capabilities.get_screenResolutionX = function() {
	return window.screen.width;
};
openfl.system.Capabilities.get_screenResolutionY = function() {
	return window.screen.height;
};
openfl.system.Capabilities.get_language = function() {
	return navigator.language;
};
openfl.system.Capabilities.get_version = function() {
	var value = "WEB";
	value += " " + StringTools.replace("2.2.8",".",",") + ",0";
	return value;
};
openfl.system.LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl.system.LoaderContext;
openfl.system.LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl.system.LoaderContext.prototype = {
	__class__: openfl.system.LoaderContext
};
openfl.system.SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl.system.SecurityDomain;
openfl.system.SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl.system.SecurityDomain.prototype = {
	__class__: openfl.system.SecurityDomain
};
openfl.system.System = function() { };
$hxClasses["openfl.system.System"] = openfl.system.System;
openfl.system.System.__name__ = ["openfl","system","System"];
openfl.system.System.__properties__ = {get_vmVersion:"get_vmVersion",get_totalMemory:"get_totalMemory"}
openfl.system.System.totalMemory = null;
openfl.system.System.vmVersion = null;
openfl.system.System.exit = function(code) {
	throw "System.exit is currently not supported for HTML5";
};
openfl.system.System.gc = function() {
};
openfl.system.System.pause = function() {
	throw "System.pause is currently not supported for HTML5";
};
openfl.system.System.resume = function() {
	throw "System.resume is currently not supported for HTML5";
};
openfl.system.System.setClipboard = function(string) {
	throw "System.setClipboard is currently not supported for HTML5";
};
openfl.system.System.get_totalMemory = function() {
	return 0;
};
openfl.system.System.get_vmVersion = function() {
	return "1.0.0";
};
openfl.text.AntiAliasType = $hxClasses["openfl.text.AntiAliasType"] = { __ename__ : true, __constructs__ : ["ADVANCED","NORMAL"] };
openfl.text.AntiAliasType.ADVANCED = ["ADVANCED",0];
openfl.text.AntiAliasType.ADVANCED.toString = $estr;
openfl.text.AntiAliasType.ADVANCED.__enum__ = openfl.text.AntiAliasType;
openfl.text.AntiAliasType.NORMAL = ["NORMAL",1];
openfl.text.AntiAliasType.NORMAL.toString = $estr;
openfl.text.AntiAliasType.NORMAL.__enum__ = openfl.text.AntiAliasType;
openfl.text.Font = function(name) {
	lime.graphics.Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl.text.Font;
openfl.text.Font.__name__ = ["openfl","text","Font"];
openfl.text.Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) enumerateDeviceFonts = false;
	return [];
};
openfl.text.Font.fromBytes = function(bytes) {
	var font = new openfl.text.Font();
	return font;
};
openfl.text.Font.fromFile = function(path) {
	var font = new openfl.text.Font();
	font.__fromFile(path);
	return font;
};
openfl.text.Font.registerFont = function(font) {
	var instance;
	instance = js.Boot.__cast(Type.createInstance(font,[]) , openfl.text.Font);
	if(instance != null) openfl.text.Font.__registeredFonts.push(instance);
};
openfl.text.Font.__super__ = lime.graphics.Font;
openfl.text.Font.prototype = $extend(lime.graphics.Font.prototype,{
	__class__: openfl.text.Font
});
openfl.text.FontStyle = $hxClasses["openfl.text.FontStyle"] = { __ename__ : true, __constructs__ : ["REGULAR","ITALIC","BOLD_ITALIC","BOLD"] };
openfl.text.FontStyle.REGULAR = ["REGULAR",0];
openfl.text.FontStyle.REGULAR.toString = $estr;
openfl.text.FontStyle.REGULAR.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.ITALIC = ["ITALIC",1];
openfl.text.FontStyle.ITALIC.toString = $estr;
openfl.text.FontStyle.ITALIC.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.BOLD_ITALIC = ["BOLD_ITALIC",2];
openfl.text.FontStyle.BOLD_ITALIC.toString = $estr;
openfl.text.FontStyle.BOLD_ITALIC.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.BOLD = ["BOLD",3];
openfl.text.FontStyle.BOLD.toString = $estr;
openfl.text.FontStyle.BOLD.__enum__ = openfl.text.FontStyle;
openfl.text.FontType = $hxClasses["openfl.text.FontType"] = { __ename__ : true, __constructs__ : ["DEVICE","EMBEDDED","EMBEDDED_CFF"] };
openfl.text.FontType.DEVICE = ["DEVICE",0];
openfl.text.FontType.DEVICE.toString = $estr;
openfl.text.FontType.DEVICE.__enum__ = openfl.text.FontType;
openfl.text.FontType.EMBEDDED = ["EMBEDDED",1];
openfl.text.FontType.EMBEDDED.toString = $estr;
openfl.text.FontType.EMBEDDED.__enum__ = openfl.text.FontType;
openfl.text.FontType.EMBEDDED_CFF = ["EMBEDDED_CFF",2];
openfl.text.FontType.EMBEDDED_CFF.toString = $estr;
openfl.text.FontType.EMBEDDED_CFF.__enum__ = openfl.text.FontType;
openfl.text.GridFitType = $hxClasses["openfl.text.GridFitType"] = { __ename__ : true, __constructs__ : ["NONE","PIXEL","SUBPIXEL"] };
openfl.text.GridFitType.NONE = ["NONE",0];
openfl.text.GridFitType.NONE.toString = $estr;
openfl.text.GridFitType.NONE.__enum__ = openfl.text.GridFitType;
openfl.text.GridFitType.PIXEL = ["PIXEL",1];
openfl.text.GridFitType.PIXEL.toString = $estr;
openfl.text.GridFitType.PIXEL.__enum__ = openfl.text.GridFitType;
openfl.text.GridFitType.SUBPIXEL = ["SUBPIXEL",2];
openfl.text.GridFitType.SUBPIXEL.toString = $estr;
openfl.text.GridFitType.SUBPIXEL.__enum__ = openfl.text.GridFitType;
openfl.text.TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl.text.TextFormatRange"] = openfl.text.TextFormatRange;
openfl.text.TextFormatRange.__name__ = ["openfl","text","TextFormatRange"];
openfl.text.TextFormatRange.prototype = {
	__class__: openfl.text.TextFormatRange
};
openfl.text.TextFieldAutoSize = $hxClasses["openfl.text.TextFieldAutoSize"] = { __ename__ : true, __constructs__ : ["CENTER","LEFT","NONE","RIGHT"] };
openfl.text.TextFieldAutoSize.CENTER = ["CENTER",0];
openfl.text.TextFieldAutoSize.CENTER.toString = $estr;
openfl.text.TextFieldAutoSize.CENTER.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.LEFT = ["LEFT",1];
openfl.text.TextFieldAutoSize.LEFT.toString = $estr;
openfl.text.TextFieldAutoSize.LEFT.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.NONE = ["NONE",2];
openfl.text.TextFieldAutoSize.NONE.toString = $estr;
openfl.text.TextFieldAutoSize.NONE.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.RIGHT = ["RIGHT",3];
openfl.text.TextFieldAutoSize.RIGHT.toString = $estr;
openfl.text.TextFieldAutoSize.RIGHT.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldType = $hxClasses["openfl.text.TextFieldType"] = { __ename__ : true, __constructs__ : ["DYNAMIC","INPUT"] };
openfl.text.TextFieldType.DYNAMIC = ["DYNAMIC",0];
openfl.text.TextFieldType.DYNAMIC.toString = $estr;
openfl.text.TextFieldType.DYNAMIC.__enum__ = openfl.text.TextFieldType;
openfl.text.TextFieldType.INPUT = ["INPUT",1];
openfl.text.TextFieldType.INPUT.toString = $estr;
openfl.text.TextFieldType.INPUT.__enum__ = openfl.text.TextFieldType;
openfl.text.TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl.text.TextFormat;
openfl.text.TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl.text.TextFormat.prototype = {
	clone: function() {
		var newFormat = new openfl.text.TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) this.font = format.font;
		if(format.size != null) this.size = format.size;
		if(format.color != null) this.color = format.color;
		if(format.bold != null) this.bold = format.bold;
		if(format.italic != null) this.italic = format.italic;
		if(format.underline != null) this.underline = format.underline;
		if(format.url != null) this.url = format.url;
		if(format.target != null) this.target = format.target;
		if(format.align != null) this.align = format.align;
		if(format.leftMargin != null) this.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.rightMargin = format.rightMargin;
		if(format.indent != null) this.indent = format.indent;
		if(format.leading != null) this.leading = format.leading;
		if(format.blockIndent != null) this.blockIndent = format.blockIndent;
		if(format.bullet != null) this.bullet = format.bullet;
		if(format.kerning != null) this.kerning = format.kerning;
		if(format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.tabStops = format.tabStops;
	}
	,__class__: openfl.text.TextFormat
};
openfl.text.TextFormatAlign = $hxClasses["openfl.text.TextFormatAlign"] = { __ename__ : true, __constructs__ : ["LEFT","RIGHT","JUSTIFY","CENTER"] };
openfl.text.TextFormatAlign.LEFT = ["LEFT",0];
openfl.text.TextFormatAlign.LEFT.toString = $estr;
openfl.text.TextFormatAlign.LEFT.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.RIGHT = ["RIGHT",1];
openfl.text.TextFormatAlign.RIGHT.toString = $estr;
openfl.text.TextFormatAlign.RIGHT.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.JUSTIFY = ["JUSTIFY",2];
openfl.text.TextFormatAlign.JUSTIFY.toString = $estr;
openfl.text.TextFormatAlign.JUSTIFY.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.CENTER = ["CENTER",3];
openfl.text.TextFormatAlign.CENTER.toString = $estr;
openfl.text.TextFormatAlign.CENTER.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl.text.TextLineMetrics;
openfl.text.TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl.text.TextLineMetrics.prototype = {
	__class__: openfl.text.TextLineMetrics
};
openfl.ui = {};
openfl.ui._KeyLocation = {};
openfl.ui._KeyLocation.KeyLocation_Impl_ = function() { };
$hxClasses["openfl.ui._KeyLocation.KeyLocation_Impl_"] = openfl.ui._KeyLocation.KeyLocation_Impl_;
openfl.ui._KeyLocation.KeyLocation_Impl_.__name__ = ["openfl","ui","_KeyLocation","KeyLocation_Impl_"];
openfl.ui.Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl.ui.Keyboard;
openfl.ui.Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl.ui.Keyboard.capsLock = null;
openfl.ui.Keyboard.numLock = null;
openfl.ui.Keyboard.isAccessible = function() {
	return false;
};
openfl.ui.Keyboard.__convertMozillaCode = function(code) {
	switch(code) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 14:
		return 13;
	case 16:
		return 16;
	case 17:
		return 17;
	case 20:
		return 20;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 33;
	case 34:
		return 34;
	case 35:
		return 35;
	case 36:
		return 36;
	case 37:
		return 37;
	case 39:
		return 39;
	case 38:
		return 38;
	case 40:
		return 40;
	case 45:
		return 45;
	case 46:
		return 46;
	case 144:
		return 144;
	default:
		return code;
	}
};
openfl.ui.Keyboard.__convertWebkitCode = function(code) {
	var _g = code.toLowerCase();
	switch(_g) {
	case "backspace":
		return 8;
	case "tab":
		return 9;
	case "enter":
		return 13;
	case "shift":
		return 16;
	case "control":
		return 17;
	case "capslock":
		return 20;
	case "escape":
		return 27;
	case "space":
		return 32;
	case "pageup":
		return 33;
	case "pagedown":
		return 34;
	case "end":
		return 35;
	case "home":
		return 36;
	case "left":
		return 37;
	case "right":
		return 39;
	case "up":
		return 38;
	case "down":
		return 40;
	case "insert":
		return 45;
	case "delete":
		return 46;
	case "numlock":
		return 144;
	case "break":
		return 19;
	}
	if(code.indexOf("U+") == 0) return Std.parseInt("0x" + HxOverrides.substr(code,3,null));
	throw "Unrecognized key code: " + code;
	return 0;
};
openfl.utils = {};
openfl.utils.Timer = function(delay,repeatCount) {
	if(repeatCount == null) repeatCount = 0;
	if(Math.isNaN(delay) || delay < 0) throw new openfl.errors.Error("The delay specified is negative or not a finite number");
	openfl.events.EventDispatcher.call(this);
	this.__delay = delay;
	this.set_repeatCount(repeatCount);
	this.running = false;
	this.currentCount = 0;
};
$hxClasses["openfl.utils.Timer"] = openfl.utils.Timer;
openfl.utils.Timer.__name__ = ["openfl","utils","Timer"];
openfl.utils.Timer.__super__ = openfl.events.EventDispatcher;
openfl.utils.Timer.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	reset: function() {
		if(this.running) this.stop();
		this.currentCount = 0;
	}
	,start: function() {
		if(!this.running) {
			this.running = true;
			this.__timerID = window.setInterval($bind(this,this.timer_onTimer),this.__delay | 0);
		}
	}
	,stop: function() {
		this.running = false;
		if(this.__timerID != null) {
			window.clearInterval(this.__timerID);
			this.__timerID = null;
		}
	}
	,get_delay: function() {
		return this.__delay;
	}
	,set_delay: function(value) {
		this.__delay = value;
		if(this.running) {
			this.stop();
			this.start();
		}
		return this.__delay;
	}
	,set_repeatCount: function(v) {
		if(this.running && v != 0 && v <= this.currentCount) this.stop();
		this.repeatCount = v;
		return v;
	}
	,timer_onTimer: function() {
		this.currentCount++;
		if(this.repeatCount > 0 && this.currentCount >= this.repeatCount) {
			this.stop();
			this.dispatchEvent(new openfl.events.TimerEvent(openfl.events.TimerEvent.TIMER));
			this.dispatchEvent(new openfl.events.TimerEvent(openfl.events.TimerEvent.TIMER_COMPLETE));
		} else this.dispatchEvent(new openfl.events.TimerEvent(openfl.events.TimerEvent.TIMER));
	}
	,__class__: openfl.utils.Timer
	,__properties__: {set_repeatCount:"set_repeatCount",set_delay:"set_delay",get_delay:"get_delay"}
});
var panels = {};
panels.BasicPanel = function(_layer) {
	this.showed = false;
	this.hideY = -300;
	this.hideX = 360;
	this.showY = 260;
	this.showX = 360;
	this.showFonAlpha = 0.4;
	this.timeHideFon = 15;
	this.timeShowFon = 15;
	this.timeHide = 15;
	this.timeShow = 30;
};
$hxClasses["panels.BasicPanel"] = panels.BasicPanel;
panels.BasicPanel.__name__ = ["panels","BasicPanel"];
panels.BasicPanel.prototype = {
	show: function() {
		if(Main.getInstance().panel._hideBlackout == false) return;
		Main.getInstance().panel._hideBlackout = false;
		Main.getInstance().panel._blackout.set_y(0);
		motion.Actuate.tween(Main.getInstance().panel._blackout,this.timeShowFon,{ alpha : this.showFonAlpha}).ease(motion.easing.Linear.get_easeNone());
	}
	,hide: function() {
		if(Main.getInstance().panel._hideBlackout == true) return;
		Main.getInstance().panel._hideBlackout = true;
		motion.Actuate.tween(Main.getInstance().panel._blackout,this.timeHideFon,{ alpha : 0}).ease(motion.easing.Linear.get_easeNone());
	}
	,fastHide: function() {
		if(Main.getInstance().panel._hideBlackout == true) return;
		Main.getInstance().panel._hideBlackout = true;
		Main.getInstance().panel._blackout.set_alpha(0);
	}
	,hideComplete: function() {
		Main.getInstance().panel._blackout.set_y(-com.Variables.mSH);
	}
	,custom: function(value) {
	}
	,resize: function() {
	}
	,update: function() {
	}
	,free: function() {
	}
	,__class__: panels.BasicPanel
};
panels.AddDiamond = function(_layer) {
	panels.BasicPanel.call(this,_layer);
	this.container = new com.jdtiles.jda.TileContainer(_layer);
	this.container.set_alpha(0);
	_layer.addChild(this.container);
	this.container.set_x(this.hideX);
	this.container.set_y(this.hideY);
	if(api.SoftGames.getInstance().lang == "ru") this.container.addChildObject(com.tools.Tools.addText(com.Variables.getText("addgems2"),20,-150 + com.Variables.txtShiftX,-145 + com.Variables.txtShiftY,300,200,Main.color2)); else this.container.addChildObject(com.tools.Tools.addText(com.Variables.getText("addgems"),20,-150 + com.Variables.txtShiftX,-112 + com.Variables.txtShiftY,300,200,Main.color2));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"ResultWindow",0,-20));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"podPanelBtn",143,-154));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"inset3",0,10,0.74,0.74,4));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"shopInset3",3,5));
	var btn;
	btn = new com.buttons.Button(this.container);
	btn.initScale("btn_x");
	btn.onCompleteVoid = $bind(this,this.hide);
	btn.setPosition(143,-153);
	this.container.addChildObject(btn);
	btn = new com.buttons.Button(this.container);
	btn.initScale("btn_showVideo");
	btn.onCompleteVoid = $bind(this,this.whatchVideo);
	btn.setPosition(60,80);
	btn.drawGraphics(-175,-170,230,200,true);
	this.container.addChildObject(btn);
	btn = null;
	Main.getInstance().panel.addGraphic();
};
$hxClasses["panels.AddDiamond"] = panels.AddDiamond;
panels.AddDiamond.__name__ = ["panels","AddDiamond"];
panels.AddDiamond.__super__ = panels.BasicPanel;
panels.AddDiamond.prototype = $extend(panels.BasicPanel.prototype,{
	whatchVideo: function() {
		turnOffSoundForAd();
		api.SoftGames.getInstance().triggerIncentivise(($_=scenes.Shop.instance,$bind($_,$_.afterVideoDone)));
		this.fastHide();
	}
	,show: function() {
		this.container.layer.mouseEnabled(true);
		this.container.set_alpha(1);
		motion.Actuate.tween(this.container,this.timeShow,{ y : this.showY}).ease(motion.easing.Elastic.get_easeOut()).onComplete($bind(this,this.complete));
		panels.BasicPanel.prototype.show.call(this);
	}
	,complete: function() {
		this.showed = true;
	}
	,hide: function() {
		panels.BasicPanel.prototype.hide.call(this);
		this.showed = false;
		motion.Actuate.tween(this.container,this.timeHide,{ y : this.hideY}).onComplete($bind(this,this.hideComplete));
	}
	,fastHide: function() {
		panels.BasicPanel.prototype.fastHide.call(this);
		this.showed = false;
		motion.Actuate.stop(this.container,null,false,false);
		this.container.set_y(this.hideY);
		this.hideComplete();
	}
	,hideComplete: function() {
		panels.BasicPanel.prototype.hideComplete.call(this);
		this.container.layer.mouseEnabled(false);
		this.container.set_alpha(0);
	}
	,free: function() {
		panels.BasicPanel.prototype.free.call(this);
		this.container = null;
	}
	,__class__: panels.AddDiamond
});
panels.BasicOffer = function(_layer) {
	panels.BasicPanel.call(this,_layer);
	this.container = new com.jdtiles.jda.TileContainer(_layer);
	this.container.set_alpha(0);
	_layer.addChild(this.container);
	this.container.set_x(this.hideX);
	this.container.set_y(this.hideY);
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"ResultWindow",0,-20));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"podPanelBtn",143,-154));
	var btn;
	btn = new com.buttons.Button(this.container);
	btn.initScale("btn_x");
	btn.onCompleteVoid = $bind(this,this.hide);
	btn.setPosition(143,-153);
	this.container.addChildObject(btn);
	btn = null;
	Main.getInstance().panel.addGraphic();
};
$hxClasses["panels.BasicOffer"] = panels.BasicOffer;
panels.BasicOffer.__name__ = ["panels","BasicOffer"];
panels.BasicOffer.__super__ = panels.BasicPanel;
panels.BasicOffer.prototype = $extend(panels.BasicPanel.prototype,{
	show: function() {
		Main.getInstance().scene.addChildAt(Main.getInstance().panel._blackout,Main.getInstance().scene.getChildIndex(this.container.layer.view) - 1);
		this.container.layer.mouseEnabled(true);
		this.container.set_alpha(1);
		motion.Actuate.tween(this.container,this.timeShow,{ y : this.showY}).ease(motion.easing.Elastic.get_easeOut()).onComplete($bind(this,this.complete));
		panels.BasicPanel.prototype.show.call(this);
	}
	,complete: function() {
		this.showed = true;
	}
	,hide: function() {
		panels.BasicPanel.prototype.hide.call(this);
		this.showed = false;
		motion.Actuate.tween(this.container,this.timeHide,{ y : this.hideY}).onComplete($bind(this,this.hideComplete));
	}
	,fastHide: function() {
		panels.BasicPanel.prototype.fastHide.call(this);
		this.showed = false;
		motion.Actuate.stop(this.container,null,false,false);
		this.container.set_y(this.hideY);
		this.hideComplete();
	}
	,hideComplete: function() {
		panels.BasicPanel.prototype.hideComplete.call(this);
		this.container.layer.mouseEnabled(false);
		this.container.set_alpha(0);
	}
	,free: function() {
		panels.BasicPanel.prototype.free.call(this);
		this.container = null;
	}
	,__class__: panels.BasicOffer
});
panels.Credits = function(_layer) {
	panels.BasicPanel.call(this,_layer);
	this.container = new com.jdtiles.jda.TileContainer(_layer);
	this.container.set_alpha(0);
	_layer.addChild(this.container);
	this.container.set_x(this.hideX);
	this.container.set_y(this.hideY);
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"ResultWindow",0,-20));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"podPanelBtn",143,-154));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"urbanduck",-75,-110));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"haxeopenfl",0,70));
	this.container.addChildObject(com.tools.Tools.addText("Developer :",22,-33 + com.Variables.txtShiftX,-155 + com.Variables.txtShiftY,150,50,Main.color2));
	this.container.addChildObject(com.tools.Tools.addText("URBANDUCK\nGAMES",21,-24 + com.Variables.txtShiftX,-111 + com.Variables.txtShiftY,150,100,Main.color2));
	this.container.addChildObject(com.tools.Tools.addText("urbanduckgames.com",24,-100 + com.Variables.txtShiftX,-45 + com.Variables.txtShiftY,200,50,Main.color2));
	this.container.addChildObject(com.tools.Tools.addText("Engines :",24,-75 + com.Variables.txtShiftX,-7 + com.Variables.txtShiftY,150,50,Main.color2));
	var btn;
	btn = new com.buttons.Button(this.container);
	btn.initScale("btn_x");
	btn.onCompleteVoid = $bind(this,this.hide);
	btn.setPosition(143,-153);
	this.container.addChildObject(btn);
	btn = null;
	Main.getInstance().panel.addGraphic();
};
$hxClasses["panels.Credits"] = panels.Credits;
panels.Credits.__name__ = ["panels","Credits"];
panels.Credits.__super__ = panels.BasicPanel;
panels.Credits.prototype = $extend(panels.BasicPanel.prototype,{
	show: function() {
		com.sound.SoundManager.playSFX("ducks");
		Main.getInstance().scene.addChildAt(Main.getInstance().panel._blackout,Main.getInstance().scene.getChildIndex(this.container.layer.view) - 1);
		this.container.layer.mouseEnabled(true);
		this.container.set_alpha(1);
		motion.Actuate.tween(this.container,this.timeShow,{ y : this.showY}).ease(motion.easing.Elastic.get_easeOut()).onComplete($bind(this,this.complete));
		panels.BasicPanel.prototype.show.call(this);
	}
	,complete: function() {
		this.showed = true;
	}
	,hide: function() {
		panels.BasicPanel.prototype.hide.call(this);
		this.showed = false;
		motion.Actuate.tween(this.container,this.timeHide,{ y : this.hideY}).onComplete($bind(this,this.hideComplete));
	}
	,hideComplete: function() {
		panels.BasicPanel.prototype.hideComplete.call(this);
		this.container.layer.mouseEnabled(false);
		this.container.set_alpha(0);
	}
	,free: function() {
		panels.BasicPanel.prototype.free.call(this);
		this.container = null;
	}
	,__class__: panels.Credits
});
panels.Lose = function(_layer) {
	panels.BasicPanel.call(this,_layer);
	com.sound.SoundManager.playSFX("level_failed");
	this.container = new com.jdtiles.jda.TileContainer(_layer);
	_layer.addChild(this.container);
	this.showY = 220;
	this.container.set_x(this.hideX);
	this.container.set_y(this.hideY);
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"ResultWindow",-1,-50));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"loseIcon",0,-35));
	if(api.SoftGames.getInstance().lang == "de" || api.SoftGames.getInstance().lang == "es" || api.SoftGames.getInstance().lang == "fr" || api.SoftGames.getInstance().lang == "pt" || api.SoftGames.getInstance().lang == "ru" || api.SoftGames.getInstance().lang == "tr" || api.SoftGames.getInstance().lang == "nl" || api.SoftGames.getInstance().lang == "pl") this.container.addChildObject(com.tools.Tools.addText(com.Variables.getText("defeat"),20,-100 + com.Variables.txtShiftX,-196 + com.Variables.txtShiftY,200,50,Main.color2)); else this.container.addChildObject(com.tools.Tools.addText(com.Variables.getText("defeat"),24,-100 + com.Variables.txtShiftX,-187 + com.Variables.txtShiftY,200,50,Main.color2));
	var btn;
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"resultbtnfon",-89,146));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"resultbtnfon",96,146));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"resultbtnfonBig",4,155));
	btn = new com.buttons.Button(this.container);
	btn.initScale("btn_restart2");
	btn.onCompleteVoid = $bind(this,this.restart);
	btn.setPosition(6,163);
	btn.drawGraphics(-46,-45,90,90,true);
	this.container.addChildObject(btn);
	btn = new com.buttons.Button(this.container);
	btn.initScale("btn_back2");
	btn.onCompleteVoid = ($_=scenes.LevelBuilder.getInstance(),$bind($_,$_.back));
	btn.setPosition(-89,155);
	this.container.addChildObject(btn);
	btn = new com.buttons.Button(this.container);
	btn.initScale("btn_shop");
	btn.onCompleteVoid = ($_=scenes.LevelBuilder.getInstance(),$bind($_,$_.shop));
	btn.setPosition(96,156);
	this.container.addChildObject(btn);
	if(Main.getInstance().checkUpgrade("hero",0) == true || Main.getInstance().checkUpgrade("power",1) == true) {
		this.canBuy = new scenes.shopInset.CanBuyIcon(_layer,"shopCanBuy");
		this.canBuy.x = 136;
		this.canBuy.y = 121;
		this.container.addChild(this.canBuy);
		this.canBuy.show();
	}
	com.sound.SoundManager.playSFX("levelDefeat");
	Main.getInstance().panel.blackoutAddGraphics();
};
$hxClasses["panels.Lose"] = panels.Lose;
panels.Lose.__name__ = ["panels","Lose"];
panels.Lose.__super__ = panels.BasicPanel;
panels.Lose.prototype = $extend(panels.BasicPanel.prototype,{
	show: function() {
		motion.Actuate.tween(this.container,this.timeShow,{ y : this.showY}).ease(motion.easing.Elastic.get_easeOut()).onComplete($bind(this,this.complete));
		panels.BasicPanel.prototype.show.call(this);
	}
	,complete: function() {
		this.showed = true;
	}
	,restart: function() {
		this.container.layer.mouseEnabled(false);
		scenes.LevelBuilder.getInstance().restart();
	}
	,update: function() {
		if(this.canBuy != null) this.canBuy.update();
	}
	,free: function() {
		panels.BasicPanel.prototype.free.call(this);
		this.container = null;
		this.canBuy = null;
	}
	,__class__: panels.Lose
});
panels.OfferConfirm = function(_layer) {
	panels.BasicOffer.call(this,_layer);
	this.container.addChildObject(com.tools.Tools.addText(com.Variables.getText("unlockeditems"),20,-150 + com.Variables.txtShiftX,-120 + com.Variables.txtShiftY,300,70,Main.color2));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"inset3",0,0,0.8,0.8));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"diamond",-30,-5));
	this.container.addChildObject(com.tools.Tools.addText("" + OfferValues.instance.igot,30,-80 + com.Variables.txtShiftX,-19 + com.Variables.txtShiftY,200,70,Main.color2));
	var money = Std["int"](com.tools.DataManager.getInstance().getData("money"));
	money += OfferValues.instance.igot;
	com.tools.DataManager.getInstance().saveData("money",money);
	var btnV = new com.buttons.Button(this.container);
	btnV.initScale("btn_shopFull");
	btnV.onCompleteVoid = $bind(this,this.hide);
	btnV.setPosition(60,80);
	btnV.drawGraphics(-175,-170,230,200,true);
	this.container.addChildObject(btnV);
	btnV = null;
};
$hxClasses["panels.OfferConfirm"] = panels.OfferConfirm;
panels.OfferConfirm.__name__ = ["panels","OfferConfirm"];
panels.OfferConfirm.__super__ = panels.BasicOffer;
panels.OfferConfirm.prototype = $extend(panels.BasicOffer.prototype,{
	__class__: panels.OfferConfirm
});
panels.OfferGift = function(_layer) {
	panels.BasicOffer.call(this,_layer);
	this.container.addChildObject(com.tools.Tools.addText(com.Variables.getText("unlockitems"),20,-150 + com.Variables.txtShiftX,-120 + com.Variables.txtShiftY,300,70,Main.color2));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"inset3",0,0,0.8,0.8));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"diamond",-30,-5));
	this.container.addChildObject(com.tools.Tools.addText("" + OfferValues.instance.gift,30,-80 + com.Variables.txtShiftX,-19 + com.Variables.txtShiftY,200,70,Main.color2));
	var btnV = new com.buttons.Button(this.container);
	btnV.initScale("btn_showVideo");
	btnV.onCompleteVoid = $bind(this,this.whatchVideo);
	btnV.setPosition(60,80);
	btnV.drawGraphics(-175,-170,230,200,true);
	this.container.addChildObject(btnV);
	btnV = null;
};
$hxClasses["panels.OfferGift"] = panels.OfferGift;
panels.OfferGift.__name__ = ["panels","OfferGift"];
panels.OfferGift.__super__ = panels.BasicOffer;
panels.OfferGift.prototype = $extend(panels.BasicOffer.prototype,{
	whatchVideo: function() {
		if(this.showed == false) return;
		this.showed = false;
		turnOffSoundForAd();
		api.SoftGames.getInstance().triggerIncentivise($bind(this,this.afterVideoDone));
	}
	,afterVideoDone: function(isVideoFullyWatched) {
		if(isVideoFullyWatched == true) {
			OfferValues.instance.igot = OfferValues.instance.gift;
			this.fastHide();
			Main.getInstance().scene.showPanelConfirm();
			OfferValues.instance.setDefaulGift();
		} else {
			this.fastHide();
			Main.getInstance().scene.showNoMorevideo();
		}
		turnOnSoundForAd();
		Main.getInstance().scene.disableBtnGift();
	}
	,__class__: panels.OfferGift
});
panels.OfferLimited = function(_layer) {
	panels.BasicOffer.call(this,_layer);
	this.container.addChildObject(com.tools.Tools.addText(com.Variables.getText("unlockitems"),20,-150 + com.Variables.txtShiftX,-120 + com.Variables.txtShiftY,300,70,Main.color2));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"inset3",0,0,0.8,0.8));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"diamond",-30,-5));
	this.container.addChildObject(com.tools.Tools.addText("" + OfferValues.instance.limited,30,-80 + com.Variables.txtShiftX,-19 + com.Variables.txtShiftY,200,70,Main.color2));
	var btnV = new com.buttons.Button(this.container);
	btnV.initScale("btn_showVideo");
	btnV.onCompleteVoid = $bind(this,this.whatchVideo);
	btnV.setPosition(60,80);
	btnV.drawGraphics(-175,-170,230,200,true);
	this.container.addChildObject(btnV);
	btnV = null;
};
$hxClasses["panels.OfferLimited"] = panels.OfferLimited;
panels.OfferLimited.__name__ = ["panels","OfferLimited"];
panels.OfferLimited.__super__ = panels.BasicOffer;
panels.OfferLimited.prototype = $extend(panels.BasicOffer.prototype,{
	whatchVideo: function() {
		if(this.showed == false) return;
		this.showed = false;
		turnOffSoundForAd();
		api.SoftGames.getInstance().triggerIncentivise($bind(this,this.afterVideoDone));
	}
	,afterVideoDone: function(isVideoFullyWatched) {
		if(isVideoFullyWatched == true) {
			OfferValues.instance.igot = OfferValues.instance.limited;
			this.fastHide();
			Main.getInstance().scene.showPanelConfirm();
			OfferValues.instance.setDefaultLimited();
		} else {
			this.fastHide();
			Main.getInstance().scene.showNoMorevideo();
		}
		turnOnSoundForAd();
		Main.getInstance().scene.disableBtnLimited();
	}
	,__class__: panels.OfferLimited
});
panels.OpenDoubleJump = function(_layer) {
	panels.BasicPanel.call(this,_layer);
	this.container = new com.jdtiles.jda.TileContainer(_layer);
	this.container.set_alpha(0);
	_layer.addChild(this.container);
	this.container.set_x(this.hideX);
	this.container.set_y(this.hideY);
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"ResultWindow",0,-20));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"podPanelBtn",143,-154));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"openDoubleJump",-5,-60));
	this.container.addChildObject(com.tools.Tools.addText(com.Variables.getText("newAbility"),26,-150 + com.Variables.txtShiftX,-210 + com.Variables.txtShiftY,300,70,Main.color2));
	this.container.addChildObject(com.tools.Tools.addText(com.Variables.getText("openDoubleJump"),20,-125 + com.Variables.txtShiftX,30 + com.Variables.txtShiftY,250,200,Main.color2));
	var btn;
	btn = new com.buttons.Button(this.container);
	btn.initScale("btn_x");
	btn.onCompleteVoid = $bind(this,this.hide);
	btn.setPosition(143,-153);
	this.container.addChildObject(btn);
	btn = null;
	Main.getInstance().panel.addGraphic();
};
$hxClasses["panels.OpenDoubleJump"] = panels.OpenDoubleJump;
panels.OpenDoubleJump.__name__ = ["panels","OpenDoubleJump"];
panels.OpenDoubleJump.__super__ = panels.BasicPanel;
panels.OpenDoubleJump.prototype = $extend(panels.BasicPanel.prototype,{
	show: function() {
		Main.getInstance().scene.addChildAt(Main.getInstance().panel._blackout,Main.getInstance().scene.getChildIndex(this.container.layer.view) - 1);
		this.container.set_alpha(1);
		motion.Actuate.tween(this.container,this.timeShow,{ y : this.showY}).ease(motion.easing.Elastic.get_easeOut()).onComplete($bind(this,this.complete));
		panels.BasicPanel.prototype.show.call(this);
	}
	,complete: function() {
		this.showed = true;
	}
	,hide: function() {
		panels.BasicPanel.prototype.hide.call(this);
		this.showed = false;
		motion.Actuate.tween(this.container,this.timeHide,{ y : this.hideY}).onComplete($bind(this,this.hideComplete));
	}
	,hideComplete: function() {
		this.container.layer.mouseEnabled(false);
		(js.Boot.__cast(Main.getInstance().scene , scenes.Levels)).openNew();
		panels.BasicPanel.prototype.hideComplete.call(this);
		this.container.set_alpha(0);
	}
	,free: function() {
		panels.BasicPanel.prototype.free.call(this);
		this.container = null;
	}
	,__class__: panels.OpenDoubleJump
});
panels.OpenOranges = function(_layer) {
	panels.BasicPanel.call(this,_layer);
	this.container = new com.jdtiles.jda.TileContainer(_layer);
	this.container.set_alpha(0);
	_layer.addChild(this.container);
	this.container.set_x(this.hideX);
	this.container.set_y(this.hideY);
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"ResultWindow",0,-20));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"podPanelBtn",143,-154));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"openOranges",-3,-63));
	this.container.addChildObject(com.tools.Tools.addText(com.Variables.getText("newAbility"),26,-150 + com.Variables.txtShiftX,-210 + com.Variables.txtShiftY,300,70,Main.color2));
	this.container.addChildObject(com.tools.Tools.addText(com.Variables.getText("openOranges"),20,-125 + com.Variables.txtShiftX,30 + com.Variables.txtShiftY,250,200,Main.color2));
	var btn;
	btn = new com.buttons.Button(this.container);
	btn.initScale("btn_x");
	btn.onCompleteVoid = $bind(this,this.hide);
	btn.setPosition(143,-153);
	this.container.addChildObject(btn);
	btn = null;
	Main.getInstance().panel.addGraphic();
};
$hxClasses["panels.OpenOranges"] = panels.OpenOranges;
panels.OpenOranges.__name__ = ["panels","OpenOranges"];
panels.OpenOranges.__super__ = panels.BasicPanel;
panels.OpenOranges.prototype = $extend(panels.BasicPanel.prototype,{
	show: function() {
		Main.getInstance().scene.addChildAt(Main.getInstance().panel._blackout,Main.getInstance().scene.getChildIndex(this.container.layer.view) - 1);
		this.container.set_alpha(1);
		motion.Actuate.tween(this.container,this.timeShow,{ y : this.showY}).ease(motion.easing.Elastic.get_easeOut()).onComplete($bind(this,this.complete));
		panels.BasicPanel.prototype.show.call(this);
	}
	,complete: function() {
		this.showed = true;
	}
	,hide: function() {
		panels.BasicPanel.prototype.hide.call(this);
		this.showed = false;
		motion.Actuate.tween(this.container,this.timeHide,{ y : this.hideY}).onComplete($bind(this,this.hideComplete));
	}
	,hideComplete: function() {
		this.container.layer.mouseEnabled(false);
		(js.Boot.__cast(Main.getInstance().scene , scenes.Levels)).openNew();
		panels.BasicPanel.prototype.hideComplete.call(this);
		this.container.set_alpha(0);
	}
	,free: function() {
		panels.BasicPanel.prototype.free.call(this);
		this.container = null;
	}
	,__class__: panels.OpenOranges
});
panels.PanelList = $hxClasses["panels.PanelList"] = { __ename__ : true, __constructs__ : ["Lose","Pause","Win","OpenDoubleJump","OpenOranges","Credits","ShowFullVideo","AddDiamond","OfferGift","OfferLimited","OfferConfirm"] };
panels.PanelList.Lose = ["Lose",0];
panels.PanelList.Lose.toString = $estr;
panels.PanelList.Lose.__enum__ = panels.PanelList;
panels.PanelList.Pause = ["Pause",1];
panels.PanelList.Pause.toString = $estr;
panels.PanelList.Pause.__enum__ = panels.PanelList;
panels.PanelList.Win = ["Win",2];
panels.PanelList.Win.toString = $estr;
panels.PanelList.Win.__enum__ = panels.PanelList;
panels.PanelList.OpenDoubleJump = ["OpenDoubleJump",3];
panels.PanelList.OpenDoubleJump.toString = $estr;
panels.PanelList.OpenDoubleJump.__enum__ = panels.PanelList;
panels.PanelList.OpenOranges = ["OpenOranges",4];
panels.PanelList.OpenOranges.toString = $estr;
panels.PanelList.OpenOranges.__enum__ = panels.PanelList;
panels.PanelList.Credits = ["Credits",5];
panels.PanelList.Credits.toString = $estr;
panels.PanelList.Credits.__enum__ = panels.PanelList;
panels.PanelList.ShowFullVideo = ["ShowFullVideo",6];
panels.PanelList.ShowFullVideo.toString = $estr;
panels.PanelList.ShowFullVideo.__enum__ = panels.PanelList;
panels.PanelList.AddDiamond = ["AddDiamond",7];
panels.PanelList.AddDiamond.toString = $estr;
panels.PanelList.AddDiamond.__enum__ = panels.PanelList;
panels.PanelList.OfferGift = ["OfferGift",8];
panels.PanelList.OfferGift.toString = $estr;
panels.PanelList.OfferGift.__enum__ = panels.PanelList;
panels.PanelList.OfferLimited = ["OfferLimited",9];
panels.PanelList.OfferLimited.toString = $estr;
panels.PanelList.OfferLimited.__enum__ = panels.PanelList;
panels.PanelList.OfferConfirm = ["OfferConfirm",10];
panels.PanelList.OfferConfirm.toString = $estr;
panels.PanelList.OfferConfirm.__enum__ = panels.PanelList;
panels.PanelFunc = $hxClasses["panels.PanelFunc"] = { __ename__ : true, __constructs__ : ["show","hide","custom"] };
panels.PanelFunc.show = ["show",0];
panels.PanelFunc.show.toString = $estr;
panels.PanelFunc.show.__enum__ = panels.PanelFunc;
panels.PanelFunc.hide = ["hide",1];
panels.PanelFunc.hide.toString = $estr;
panels.PanelFunc.hide.__enum__ = panels.PanelFunc;
panels.PanelFunc.custom = ["custom",2];
panels.PanelFunc.custom.toString = $estr;
panels.PanelFunc.custom.__enum__ = panels.PanelFunc;
panels.PanelBase = function() {
	this._hideBlackout = true;
};
$hxClasses["panels.PanelBase"] = panels.PanelBase;
panels.PanelBase.__name__ = ["panels","PanelBase"];
panels.PanelBase.prototype = {
	initBlackout: function(_index) {
		if(this._blackout != null) return;
		this._panels = new haxe.ds.EnumValueMap();
		this._blackout = new openfl.display.Sprite();
		this._blackout.get_graphics().beginFill(0,0.6);
		this._blackout.get_graphics().drawRect(-com.Variables.oW,-com.Variables.oH,com.Variables.mSW,com.Variables.mSH);
		this._blackout.get_graphics().endFill();
		this._blackout.set_alpha(0);
		this._blackout.set_y(-com.Variables.mSH);
		Main.getInstance().scene.addChildAt(this._blackout,_index);
	}
	,addGraphic: function() {
		this._blackout.set_name("disable");
		this._blackout.get_graphics().clear();
		this._blackout.get_graphics().beginFill(0,0.6);
		this._blackout.get_graphics().drawRect(-com.Variables.oW,-com.Variables.oH,com.Variables.mSW,com.Variables.mSH);
		this._blackout.get_graphics().beginFill(0);
		this._blackout.get_graphics().drawRect(150,-com.Variables.oH,420,com.Variables.mSH);
		this._blackout.get_graphics().endFill();
	}
	,blackoutAddGraphics: function() {
		this.addGraphic();
		scenes.LevelBuilder.getInstance().pause();
	}
	,init: function(_panel,_layer,_show) {
		if(_show == null) _show = false;
		this.initBlackout(Main.getInstance().scene.getChildIndex(_layer.view));
		if(this._panels.get(_panel) != null) return;
		var newPanel = Type.createInstance(Type.resolveClass("panels." + Std.string(_panel)),[_layer]);
		if(_show == true) newPanel.show();
		this._panels.set(_panel,newPanel);
	}
	,panelFunc: function(_panel,_func,_value) {
		if(_value == null) _value = 0;
		if(this._panels == null || this._panels.get(_panel) == null) return;
		switch(_func[1]) {
		case 0:
			this._panels.get(_panel).show();
			break;
		case 1:
			this._panels.get(_panel).hide();
			break;
		case 2:
			this._panels.get(_panel).custom(_value);
			break;
		}
	}
	,resize: function() {
		if(this._panels == null) return;
		var $it0 = this._panels.iterator();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(i == null) continue;
			i.resize();
		}
	}
	,update: function() {
		if(this._panels == null) return;
		var $it0 = this._panels.iterator();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			i.update();
		}
	}
	,free: function() {
		this._hideBlackout = true;
		if(this._panels != null) {
			var $it0 = this._panels.iterator();
			while( $it0.hasNext() ) {
				var i = $it0.next();
				i.free();
			}
		}
		this._panels = null;
		this._blackout = null;
	}
	,__class__: panels.PanelBase
};
panels.Pause = function(_layer) {
	this.iterBtn = 0;
	this.showing = false;
	this.disable = false;
	panels.BasicPanel.call(this,_layer);
	this.btns = new Array();
	this.showingOfX = 671 + com.Variables.shiftX;
	this.hidingOfX = 755 + com.Variables.shiftX;
	this.panel = new com.jdtiles.jda.TileSprite(_layer,"pause");
	this.panel.x = 360;
	this.panel.alpha = 0;
	_layer.addChild(this.panel);
	this.panelText = com.tools.Tools.addText(com.Variables.getText("pause"),36,422 + com.Variables.txtShiftX,-70 + com.Variables.txtShiftY,150,100,Main.color2);
	this.panelText.set_alpha(0);
	_layer.view.addChild(this.panelText);
	this.set_panelY(-100);
	this.btnPausePlay = new com.buttons.Button(_layer,true);
	this.btnPausePlay.set_name("pause");
	this.btnPausePlay.initOneFrame("podBtn",9);
	this.btnPausePlay.initScale("btn_pause");
	this.btnPausePlay.onCompleteVoid = $bind(this,this.showhide);
	this.btnPausePlay.startY = 110;
	this.btnPausePlay.setPosition(this.showingOfX,110 - com.Variables.shiftY);
	_layer.view.addChild(this.btnPausePlay);
	var btn;
	btn = new com.buttons.Button(_layer,true);
	btn.initOneFrame("podBtn",9);
	btn.initScale("btn_restart",2);
	btn.onCompleteVoid = $bind(this,this.restart);
	btn.startY = 180;
	btn.setPosition(this.hidingOfX,180 - com.Variables.shiftY);
	_layer.view.addChild(btn);
	btn.disable();
	this.btns.push(btn);
	btn = new com.buttons.Button(_layer,true);
	btn.initOneFrame("podBtn",9);
	btn.initScale("btn_back");
	btn.onCompleteVoid = $bind(this,this.back);
	btn.startY = 250;
	btn.setPosition(this.hidingOfX,250 - com.Variables.shiftY);
	_layer.view.addChild(btn);
	btn.disable();
	this.btns.push(btn);
	btn = new com.buttons.Button(_layer,true);
	btn.initOneFrame("podBtn",9);
	btn.initSound("btn_music","btn_sfx","btn_off");
	btn.startY = 320;
	btn.setPosition(this.hidingOfX,320 - com.Variables.shiftY);
	_layer.view.addChild(btn);
	btn.disable();
	this.btns.push(btn);
	btn = null;
	this.timeShow = this.timeHide = 4;
};
$hxClasses["panels.Pause"] = panels.Pause;
panels.Pause.__name__ = ["panels","Pause"];
panels.Pause.__super__ = panels.BasicPanel;
panels.Pause.prototype = $extend(panels.BasicPanel.prototype,{
	restart: function() {
		scenes.LevelBuilder.getInstance().callGameOverAndFinished();
		scenes.LevelBuilder.getInstance().restart();
	}
	,back: function() {
		scenes.LevelBuilder.getInstance().callGameOverAndFinished();
		scenes.LevelBuilder.getInstance().back();
	}
	,custom: function(value) {
		if(this.disable == true) return;
		if(value == 0) {
			this.disable = true;
			this.btnPausePlay.disable();
		} else if(value == 1 && this.showed == true && this.showing == true) this.hide();
	}
	,showhide: function() {
		if(this.showed == false && this.showing == false) this.show(); else if(this.showed == true && this.showing == true) this.hide();
	}
	,show: function() {
		if(this.showing == true) return;
		com.sound.SoundManager.playSFX("pause_show");
		scenes.LevelBuilder.getInstance().pause();
		panels.BasicPanel.prototype.show.call(this);
		this.btnPausePlay.graphicFront.set_tile("btn_play");
		this.btnPausePlay.graphicFront.set_offsetX(1);
		this.showing = true;
		this.showNextBtn();
		this.panel.alpha = 1;
		this.panelText.set_alpha(1);
		motion.Actuate.tween(this,30,{ panelY : 150}).ease(motion.easing.Elastic.get_easeOut()).onComplete($bind(this,this.complete));
	    didPauseGame();
	}
	,showNextBtn: function() {
		if(this.iterBtn == this.btns.length) {
			this.iterBtn = this.btns.length - 1;
			this.showed = true;
			Main.getInstance().panel._blackout.set_name("hide");
			return;
		}
		this.btns[this.iterBtn].enable();
		motion.Actuate.tween(this.btns[this.iterBtn],this.timeShow,{ totalX : this.showingOfX}).ease(motion.easing.Linear.get_easeNone()).onComplete($bind(this,this.showNextBtn));
		this.iterBtn += 1;
	}
	,hide: function() {
		if(this.showing == false) return;
		Main.getInstance().panel._blackout.set_name("disable");
		panels.BasicPanel.prototype.hide.call(this);
		this.showing = false;
		this.hideNextBtn();
		motion.Actuate.tween(this,15,{ panelY : -100}).ease(motion.easing.Linear.get_easeNone()).onComplete($bind(this,this.hideComplete));
	}
	,hideNextBtn: function() {
		if(this.iterBtn == -1) {
			this.iterBtn = 0;
			return;
		}
		motion.Actuate.tween(this.btns[this.iterBtn],this.timeHide,{ totalX : this.hidingOfX}).ease(motion.easing.Linear.get_easeNone()).onComplete($bind(this,this.hideNextBtn));
		this.iterBtn -= 1;
	}
	,hideComplete: function() {
		var _g = 0;
		var _g1 = this.btns;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.disable();
		}
		this.panel.alpha = 0;
		this.panelText.set_alpha(0);
		this.showed = false;
		this.btnPausePlay.graphicFront.set_tile("btn_pause");
		this.btnPausePlay.graphicFront.set_offsetX(0);
		scenes.LevelBuilder.getInstance().resume();
		panels.BasicPanel.prototype.hideComplete.call(this);
	}
	,resize: function() {
		if(this.disable == true) return;
		this.showingOfX = 671 + com.Variables.shiftX;
		this.hidingOfX = 755 + com.Variables.shiftX;
		this.btnPausePlay.setPosition(this.showingOfX,this.btnPausePlay.startY - com.Variables.shiftY);
		var _g = 0;
		var _g1 = this.btns;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			motion.Actuate.stop(i,null,false,false);
			if(this.showing == true) {
				i.enable();
				i.setPosition(this.showingOfX,i.startY - com.Variables.shiftY);
			} else i.setPosition(this.hidingOfX,i.startY - com.Variables.shiftY);
		}
		if(this.showing == true) {
			this.iterBtn = this.btns.length - 1;
			this.showed = true;
			Main.getInstance().panel._blackout.set_name("hide");
		} else this.iterBtn = 0;
	}
	,get_panelY: function() {
		return this._panelY;
	}
	,set_panelY: function(value) {
		this._panelY = value;
		this.panel.y = this._panelY;
		this.panelText.set_y(this._panelY + 10 + com.Variables.txtShiftY);
		return value;
	}
	,complete: function() {
		this.panelText.set_y(this.panel.y + 10 + com.Variables.txtShiftY);
	}
	,free: function() {
		panels.BasicPanel.prototype.free.call(this);
		this.btnPausePlay = null;
		this.btns = [];
		this.btns = null;
		this.panel = null;
		this.panelText = null;
	}
	,__class__: panels.Pause
	,__properties__: {set_panelY:"set_panelY",get_panelY:"get_panelY"}
});
panels.ShowFullVideo = function(_layer) {
	panels.BasicPanel.call(this,_layer);
	this.container = new com.jdtiles.jda.TileContainer(_layer);
	this.container.set_alpha(0);
	_layer.addChild(this.container);
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"showFullVideo"));
	this.container.addChildObject(com.tools.Tools.addText(com.Variables.getText("whatchfullyvideo"),24,-150 + com.Variables.txtShiftX,-7 + com.Variables.txtShiftY,300,150,Main.color1));
	this.timeShow = 10;
	this.timeHide = 10;
	this.resize();
};
$hxClasses["panels.ShowFullVideo"] = panels.ShowFullVideo;
panels.ShowFullVideo.__name__ = ["panels","ShowFullVideo"];
panels.ShowFullVideo.__super__ = panels.BasicPanel;
panels.ShowFullVideo.prototype = $extend(panels.BasicPanel.prototype,{
	show: function() {
		this.container.set_alpha(1);
		this.container.set_x(this.hideX);
		this.container.set_y(this.hideY);
		motion.Actuate.tween(this.container,this.timeShow,{ y : this.showY}).onComplete($bind(this,this.complete));
	}
	,complete: function() {
		this.showed = true;
		motion.Actuate.tween(this.container,90,{ alpha : 1}).onComplete($bind(this,this.hide));
	}
	,hide: function() {
		this.showed = false;
		motion.Actuate.tween(this.container,this.timeHide,{ y : this.hideY}).onComplete($bind(this,this.hideComplete));
	}
	,hideComplete: function() {
		this.container.set_alpha(0);
	}
	,resize: function() {
		this.hideX = 565 + com.Variables.shiftX;
		this.hideY = 560 + com.Variables.shiftY;
		this.showX = this.hideX;
		this.showY = 407 + com.Variables.shiftY;
		this.container.set_x(this.showX);
	}
	,free: function() {
		panels.BasicPanel.prototype.free.call(this);
		this.container = null;
	}
	,__class__: panels.ShowFullVideo
});
panels.Win = function(_layer) {
	this.btnvC = 0;
	this.btnvB = true;
	this.dobDLeC = 10;
	this.dobDLe = 0.01;
	this.timeShowStar = 20;
	this.timeNoStar = 15;
	this.qq = false;
	panels.BasicPanel.call(this,_layer);
	this.layer = _layer;
	this.container = new com.jdtiles.jda.TileContainer(this.layer);
	this.layer.addChild(this.container);
	this.showY = 220;
	this.container.set_x(this.hideX);
	this.container.set_y(this.hideY);
	this.container.addChild(com.jdtiles.Tile.getTileSprite(this.layer,"ResultWindow",-1,-50));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(this.layer,"podStar",0,-83));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(this.layer,"flagfinish",-86,-46));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(this.layer,"bird",0,-54));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(this.layer,"heart",88,-54));
	this.container.addChild(com.jdtiles.Tile.getTileSprite(this.layer,"podDiamond",0,33));
	this.dobDiamond = new com.jdtiles.jda.TileSprite(_layer,"dobDiamond");
	this.dobDiamond.x = -80;
	this.dobDiamond.y = 33;
	this.container.addChild(this.dobDiamond);
	this.container.addChildObject(com.tools.Tools.addText(com.Variables.getText("victory"),30,-100 + com.Variables.txtShiftX,-190 + com.Variables.txtShiftY,200,50,Main.color2));
	this.tfDiamond = com.tools.Tools.addText("" + scenes.LevelBuilder.getInstance().health.countDiamond,30,-40 + com.Variables.txtShiftX,19 + com.Variables.txtShiftY,100,50,Main.color2);
	var btn;
	this.container.addChild(com.jdtiles.Tile.getTileSprite(_layer,"resultbtnfon",0,146));
	btn = new com.buttons.Button(this.container);
	btn.initScale("btn_next");
	btn.onCompleteVoid = $bind(this,this.nextLevel);
	btn.setPosition(2,155);
	this.container.addChildObject(btn);
	this.btnVideo = new com.buttons.Button(this.container);
	this.btnVideo.initScale("btn_video");
	this.btnVideo.onCompleteVoid = $bind(this,this.whatchVideo);
	this.btnVideo.setPosition(70,30);
	this.btnVideo.disable();
	this.container.addChildObject(this.btnVideo);
	this.tfBird = com.tools.Tools.addText("" + scenes.additional.Game.instance.birdFreedom + "/" + scenes.additional.Game.instance.maxBirds,24,-50 + com.Variables.txtShiftX,-37 + com.Variables.txtShiftY,100,50,Main.color2);
	this.container.addChildObject(this.tfBird);
	this.tfHealth = com.tools.Tools.addText("" + scenes.additional.Game.instance.hero.health + "/" + scenes.additional.Game.instance.hero.maxhealth,24,38 + com.Variables.txtShiftX,-37 + com.Variables.txtShiftY,100,50,Main.color2);
	this.container.addChildObject(this.tfHealth);
	var totalStars = 1;
	if(scenes.additional.Game.instance.birdFreedom == scenes.additional.Game.instance.maxBirds) totalStars += 1;
	if(scenes.additional.Game.instance.hero.health == scenes.additional.Game.instance.hero.maxhealth) totalStars += 1;
	com.tools.DataManager.getInstance().saveBigger("stars" + scenes.LevelBuilder.getInstance().currLevel,totalStars);
	var needOpenLevel = scenes.LevelBuilder.getInstance().currLevel + 1;
	if(scenes.LevelBuilder.getInstance().currLevel > 6) needOpenLevel += 1;
	com.tools.DataManager.getInstance().saveData("needOpenLevel",needOpenLevel);
	Main.getInstance().panel.blackoutAddGraphics();
	com.sound.SoundManager.playSFX("levelComplete");
	if(api.SoftGames.getInstance().isEnabledIncentiviseButton() == true) {
		this.qq = true;
		this.btnVideo.enable();
		this.tfDiamond.set_x(-55 + com.Variables.txtShiftX);
	}
	this.container.addChildObject(this.tfDiamond);
};
$hxClasses["panels.Win"] = panels.Win;
panels.Win.__name__ = ["panels","Win"];
panels.Win.__super__ = panels.BasicPanel;
panels.Win.prototype = $extend(panels.BasicPanel.prototype,{
	nextLevel: function() {
		this.goMapNoMidroll();
	}
	,startMidroll: function() {
		this.container.set_y(this.hideY);
		this.container.set_alpha(0);
	}
	,goMapNoMidroll: function() {
		scenes.LevelBuilder.getInstance().next();
	}
	,goToMap: function() {
		this.goMapNoMidroll();
	}
	,whatchVideo: function() {
		this.btnVideo.disable();
		if(this.qq == true) this.tfDiamond.set_x(-55 + com.Variables.txtShiftX); else this.tfDiamond.set_x(-40 + com.Variables.txtShiftX);
		this.tfDiamond.set_y(19 + com.Variables.txtShiftY);
		this.container.setObjectParam(this.tfDiamond);
		this.container.renderObj(this.tfDiamond);
		turnOffSoundForAd();
		api.SoftGames.getInstance().triggerIncentivise($bind(this,this.afterVideoDone));
	}
	,afterVideoDone: function(isVideoFullyWatched) {
		if(isVideoFullyWatched == true) {
			var totalDiamond = Std["int"](com.tools.DataManager.getInstance().getData("money"));
			totalDiamond += scenes.LevelBuilder.getInstance().health.countDiamond;
			com.tools.DataManager.getInstance().saveData("money",totalDiamond);
			scenes.LevelBuilder.getInstance().health.countDiamond = scenes.LevelBuilder.getInstance().health.countDiamond * 2;
			this.tfDiamond.set_text("" + scenes.LevelBuilder.getInstance().health.countDiamond);
		} else scenes.LevelBuilder.getInstance().addShowFullVideoPanel();
		turnOnSoundForAd();
	}
	,show: function() {
		com.sound.SoundManager.playSFX("level_complete");
		motion.Actuate.tween(this.container,this.timeShow,{ y : this.showY}).ease(motion.easing.Elastic.get_easeOut()).onComplete($bind(this,this.complete));
		panels.BasicPanel.prototype.show.call(this);
	}
	,complete: function() {
		this.showed = true;
		this.add1star();
	}
	,add1star: function() {
		com.sound.SoundManager.playSFX("starCollect");
		var temp = com.jdtiles.Tile.getTileSprite(this.layer,"starFull",-88,-107,0,0);
		this.container.addChild(temp);
		motion.Actuate.tween(temp,this.timeShowStar,{ scaleX : 1, scaleY : 1}).ease(motion.easing.Elastic.get_easeOut()).onComplete($bind(this,this.add2star));
	}
	,add2star: function() {
		if(scenes.additional.Game.instance.birdFreedom == scenes.additional.Game.instance.maxBirds) {
			com.sound.SoundManager.playSFX("starCollect");
			var temp = com.jdtiles.Tile.getTileSprite(this.layer,"starFull",0,-107,0,0);
			this.container.addChild(temp);
			motion.Actuate.tween(temp,this.timeShowStar,{ scaleX : 1, scaleY : 1}).ease(motion.easing.Elastic.get_easeOut()).onComplete($bind(this,this.add3star));
		} else motion.Actuate.tween(this.tfBird,this.timeNoStar,{ alpha : 0}).ease(motion.easing.Linear.get_easeNone()).onComplete($bind(this,this.goto3star));
	}
	,goto3star: function() {
		motion.Actuate.tween(this.tfBird,this.timeNoStar,{ alpha : 1}).ease(motion.easing.Linear.get_easeNone()).onComplete($bind(this,this.add3star));
	}
	,add3star: function() {
		if(scenes.additional.Game.instance.hero.health == scenes.additional.Game.instance.hero.maxhealth) {
			com.sound.SoundManager.playSFX("starCollect");
			var temp = com.jdtiles.Tile.getTileSprite(this.layer,"starFull",88,-107,0,0);
			this.container.addChild(temp);
			motion.Actuate.tween(temp,this.timeShowStar,{ scaleX : 1, scaleY : 1}).ease(motion.easing.Elastic.get_easeOut());
		} else motion.Actuate.tween(this.tfHealth,this.timeNoStar,{ alpha : 0}).ease(motion.easing.Linear.get_easeNone()).onComplete($bind(this,this.endstar));
	}
	,endstar: function() {
		motion.Actuate.tween(this.tfHealth,this.timeNoStar,{ alpha : 1}).ease(motion.easing.Linear.get_easeNone());
	}
	,update: function() {
		var _g = this.dobDiamond;
		_g.set_rotationRad(_g.get_rotationRad() + this.dobDLe);
		this.dobDLeC++;
		if(this.dobDLeC == 20) {
			this.dobDLe *= -1;
			this.dobDLeC = 0;
		}
		this.btnvC++;
		if(this.btnvC == 10) {
			this.btnvB = !this.btnvB;
			this.btnvC = 0;
		}
		if(this.btnvB == true) {
			var _g1 = this.btnVideo.graphicFront;
			_g1.set_scaleX(_g1.get_scaleX() - 0.01);
			var _g2 = this.btnVideo.graphicFront;
			_g2.set_scaleY(_g2.get_scaleY() - 0.01);
		} else {
			var _g3 = this.btnVideo.graphicFront;
			_g3.set_scaleX(_g3.get_scaleX() + 0.01);
			var _g4 = this.btnVideo.graphicFront;
			_g4.set_scaleY(_g4.get_scaleY() + 0.01);
		}
	}
	,free: function() {
		panels.BasicPanel.prototype.free.call(this);
		this.container = null;
		this.tfBird = null;
		this.tfHealth = null;
		this.tfDiamond = null;
		this.dobDiamond = null;
		this.btnVideo = null;
	}
	,__class__: panels.Win
});
var powerUps = {};
powerUps.PowerUp = function() {
	this.active = true;
	this.blockY = 0;
	this.step = 0;
	this.timer = 0;
	this.floor = 0;
	this.duration = 300;
};
$hxClasses["powerUps.PowerUp"] = powerUps.PowerUp;
powerUps.PowerUp.__name__ = ["powerUps","PowerUp"];
powerUps.PowerUp.prototype = {
	init: function(_floor,_tempY) {
		this.step = 100 / this.duration / 100;
		this.blockY = _tempY;
		this.floor = _floor;
		this.addGraphics();
		this.show();
	}
	,addGraphics: function() {
		this.powerBlock = new com.jdtiles.jda.TileContainer(scenes.LevelBuilder.layer);
		this.powerBlock.set_x(-110 - com.Variables.shiftX);
		this.powerBlock.set_y(this.blockY - com.Variables.shiftY);
		scenes.LevelBuilder.layer.addChild(this.powerBlock);
		var sprite;
		sprite = new com.jdtiles.jda.TileSprite(scenes.LevelBuilder.layer,"pbBackground");
		sprite.x = -29;
		this.powerBlock.addChild(sprite);
		this.shkala = new com.jdtiles.jda.TileSprite(scenes.LevelBuilder.layer,"pbProgress");
		this.shkala.set_offsetX(this.shkala.get_width() / 2);
		this.shkala.x = -9;
		this.powerBlock.addChild(this.shkala);
		sprite = new com.jdtiles.jda.TileSprite(scenes.LevelBuilder.layer,this.powerIcoName);
		sprite.x = -45;
		this.powerBlock.addChild(sprite);
		sprite = null;
	}
	,show: function() {
		motion.Actuate.tween(this.powerBlock,20,{ x : 100 - com.Variables.shiftX}).ease(motion.easing.Elastic.get_easeOut());
	}
	,hide: function() {
		scenes.additional.Game.instance.powerUp.complete(this);
		motion.Actuate.tween(this.powerBlock,10,{ x : -110 - com.Variables.shiftX}).ease(motion.easing.Linear.get_easeNone()).onComplete($bind(this,this.competePower));
	}
	,update: function() {
		if(this.active == false) return;
		if(this.shkala.get_scaleX() > 0) {
			var _g = this.shkala;
			_g.set_scaleX(_g.get_scaleX() - this.step);
		} else {
			this.shkala.set_scaleX(0);
			this.hide();
		}
	}
	,competePower: function() {
		this.powerBlock.set_alpha(0);
		this.clear();
		this.free();
	}
	,clear: function() {
		this.powerBlock.removeAllChildren();
		scenes.LevelBuilder.layer.removeChild(this.powerBlock);
	}
	,resize: function() {
		if(this.powerBlock != null) {
			this.powerBlock.set_x(100 - com.Variables.shiftX);
			this.powerBlock.set_y(this.blockY - com.Variables.shiftY);
		}
	}
	,free: function() {
		this.active = false;
		this.shkala = null;
		this.powerBlock = null;
	}
	,__class__: powerUps.PowerUp
};
powerUps.DoubleD = function() {
	powerUps.PowerUp.call(this);
	this.duration = 210 + 60 * Std["int"](com.tools.DataManager.getInstance().getData("powerUpgrade0"));
	this.powerIcoName = "DoubleD";
	scenes.additional.Game.instance.doubleOn = true;
};
$hxClasses["powerUps.DoubleD"] = powerUps.DoubleD;
powerUps.DoubleD.__name__ = ["powerUps","DoubleD"];
powerUps.DoubleD.__super__ = powerUps.PowerUp;
powerUps.DoubleD.prototype = $extend(powerUps.PowerUp.prototype,{
	hide: function() {
		scenes.additional.Game.instance.doubleOn = false;
		powerUps.PowerUp.prototype.hide.call(this);
	}
	,__class__: powerUps.DoubleD
});
powerUps.Magnet = function() {
	powerUps.PowerUp.call(this);
	this.duration = 210 + 60 * Std["int"](com.tools.DataManager.getInstance().getData("powerUpgrade2"));
	this.powerIcoName = "Magnet";
	scenes.additional.Game.instance.magnetOn = true;
};
$hxClasses["powerUps.Magnet"] = powerUps.Magnet;
powerUps.Magnet.__name__ = ["powerUps","Magnet"];
powerUps.Magnet.__super__ = powerUps.PowerUp;
powerUps.Magnet.prototype = $extend(powerUps.PowerUp.prototype,{
	hide: function() {
		scenes.additional.Game.instance.magnetOn = false;
		powerUps.PowerUp.prototype.hide.call(this);
	}
	,__class__: powerUps.Magnet
});
powerUps.PowerUpManager = function() {
	this.floors = new Array();
	this.powerUps = new Array();
	this.floors = [80,160,240];
};
$hxClasses["powerUps.PowerUpManager"] = powerUps.PowerUpManager;
powerUps.PowerUpManager.__name__ = ["powerUps","PowerUpManager"];
powerUps.PowerUpManager.prototype = {
	addPowerUp: function(_type) {
		var power = Type.createInstance(Type.resolveClass("powerUps." + _type),[]);
		power.init(this.powerUps.length,this.floors[this.powerUps.length]);
		this.powerUps.push(power);
		power = null;
	}
	,hideAll: function() {
		var _g = 0;
		var _g1 = this.powerUps;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.competePower();
		}
		this.powerUps = [];
	}
	,update: function() {
		var _g1 = 0;
		var _g = this.powerUps.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.powerUps[i] != null) this.powerUps[i].update();
		}
	}
	,complete: function(_element) {
		HxOverrides.remove(this.powerUps,_element);
		var _g1 = 0;
		var _g = this.powerUps.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.powerUps[i].floor != i) {
				this.powerUps[i].floor--;
				this.move(this.powerUps[i]);
			}
		}
	}
	,move: function(_powerUp) {
		motion.Actuate.tween(_powerUp.powerBlock,12,{ y : this.floors[_powerUp.floor]}).ease(motion.easing.Linear.get_easeNone());
	}
	,resize: function() {
		var _g1 = 0;
		var _g = this.powerUps.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.powerUps[i].resize();
		}
	}
	,free: function() {
		var _g1 = 0;
		var _g = this.powerUps.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.powerUps[i].free();
			this.powerUps[i] = null;
		}
		this.powerUps = [];
		this.powerUps = null;
	}
	,__class__: powerUps.PowerUpManager
};
powerUps.Shield = function() {
	powerUps.PowerUp.call(this);
	this.duration = 210 + 60 * Std["int"](com.tools.DataManager.getInstance().getData("powerUpgrade1"));
	this.powerIcoName = "Shield";
	scenes.additional.Game.instance.hero.addShiled();
};
$hxClasses["powerUps.Shield"] = powerUps.Shield;
powerUps.Shield.__name__ = ["powerUps","Shield"];
powerUps.Shield.__super__ = powerUps.PowerUp;
powerUps.Shield.prototype = $extend(powerUps.PowerUp.prototype,{
	hide: function() {
		scenes.additional.Game.instance.hero.shield.startHideShield();
		powerUps.PowerUp.prototype.hide.call(this);
	}
	,__class__: powerUps.Shield
});
var scenes = {};
scenes.BasicScene = function() {
	openfl.display.Sprite.call(this);
};
$hxClasses["scenes.BasicScene"] = scenes.BasicScene;
scenes.BasicScene.__name__ = ["scenes","BasicScene"];
scenes.BasicScene.__super__ = openfl.display.Sprite;
scenes.BasicScene.prototype = $extend(openfl.display.Sprite.prototype,{
	disableBtnGift: function() {
	}
	,disableBtnLimited: function() {
	}
	,showNoMorevideo: function() {
	}
	,showPanelConfirm: function() {
	}
	,init: function() {
	}
	,lostFocus: function() {
	}
	,catchFocus: function() {
	}
	,mouseDown: function(e) {
	}
	,mouseUp: function(e) {
	}
	,keyDown: function(e) {
	}
	,keyUp: function(e) {
	}
	,resize: function() {
	}
	,update: function() {
	}
	,free: function() {
	}
	,__class__: scenes.BasicScene
});
scenes.Comix = function() {
	this.time = 25;
	scenes.BasicScene.call(this);
};
$hxClasses["scenes.Comix"] = scenes.Comix;
scenes.Comix.__name__ = ["scenes","Comix"];
scenes.Comix.__super__ = scenes.BasicScene;
scenes.Comix.prototype = $extend(scenes.BasicScene.prototype,{
	init: function() {
		this.get_graphics().beginFill(0);
		this.get_graphics().drawRect(-com.Variables.oW,-com.Variables.oH,com.Variables.mSW,com.Variables.mSH);
		this.get_graphics().endFill();
		this.layer = com.jdtiles.Tile.getTileLayer("comixfinal");
		this.addChild(this.layer.view);
		this.comix1 = new com.jdtiles.jda.TileSprite(this.layer,"comix1");
		this.comix1.alpha = 0;
		this.comix1.x = 195;
		this.comix1.y = 122;
		this.layer.addChild(this.comix1);
		this.comix2 = new com.jdtiles.jda.TileSprite(this.layer,"comix2");
		this.comix2.alpha = 0;
		this.comix2.x = 520;
		this.comix2.y = 123;
		this.layer.addChild(this.comix2);
		this.comix3 = new com.jdtiles.jda.TileSprite(this.layer,"comix3");
		this.comix3.alpha = 0;
		this.comix3.x = 154;
		this.comix3.y = 357;
		this.layer.addChild(this.comix3);
		this.comix4 = new com.jdtiles.jda.TileSprite(this.layer,"comix4");
		this.comix4.alpha = 0;
		this.comix4.x = 334;
		this.comix4.y = 287;
		this.layer.addChild(this.comix4);
		this.comix5 = new com.jdtiles.jda.TileSprite(this.layer,"comix5");
		this.comix5.alpha = 0;
		this.comix5.x = 495;
		this.comix5.y = 358;
		this.layer.addChild(this.comix5);
		this.btnPlay = new com.buttons.Button(this.layer);
		this.btnPlay.initScale("btn_fon");
		this.btnPlay.onCompleteVoid = $bind(this,this.play);
		this.btnPlay.setPosition(675 + com.Variables.shiftX,240);
		this.addChild(this.btnPlay);
		this.btnPlay.disable();
		this.startComix1();
	}
	,startComix1: function() {
		motion.Actuate.tween(this.comix1,this.time,{ alpha : 1}).onComplete($bind(this,this.startComix2));
	}
	,startComix2: function() {
		motion.Actuate.tween(this.comix2,this.time,{ alpha : 1}).onComplete($bind(this,this.startComix3));
	}
	,startComix3: function() {
		motion.Actuate.tween(this.comix3,this.time,{ alpha : 1}).onComplete($bind(this,this.startComix4));
	}
	,startComix4: function() {
		motion.Actuate.tween(this.comix4,this.time,{ alpha : 1}).onComplete($bind(this,this.startComix5));
	}
	,startComix5: function() {
		motion.Actuate.tween(this.comix5,this.time,{ alpha : 1}).onComplete($bind(this,this.startBtn));
	}
	,startBtn: function() {
		this.btnPlay.enable();
		this.btnGoDown();
	}
	,btnGoUp: function() {
		motion.Actuate.tween(this.btnPlay.graphicFront,15,{ scaleX : 1, scaleY : 1}).onComplete($bind(this,this.btnGoDown));
	}
	,btnGoDown: function() {
		motion.Actuate.tween(this.btnPlay.graphicFront,15,{ scaleX : 0.9, scaleY : 0.9}).onComplete($bind(this,this.btnGoUp));
	}
	,play: function() {
		com.tools.DataManager.getInstance().saveData("lastLevelPlayed",1);
		com.tools.DataManager.getInstance().saveData("tutorial_phase",0);
		Main.getInstance().showScene(ScenesList.Menu);
	}
	,resize: function() {
		this.btnPlay.setPosition(675 + com.Variables.shiftX,240);
	}
	,free: function() {
		this.layer = null;
		this.btnPlay = null;
		this.comix1 = null;
		this.comix2 = null;
		this.comix3 = null;
		this.comix4 = null;
		this.comix5 = null;
	}
	,__class__: scenes.Comix
});
scenes.Final = function() {
	this.time = 25;
	scenes.BasicScene.call(this);
};
$hxClasses["scenes.Final"] = scenes.Final;
scenes.Final.__name__ = ["scenes","Final"];
scenes.Final.__super__ = scenes.BasicScene;
scenes.Final.prototype = $extend(scenes.BasicScene.prototype,{
	init: function() {
		com.tools.DataManager.getInstance().saveData("lastLevelPlayed",12);
		com.sound.SoundManager.playSFX("finalWindow");
		this.layer = com.jdtiles.Tile.getTileLayer("comixfinal");
		this.addChild(this.layer.view);
		this.final1 = new com.jdtiles.jda.TileSprite(this.layer,"final1");
		this.final1.alpha = 0;
		this.final1.x = 363;
		this.final1.y = 72;
		this.layer.addChild(this.final1);
		this.final2 = new com.jdtiles.jda.TileSprite(this.layer,"final2");
		this.final2.alpha = 0;
		this.final2.x = 128;
		this.final2.y = 288;
		this.layer.addChild(this.final2);
		this.final3 = new com.jdtiles.jda.TileSprite(this.layer,"final3");
		this.final3.alpha = 0;
		this.final3.x = 433;
		this.final3.y = 292;
		this.layer.addChild(this.final3);
		this.btnBack = new com.buttons.Button(this.layer);
		this.btnBack.initScale("btn_fon");
		this.btnBack.onCompleteVoid = $bind(this,this.back);
		this.btnBack.setPosition(675 + com.Variables.shiftX,240);
		this.addChild(this.btnBack);
		this.btnBack.disable();
		this.showFinal1();
	}
	,showFinal1: function() {
		motion.Actuate.tween(this.final1,this.time,{ alpha : 1}).onComplete($bind(this,this.showFinal2));
	}
	,showFinal2: function() {
		motion.Actuate.tween(this.final2,this.time,{ alpha : 1}).onComplete($bind(this,this.showFinal3));
	}
	,showFinal3: function() {
		motion.Actuate.tween(this.final3,this.time,{ alpha : 1}).onComplete($bind(this,this.showBtn));
	}
	,showBtn: function() {
		this.btnBack.enable();
		this.btnGoDown();
	}
	,btnGoUp: function() {
		motion.Actuate.tween(this.btnBack.graphicFront,15,{ scaleX : 1, scaleY : 1}).onComplete($bind(this,this.btnGoDown));
	}
	,btnGoDown: function() {
		motion.Actuate.tween(this.btnBack.graphicFront,15,{ scaleX : 0.9, scaleY : 0.9}).onComplete($bind(this,this.btnGoUp));
	}
	,back: function() {
		Main.getInstance().showScene(ScenesList.Levels);
	}
	,resize: function() {
		this.btnBack.setPosition(675 + com.Variables.shiftX,240);
	}
	,free: function() {
		this.layer = null;
		this.btnBack = null;
		this.final1 = null;
		this.final2 = null;
		this.final3 = null;
	}
	,__class__: scenes.Final
});
scenes.TypeControl = $hxClasses["scenes.TypeControl"] = { __ename__ : true, __constructs__ : ["mouseUp","slideDown","slideRight"] };
scenes.TypeControl.mouseUp = ["mouseUp",0];
scenes.TypeControl.mouseUp.toString = $estr;
scenes.TypeControl.mouseUp.__enum__ = scenes.TypeControl;
scenes.TypeControl.slideDown = ["slideDown",1];
scenes.TypeControl.slideDown.toString = $estr;
scenes.TypeControl.slideDown.__enum__ = scenes.TypeControl;
scenes.TypeControl.slideRight = ["slideRight",2];
scenes.TypeControl.slideRight.toString = $estr;
scenes.TypeControl.slideRight.__enum__ = scenes.TypeControl;
scenes.LevelBuilder = function(level) {
	if(level == null) level = 0;
	this.nowRestartGame = false;
	this.counterMouseDown = 0;
	this.distance = 10;
	this.startShake = false;
	this.counterShake = 0;
	this.checkSlide = false;
	this.tutorialActive = false;
	this.active = true;
	if(scenes.LevelBuilder.instance != null) throw "Error: Allready inited. Use getInstance() instead;";
	scenes.BasicScene.call(this);
	scenes.LevelBuilder.instance = this;
	this.currLevel = level;
	this.orangeAmount = Std["int"](com.tools.DataManager.getInstance().getData("heroUpgrade3"));
	OfferValues.instance.calcPlays();
	api.SoftGames.getInstance().levelStarted(this.currLevel);
	api.SoftGames.getInstance().setPauseHandler($bind(this,this.pause));
	api.SoftGames.getInstance().setUnpauseHandler($bind(this,this.resume));
};
$hxClasses["scenes.LevelBuilder"] = scenes.LevelBuilder;
scenes.LevelBuilder.__name__ = ["scenes","LevelBuilder"];
scenes.LevelBuilder.instance = null;
scenes.LevelBuilder.layer = null;
scenes.LevelBuilder.getInstance = function() {
	if(scenes.LevelBuilder.instance == null) return new scenes.LevelBuilder(); else return scenes.LevelBuilder.instance;
};
scenes.LevelBuilder.__super__ = scenes.BasicScene;
scenes.LevelBuilder.prototype = $extend(scenes.BasicScene.prototype,{
	init: function() {
		com.sound.SoundManager.playMusic("main");
		this.get_graphics().beginFill(9561087,1);
		this.get_graphics().drawRect(-com.Variables.oW,-com.Variables.oH,com.Variables.mSW,com.Variables.mSH);
		this.get_graphics().endFill();
		this.gameLayer = new openfl.display.Sprite();
		this.addChild(this.gameLayer);
		this.game = new scenes.additional.Game(this.currLevel);
		this.addChild(this.game);
		this.addStones();
		if(this.currLevel == 3 && com.tools.DataManager.getInstance().getData("tutComp6") == null) this.game.hero.iCanJump = false;
		scenes.LevelBuilder.layer = com.jdtiles.Tile.getTileLayer("panels");
		scenes.LevelBuilder.layer.mouseEnabled(true);
		this.addChild(scenes.LevelBuilder.layer.view);
		this.createButtons();
		this.health = new scenes.additional.HealthBar(scenes.LevelBuilder.layer);
		this.progress = new scenes.additional.ProgressBar(scenes.LevelBuilder.layer);
		var sprite = new openfl.display.Sprite();
		sprite.mouseChildren = sprite.mouseEnabled = false;
		this.addChild(sprite);
		sprite.get_graphics().beginFill(0);
		sprite.get_graphics().drawRect(-436,-com.Variables.oH,300,com.Variables.mSH);
		sprite.get_graphics().drawRect(com.Variables.mSW - com.Variables.oW - 1,-com.Variables.oH,300,com.Variables.mSH);
		sprite.get_graphics().endFill();
	}
	,addStones: function() {
		var bmp;
		var stoneY = 470;
		bmp = new openfl.display.Bitmap(com.jdtiles.Tile.getBitmapData("stones"));
		bmp.smoothing = true;
		bmp.set_x(-162);
		bmp.set_y(stoneY);
		this.addChild(bmp);
		bmp = new openfl.display.Bitmap(com.jdtiles.Tile.getBitmapData("stones"));
		bmp.smoothing = true;
		bmp.set_x(95);
		bmp.set_y(stoneY);
		this.addChild(bmp);
		bmp = new openfl.display.Bitmap(com.jdtiles.Tile.getBitmapData("stones"));
		bmp.smoothing = true;
		bmp.set_x(352);
		bmp.set_y(stoneY);
		this.addChild(bmp);
		bmp = new openfl.display.Bitmap(com.jdtiles.Tile.getBitmapData("stones"));
		bmp.smoothing = true;
		bmp.set_x(609);
		bmp.set_y(stoneY);
		this.addChild(bmp);
		bmp = null;
	}
	,createButtons: function() {
		this.btnOrange = new scenes.additional.BtnOrange(scenes.LevelBuilder.layer);
		this.btnOrange.initScale("btn_orange");
		this.btnOrange.set_name("pause");
		this.btnOrange.onCompleteVoid = $bind(this,this.blowOrange);
		this.btnOrange.setPosition(655 + com.Variables.shiftX,240);
		this.addChild(this.btnOrange);
		if(this.orangeAmount == 0) this.btnOrange.disable();
		Main.getInstance().panel.init(panels.PanelList.Pause,scenes.LevelBuilder.layer);
	}
	,addOrange: function(value) {
		this.orangeAmount += value;
		this.btnOrange.text.set_text("" + this.orangeAmount);
		this.btnOrange.enable();
		if(this.currLevel == 3) this.btnOrange.startBounce();
	}
	,minusOrange: function() {
		this.orangeAmount -= 1;
		this.btnOrange.text.set_text("" + this.orangeAmount);
		if(this.orangeAmount == 0) this.btnOrange.disable();
	}
	,blowOrange: function() {
		if(this.tutorial != null && this.tutorial.pauseGame == true && this.tutorial.param == 6) {
			this.tutorialActive = false;
			this.tutorial.complete();
		}
		this.game.hero.blowOrange();
	}
	,resize: function() {
		this.health.resize();
		this.progress.resize();
		this.game.resize();
		this.btnOrange.setPosition(655 + com.Variables.shiftX,240);
	}
	,startShaking: function() {
		this.startShake = true;
		this.counterShake = 0;
	}
	,update: function() {
		if(this.active == false) return;
		if(this.checkSlide == true) {
			this.counterMouseDown++;
			if(this.counterMouseDown >= 3 && com.tools.Tools.calcDistOfDots(this.clickMouseX,this.clickMouseY,this.get_mouseX(),this.get_mouseY()) > 10) {
				this.angleSlide = com.tools.Tools.angleOfPoints(this.clickMouseX,this.clickMouseY,this.get_mouseX(),this.get_mouseY());
				if(this.angleSlide < -45 && this.angleSlide > -135) {
					this.controllHero(scenes.TypeControl.slideDown);
					this.checkSlide = false;
				} else if(this.angleSlide > 135 && this.angleSlide <= 180 || this.angleSlide >= -180 && this.angleSlide < -135) {
					this.controllHero(scenes.TypeControl.slideRight);
					this.checkSlide = false;
				}
			}
		}
		if(this.tutorialActive == true) return;
		this.game.update();
		this.progress.update();
		if(this.startShake == true) {
			this.counterShake++;
			this.gameLayer.set_x(-this.distance / 2 + Math.random() * this.distance);
			this.gameLayer.set_y(-this.distance / 2 + Math.random() * this.distance);
			if(this.counterShake == 15) {
				this.startShake = false;
				this.set_x(0);
				this.set_y(0);
			}
		}
	}
	,mouseDown: function(e) {
		var _target = e.target;
		if(_target.get_name() == "pause" || this.active == false) {
			if(_target.get_name() == "tilelayerview") Main.getInstance().panel.panelFunc(panels.PanelList.Pause,panels.PanelFunc.custom,1);
			return;
		}
		this.clickMouseX = this.get_mouseX();
		this.clickMouseY = this.get_mouseY();
		this.checkSlide = true;
		this.counterMouseDown = 0;
		this.controllHero(scenes.TypeControl.mouseUp);
	}
	,mouseUp: function(e) {
		var _target = e.target;
		if(_target.get_name() == "pause" || this.active == false || this.checkSlide == false) return;
		this.checkSlide = false;
	}
	,controllHero: function(value) {
		if(this.tutorial != null && this.tutorial.pauseGame == true) {
			if(this.tutorial.param == 1 && value != scenes.TypeControl.mouseUp || this.tutorial.param == 2 && value != scenes.TypeControl.slideDown || this.tutorial.param == 3 && value != scenes.TypeControl.slideRight || this.tutorial.param == 5 && value != scenes.TypeControl.slideRight || this.tutorial.param == 6 || this.tutorial.param == 8 && value != scenes.TypeControl.mouseUp) return; else {
				this.tutorialActive = false;
				this.tutorial.complete();
			}
		}
		this.game.hero.control(value);
	}
	,keyDown: function(e) {
		if(this.active == false) return;
		if(e.keyCode == 90) {
			if(this.orangeAmount > 0) this.blowOrange();
		}
	}
	,keyUp: function(e) {
		if(this.active == false) return;
	}
	,lostFocus: function() {
		if(this.active == false) return;
		Main.getInstance().panel.panelFunc(panels.PanelList.Pause,panels.PanelFunc.show);
	}
	,pause: function() {
		motion.Actuate.pauseAll();
		this.game.backgroundLayer.updating = false;
		this.game.eManager.updating = false;
		this.active = false;
		this.btnOrange.disable();
	}
	,resume: function() {
		motion.Actuate.resumeAll();
		this.game.backgroundLayer.updating = true;
		this.game.eManager.updating = true;
		this.active = true;
		if(this.orangeAmount > 0) this.btnOrange.enable();
	}
	,restart: function() {
		this.nowRestartGame = true;
		this.active = false;
		scenes.LevelBuilder.instance = null;
		Main.getInstance().showScene(ScenesList.LevelBuilder,this.currLevel);
	}
	,next: function() {
		api.SoftGames.getInstance().levelUp(this.currLevel,this.health.countDiamond);
		this.active = false;
		scenes.LevelBuilder.instance = null;
		Main.getInstance().showScene(ScenesList.Levels);
	}
	,back: function() {
		this.active = false;
		scenes.LevelBuilder.instance = null;
		Main.getInstance().showScene(ScenesList.Levels);
	}
	,shop: function() {
		this.active = false;
		scenes.LevelBuilder.instance = null;
		Main.getInstance().showScene(ScenesList.Shop);
	}
	,levelDefeat: function() {
		this.callGameOverAndFinished();
		this.active = false;
		this.health.hide();
		Main.getInstance().panel.init(panels.PanelList.Lose,scenes.LevelBuilder.layer,true);
	}
	,levelComplete: function() {
		api.SoftGames.getInstance().levelFinished(this.currLevel,this.health.countDiamond);
		this.end();
		Main.getInstance().panel.init(panels.PanelList.Win,scenes.LevelBuilder.layer,true);
	}
	,lose: function() {
		this.progress.hide();
		this.game.powerUp.hideAll();
		Main.getInstance().panel.panelFunc(panels.PanelList.Pause,panels.PanelFunc.custom);
	}
	,callGameOverAndFinished: function() {
		api.SoftGames.getInstance().gameOver(this.currLevel,this.health.countDiamond);
		api.SoftGames.getInstance().levelFinished(this.currLevel,this.health.countDiamond);
	}
	,end: function() {
		this.active = false;
		this.health.hide();
		this.progress.hide();
		this.game.powerUp.hideAll();
		Main.getInstance().panel.panelFunc(panels.PanelList.Pause,panels.PanelFunc.custom);
	}
	,addShowFullVideoPanel: function() {
		Main.getInstance().panel.init(panels.PanelList.ShowFullVideo,scenes.LevelBuilder.layer);
		Main.getInstance().panel.panelFunc(panels.PanelList.ShowFullVideo,panels.PanelFunc.show);
	}
	,free: function() {
		scenes.LevelBuilder.instance = null;
		scenes.LevelBuilder.layer = null;
		this.game.free();
		this.game = null;
		this.health.free();
		this.health = null;
		this.progress.free();
		this.progress = null;
		this.btnOrange = null;
		this.gameLayer = null;
		this.tutorial = null;
	}
	,__class__: scenes.LevelBuilder
});
scenes.Levels = function() {
	this.boolAnimLastFlag = false;
	this.nowLevelOpened = false;
	this.qwewrqretrr = true;
	this.flagAnimActive = false;
	this.currentWayPoint = 0;
	this.wayPosition = [[129,269],[156,276],[184,282],[269,267],[291,258],[314,243],[314,218],[288,210],[261,202],[195,186],[168,178],[142,171],[158,144],[198,125],[232,109],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[479,118],[506,123],[531,128],[579,154],[600,177],[622,202],[621,233],[598,239],[574,244],[517,260],[490,269],[465,277],[449,303],[475,323],[497,340],[0,0],[0,0],[0,0]];
	this.flagsPosition = [[92,229],[225,262],[347,194],[227,165],[115,132],[265,90],[353,56],[448,95],[561,106],[626,192],[545,221],[431,258],[524,329],[577,275]];
	scenes.BasicScene.call(this);
};
$hxClasses["scenes.Levels"] = scenes.Levels;
scenes.Levels.__name__ = ["scenes","Levels"];
scenes.Levels.__super__ = scenes.BasicScene;
scenes.Levels.prototype = $extend(scenes.BasicScene.prototype,{
	init: function() {
		var fon = new openfl.display.Bitmap(com.jdtiles.Tile.getBitmapData("map"));
		fon.smoothing = true;
		fon.set_x(-com.Variables.oW);
		fon.set_y(-com.Variables.oH);
		this.addChild(fon);
		fon = null;
		this.levelOpened = Std["int"](com.tools.DataManager.getInstance().getData("Levels"));
		if(this.levelOpened == 0) {
			this.levelOpened = 1;
			com.tools.DataManager.getInstance().saveData("played",1);
			com.tools.DataManager.getInstance().saveData("lastStars",0);
			com.tools.DataManager.getInstance().saveData("Levels",1);
		}
		this.layer = com.jdtiles.Tile.getTileLayer("scenes");
		this.addChild(this.layer.view);
		this.addChild(com.tools.Tools.addText("" + Std["int"](com.tools.DataManager.getInstance().getData("money")),30,105 + com.Variables.txtShiftX,13 + com.Variables.txtShiftY,150,50,Main.color1));
		this.addChild(com.tools.Tools.addText("" + Std["int"](com.tools.DataManager.getInstance().calc("stars",1,13)),30,515 + com.Variables.txtShiftX,13 + com.Variables.txtShiftY,150,50,Main.color1));
		this.layer2 = com.jdtiles.Tile.getTileLayer("scenes");
		this.layer2.mouseEnabled(true);
		this.addChild(this.layer2.view);
		this.btnBack = new com.buttons.Button(this.layer);
		this.btnBack.initOneFrame("podBtn");
		this.btnBack.initScale("btn_back",-8,1);
		this.btnBack.onCompleteVoid = $bind(this,this.back);
		this.btnBack.setPosition(com.Variables.baseScale(693) + com.Variables.shiftX,com.Variables.baseScale(156));
		this.addChild(this.btnBack);
		this.btnShop = new com.buttons.Button(this.layer);
		this.btnShop.initOneFrame("podBtn");
		this.btnShop.initScale("btn_shop_icon",-9,-1);
		this.btnShop.onCompleteVoid = $bind(this,this.shop);
		this.btnShop.setPosition(com.Variables.baseScale(693) + com.Variables.shiftX,com.Variables.baseScale(240));
		this.addChild(this.btnShop);
		this.btnSound = new com.buttons.Button(this.layer);
		this.btnSound.initOneFrame("podBtn");
		this.btnSound.initSound("btn_musicOn","btn_sfxOn","btn_soundsOff",-9);
		this.btnSound.setPosition(693 + com.Variables.shiftX,324);
		this.addChild(this.btnSound);
		this.canBuy1 = new scenes.shopInset.CanBuyIcon(this.layer,"shopCanBuy");
		this.canBuy1.x = 655 + com.Variables.shiftX;
		this.canBuy1.y = 210;
		this.canBuy1.set_scaleX(this.canBuy1.set_scaleY(0.88));
		this.layer.addChild(this.canBuy1);
		this.checkUpgrade();
		this.animLastLevel = new com.jdtiles.jda.TileClip(this.layer,"currLevel",15);
		this.animLastLevel.play();
		this.layer.addChild(this.animLastLevel);
		this.flaganimLastLevel = new com.jdtiles.jda.TileSprite(this.layer,"animCurrFlag");
		this.layer.addChild(this.flaganimLastLevel);
		this.needOpen = Std["int"](com.tools.DataManager.getInstance().getData("needOpenLevel"));
		if(this.needOpen > this.levelOpened && this.levelOpened < 14 && this.needOpen != 8) {
			if(this.needOpen != 7 && this.needOpen != 14) this.nowLevelOpened = true;
		}
		this.createMap();
		if(this.needOpen > this.levelOpened && this.levelOpened < 14 && this.needOpen != 8) {
			if(this.needOpen != 7 && this.needOpen != 14) {
				this.animLastLevel.alpha = 0;
				this.flaganimLastLevel.alpha = 0;
			}
			if(this.needOpen == 3) this.showPanelOpenOranges(); else if(this.needOpen == 4) this.showPanelOpenDoubleJump(); else this.openNew();
		}
		var openLEvel2 = Std["int"](com.tools.DataManager.getInstance().getData("Levels"));
		if(openLEvel2 == 7 || openLEvel2 == 14) {
			this.animLastLevel.alpha = 0;
			this.flaganimLastLevel.alpha = 0;
		} else if(this.nowLevelOpened == false && this.qwewrqretrr == true) {
			this.flagAnimActive = true;
			this.flagButton.useColor = Main.color3;
			this.flagButton.text.set_textColor(Main.color3);
			this.flagButton.graphicFront.set_tile("currFlag");
			this.animLastLevel.x = this.flagButton.get_totalX();
			this.animLastLevel.y = this.flagButton.get_totalY() + 32;
			this.flaganimLastLevel.x = this.flagButton.get_totalX() + 2;
			this.flaganimLastLevel.y = this.flagButton.get_totalY();
		}
	}
	,disableBTN6: function() {
		this.qwewrqretrr = false;
		this.flagButton.useColor = Main.color1;
		this.flagButton.text.set_textColor(Main.color1);
		this.flagButton.graphicFront.set_tile("flag");
		this.flagAnimActive = false;
		this.animLastLevel.alpha = 0;
		this.flaganimLastLevel.alpha = 0;
	}
	,customOpenLevel: function() {
		com.tools.DataManager.getInstance().saveData("needOpenLevel",this.levelOpened + 1);
		Main.getInstance().showScene(ScenesList.Levels);
	}
	,checkUpgrade: function() {
		if(Main.getInstance().checkUpgrade("hero",0) == true || Main.getInstance().checkUpgrade("power",1) == true) this.canBuy1.show(); else this.canBuy1.hide();
	}
	,afterVideoDone: function(isVideoFullyWatched) {
		if(isVideoFullyWatched == true) {
		} else {
			Main.getInstance().panel.init(panels.PanelList.ShowFullVideo,this.layer2);
			Main.getInstance().panel.panelFunc(panels.PanelList.ShowFullVideo,panels.PanelFunc.show);
		}
		turnOnSoundForAd();
	}
	,openNew: function() {
		if(this.levelOpened > 7) com.tools.DataManager.getInstance().saveData("lastLevelPlayed",this.needOpen - 1); else com.tools.DataManager.getInstance().saveData("lastLevelPlayed",this.needOpen);
		com.tools.DataManager.getInstance().saveData("Levels",this.needOpen);
		this.unlockWayPoint();
	}
	,createMap: function() {
		var _g1 = 0;
		var _g = this.levelOpened;
		while(_g1 < _g) {
			var i = _g1++;
			this.addButton(i);
		}
		var _g11 = 0;
		var _g2 = this.levelOpened - 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.addWayPoins(i1);
		}
	}
	,addButton: function(_i,show) {
		if(show == null) show = false;
		var currLvl;
		if(_i < 6) currLvl = _i + 1; else currLvl = _i;
		if(_i == 6) {
			if(Std["int"](com.tools.DataManager.getInstance().getData("checkStarscomplete1")) == 0) {
				this.checkStars = new scenes.mapElements.CheckStars(this.layer,this.flagsPosition[_i][0],this.flagsPosition[_i][1],1);
				this.checkStars.onCompleteVoid = $bind(this,this.openLevel7);
				this.addChild(this.checkStars);
			}
			return;
		} else if(_i == 13) {
			if(Std["int"](com.tools.DataManager.getInstance().getData("checkStarscomplete2")) == 0) {
				this.checkStars = new scenes.mapElements.CheckStars(this.layer,this.flagsPosition[_i][0],this.flagsPosition[_i][1],2);
				this.checkStars.onCompleteVoid = $bind(this,this.goFinal);
				this.addChild(this.checkStars);
			}
			return;
		}
		this.flagButton = new scenes.mapElements.ButtonFlag(this.layer);
		this.flagButton.initScale(show == false?"flag":"currFlag");
		this.flagButton.addText("" + currLvl,show == false?Main.color1:Main.color3);
		this.flagButton.show(this.flagsPosition[_i][0],this.flagsPosition[_i][1],show);
		if(show == false) {
			this.flagButton.addStars(Std["int"](com.tools.DataManager.getInstance().getData("stars" + currLvl)));
			var lastLevelPlayed = Std["int"](com.tools.DataManager.getInstance().getData("lastLevelPlayed"));
		}
		this.flagButton.numLevel = currLvl;
		this.flagButton.onComplete = $bind(this,this.play);
		this.flagButton.onComplete2 = $bind(this,this.showAnimlast);
		this.flagButton.onComplete3 = $bind(this,this.showAnimlast2);
		this.addChildAt(this.flagButton,this.getChildIndex(this.layer2.view));
	}
	,mouseE: function(value) {
		this.mouseEnabled = this.mouseChildren = value;
	}
	,goFinal: function() {
		Main.getInstance().showScene(ScenesList.Final);
	}
	,openLevel7: function() {
		this.mouseE(true);
		this.layer.mouseEnabled(true);
		this.levelOpened = 7;
		this.needOpen = 8;
		this.unlockWayPoint();
	}
	,showAnimlast: function(e) {
		this.animLastLevel.alpha = 1;
		this.animLastLevel.x = e.get_totalX();
		this.animLastLevel.y = e.get_totalY() + 32;
	}
	,showAnimlast2: function(e) {
		this.flagAnimActive = true;
		this.flaganimLastLevel.x = e.get_totalX() + 2;
		this.flaganimLastLevel.y = e.get_totalY();
	}
	,showPanelOpenOranges: function() {
		com.tools.DataManager.getInstance().saveData("openOranges",1);
		this.checkUpgrade();
		Main.getInstance().panel.init(panels.PanelList.OpenOranges,this.layer2);
		this.setChildIndex(this.layer2.view,this.get_numChildren() - 1);
		Main.getInstance().panel.panelFunc(panels.PanelList.OpenOranges,panels.PanelFunc.show);
	}
	,showPanelOpenDoubleJump: function() {
		com.tools.DataManager.getInstance().saveData("doubleJump",1);
		Main.getInstance().panel.init(panels.PanelList.OpenDoubleJump,this.layer2);
		this.setChildIndex(this.layer2.view,this.get_numChildren() - 1);
		Main.getInstance().panel.panelFunc(panels.PanelList.OpenDoubleJump,panels.PanelFunc.show);
	}
	,addWayPoins: function(_i) {
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			var currentPoint = _i * 3 + i;
			this.createOneWayPoint(currentPoint);
		}
	}
	,unlockWayPoint: function() {
		var currentNum = (this.levelOpened - 1) * 3 + this.currentWayPoint;
		var sprite = this.createOneWayPoint(currentNum);
		this.currentWayPoint++;
		if(sprite.get_scaleX() < 0) sprite.set_scaleX(-0.6); else sprite.set_scaleX(0.6);
		sprite.set_scaleY(0.6);
		var time = 1;
		if(sprite.alpha != 0) {
			time = 15;
			com.sound.SoundManager.playSFX("newCircleOnMap");
		}
		if(this.currentWayPoint < 3 && this.needOpen != 7) motion.Actuate.tween(sprite,time,{ scaleX : sprite.get_scaleX() < 0?-1:1, scaleY : 1}).ease(motion.easing.Elastic.get_easeOut()).onComplete($bind(this,this.unlockWayPoint)); else {
			motion.Actuate.tween(sprite,time,{ scaleX : sprite.get_scaleX() < 0?-1:1, scaleY : 1}).ease(motion.easing.Elastic.get_easeOut()).onComplete($bind(this,this.unlock));
			this.currentWayPoint = 0;
		}
	}
	,unlock: function() {
		this.levelOpened++;
		this.addButton(this.levelOpened - 1,true);
	}
	,createOneWayPoint: function(_num) {
		var sprite = new com.jdtiles.jda.TileSprite(this.layer,"wayPoint");
		sprite.x = this.wayPosition[_num][0];
		sprite.y = this.wayPosition[_num][1];
		if(this.wayPosition[_num][0] == 0 && this.wayPosition[_num][1] == 0) sprite.alpha = 0;
		this.layer.addChildAt(sprite,0);
		return sprite;
	}
	,update: function() {
		this.canBuy1.update();
		if(this.flagAnimActive == true && this.flaganimLastLevel != null) {
			if(this.boolAnimLastFlag == false) {
				this.flaganimLastLevel.alpha += 0.05;
				if(this.flaganimLastLevel.alpha >= 1) {
					this.flaganimLastLevel.alpha = 1;
					this.boolAnimLastFlag = true;
				}
			} else {
				this.flaganimLastLevel.alpha -= 0.05;
				if(this.flaganimLastLevel.alpha <= 0) {
					this.flaganimLastLevel.alpha = 0;
					this.boolAnimLastFlag = false;
				}
			}
		}
	}
	,resize: function() {
		this.canBuy1.x = 655 + com.Variables.shiftX;
		this.btnBack.setPosition(com.Variables.baseScale(693) + com.Variables.shiftX,com.Variables.baseScale(156));
		this.btnShop.setPosition(com.Variables.baseScale(693) + com.Variables.shiftX,com.Variables.baseScale(240));
		this.btnSound.setPosition(693 + com.Variables.shiftX,324);
	}
	,play: function(e) {
		this.levelNeedPlay = e.numLevel;
		this.mouseEnabled = this.mouseChildren = false;
		this.playLevel();
	}
	,playLevel: function() {
		Main.getInstance().showScene(ScenesList.LevelBuilder,this.levelNeedPlay);
	}
	,shop: function() {
		Main.getInstance().showScene(ScenesList.Shop);
	}
	,back: function() {
		Main.getInstance().showScene(ScenesList.Menu);
	}
	,catchFocus: function() {
	}
	,free: function() {
		this.layer = null;
		this.layer2 = null;
		this.btnBack = null;
		this.btnShop = null;
		if(this.checkStars != null) this.checkStars.free();
		this.checkStars = null;
		this.flagsPosition = [];
		this.flagsPosition = null;
		this.wayPosition = [];
		this.wayPosition = null;
		this.animLastLevel = null;
		this.btnSound = null;
		this.flaganimLastLevel = null;
		this.flagButton = null;
	}
	,__class__: scenes.Levels
});
scenes.Menu = function() {
	scenes.BasicScene.call(this);
};
$hxClasses["scenes.Menu"] = scenes.Menu;
scenes.Menu.__name__ = ["scenes","Menu"];
scenes.Menu.__super__ = scenes.BasicScene;
scenes.Menu.prototype = $extend(scenes.BasicScene.prototype,{
	init: function() {
		var fon = new openfl.display.Bitmap(com.jdtiles.Tile.getBitmapData("menu"));
		fon.smoothing = true;
		fon.set_x(-com.Variables.oW);
		fon.set_y(-com.Variables.oH);
		this.addChild(fon);
		fon = null;
		this.layer = com.jdtiles.Tile.getTileLayer("scenes");
		this.addChild(this.layer.view);
		this.layer2 = com.jdtiles.Tile.getTileLayer("scenes");
		this.layer2.mouseEnabled(true);
		this.addChild(this.layer2.view);
		this.btnSound = new com.buttons.Button(this.layer);
		this.btnSound.initOneFrame("podBtn");
		this.btnSound.initSound("btn_musicOn","btn_sfxOn","btn_soundsOff",-9);
		this.btnSound.setPosition(693 + com.Variables.shiftX,240);
		this.addChild(this.btnSound);
		this.btnMoreGames = new com.buttons.Button(this.layer);
		this.btnMoreGames.initOneFrame("btnMenuSmall",0,-10);
		this.btnMoreGames.initScale("moregames",0,-3);
		this.btnMoreGames.onCompleteVoid = com.Sponsors.goMoreGames;
		this.btnMoreGames.setPosition(253,333);
		this.addChild(this.btnMoreGames);
		this.btnPlay = new com.buttons.Button(this.layer);
		this.btnPlay.initOneFrame("btnMenuBig",0,-12);
		this.btnPlay.initScale("btn_menu_play",3);
		this.btnPlay.onCompleteVoid = $bind(this,this.play);
		this.btnPlay.setPosition(362,351);
		this.btnPlay.drawGraphics(-50,-50,100,100,true);
		this.addChild(this.btnPlay);
		this.addButtonGems();
		Main.getInstance().panel.init(panels.PanelList.Credits,this.layer2);
	}
	,showNoMorevideo: function() {
		Main.getInstance().panel.init(panels.PanelList.ShowFullVideo,this.layer2);
		Main.getInstance().panel.panelFunc(panels.PanelList.ShowFullVideo,panels.PanelFunc.show);
	}
	,addButtonGems: function() {
		if(api.SoftGames.getInstance().isEnabledIncentiviseButton() == true) {
			if(OfferValues.instance.gift > 0) {
				this.btnGift = new com.buttons.Button(this.layer);
				this.btnGift.initScale("btn_gift");
				this.btnGift.onCompleteVoid = $bind(this,this.showPanelGift);
				this.btnGift.setPosition(50 - com.Variables.shiftX,350);
				this.addChild(this.btnGift);
				Main.getInstance().panel.init(panels.PanelList.OfferGift,this.layer2);
			}
			if(OfferValues.instance.limited > 0) {
				this.btnOffer = new com.buttons.ButtonOffer(this.layer);
				this.btnOffer.initScale("btn_limited");
				this.btnOffer.onCompleteVoid = $bind(this,this.showPanelOffer);
				this.btnOffer.setPosition(640 + com.Variables.shiftX,350);
				this.btnOffer.drawGraphics(-75,-30,150,60,true);
				this.btnOffer.startTimer();
				this.addChild(this.btnOffer);
				Main.getInstance().panel.init(panels.PanelList.OfferLimited,this.layer2);
			}
		}
	}
	,showPanelOffer: function() {
		this.setChildIndex(this.layer2.view,this.get_numChildren() - 1);
		Main.getInstance().panel.panelFunc(panels.PanelList.OfferLimited,panels.PanelFunc.show);
	}
	,showPanelGift: function() {
		this.setChildIndex(this.layer2.view,this.get_numChildren() - 1);
		Main.getInstance().panel.panelFunc(panels.PanelList.OfferGift,panels.PanelFunc.show);
	}
	,showPanelConfirm: function() {
		this.setChildIndex(this.layer2.view,this.get_numChildren() - 1);
		Main.getInstance().panel.init(panels.PanelList.OfferConfirm,this.layer2);
		Main.getInstance().panel.panelFunc(panels.PanelList.OfferConfirm,panels.PanelFunc.show);
	}
	,disableBtnGift: function() {
		if(this.btnGift != null) this.btnGift.disable();
	}
	,disableBtnLimited: function() {
		if(this.btnOffer != null) {
			this.btnOffer.stopTimer();
			this.btnOffer.disable();
		}
	}
	,update: function() {
		if(this.btnOffer != null) this.btnOffer.update();
	}
	,play: function() {
		SGHelper.preloader.__visible = false
		api.SoftGames.getInstance().start();
		didClickedPlay();
		if(Std["int"](com.tools.DataManager.getInstance().getData("show1level")) == 0) {
			com.tools.DataManager.getInstance().saveData("show1level",1);
			Main.getInstance().showScene(ScenesList.LevelBuilder,1);
		} else Main.getInstance().showScene(ScenesList.Levels);
	}
	,credits: function() {
		this.setChildIndex(this.layer2.view,this.get_numChildren() - 1);
		Main.getInstance().panel.panelFunc(panels.PanelList.Credits,panels.PanelFunc.show);
	}
	,resize: function() {
		this.btnSound.setPosition(693 + com.Variables.shiftX,240);
		if(this.btnGift != null) this.btnGift.setPosition(50 - com.Variables.shiftX,350);
		if(this.btnOffer != null) {
			this.btnOffer.setPosition(640 + com.Variables.shiftX,350);
			this.btnOffer.resize();
		}
	}
	,free: function() {
		this.layer = null;
		this.layer2 = null;
		this.btnSound = null;
		this.btnPlay = null;
		this.btnMoreGames = null;
		this.btnGift = null;
		this.btnOffer = null;
	}
	,__class__: scenes.Menu
});
scenes.Shop = function() {
	this.lastActiveInset = 0;
	this.money = 0;
	scenes.BasicScene.call(this);
	scenes.Shop.instance = this;
	this.insets = new Array();
};
$hxClasses["scenes.Shop"] = scenes.Shop;
scenes.Shop.__name__ = ["scenes","Shop"];
scenes.Shop.instance = null;
scenes.Shop.__super__ = scenes.BasicScene;
scenes.Shop.prototype = $extend(scenes.BasicScene.prototype,{
	init: function() {
		this.isEnabledIncentiviseButton = api.SoftGames.getInstance().isEnabledIncentiviseButton();
		var fon = new openfl.display.Bitmap(com.jdtiles.Tile.getBitmapData("shop"));
		fon.smoothing = true;
		fon.set_x(-com.Variables.oW);
		fon.set_y(-com.Variables.oH);
		this.addChild(fon);
		fon = null;
		this.layer = com.jdtiles.Tile.getTileLayer("scenes");
		this.addChild(this.layer.view);
		if(this.isEnabledIncentiviseButton == true) {
			this.btnPlus = new com.buttons.Button(this.layer);
			this.btnPlus.initScale("plus");
			this.btnPlus.onCompleteVoid = $bind(this,this.showAddCoins);
			this.btnPlus.setPosition(116,93);
			this.btnPlus.drawGraphics(-20,-20,40,40,true);
			this.addChild(this.btnPlus);
		}
		this.insetWindow = new com.jdtiles.jda.TileSprite(this.layer,"insetWindow");
		this.insetWindow.x = 61;
		this.insetWindow.y = 207;
		this.layer.addChild(this.insetWindow);
		this.money = Std["int"](com.tools.DataManager.getInstance().getData("money"));
		this.tfMoney = com.tools.Tools.addText("" + this.money,28,8 + com.Variables.txtShiftX,80 + com.Variables.txtShiftY,100,100,Main.color1);
		this.addChild(this.tfMoney);
		this.addInsetButton();
		var inset;
		inset = new scenes.shopInset.InsetHero(this.layer);
		this.addChild(inset.sprite);
		this.layer.addChild(inset);
		this.insets.push(inset);
		inset = new scenes.shopInset.InsetPowerUps(this.layer);
		this.addChild(inset.sprite);
		inset.hide();
		this.layer.addChild(inset);
		this.insets.push(inset);
		inset = null;
		this.canBuy1 = new scenes.shopInset.CanBuyIcon(this.layer,"shopCanBuy");
		this.canBuy1.x = 20;
		this.canBuy1.y = 158;
		this.layer.addChild(this.canBuy1);
		this.canBuy2 = new scenes.shopInset.CanBuyIcon(this.layer,"shopCanBuy");
		this.canBuy2.x = 20;
		this.canBuy2.y = 300;
		this.layer.addChild(this.canBuy2);
		this.checkCanBuy();
		this.btnBack = new com.buttons.Button(this.layer);
		this.btnBack.initOneFrame("podBtn");
		this.btnBack.initScale("btn_back",-8,1);
		this.btnBack.onCompleteVoid = $bind(this,this.back);
		this.btnBack.setPosition(com.Variables.baseScale(693) + com.Variables.shiftX,com.Variables.baseScale(198));
		this.addChild(this.btnBack);
		this.btnSound = new com.buttons.Button(this.layer);
		this.btnSound.initOneFrame("podBtn");
		this.btnSound.initSound("btn_musicOn","btn_sfxOn","btn_soundsOff",-9);
		this.btnSound.setPosition(693 + com.Variables.shiftX,282);
		this.addChild(this.btnSound);
		this.layer2 = com.jdtiles.Tile.getTileLayer("scenes");
		this.addChild(this.layer2.view);
	}
	,showAddCoins: function() {
		Main.getInstance().panel.init(panels.PanelList.AddDiamond,this.layer2);
		Main.getInstance().panel.panelFunc(panels.PanelList.AddDiamond,panels.PanelFunc.show);
	}
	,addInsetButton: function() {
		this.btnsInset = new Array();
		var btn;
		btn = new com.buttons.Button(this.layer);
		btn.initScale("shopInset1");
		btn.numLevel = 0;
		btn.onComplete = $bind(this,this.changeInset);
		btn.setPosition(60,208);
		btn.drawGraphics(-50,-55,100,110,true);
		this.addChild(btn);
		this.btnsInset.push(btn);
		btn = new com.buttons.Button(this.layer);
		btn.initScale("shopInset2");
		btn.numLevel = 1;
		btn.onComplete = $bind(this,this.changeInset);
		btn.setPosition(60,350);
		btn.drawGraphics(-50,-55,100,110,true);
		this.addChild(btn);
		this.btnsInset.push(btn);
		btn = null;
	}
	,changeInset: function(e) {
		var tab = "";
		if(e.numLevel == 0) tab = "hero"; else if(e.numLevel == 1) tab = "powerups"; else if(e.numLevel == 2) tab = "adddiamond";
		this.insetWindow.y = e.get_totalY() - 1;
		this.insets[this.lastActiveInset].hide();
		this.lastActiveInset = e.numLevel;
		this.insets[this.lastActiveInset].show();
	}
	,afterVideoDone: function(isVideoFullyWatched) {
		if(isVideoFullyWatched == true) this.setMoney(50); else {
			Main.getInstance().panel.init(panels.PanelList.ShowFullVideo,this.layer2);
			Main.getInstance().panel.panelFunc(panels.PanelList.ShowFullVideo,panels.PanelFunc.show);
		}
		turnOnSoundForAd();
	}
	,setMoney: function(_money) {
		this.money += _money;
		this.tfMoney.set_text("" + this.money);
		com.tools.DataManager.getInstance().saveData("money",this.money);
		this.insets[this.lastActiveInset].show();
		this.checkCanBuy();
	}
	,checkCanBuy: function() {
		if(Main.getInstance().checkUpgrade("hero",0) == true) this.canBuy1.show(); else this.canBuy1.hide();
		if(Main.getInstance().checkUpgrade("power",1) == true) this.canBuy2.show(); else this.canBuy2.hide();
	}
	,update: function() {
		this.canBuy1.update();
		this.canBuy2.update();
	}
	,resize: function() {
		this.btnBack.setPosition(com.Variables.baseScale(693) + com.Variables.shiftX,com.Variables.baseScale(198));
		this.btnSound.setPosition(693 + com.Variables.shiftX,282);
	}
	,back: function() {
		Main.getInstance().showScene(ScenesList.Levels);
	}
	,free: function() {
		scenes.Shop.instance = null;
		this.layer = null;
		this.layer2 = null;
		this.btnBack = null;
		this.btnSound = null;
		this.insetWindow = null;
		this.insets = [];
		this.insets = null;
		this.tfMoney = null;
		this.btnsInset = [];
		this.btnsInset = null;
		this.canBuy1 = null;
		this.canBuy2 = null;
		this.btnPlus = null;
	}
	,__class__: scenes.Shop
});
scenes.additional = {};
scenes.additional.BtnOrange = function(_parentGroup,_inTileLayer) {
	if(_inTileLayer == null) _inTileLayer = false;
	this._totalScaleY = 1;
	this._totalScaleX = 1;
	this.stopBounce = false;
	this.firstTime = true;
	com.buttons.Button.call(this,_parentGroup,_inTileLayer);
	this.addText();
};
$hxClasses["scenes.additional.BtnOrange"] = scenes.additional.BtnOrange;
scenes.additional.BtnOrange.__name__ = ["scenes","additional","BtnOrange"];
scenes.additional.BtnOrange.__super__ = com.buttons.Button;
scenes.additional.BtnOrange.prototype = $extend(com.buttons.Button.prototype,{
	drawGraphics: function(_x,_y,_w,_h,draw) {
		if(draw == null) draw = false;
		if(_h == null) _h = 80;
		if(_w == null) _w = 100;
		if(_y == null) _y = -40;
		if(_x == null) _x = -50;
		if(this.drawing == true && draw == false) return;
		this.drawing = true;
		this.get_graphics().clear();
		this.get_graphics().beginFill(255,0);
		this.get_graphics().drawRect(_x,_y,_w,_h);
		this.get_graphics().endFill();
	}
	,addText: function() {
		this.text = com.tools.Tools.addText("" + scenes.LevelBuilder.getInstance().orangeAmount,30,12 + com.Variables.txtShiftX,14 + com.Variables.txtShiftY,50,50,Main.color2);
		this.addChild(this.text);
	}
	,mouseDown: function() {
		if(this.pressed == true) return;
		this.pressed = true;
		this.set_scaleX(this.set_scaleY(0.9));
		if(this.graphicBack != null) this.graphicBack.mouseDown();
		if(this.graphicFront != null) this.graphicFront.mouseDown();
	}
	,mouseUp: function(comp) {
		if(comp == null) comp = true;
		this.set_scaleX(this.set_scaleY(1));
		if(this.graphicBack != null) this.graphicBack.mouseUp();
		if(this.graphicFront != null) this.graphicFront.mouseUp();
		if(comp == true && this.pressed == true) {
			this.stopBounce = true;
			this.complete();
			this.text.set_text("" + scenes.LevelBuilder.getInstance().orangeAmount);
		}
		this.pressed = false;
	}
	,enable: function() {
		com.buttons.Button.prototype.enable.call(this);
		this.text.set_alpha(1);
	}
	,disable: function() {
		com.buttons.Button.prototype.disable.call(this);
		this.text.set_alpha(0);
	}
	,startBounce: function() {
		if(this.firstTime == false) return;
		this.firstTime = false;
		this.goDown();
	}
	,goDown: function() {
		if(this.stopBounce == true) {
			this.set_totalScaleX(this.set_totalScaleY(1));
			return;
		}
		motion.Actuate.tween(this,15,{ totalScaleX : 0.9, totalScaleY : 0.9}).onComplete($bind(this,this.goUp));
	}
	,goUp: function() {
		if(this.stopBounce == true) {
			this.set_totalScaleX(this.set_totalScaleY(1));
			return;
		}
		motion.Actuate.tween(this,15,{ totalScaleX : 1, totalScaleY : 1}).onComplete($bind(this,this.goDown));
	}
	,get_totalScaleX: function() {
		return this._totalScaleX;
	}
	,set_totalScaleX: function(value) {
		this._totalScaleX = value;
		this.set_scaleX(value);
		this.graphicFront.set_scaleX(value);
		return value;
	}
	,get_totalScaleY: function() {
		return this._totalScaleY;
	}
	,set_totalScaleY: function(value) {
		this._totalScaleY = value;
		this.set_scaleY(value);
		this.graphicFront.set_scaleY(value);
		return value;
	}
	,free: function() {
		com.buttons.Button.prototype.free.call(this);
		this.text = null;
	}
	,__class__: scenes.additional.BtnOrange
	,__properties__: $extend(com.buttons.Button.prototype.__properties__,{set_totalScaleY:"set_totalScaleY",get_totalScaleY:"get_totalScaleY",set_totalScaleX:"set_totalScaleX",get_totalScaleX:"get_totalScaleX"})
});
scenes.additional.Game = function(_level) {
	this.numChannelRollingStone = 0;
	this.startEndLevel = false;
	this.endLevel = false;
	this.nextPositionCreates = 0;
	this.currPositionCreates = 994;
	this.doubleOn = false;
	this.magnetOn = false;
	this.maxBirds = 3;
	this.birdFreedom = 0;
	this.ignorContact = true;
	this.jumpOff = false;
	this.thisX = 0;
	this.stepX = 0;
	openfl.display.Sprite.call(this);
	if(_level == 1) this.maxBirds = 1;
	scenes.additional.Game.instance = this;
	this.initWorld();
	this.level = Type.createInstance(Type.resolveClass("levels.Level" + _level),[]);
	this.startEndLevelX = this.level.levelEndX - 200;
	this.backgroundLayer = com.jdtiles.Tile.getTileLayerNoShift("background");
	scenes.LevelBuilder.getInstance().gameLayer.addChild(this.backgroundLayer.view);
	this.createLayers();
	this.eManager = new scenes.managers.ElementManager(com.jdtiles.Tile.getParseXML("elements"));
	this.eManager.setOffsetView(0,0);
	com.jdtiles.Tile.layers.push(this.eManager);
	scenes.LevelBuilder.getInstance().gameLayer.addChild(this.eManager.view);
	this.floor = new scenes.managers.Floor();
	this.hero = new elements.Hero();
	this.hero.init();
	this.powerUp = new powerUps.PowerUpManager();
	this.buildElements();
};
$hxClasses["scenes.additional.Game"] = scenes.additional.Game;
scenes.additional.Game.__name__ = ["scenes","additional","Game"];
scenes.additional.Game.instance = null;
scenes.additional.Game.__super__ = openfl.display.Sprite;
scenes.additional.Game.prototype = $extend(openfl.display.Sprite.prototype,{
	getChanelRollingStone: function() {
		this.numChannelRollingStone += 1;
		return this.numChannelRollingStone;
	}
	,initWorld: function() {
		this.physWorld = new com.World();
		this.physWorld.initWorldBox(0,1500);
	}
	,createLayers: function() {
		this.layer_0 = new scenes.layers.Mountain();
		this.layer_1 = new com.jdtiles.jda.TileSprite(this.backgroundLayer,"sea");
		this.layer_1.x = 497;
		this.layer_1.y = 309;
		this.backgroundLayer.addChild(this.layer_1);
		this.layer_2 = new scenes.layers.BackPalma();
		this.layer_3 = new scenes.layers.Front(this.backgroundLayer);
		this.backgroundLayer.addChild(this.layer_3);
		this.layer_4 = new com.jdtiles.jda.TileGroupRender(this.backgroundLayer);
		this.backgroundLayer.addChild(this.layer_4);
	}
	,update: function() {
		this.powerUp.update();
		this.hero.update();
		this.control();
		this.physWorld.update();
		this.layer_0.update(this.stepX);
		this.layer_2.update(this.stepX);
		this.layer_3.update(this.stepX);
		this.eManager.update(this.stepX);
		this.floor.update(this.stepX);
		this.hero.updateAW();
	}
	,control: function() {
		if(this.endLevel == true) return;
		if(this.startEndLevel == true) {
			this.stepX -= 0.1;
			if(this.stepX < 0) this.stepX = 0;
		} else {
			this.newX = -(this.hero.body.get_position().get_x() - 180);
			if(this.newX > 0) this.newX = 0;
			if(this.newX < -this.level.levelEndX) this.newX = -this.level.levelEndX;
			this.stepX = this.get_x() - this.newX;
		}
		this.thisX -= this.stepX;
		this.set_x(this.thisX);
		this.currPositionCreates += this.stepX;
		if(this.currPositionCreates >= this.startEndLevelX && this.startEndLevel == false) {
			this.startEndLevel = true;
			this.stepX = this.hero.startSpeedRun / 30;
		}
		if(this.currPositionCreates >= this.level.levelEndX) {
			this.endLevel = true;
			this.stepX = 0;
		}
		if(this.currPositionCreates >= this.nextPositionCreates) this.buildElements();
	}
	,buildElements: function() {
		while(this.level.elements.length > 0) {
			var _g = this.level.elements[0][0];
			switch(_g) {
			case 0:
				this.eManager.addElement("Platform1",this.level.elements[0]);
				break;
			case 1:
				this.eManager.addElement("Platform2",this.level.elements[0]);
				break;
			case 2:
				this.eManager.addElement("Enemy1",this.level.elements[0]);
				break;
			case 3:
				this.eManager.addElement("Diamond",this.level.elements[0]);
				break;
			case 4:
				this.eManager.addElement("Batut",this.level.elements[0]);
				break;
			case 5:
				this.eManager.addElement("Bush",this.level.elements[0]);
				break;
			case 6:
				this.eManager.addElement("Flower",this.level.elements[0]);
				break;
			case 7:
				this.eManager.addElement("Wall",this.level.elements[0]);
				break;
			case 8:
				this.eManager.addElement("Coconuts",this.level.elements[0]);
				break;
			case 9:
				this.eManager.addElement("Enemy2",this.level.elements[0]);
				break;
			case 10:
				if(com.tools.Tools.randTo(0,100) < 75) this.eManager.addElement("PickUpPlace",this.level.elements[0]); else this.eManager.addElement("Chest",this.level.elements[0]);
				break;
			case 11:
				this.eManager.addElement("WalkingEnemy",this.level.elements[0]);
				break;
			case 12:
				this.eManager.addElement("Cage",this.level.elements[0]);
				break;
			case 13:
				this.eManager.addElement("Monkey",this.level.elements[0]);
				break;
			case 14:
				this.eManager.addElement("RollingStone",this.level.elements[0]);
				break;
			case 15:
				this.eManager.addElement("Basket",this.level.elements[0]);
				break;
			case 16:
				this.eManager.addElement("Monkey2",this.level.elements[0]);
				break;
			case 17:
				this.eManager.addElement("Tutorial",this.level.elements[0]);
				break;
			}
			this.level.elements.shift();
			if(this.level.elements.length == 0) break;
			this.nextPositionCreates = this.level.elements[0][1];
			if(this.currPositionCreates < this.nextPositionCreates) break;
		}
	}
	,resize: function() {
		this.powerUp.resize();
	}
	,getLastIndex: function() {
		return this.eManager.getChildIndex(this.hero.graphic);
	}
	,free: function() {
		this.powerUp.free();
		this.powerUp = null;
		scenes.additional.Game.instance = null;
		this.physWorld.clearWorld();
		this.physWorld = null;
		this.level.free();
		this.level = null;
		this.floor.free();
		this.floor = null;
		this.hero.free();
		this.hero = null;
		this.eManager = null;
		this.layer_0.free();
		this.layer_0 = null;
		this.layer_1 = null;
		this.layer_2.free();
		this.layer_2 = null;
		this.layer_3 = null;
		this.layer_4 = null;
		com.tools.Tools.clearLayer(this);
	}
	,__class__: scenes.additional.Game
});
scenes.additional.HealthBar = function(layer) {
	this.tfY = 2;
	this.offTfBird = 0;
	this.offTfDiamond = 0;
	this.offXPanelHDD = 0;
	this.totalDiamond = 0;
	this.countDiamond = 0;
	this.healths = new Array();
	this.totalDiamond = Std["int"](com.tools.DataManager.getInstance().getData("money"));
	var offX = 25 * scenes.additional.Game.instance.hero.health;
	this.offXPanelHDD = 40 + offX;
	this.offTfDiamond = 35 + offX;
	this.offTfBird = 140 + offX;
	this.panel = new com.jdtiles.jda.TileSprite(layer,"panelHD");
	this.panel.x = this.offXPanelHDD - com.Variables.shiftX;
	this.panel.y = 17 - com.Variables.shiftY;
	layer.addChild(this.panel);
	var temp;
	var startX = 16;
	var _g1 = 0;
	var _g = scenes.additional.Game.instance.hero.health;
	while(_g1 < _g) {
		var i = _g1++;
		temp = new com.jdtiles.jda.TileSprite(layer,"health");
		temp.nX = startX;
		temp.nY = 17;
		temp.x = temp.nX - com.Variables.shiftX;
		temp.y = temp.nY - com.Variables.shiftY;
		layer.addChild(temp);
		this.healths.push(temp);
		startX += 25;
	}
	temp = null;
	this.tfDiamond = com.tools.Tools.addText("0",30,this.offTfDiamond + com.Variables.txtShiftX - com.Variables.shiftX,this.tfY + com.Variables.txtShiftY - com.Variables.shiftY,100,50,Main.color1);
	scenes.LevelBuilder.getInstance().addChild(this.tfDiamond);
	this.tfBird = com.tools.Tools.addText("0/" + scenes.additional.Game.instance.maxBirds,30,this.offTfBird + com.Variables.txtShiftX - com.Variables.shiftX,this.tfY + com.Variables.txtShiftY - com.Variables.shiftY,100,50,Main.color1);
	scenes.LevelBuilder.getInstance().addChild(this.tfBird);
};
$hxClasses["scenes.additional.HealthBar"] = scenes.additional.HealthBar;
scenes.additional.HealthBar.__name__ = ["scenes","additional","HealthBar"];
scenes.additional.HealthBar.prototype = {
	resize: function() {
		this.panel.x = this.offXPanelHDD - com.Variables.shiftX;
		this.panel.y = 17 - com.Variables.shiftY;
		this.tfDiamond.set_x(this.offTfDiamond + com.Variables.txtShiftX - com.Variables.shiftX);
		this.tfDiamond.set_y(this.tfY + com.Variables.txtShiftY - com.Variables.shiftY);
		this.tfBird.set_x(this.offTfBird + com.Variables.txtShiftX - com.Variables.shiftX);
		this.tfBird.set_y(this.tfY + com.Variables.txtShiftY - com.Variables.shiftY);
		var _g = 0;
		var _g1 = this.healths;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.x = i.nX - com.Variables.shiftX;
			i.y = i.nY - com.Variables.shiftY;
		}
	}
	,freeBird: function() {
		this.tfBird.set_text("" + scenes.additional.Game.instance.birdFreedom + "/" + scenes.additional.Game.instance.maxBirds);
	}
	,loseHealth: function(currHealth) {
		var _g1 = 0;
		var _g = this.healths.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(i < currHealth) continue;
			this.healths[i].alpha = 0;
		}
	}
	,collectDiamond: function(value) {
		this.countDiamond += value;
		this.totalDiamond += value;
		this.tfDiamond.set_text("" + this.countDiamond);
		com.tools.DataManager.getInstance().saveData("money",this.totalDiamond);
	}
	,hide: function() {
		var _g = 0;
		var _g1 = this.healths;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.alpha = 0;
		}
		this.panel.alpha = 0;
		this.tfBird.set_alpha(0);
		this.tfDiamond.set_alpha(0);
	}
	,free: function() {
		this.tfDiamond = null;
		this.tfBird = null;
		this.panel = null;
		this.healths = [];
		this.healths = null;
	}
	,__class__: scenes.additional.HealthBar
};
scenes.additional.ProgressBar = function(layer) {
	this.width = 345;
	this.shkala = new com.jdtiles.jda.TileSprite(layer,"progressShaka");
	this.shkala.x = 360;
	this.shkala.y = 460 + com.Variables.shiftY;
	layer.addChild(this.shkala);
	this.icon = new com.jdtiles.jda.TileSprite(layer,"progressIcon");
	this.icon.x = 190;
	this.icon.y = 443 + com.Variables.shiftY;
	layer.addChild(this.icon);
	this.levelWidth = scenes.additional.Game.instance.level.levelEndX;
};
$hxClasses["scenes.additional.ProgressBar"] = scenes.additional.ProgressBar;
scenes.additional.ProgressBar.__name__ = ["scenes","additional","ProgressBar"];
scenes.additional.ProgressBar.prototype = {
	update: function() {
		this.bodyX = scenes.additional.Game.instance.hero.body.get_position().get_x();
		if(this.bodyX < 0) return;
		this.percent = com.tools.Tools.toPercent(this.bodyX,this.levelWidth);
		this.icon.x = 190 + com.tools.Tools.fromPercent(this.percent,this.width);
	}
	,resize: function() {
		this.shkala.y = 460 + com.Variables.shiftY;
		this.icon.y = 443 + com.Variables.shiftY;
	}
	,hide: function() {
		this.shkala.alpha = 0;
		this.icon.alpha = 0;
	}
	,free: function() {
		this.shkala = null;
		this.icon = null;
	}
	,__class__: scenes.additional.ProgressBar
};
scenes.layers = {};
scenes.layers.BackPalma = function() {
	this.indexIndexation = 3;
	this.offsetXW = 3;
	this.currCheckindex = 0;
	this.coef = 0.5;
	this.childs = new Array();
	this.smallPalma = new Array();
	this.init();
};
$hxClasses["scenes.layers.BackPalma"] = scenes.layers.BackPalma;
scenes.layers.BackPalma.__name__ = ["scenes","layers","BackPalma"];
scenes.layers.BackPalma.prototype = {
	init: function() {
		var arr = [1,2,3];
		var bpp;
		var startX = 0;
		var rand;
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			rand = Math.floor(Math.random() * (arr.length - 1));
			bpp = new scenes.layers.BackPalmaPart(scenes.additional.Game.instance.backgroundLayer,"kystu" + arr[rand]);
			startX += bpp.get_halfwidth();
			bpp.initPos(startX,434);
			scenes.additional.Game.instance.backgroundLayer.addChild(bpp);
			this.childs.push(bpp);
			this.showSmallPalma(bpp.x,bpp.y);
			startX += bpp.get_halfwidth() - this.offsetXW;
			arr.splice(rand,1);
			if(arr.length == 0) arr = [1,2,3];
		}
		bpp = null;
		arr = [];
		arr = null;
		this.bigPalma = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.backgroundLayer,"bigPalma");
		this.bigPalma.x = com.tools.Tools.randTo(237,637);
		this.bigPalma.y = 320;
		scenes.additional.Game.instance.backgroundLayer.addChild(this.bigPalma);
		this.bigPalmaEndX = -this.bigPalma.get_halfwidth();
	}
	,showSmallPalma: function(_x,_y) {
		if(com.tools.Tools.randTo(0,100) > 40) return;
		_x = com.tools.Tools.randTo(_x,_x + 100);
		_y = _y - com.tools.Tools.randTo(40,95);
		var sx = 1;
		if(com.tools.Tools.randTo(1,2) == 1) sx = -1;
		var _g = 0;
		var _g1 = this.smallPalma;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.alpha == 1) continue;
			i.x = _x;
			i.y = _y;
			i.set_scaleX(sx);
			i.alpha = 1;
			return;
		}
		var bmp = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.backgroundLayer,"smallPalma");
		bmp.x = _x;
		bmp.y = _y;
		bmp.set_scaleX(sx);
		scenes.additional.Game.instance.backgroundLayer.addChildAt(bmp,this.indexIndexation);
		this.smallPalma.push(bmp);
		this.smallPalmaEndX = -bmp.get_halfwidth();
		bmp = null;
	}
	,update: function(stepX) {
		this.currStepX = stepX * this.coef;
		var _g = 0;
		var _g1 = this.childs;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.update(this.currStepX);
		}
		if(this.childs[this.currCheckindex].checkEnd() == true) {
			var ind = this.currCheckindex - 1;
			if(ind == -1) ind = this.childs.length - 1;
			this.childs[this.currCheckindex].x = this.childs[ind].x + this.childs[ind].get_halfwidth() + this.childs[this.currCheckindex].get_halfwidth() - this.offsetXW;
			this.showSmallPalma(this.childs[this.currCheckindex].x,this.childs[this.currCheckindex].y);
			this.currCheckindex += 1;
			if(this.currCheckindex == this.childs.length) this.currCheckindex = 0;
		}
		this.bigPalma.x -= this.currStepX;
		if(this.bigPalma.x <= this.bigPalmaEndX) {
			if(com.tools.Tools.randTo(1,2) == 1) this.bigPalma.set_scaleX(1); else this.bigPalma.set_scaleX(-1);
			this.bigPalma.x = com.Variables.mSW + this.bigPalma.get_halfwidth();
		}
		var _g2 = 0;
		var _g11 = this.smallPalma;
		while(_g2 < _g11.length) {
			var i1 = _g11[_g2];
			++_g2;
			if(i1.alpha == 0) continue;
			i1.x -= this.currStepX;
			if(i1.x <= this.smallPalmaEndX) i1.alpha = 0;
		}
	}
	,free: function() {
		this.smallPalma = [];
		this.smallPalma = null;
		this.bigPalma = null;
		var _g = 0;
		var _g1 = this.childs;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.free();
		}
		this.childs = [];
		this.childs = null;
	}
	,__class__: scenes.layers.BackPalma
};
scenes.layers.BackPalmaPart = function(layer,tile) {
	com.jdtiles.jda.TileSprite.call(this,layer,tile);
};
$hxClasses["scenes.layers.BackPalmaPart"] = scenes.layers.BackPalmaPart;
scenes.layers.BackPalmaPart.__name__ = ["scenes","layers","BackPalmaPart"];
scenes.layers.BackPalmaPart.__super__ = com.jdtiles.jda.TileSprite;
scenes.layers.BackPalmaPart.prototype = $extend(com.jdtiles.jda.TileSprite.prototype,{
	initPos: function(_x,_y) {
		this.x = _x;
		this.y = _y - this.get_halfheight();
		this.endX = -this.get_halfwidth();
	}
	,update: function(stepX) {
		this.x -= stepX;
	}
	,checkEnd: function() {
		if(this.x < this.endX) return true;
		return false;
	}
	,__class__: scenes.layers.BackPalmaPart
});
scenes.layers.Front = function(layer) {
	this.indexIndexation = 0;
	this.thisX = 0;
	this.endLevel = false;
	this.nextPositionCreates = 0;
	this.currPositionCreates = 994;
	this.coef = 0.7;
	com.jdtiles.jda.TileGroupRender.call(this,layer);
	this.buildElements();
};
$hxClasses["scenes.layers.Front"] = scenes.layers.Front;
scenes.layers.Front.__name__ = ["scenes","layers","Front"];
scenes.layers.Front.__super__ = com.jdtiles.jda.TileGroupRender;
scenes.layers.Front.prototype = $extend(com.jdtiles.jda.TileGroupRender.prototype,{
	update: function(stepX) {
		this.currStepX = stepX * this.coef;
		if(this.endLevel == false) {
			this.thisX += this.currStepX;
			this.currPositionCreates += this.currStepX;
			if(this.currPositionCreates >= this.nextPositionCreates) this.buildElements();
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.x -= this.currStepX;
			if(i.x < -i.get_halfwidth()) this.removeChild(i);
		}
	}
	,buildElements: function() {
		var temp;
		while(scenes.additional.Game.instance.level.background.length > 0) {
			var nameInd = scenes.additional.Game.instance.level.background[0][0];
			temp = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.backgroundLayer,"bgEl_" + nameInd);
			temp.set_scaleX(scenes.additional.Game.instance.level.background[0][3]);
			temp.set_scaleY(scenes.additional.Game.instance.level.background[0][4]);
			temp.x = scenes.additional.Game.instance.level.background[0][1] - this.thisX + temp.get_halfwidth();
			temp.y = scenes.additional.Game.instance.level.background[0][2];
			temp.set_rotation(scenes.additional.Game.instance.level.background[0][5]);
			if(nameInd == 1 || nameInd == 2 || nameInd == 4) this.addChildAt(temp,0); else this.addChild(temp);
			scenes.additional.Game.instance.level.background.shift();
			if(scenes.additional.Game.instance.level.background.length == 0) {
				this.endLevel = true;
				break;
			}
			this.nextPositionCreates = scenes.additional.Game.instance.level.background[0][1];
			if(this.currPositionCreates < this.nextPositionCreates) break;
		}
		temp = null;
	}
	,__class__: scenes.layers.Front
});
scenes.layers.Mountain = function() {
	this.coef = 0.1;
	this.childs = new Array();
	this.childs.push(new scenes.layers.MountainPart(scenes.additional.Game.instance.backgroundLayer,"mount1",207,246));
	this.childs.push(new scenes.layers.MountainPart(scenes.additional.Game.instance.backgroundLayer,"mount2",737,246));
};
$hxClasses["scenes.layers.Mountain"] = scenes.layers.Mountain;
scenes.layers.Mountain.__name__ = ["scenes","layers","Mountain"];
scenes.layers.Mountain.prototype = {
	update: function(stepX) {
		this.currStepX = stepX * this.coef;
		var _g = 0;
		var _g1 = this.childs;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.update(this.currStepX);
		}
	}
	,free: function() {
		var _g = 0;
		var _g1 = this.childs;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.free();
		}
		this.childs = [];
		this.childs = null;
	}
	,__class__: scenes.layers.Mountain
};
scenes.layers.MountainPart = function(layer,tile,_x,_y) {
	com.jdtiles.jda.TileSprite.call(this,layer,tile);
	layer.addChild(this);
	this.x = _x;
	this.y = _y;
	this.startX = com.Variables.mSW + this.get_halfwidth();
	this.endX = -this.get_halfwidth();
};
$hxClasses["scenes.layers.MountainPart"] = scenes.layers.MountainPart;
scenes.layers.MountainPart.__name__ = ["scenes","layers","MountainPart"];
scenes.layers.MountainPart.__super__ = com.jdtiles.jda.TileSprite;
scenes.layers.MountainPart.prototype = $extend(com.jdtiles.jda.TileSprite.prototype,{
	update: function(stepX) {
		this.x -= stepX;
		if(this.x < this.endX) this.x = this.startX;
	}
	,__class__: scenes.layers.MountainPart
});
scenes.managers = {};
scenes.managers.ElementManager = function(sheetEx) {
	com.jdtiles.jda.TileLayerNoShift.call(this,sheetEx);
	this.activeElements = new Array();
};
$hxClasses["scenes.managers.ElementManager"] = scenes.managers.ElementManager;
scenes.managers.ElementManager.__name__ = ["scenes","managers","ElementManager"];
scenes.managers.ElementManager.__super__ = com.jdtiles.jda.TileLayerNoShift;
scenes.managers.ElementManager.prototype = $extend(com.jdtiles.jda.TileLayerNoShift.prototype,{
	addElement: function(nameElement,data) {
		var _g = 0;
		var _g1 = this.activeElements;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.active == false && i.name == nameElement) {
				i.activate(data);
				this.birdIndex(nameElement);
				return;
			}
		}
		var block = Type.createInstance(Type.resolveClass("elements." + nameElement),[]);
		block.create();
		block.activate(data);
		this.birdIndex(nameElement);
		this.activeElements.push(block);
		block = null;
	}
	,birdIndex: function(nameElement) {
		if(this.birdCage != null && nameElement != "Platform1" && nameElement != "Platform2" && nameElement != "Diamond" && nameElement != "Enemy1" && nameElement != "Bullet" && nameElement != "DamageEffect" && nameElement != "Dodge") this.birdCage.reIndexHelp();
	}
	,update: function(stepX) {
		var _g = 0;
		var _g1 = this.activeElements;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.active == true) i.update(stepX);
		}
	}
	,free: function() {
		com.jdtiles.jda.TileLayerNoShift.prototype.free.call(this);
		this.birdCage = null;
		var _g = 0;
		var _g1 = this.activeElements;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.free();
		}
		this.activeElements = [];
		this.activeElements = null;
	}
	,__class__: scenes.managers.ElementManager
});
scenes.managers.Floor = function() {
	this.offXW = 3;
	this.checkingIter = 0;
	this.elements = new Array();
	var graphic;
	var iter = 10;
	var _g = 0;
	while(_g < iter) {
		var i = _g++;
		graphic = new com.jdtiles.jda.TileSprite(scenes.additional.Game.instance.backgroundLayer,"ground" + com.tools.Tools.randTo(1,3));
		if(i == 0) graphic.x = graphic.get_halfwidth() - this.offXW; else graphic.x = this.elements[i - 1].x + this.elements[i - 1].get_halfwidth() + graphic.get_halfwidth() - this.offXW;
		graphic.y = 487;
		scenes.additional.Game.instance.layer_4.addChild(graphic);
		this.elements.push(graphic);
	}
	graphic = null;
};
$hxClasses["scenes.managers.Floor"] = scenes.managers.Floor;
scenes.managers.Floor.__name__ = ["scenes","managers","Floor"];
scenes.managers.Floor.prototype = {
	update: function(stepX) {
		var _g = 0;
		var _g1 = this.elements;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.x -= stepX;
		}
		if(this.elements[this.checkingIter].x <= -this.elements[this.checkingIter].get_halfwidth()) {
			var ind = this.checkingIter - 1;
			if(ind == -1) ind = this.elements.length - 1;
			this.elements[this.checkingIter].x = this.elements[ind].x + this.elements[ind].get_halfwidth() + this.elements[this.checkingIter].get_halfwidth() - this.offXW;
			this.checkingIter += 1;
			if(this.checkingIter == this.elements.length) this.checkingIter = 0;
		}
	}
	,free: function() {
		this.elements = [];
		this.elements = null;
	}
	,__class__: scenes.managers.Floor
};
scenes.mapElements = {};
scenes.mapElements.ButtonFlag = function(_parentGroup) {
	this._totalScaleY = 1;
	this._totalScaleX = 1;
	this._totalA = 1;
	this.posStar = [[-15,-42,-15],[-1,-44,0],[13,-42,15]];
	com.buttons.Button.call(this,_parentGroup,false);
};
$hxClasses["scenes.mapElements.ButtonFlag"] = scenes.mapElements.ButtonFlag;
scenes.mapElements.ButtonFlag.__name__ = ["scenes","mapElements","ButtonFlag"];
scenes.mapElements.ButtonFlag.__super__ = com.buttons.Button;
scenes.mapElements.ButtonFlag.prototype = $extend(com.buttons.Button.prototype,{
	addStars: function(value) {
		var temp;
		var _g = 0;
		while(_g < value) {
			var i = _g++;
			temp = new com.jdtiles.jda.TileSprite(this.parentGroup.layer,"star");
			temp.x = this.get_totalX() + this.posStar[i][0];
			temp.y = this.get_totalY() + this.posStar[i][1];
			temp.set_rotation(this.posStar[i][2]);
			this.parentGroup.layer.addChild(temp);
			if(i == 2) this.parentGroup.layer.setChildIndex(temp,0);
		}
		temp = null;
	}
	,addText: function(value,_useColor) {
		this.useColor = _useColor;
		this.text = com.tools.Tools.addText(value,30,-24 + com.Variables.txtShiftX,-12 + com.Variables.txtShiftY,50,50,this.useColor);
		this.addChild(this.text);
	}
	,show: function(_x,_y,value) {
		this.drawGraphics();
		this.set_totalX(_x);
		if(value == false) this.set_totalY(_y); else {
			com.sound.SoundManager.playSFX("showFlag");
			this.endY = _y;
			this.set_totalA(0);
			this.set_totalY(_y - 100);
			motion.Actuate.tween(this,6,{ totalY : _y, totalA : 1}).ease(motion.easing.Cubic.get_easeIn()).onComplete($bind(this,this.compAnim));
		}
	}
	,compAnim: function() {
		this.onComplete2(this);
		motion.Actuate.tween(this,4,{ totalScaleX : 1.2, totalScaleY : 0.8}).onComplete($bind(this,this.endTween));
	}
	,endTween: function() {
		motion.Actuate.tween(this,4,{ totalScaleX : 0.9, totalScaleY : 1.1}).onComplete($bind(this,this.endTween2));
	}
	,endTween2: function() {
		motion.Actuate.tween(this,4,{ totalScaleX : 1, totalScaleY : 1}).onComplete($bind(this,this.checkPack));
	}
	,checkPack: function() {
		this.onComplete3(this);
	}
	,mouseDown: function() {
		if(this.pressed == true) return;
		this.pressed = true;
		this.text.set_textColor(Main.color2);
		this.set_scaleX(this.set_scaleY(0.86));
	}
	,mouseUp: function(comp) {
		if(comp == null) comp = true;
		this.text.set_textColor(this.useColor);
		this.set_scaleX(this.set_scaleY(1));
		if(comp == true && this.pressed == true) this.complete();
		this.pressed = false;
	}
	,set_totalX: function(value) {
		this._totalX = value;
		if(this.graphicBack != null) this.graphicBack.x = value;
		if(this.graphicFront != null) this.graphicFront.x = value;
		this.set_x(value);
		return value;
	}
	,set_totalY: function(value) {
		this._totalY = value;
		if(this.graphicBack != null) this.graphicBack.y = value;
		if(this.graphicFront != null) this.graphicFront.y = value;
		this.set_y(value);
		return value;
	}
	,get_totalA: function() {
		return this._totalA;
	}
	,set_totalA: function(value) {
		this._totalA = value;
		if(this.graphicBack != null) this.graphicBack.alpha = value;
		if(this.graphicFront != null) this.graphicFront.alpha = value;
		this.text.set_alpha(value);
		return value;
	}
	,get_totalScaleX: function() {
		return this._totalScaleX;
	}
	,set_totalScaleX: function(value) {
		this._totalScaleX = value;
		this.set_scaleX(value);
		this.graphicFront.set_scaleX(value);
		return value;
	}
	,get_totalScaleY: function() {
		return this._totalScaleY;
	}
	,set_totalScaleY: function(value) {
		this._totalScaleY = value;
		this.set_scaleY(value);
		this.graphicFront.set_scaleY(value);
		this.set_totalY(this.endY + (1 - value) * 35);
		return value;
	}
	,free: function() {
		com.buttons.Button.prototype.free.call(this);
		this.onComplete2 = null;
		this.onComplete3 = null;
		this.text = null;
	}
	,__class__: scenes.mapElements.ButtonFlag
	,__properties__: $extend(com.buttons.Button.prototype.__properties__,{set_totalScaleY:"set_totalScaleY",get_totalScaleY:"get_totalScaleY",set_totalScaleX:"set_totalScaleX",get_totalScaleX:"get_totalScaleX",set_totalA:"set_totalA",get_totalA:"get_totalA"})
});
scenes.mapElements.CheckStars = function(layer,_x,_y,lockedIndex) {
	this._totalScale = 1;
	this.counter = 0;
	this.frameToShowOneStar = 2;
	this.stepStarUpdate = 0;
	this.needStarToOpen = 16;
	openfl.display.Sprite.call(this);
	this.set_x(_x);
	this.set_y(_y);
	var tile = "";
	var calcS = 0;
	if(lockedIndex == 1) {
		com.tools.DataManager.getInstance().saveData("lastLevelPlayed",7);
		this.needStarToOpen = 15;
		tile = "lockedMap";
		calcS = 6;
	} else if(lockedIndex == 2) {
		com.tools.DataManager.getInstance().saveData("lastLevelPlayed",12);
		this.needStarToOpen = 30;
		tile = "lockedMap2";
		calcS = 12;
	}
	this.graphic = new com.jdtiles.jda.TileSprite(layer,tile);
	this.graphic.x = _x;
	this.graphic.y = _y;
	layer.addChild(this.graphic);
	this.currStars = Std["int"](com.tools.DataManager.getInstance().calc("stars",1,calcS));
	this.lastStars = Std["int"](com.tools.DataManager.getInstance().getData("lastStars"));
	this.text = com.tools.Tools.addText("" + this.lastStars + "/" + this.needStarToOpen,21,-55 + com.Variables.txtShiftX,-14 + com.Variables.txtShiftY,150,50,Main.color1);
	this.addChild(this.text);
	if(this.currStars > this.lastStars) {
		(js.Boot.__cast(Main.getInstance().scene , scenes.Levels)).mouseE(false);
		if(this.currStars >= this.needStarToOpen) {
			com.tools.DataManager.getInstance().saveData("checkStarscomplete" + lockedIndex,1);
			if(lockedIndex == 1) {
				(js.Boot.__cast(Main.getInstance().scene , scenes.Levels)).disableBTN6();
				com.tools.DataManager.getInstance().saveData("Levels",8);
				com.tools.DataManager.getInstance().saveData("needOpenLevel",8);
			}
		}
		motion.Actuate.tween(this,15,{ alpha : 1}).onComplete($bind(this,this.start));
	}
};
$hxClasses["scenes.mapElements.CheckStars"] = scenes.mapElements.CheckStars;
scenes.mapElements.CheckStars.__name__ = ["scenes","mapElements","CheckStars"];
scenes.mapElements.CheckStars.__super__ = openfl.display.Sprite;
scenes.mapElements.CheckStars.prototype = $extend(openfl.display.Sprite.prototype,{
	start: function() {
		var time = (this.currStars - this.lastStars) * this.frameToShowOneStar;
		this.stepStarUpdate = 1 / this.frameToShowOneStar;
		this.starsCalc = this.lastStars;
		motion.Actuate.tween(this,time,{ alpha : 1}).onUpdate($bind(this,this.upTween)).onComplete($bind(this,this.check));
		com.tools.DataManager.getInstance().saveData("lastStars",this.currStars);
	}
	,upTween: function() {
		this.starsCalc += this.stepStarUpdate;
		this.text.set_text("" + Math.round(this.starsCalc) + "/" + this.needStarToOpen);
	}
	,check: function() {
		if(this.currStars >= this.needStarToOpen) motion.Actuate.tween(this,10,{ totalScale : 0}).onComplete($bind(this,this.openNext)); else {
			(js.Boot.__cast(Main.getInstance().scene , scenes.Levels)).mouseE(true);
			this.goDown();
		}
	}
	,openNext: function() {
		this.set_alpha(0);
		this.graphic.alpha = 0;
		this.onCompleteVoid();
	}
	,goDown: function() {
		this.counter++;
		if(this.counter == 4) return;
		motion.Actuate.tween(this,10,{ totalScale : 0.8}).onComplete($bind(this,this.goUp));
	}
	,goUp: function() {
		motion.Actuate.tween(this,10,{ totalScale : 1}).onComplete($bind(this,this.goDown));
	}
	,get_totalScale: function() {
		return this._totalScale;
	}
	,set_totalScale: function(value) {
		this._totalScale = value;
		this.set_scaleX(this.set_scaleY(value));
		this.graphic.set_scaleX(this.graphic.set_scaleY(value));
		return value;
	}
	,free: function() {
		this.onCompleteVoid = null;
		this.text = null;
		this.graphic = null;
	}
	,__class__: scenes.mapElements.CheckStars
	,__properties__: $extend(openfl.display.Sprite.prototype.__properties__,{set_totalScale:"set_totalScale",get_totalScale:"get_totalScale"})
});
scenes.mapElements.HaveUpgrade = function(layer,tile) {
	this.counter = 0;
	this.wait = false;
	this.flag = true;
	this.active = false;
	com.jdtiles.jda.TileSprite.call(this,layer,tile);
	this.alpha = 0;
};
$hxClasses["scenes.mapElements.HaveUpgrade"] = scenes.mapElements.HaveUpgrade;
scenes.mapElements.HaveUpgrade.__name__ = ["scenes","mapElements","HaveUpgrade"];
scenes.mapElements.HaveUpgrade.__super__ = com.jdtiles.jda.TileSprite;
scenes.mapElements.HaveUpgrade.prototype = $extend(com.jdtiles.jda.TileSprite.prototype,{
	show: function() {
		this.active = true;
	}
	,hide: function() {
		this.active = false;
	}
	,update: function() {
		if(this.active == false) return;
		if(this.wait == true) {
			this.counter++;
			if(this.counter == 20) {
				this.counter = 0;
				this.wait = false;
			}
		} else if(this.flag == true) {
			this.alpha += 0.1;
			if(this.alpha > 1) {
				this.alpha = 1;
				this.flag = false;
			}
		} else {
			this.alpha -= 0.1;
			if(this.alpha < 0) {
				this.alpha = 0;
				this.flag = true;
				this.wait = true;
			}
		}
	}
	,__class__: scenes.mapElements.HaveUpgrade
});
scenes.shopInset = {};
scenes.shopInset.BasicInset = function(layer) {
	com.jdtiles.jda.TileContainer.call(this,layer);
	this.sprite = new openfl.display.Sprite();
};
$hxClasses["scenes.shopInset.BasicInset"] = scenes.shopInset.BasicInset;
scenes.shopInset.BasicInset.__name__ = ["scenes","shopInset","BasicInset"];
scenes.shopInset.BasicInset.__super__ = com.jdtiles.jda.TileContainer;
scenes.shopInset.BasicInset.prototype = $extend(com.jdtiles.jda.TileContainer.prototype,{
	show: function() {
		this.set_alpha(1);
		this.sprite.set_alpha(1);
		this.sprite.mouseChildren = this.sprite.mouseEnabled = true;
	}
	,hide: function() {
		this.set_alpha(0);
		this.sprite.set_alpha(0);
		this.sprite.mouseChildren = this.sprite.mouseEnabled = false;
	}
	,free: function() {
		com.jdtiles.jda.TileContainer.prototype.free.call(this);
		com.tools.Tools.clearLayer(this.sprite);
		this.sprite = null;
	}
	,addDraw: function(_indice,_x,_y,t0,t1,t2,t3,_alpha) {
		this.parent.addDraw(_indice,_x,_y,t0,t1,t2,t3,_alpha);
	}
	,__class__: scenes.shopInset.BasicInset
});
scenes.shopInset.BtnPowP = $hxClasses["scenes.shopInset.BtnPowP"] = { __ename__ : true, __constructs__ : ["none","canBuy","noMoney","full"] };
scenes.shopInset.BtnPowP.none = ["none",0];
scenes.shopInset.BtnPowP.none.toString = $estr;
scenes.shopInset.BtnPowP.none.__enum__ = scenes.shopInset.BtnPowP;
scenes.shopInset.BtnPowP.canBuy = ["canBuy",1];
scenes.shopInset.BtnPowP.canBuy.toString = $estr;
scenes.shopInset.BtnPowP.canBuy.__enum__ = scenes.shopInset.BtnPowP;
scenes.shopInset.BtnPowP.noMoney = ["noMoney",2];
scenes.shopInset.BtnPowP.noMoney.toString = $estr;
scenes.shopInset.BtnPowP.noMoney.__enum__ = scenes.shopInset.BtnPowP;
scenes.shopInset.BtnPowP.full = ["full",3];
scenes.shopInset.BtnPowP.full.toString = $estr;
scenes.shopInset.BtnPowP.full.__enum__ = scenes.shopInset.BtnPowP;
scenes.shopInset.ButtonPowerUp = function(_parentGroup,_numLevel,_costIter,_name,_maxUp) {
	this.cost = 0;
	this.maxUp = 3;
	this.progress = 0;
	com.buttons.Button.call(this,_parentGroup,false);
	this.arrProg = new Array();
	this.costIter = _costIter;
	this.numLevel = _numLevel;
	this.nameUpgrade = _name;
	this.maxUp = _maxUp;
	if(this.maxUp == 3) this.nameGraphic = "shopProgress"; else if(this.maxUp == 5) this.nameGraphic = "shopProgress2";
	this.progress = Std["int"](com.tools.DataManager.getInstance().getData(this.nameUpgrade + "Upgrade" + this.numLevel));
	if(this.progress == this.maxUp) {
		this.currState = scenes.shopInset.BtnPowP.full;
		this.disable();
		this.initScaleBack("btn_shopFull");
	} else {
		this.currState = scenes.shopInset.BtnPowP.none;
		this.initScaleBack("btn_shopBuy");
		this.initScale("diamond",3,-12);
		this.addText();
		this.setCost(Main.getInstance().costsUpgrade[this.costIter][this.numLevel][this.progress]);
	}
};
$hxClasses["scenes.shopInset.ButtonPowerUp"] = scenes.shopInset.ButtonPowerUp;
scenes.shopInset.ButtonPowerUp.__name__ = ["scenes","shopInset","ButtonPowerUp"];
scenes.shopInset.ButtonPowerUp.__super__ = com.buttons.Button;
scenes.shopInset.ButtonPowerUp.prototype = $extend(com.buttons.Button.prototype,{
	addText: function() {
		this.text = com.tools.Tools.addText("",30,-47 + com.Variables.txtShiftX,com.Variables.txtShiftY,100,50,Main.color2);
		this.addChild(this.text);
	}
	,setCost: function(_cost) {
		this.cost = _cost;
		this.text.set_text("" + this.cost);
	}
	,canBuy: function() {
		if(this.currState == scenes.shopInset.BtnPowP.canBuy) return;
		this.currState = scenes.shopInset.BtnPowP.canBuy;
		this.graphicBack.alpha = 1;
		this.enable();
	}
	,noMoney: function() {
		if(this.currState == scenes.shopInset.BtnPowP.noMoney) return;
		this.currState = scenes.shopInset.BtnPowP.noMoney;
		this.graphicBack.alpha = 0;
		if(scenes.Shop.instance.isEnabledIncentiviseButton == false) this.disable();
	}
	,full: function() {
		if(this.currState == scenes.shopInset.BtnPowP.full) return;
		this.currState = scenes.shopInset.BtnPowP.full;
		this.text.set_alpha(0);
		this.disable();
		this.graphicFront.alpha = 0;
		this.graphicBack.set_tile("btn_shopFull");
	}
	,enable: function() {
		this.mouseEnabled = true;
	}
	,disable: function() {
		this.mouseEnabled = false;
	}
	,initScaleBack: function(tile) {
		this.graphicBack = new com.buttons.BtnScale(this.parentGroup.layer,tile);
		this.parentGroup.addChild(this.graphicBack);
	}
	,mouseDown: function() {
		if(this.pressed == true) return;
		this.pressed = true;
		if(this.text != null) {
			this.text.set_scaleX(this.text.set_scaleY(0.9));
			this.text.set_x(-42 + com.Variables.txtShiftX);
			this.text.set_y(com.Variables.txtShiftY);
		}
		if(this.graphicBack != null) this.graphicBack.mouseDown();
		if(this.graphicFront != null) this.graphicFront.mouseDown();
	}
	,mouseUp: function(comp) {
		if(comp == null) comp = true;
		if(this.text != null) {
			this.text.set_scaleX(this.text.set_scaleY(1));
			this.text.set_x(-47 + com.Variables.txtShiftX);
			this.text.set_y(com.Variables.txtShiftY);
		}
		if(this.graphicBack != null) this.graphicBack.mouseUp();
		if(this.graphicFront != null) this.graphicFront.mouseUp();
		if(comp == true && this.pressed == true) this.complete();
		this.pressed = false;
	}
	,complete: function() {
		if(this.currState == scenes.shopInset.BtnPowP.noMoney) {
			scenes.Shop.instance.showAddCoins();
			return;
		}
		this.progress += 1;
		this.addProgress(this.progress - 1);
		com.tools.DataManager.getInstance().saveData(this.nameUpgrade + "Upgrade" + this.numLevel,this.progress);
		var lastCost = this.cost;
		if(this.progress == this.maxUp) {
			this.full();
			scenes.Shop.instance.setMoney(-lastCost);
		} else {
			this.setCost(Main.getInstance().costsUpgrade[this.costIter][this.numLevel][this.progress]);
			scenes.Shop.instance.setMoney(-lastCost);
		}
		var itemName = "";
		if(this.nameUpgrade == "hero") {
			var _g = this.numLevel;
			switch(_g) {
			case 0:
				itemName = "health";
				break;
			case 1:
				itemName = "speed";
				break;
			case 2:
				itemName = "dodge";
				break;
			case 3:
				itemName = "oranges";
				break;
			}
		} else if(this.nameUpgrade == "power") {
			var _g1 = this.numLevel;
			switch(_g1) {
			case 0:
				itemName = "double_diamonds";
				break;
			case 1:
				itemName = "shield";
				break;
			case 2:
				itemName = "magnet";
				break;
			case 3:
				itemName = "chest";
				break;
			}
		}
		this.graphicBack.complete();
		this.graphicFront.complete();
		if(this.playSound == true) com.sound.SoundManager.playSFX("upgradeUp");
	}
	,addProgress: function(value) {
		if(value == null) value = 0;
		this.arrProg[value].set_currentFrame(1);
		this.setTextProgress();
	}
	,createProgress: function() {
		var temp;
		var _g1 = 0;
		var _g = this.maxUp;
		while(_g1 < _g) {
			var i = _g1++;
			temp = new com.jdtiles.jda.TileClip(this.parentGroup.layer,this.nameGraphic);
			if(this.maxUp == 3) temp.x = 355 + 54 * i; else if(this.maxUp == 5) temp.x = 340 + 35 * i;
			temp.y = this.get_totalY() - 12;
			this.parentGroup.addChild(temp);
			this.arrProg.push(temp);
			if(i <= this.progress - 1) temp.set_currentFrame(1);
		}
		temp = null;
		this.tempTF = com.tools.Tools.addText("",18,263 + com.Variables.txtShiftX,this.get_totalY() + 11 + com.Variables.txtShiftY,300,100,Main.color2);
		this.setTextProgress();
	}
	,setTextProgress: function() {
		var currNext;
		if(this.progress == this.maxUp) currNext = this.progress - 1; else currNext = this.progress;
		if(this.costIter == 0) {
			this.tempTF.set_text(com.Variables.getText("up" + this.nameUpgrade + this.numLevel));
			if(this.numLevel == 0) {
				var _g = this.tempTF;
				_g.set_text(_g.get_text() + (" - " + (4 + currNext)));
			} else if(this.numLevel == 1) {
				var _g1 = this.tempTF;
				_g1.set_text(_g1.get_text() + (" - " + (240 + 10 * currNext) / 10));
			} else if(this.numLevel == 2) {
				var _g2 = this.tempTF;
				_g2.set_text(_g2.get_text() + (" - " + (7 + 7 * currNext) + "%"));
			} else if(this.numLevel == 3) {
				var _g3 = this.tempTF;
				_g3.set_text(_g3.get_text() + (" - " + (1 + currNext)));
			}
		} else if(this.costIter == 1) this.tempTF.set_text(com.Variables.getText("up" + this.nameUpgrade + this.numLevel));
	}
	,free: function() {
		com.buttons.Button.prototype.free.call(this);
		this.text = null;
		this.tempTF = null;
		this.arrProg = [];
		this.arrProg = null;
	}
	,__class__: scenes.shopInset.ButtonPowerUp
});
scenes.shopInset.CanBuyIcon = function(layer,tile) {
	this.counter = 0;
	com.jdtiles.jda.TileSprite.call(this,layer,tile);
};
$hxClasses["scenes.shopInset.CanBuyIcon"] = scenes.shopInset.CanBuyIcon;
scenes.shopInset.CanBuyIcon.__name__ = ["scenes","shopInset","CanBuyIcon"];
scenes.shopInset.CanBuyIcon.__super__ = com.jdtiles.jda.TileSprite;
scenes.shopInset.CanBuyIcon.prototype = $extend(com.jdtiles.jda.TileSprite.prototype,{
	show: function() {
		this.alpha = 1;
	}
	,hide: function() {
		this.alpha = 0;
	}
	,update: function() {
		if(this.alpha == 0) return;
		this.counter++;
		var _g = this.counter;
		switch(_g) {
		case 1:
			this.set_scaleX(1.04);
			this.set_scaleY(0.95);
			break;
		case 2:
			this.set_scaleX(1.09);
			this.set_scaleY(0.9);
			break;
		case 3:
			this.set_scaleX(1.13);
			this.set_scaleY(0.85);
			break;
		case 4:
			this.set_scaleX(1.18);
			this.set_scaleY(0.8);
			break;
		case 5:
			this.set_scaleX(1.1);
			this.set_scaleY(0.91);
			break;
		case 6:
			this.set_scaleX(1.02);
			this.set_scaleY(1.03);
			break;
		case 7:
			this.set_scaleX(0.94);
			this.set_scaleY(1.14);
			break;
		case 8:
			this.set_scaleX(0.97);
			this.set_scaleY(1.07);
			break;
		case 9:
			this.set_scaleX(1);
			this.set_scaleY(1);
			break;
		case 40:
			this.counter = 0;
			break;
		}
	}
	,__class__: scenes.shopInset.CanBuyIcon
});
scenes.shopInset.InsetAddDiamond = function(layer) {
	scenes.shopInset.BasicInset.call(this,layer);
	var inset = new com.jdtiles.jda.TileSprite(layer,"inset3");
	inset.x = 400;
	inset.y = 190;
	this.addChild(inset);
	inset = new com.jdtiles.jda.TileSprite(layer,"shopInset3");
	inset.x = 400;
	inset.y = 185;
	this.addChild(inset);
	inset = null;
	var btn = new com.buttons.Button(this);
	btn.initScale("btn_showVideo");
	btn.onCompleteVoid = $bind(this,this.whatchVideo);
	btn.setPosition(400,288);
	btn.drawGraphics(-130,-190,260,220,true);
	this.sprite.addChild(btn);
	btn = null;
	this.sprite.addChild(com.tools.Tools.addText(com.Variables.getText("addgems"),33,160 + com.Variables.txtShiftX,330 + com.Variables.txtShiftY,500,200,Main.color2));
};
$hxClasses["scenes.shopInset.InsetAddDiamond"] = scenes.shopInset.InsetAddDiamond;
scenes.shopInset.InsetAddDiamond.__name__ = ["scenes","shopInset","InsetAddDiamond"];
scenes.shopInset.InsetAddDiamond.__super__ = scenes.shopInset.BasicInset;
scenes.shopInset.InsetAddDiamond.prototype = $extend(scenes.shopInset.BasicInset.prototype,{
	whatchVideo: function() {
		turnOffSoundForAd();
		api.SoftGames.getInstance().triggerIncentivise(($_=scenes.Shop.instance,$bind($_,$_.afterVideoDone)));
	}
	,__class__: scenes.shopInset.InsetAddDiamond
});
scenes.shopInset.InsetHero = function(layer) {
	scenes.shopInset.BasicInset.call(this,layer);
	this.btns = new Array();
	var btn;
	var temp;
	var tempY = 0;
	var iter;
	if(Std["int"](com.tools.DataManager.getInstance().getData("openOranges")) == 0) iter = 3; else iter = 4;
	var offY = 95;
	var startY = 85;
	if(iter == 3) {
		offY = 125;
		startY = 95;
	}
	var _g = 0;
	while(_g < iter) {
		var i = _g++;
		tempY = startY + offY * i;
		temp = new com.jdtiles.jda.TileSprite(layer,"shopIconProgress");
		temp.x = 200;
		temp.y = tempY;
		this.addChild(temp);
		temp = new com.jdtiles.jda.TileSprite(layer,"shopIconHero" + i);
		temp.x = 200;
		temp.y = tempY;
		this.addChild(temp);
		temp = new com.jdtiles.jda.TileSprite(layer,"shopPanelProgress");
		temp.x = 455;
		temp.y = tempY;
		this.addChild(temp);
		btn = new scenes.shopInset.ButtonPowerUp(this,i,0,"hero",i == 1 || i == 2?5:3);
		btn.setPosition(594,tempY - 11);
		btn.createProgress();
		this.sprite.addChild(btn.tempTF);
		this.sprite.addChild(btn);
		this.btns.push(btn);
	}
	temp = null;
	btn = null;
	this.checkCost();
};
$hxClasses["scenes.shopInset.InsetHero"] = scenes.shopInset.InsetHero;
scenes.shopInset.InsetHero.__name__ = ["scenes","shopInset","InsetHero"];
scenes.shopInset.InsetHero.__super__ = scenes.shopInset.BasicInset;
scenes.shopInset.InsetHero.prototype = $extend(scenes.shopInset.BasicInset.prototype,{
	show: function() {
		scenes.shopInset.BasicInset.prototype.show.call(this);
		this.checkCost();
	}
	,checkCost: function() {
		var _g = 0;
		var _g1 = this.btns;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.currState == scenes.shopInset.BtnPowP.full) continue;
			if(scenes.Shop.instance.money >= i.cost) i.canBuy(); else i.noMoney();
		}
	}
	,free: function() {
		scenes.shopInset.BasicInset.prototype.free.call(this);
		this.btns = [];
		this.btns = null;
	}
	,__class__: scenes.shopInset.InsetHero
});
scenes.shopInset.InsetPowerUps = function(layer) {
	scenes.shopInset.BasicInset.call(this,layer);
	this.btns = new Array();
	var btn;
	var temp;
	var tempY = 0;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		tempY = 85 + 95 * i;
		temp = new com.jdtiles.jda.TileSprite(layer,"shopIconProgress");
		temp.x = 200;
		temp.y = tempY;
		this.addChild(temp);
		temp = new com.jdtiles.jda.TileSprite(layer,"shopIconUp" + i);
		temp.x = 200;
		temp.y = tempY;
		this.addChild(temp);
		temp = new com.jdtiles.jda.TileSprite(layer,"shopPanelProgress");
		temp.x = 455;
		temp.y = tempY;
		this.addChild(temp);
		btn = new scenes.shopInset.ButtonPowerUp(this,i,1,"power",3);
		btn.setPosition(594,tempY - 11);
		btn.createProgress();
		this.sprite.addChild(btn.tempTF);
		this.sprite.addChild(btn);
		this.btns.push(btn);
	}
	temp = null;
	btn = null;
};
$hxClasses["scenes.shopInset.InsetPowerUps"] = scenes.shopInset.InsetPowerUps;
scenes.shopInset.InsetPowerUps.__name__ = ["scenes","shopInset","InsetPowerUps"];
scenes.shopInset.InsetPowerUps.__super__ = scenes.shopInset.BasicInset;
scenes.shopInset.InsetPowerUps.prototype = $extend(scenes.shopInset.BasicInset.prototype,{
	show: function() {
		scenes.shopInset.BasicInset.prototype.show.call(this);
		this.checkCost();
	}
	,checkCost: function() {
		var _g = 0;
		var _g1 = this.btns;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.currState == scenes.shopInset.BtnPowP.full) continue;
			if(scenes.Shop.instance.money >= i.cost) i.canBuy(); else i.noMoney();
		}
	}
	,free: function() {
		scenes.shopInset.BasicInset.prototype.free.call(this);
		this.btns = [];
		this.btns = null;
	}
	,__class__: scenes.shopInset.InsetPowerUps
});
var zpp_nape = {};
zpp_nape.ZPP_Const = function() { };
$hxClasses["zpp_nape.ZPP_Const"] = zpp_nape.ZPP_Const;
zpp_nape.ZPP_Const.__name__ = ["zpp_nape","ZPP_Const"];
zpp_nape.ZPP_Const.POSINF = function() {
	return Math.POSITIVE_INFINITY;
};
zpp_nape.ZPP_Const.NEGINF = function() {
	return Math.NEGATIVE_INFINITY;
};
zpp_nape.ZPP_ID = function() { };
$hxClasses["zpp_nape.ZPP_ID"] = zpp_nape.ZPP_ID;
zpp_nape.ZPP_ID.__name__ = ["zpp_nape","ZPP_ID"];
zpp_nape.ZPP_ID.Constraint = function() {
	return zpp_nape.ZPP_ID._Constraint++;
};
zpp_nape.ZPP_ID.Interactor = function() {
	return zpp_nape.ZPP_ID._Interactor++;
};
zpp_nape.ZPP_ID.CbType = function() {
	return zpp_nape.ZPP_ID._CbType++;
};
zpp_nape.ZPP_ID.CbSet = function() {
	return zpp_nape.ZPP_ID._CbSet++;
};
zpp_nape.ZPP_ID.Listener = function() {
	return zpp_nape.ZPP_ID._Listener++;
};
zpp_nape.ZPP_ID.ZPP_SimpleVert = function() {
	return zpp_nape.ZPP_ID._ZPP_SimpleVert++;
};
zpp_nape.ZPP_ID.ZPP_SimpleSeg = function() {
	return zpp_nape.ZPP_ID._ZPP_SimpleSeg++;
};
zpp_nape.ZPP_ID.Space = function() {
	return zpp_nape.ZPP_ID._Space++;
};
zpp_nape.ZPP_ID.InteractionGroup = function() {
	return zpp_nape.ZPP_ID._InteractionGroup++;
};
zpp_nape.callbacks = {};
zpp_nape.callbacks.ZPP_Callback = function() {
	this.constraint = null;
	this.body = null;
	this.pre_swapped = false;
	this.pre_arbiter = null;
	this.wrap_arbiters = null;
	this.set = null;
	this.int2 = null;
	this.int1 = null;
	this.length = 0;
	this.prev = null;
	this.next = null;
	this.index = 0;
	this.space = null;
	this.listener = null;
	this.event = 0;
	this.outer_int = null;
	this.outer_con = null;
	this.outer_body = null;
	this.length = 0;
};
$hxClasses["zpp_nape.callbacks.ZPP_Callback"] = zpp_nape.callbacks.ZPP_Callback;
zpp_nape.callbacks.ZPP_Callback.__name__ = ["zpp_nape","callbacks","ZPP_Callback"];
zpp_nape.callbacks.ZPP_Callback.prototype = {
	wrapper_body: function() {
		if(this.outer_body == null) {
			this.outer_body = new nape.callbacks.BodyCallback();
			this.outer_body.zpp_inner = this;
		}
		return this.outer_body;
	}
	,wrapper_con: function() {
		if(this.outer_con == null) {
			this.outer_con = new nape.callbacks.ConstraintCallback();
			this.outer_con.zpp_inner = this;
		}
		return this.outer_con;
	}
	,wrapper_int: function() {
		if(this.outer_int == null) {
			this.outer_int = new nape.callbacks.InteractionCallback();
			this.outer_int.zpp_inner = this;
		}
		if(this.wrap_arbiters == null) this.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get(this.set.arbiters,true); else this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
		this.wrap_arbiters.zpp_inner.zip_length = true;
		this.wrap_arbiters.zpp_inner.at_ite = null;
		return this.outer_int;
	}
	,push: function(obj) {
		if(this.prev != null) this.prev.next = obj; else this.next = obj;
		obj.prev = this.prev;
		obj.next = null;
		this.prev = obj;
		this.length++;
	}
	,push_rev: function(obj) {
		if(this.next != null) this.next.prev = obj; else this.prev = obj;
		obj.next = this.next;
		obj.prev = null;
		this.next = obj;
		this.length++;
	}
	,pop: function() {
		var ret = this.next;
		this.next = ret.next;
		if(this.next == null) this.prev = null; else this.next.prev = null;
		this.length--;
		return ret;
	}
	,pop_rev: function() {
		var ret = this.prev;
		this.prev = ret.prev;
		if(this.prev == null) this.next = null; else this.prev.next = null;
		this.length--;
		return ret;
	}
	,empty: function() {
		return this.next == null;
	}
	,clear: function() {
		while(!this.empty()) this.pop();
	}
	,splice: function(o) {
		var ret = o.next;
		if(o.prev == null) {
			this.next = o.next;
			if(this.next != null) this.next.prev = null; else this.prev = null;
		} else {
			o.prev.next = o.next;
			if(o.next != null) o.next.prev = o.prev; else this.prev = o.prev;
		}
		this.length--;
		return ret;
	}
	,rotateL: function() {
		this.push(this.pop());
	}
	,rotateR: function() {
		this.push_rev(this.pop_rev());
	}
	,cycleNext: function(o) {
		if(o.next == null) return this.next; else return o.next;
	}
	,cyclePrev: function(o) {
		if(o.prev == null) return this.prev; else return o.prev;
	}
	,at: function(i) {
		var ret = this.next;
		while(i-- != 0) ret = ret.next;
		return ret;
	}
	,rev_at: function(i) {
		var ret = this.prev;
		while(i-- != 0) ret = ret.prev;
		return ret;
	}
	,free: function() {
		this.int1 = this.int2 = null;
		this.body = null;
		this.constraint = null;
		this.listener = null;
		if(this.wrap_arbiters != null) this.wrap_arbiters.zpp_inner.inner = null;
		this.set = null;
	}
	,alloc: function() {
	}
	,genarbs: function() {
		if(this.wrap_arbiters == null) this.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get(this.set.arbiters,true); else this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
		this.wrap_arbiters.zpp_inner.zip_length = true;
		this.wrap_arbiters.zpp_inner.at_ite = null;
	}
	,__class__: zpp_nape.callbacks.ZPP_Callback
};
zpp_nape.callbacks.ZPP_CbSet = function() {
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_interactors = null;
	this.interactors = null;
	this.zip_conlisteners = false;
	this.conlisteners = null;
	this.zip_bodylisteners = false;
	this.bodylisteners = null;
	this.zip_listeners = false;
	this.listeners = null;
	this.cbpairs = null;
	this.manager = null;
	this.id = 0;
	this.next = null;
	this.count = 0;
	this.cbTypes = null;
	this.cbTypes = new zpp_nape.util.ZNPList_ZPP_CbType();
	this.listeners = new zpp_nape.util.ZNPList_ZPP_InteractionListener();
	this.zip_listeners = true;
	this.bodylisteners = new zpp_nape.util.ZNPList_ZPP_BodyListener();
	this.zip_bodylisteners = true;
	this.conlisteners = new zpp_nape.util.ZNPList_ZPP_ConstraintListener();
	this.zip_conlisteners = true;
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.interactors = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this.id = zpp_nape.ZPP_ID.CbSet();
	this.cbpairs = new zpp_nape.util.ZNPList_ZPP_CbSetPair();
};
$hxClasses["zpp_nape.callbacks.ZPP_CbSet"] = zpp_nape.callbacks.ZPP_CbSet;
zpp_nape.callbacks.ZPP_CbSet.__name__ = ["zpp_nape","callbacks","ZPP_CbSet"];
zpp_nape.callbacks.ZPP_CbSet.setlt = function(a,b) {
	var i = a.cbTypes.head;
	var j = b.cbTypes.head;
	while(i != null && j != null) {
		var ca = i.elt;
		var cb = j.elt;
		if(ca.id < cb.id) return true;
		if(cb.id < ca.id) return false; else {
			i = i.next;
			j = j.next;
		}
	}
	return j != null && i == null;
};
zpp_nape.callbacks.ZPP_CbSet.get = function(cbTypes) {
	var ret;
	if(zpp_nape.callbacks.ZPP_CbSet.zpp_pool == null) ret = new zpp_nape.callbacks.ZPP_CbSet(); else {
		ret = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
		zpp_nape.callbacks.ZPP_CbSet.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	var ite = null;
	var cx_ite = cbTypes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		ite = ret.cbTypes.insert(ite,cb);
		cb.cbsets.add(ret);
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.callbacks.ZPP_CbSet.compatible = function(i,a,b) {
	return i.options1.compatible(a.cbTypes) && i.options2.compatible(b.cbTypes) || i.options2.compatible(a.cbTypes) && i.options1.compatible(b.cbTypes);
};
zpp_nape.callbacks.ZPP_CbSet.empty_intersection = function(a,b) {
	return a.manager.pair(a,b).empty_intersection();
};
zpp_nape.callbacks.ZPP_CbSet.single_intersection = function(a,b,i) {
	return a.manager.pair(a,b).single_intersection(i);
};
zpp_nape.callbacks.ZPP_CbSet.find_all = function(a,b,event,cb) {
	a.manager.pair(a,b).forall(event,cb);
};
zpp_nape.callbacks.ZPP_CbSet.prototype = {
	increment: function() {
		this.count++;
	}
	,decrement: function() {
		return --this.count == 0;
	}
	,invalidate_pairs: function() {
		var cx_ite = this.cbpairs.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_listeners = true;
			cx_ite = cx_ite.next;
		}
	}
	,invalidate_listeners: function() {
		this.zip_listeners = true;
		this.invalidate_pairs();
	}
	,validate_listeners: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.realvalidate_listeners();
		}
	}
	,realvalidate_listeners: function() {
		this.listeners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.listeners.head;
			var cite = cb.listeners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_nape.callbacks.ZPP_Listener.setlt(cx,nite.elt)) {
					if(cx.space == this.manager.space) npre = this.listeners.inlined_insert(npre,cx);
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,invalidate_bodylisteners: function() {
		this.zip_bodylisteners = true;
	}
	,validate_bodylisteners: function() {
		if(this.zip_bodylisteners) {
			this.zip_bodylisteners = false;
			this.realvalidate_bodylisteners();
		}
	}
	,realvalidate_bodylisteners: function() {
		this.bodylisteners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.bodylisteners.head;
			var cite = cb.bodylisteners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_nape.callbacks.ZPP_Listener.setlt(cx,nite.elt)) {
					if(!cx.options.excluded(this.cbTypes) && cx.space == this.manager.space) npre = this.bodylisteners.inlined_insert(npre,cx);
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,invalidate_conlisteners: function() {
		this.zip_conlisteners = true;
	}
	,validate_conlisteners: function() {
		if(this.zip_conlisteners) {
			this.zip_conlisteners = false;
			this.realvalidate_conlisteners();
		}
	}
	,realvalidate_conlisteners: function() {
		this.conlisteners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.conlisteners.head;
			var cite = cb.conlisteners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_nape.callbacks.ZPP_Listener.setlt(cx,nite.elt)) {
					if(!cx.options.excluded(this.cbTypes) && cx.space == this.manager.space) npre = this.conlisteners.inlined_insert(npre,cx);
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,validate: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.realvalidate_listeners();
		}
		if(this.zip_bodylisteners) {
			this.zip_bodylisteners = false;
			this.realvalidate_bodylisteners();
		}
		if(this.zip_conlisteners) {
			this.zip_conlisteners = false;
			this.realvalidate_conlisteners();
		}
	}
	,addConstraint: function(con) {
		this.constraints.add(con);
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,remConstraint: function(con) {
		this.constraints.remove(con);
	}
	,remInteractor: function(intx) {
		this.interactors.remove(intx);
	}
	,free: function() {
		this.listeners.clear();
		this.zip_listeners = true;
		this.bodylisteners.clear();
		this.zip_bodylisteners = true;
		this.conlisteners.clear();
		this.zip_conlisteners = true;
		while(!(this.cbTypes.head == null)) {
			var cb = this.cbTypes.pop_unsafe();
			cb.cbsets.remove(this);
		}
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.callbacks.ZPP_CbSet
};
zpp_nape.callbacks.ZPP_CbSetPair = function() {
	this.listeners = null;
	this.zip_listeners = false;
	this.next = null;
	this.b = null;
	this.a = null;
	this.listeners = new zpp_nape.util.ZNPList_ZPP_InteractionListener();
};
$hxClasses["zpp_nape.callbacks.ZPP_CbSetPair"] = zpp_nape.callbacks.ZPP_CbSetPair;
zpp_nape.callbacks.ZPP_CbSetPair.__name__ = ["zpp_nape","callbacks","ZPP_CbSetPair"];
zpp_nape.callbacks.ZPP_CbSetPair.get = function(a,b) {
	var ret;
	if(zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool == null) ret = new zpp_nape.callbacks.ZPP_CbSetPair(); else {
		ret = zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool;
		zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.zip_listeners = true;
	if(zpp_nape.callbacks.ZPP_CbSet.setlt(a,b)) {
		ret.a = a;
		ret.b = b;
	} else {
		ret.a = b;
		ret.b = a;
	}
	return ret;
};
zpp_nape.callbacks.ZPP_CbSetPair.setlt = function(x,y) {
	return zpp_nape.callbacks.ZPP_CbSet.setlt(x.a,y.a) || x.a == y.a && zpp_nape.callbacks.ZPP_CbSet.setlt(x.b,y.b);
};
zpp_nape.callbacks.ZPP_CbSetPair.prototype = {
	free: function() {
		this.a = this.b = null;
		this.listeners.clear();
	}
	,alloc: function() {
		this.zip_listeners = true;
	}
	,compatible: function(i) {
		return i.options1.compatible(this.a.cbTypes) && i.options2.compatible(this.b.cbTypes) || i.options2.compatible(this.a.cbTypes) && i.options1.compatible(this.b.cbTypes);
	}
	,invalidate: function() {
		this.zip_listeners = true;
	}
	,validate: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.__validate();
		}
	}
	,__validate: function() {
		this.listeners.clear();
		var aite = this.a.listeners.head;
		var bite = this.b.listeners.head;
		while(aite != null && bite != null) {
			var ax = aite.elt;
			var bx = bite.elt;
			if(ax == bx) {
				if(ax.options1.compatible(this.a.cbTypes) && ax.options2.compatible(this.b.cbTypes) || ax.options2.compatible(this.a.cbTypes) && ax.options1.compatible(this.b.cbTypes)) this.listeners.add(ax);
				aite = aite.next;
				bite = bite.next;
			} else if(ax.precedence > bx.precedence || ax.precedence == bx.precedence && ax.id > bx.id) aite = aite.next; else bite = bite.next;
		}
	}
	,empty_intersection: function() {
		return this.listeners.head == null;
	}
	,single_intersection: function(i) {
		var ite = this.listeners.head;
		return ite != null && ite.elt == i && ite.next == null;
	}
	,forall: function(event,cb) {
		var cx_ite = this.listeners.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x.event == event) cb(x);
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_nape.callbacks.ZPP_CbSetPair
};
zpp_nape.util = {};
zpp_nape.util.ZNPList_ZPP_InteractionListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_InteractionListener"] = zpp_nape.util.ZNPList_ZPP_InteractionListener;
zpp_nape.util.ZNPList_ZPP_InteractionListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_InteractionListener"];
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_InteractionListener(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_InteractionListener(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_InteractionListener
};
zpp_nape.util.ZNPList_ZPP_BodyListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_BodyListener"] = zpp_nape.util.ZNPList_ZPP_BodyListener;
zpp_nape.util.ZNPList_ZPP_BodyListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_BodyListener"];
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_BodyListener(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_BodyListener(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_BodyListener
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_ConstraintListener"] = zpp_nape.util.ZNPList_ZPP_ConstraintListener;
zpp_nape.util.ZNPList_ZPP_ConstraintListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_ConstraintListener"];
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ConstraintListener(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ConstraintListener(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_ConstraintListener
};
zpp_nape.util.ZNPList_ZPP_Constraint = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Constraint"] = zpp_nape.util.ZNPList_ZPP_Constraint;
zpp_nape.util.ZNPList_ZPP_Constraint.__name__ = ["zpp_nape","util","ZNPList_ZPP_Constraint"];
zpp_nape.util.ZNPList_ZPP_Constraint.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Constraint(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Constraint(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Constraint
};
zpp_nape.util.ZNPList_ZPP_Interactor = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Interactor"] = zpp_nape.util.ZNPList_ZPP_Interactor;
zpp_nape.util.ZNPList_ZPP_Interactor.__name__ = ["zpp_nape","util","ZNPList_ZPP_Interactor"];
zpp_nape.util.ZNPList_ZPP_Interactor.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Interactor(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Interactor(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Interactor
};
zpp_nape.util.ZNPList_ZPP_CbSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CbSet"] = zpp_nape.util.ZNPList_ZPP_CbSet;
zpp_nape.util.ZNPList_ZPP_CbSet.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbSet"];
zpp_nape.util.ZNPList_ZPP_CbSet.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbSet(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbSet(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CbSet
};
zpp_nape.callbacks.ZPP_CbType = function() {
	this.conlisteners = null;
	this.bodylisteners = null;
	this.listeners = null;
	this.cbsets = null;
	this.id = 0;
	this.userData = null;
	this.outer = null;
	this.id = zpp_nape.ZPP_ID.CbType();
	this.listeners = new zpp_nape.util.ZNPList_ZPP_InteractionListener();
	this.bodylisteners = new zpp_nape.util.ZNPList_ZPP_BodyListener();
	this.conlisteners = new zpp_nape.util.ZNPList_ZPP_ConstraintListener();
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.interactors = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this.cbsets = new zpp_nape.util.ZNPList_ZPP_CbSet();
};
$hxClasses["zpp_nape.callbacks.ZPP_CbType"] = zpp_nape.callbacks.ZPP_CbType;
zpp_nape.callbacks.ZPP_CbType.__name__ = ["zpp_nape","callbacks","ZPP_CbType"];
zpp_nape.callbacks.ZPP_CbType.setlt = function(a,b) {
	return a.id < b.id;
};
zpp_nape.callbacks.ZPP_CbType.prototype = {
	addConstraint: function(con) {
		this.constraints.add(con);
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,remConstraint: function(con) {
		this.constraints.remove(con);
	}
	,remInteractor: function(intx) {
		this.interactors.remove(intx);
	}
	,addint: function(x) {
		var pre = null;
		var cx_ite = this.listeners.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.listeners.inlined_insert(pre,x);
		this.invalidateint();
	}
	,removeint: function(x) {
		this.listeners.remove(x);
		this.invalidateint();
	}
	,invalidateint: function() {
		var cx_ite = this.cbsets.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_listeners = true;
			cb.invalidate_pairs();
			cx_ite = cx_ite.next;
		}
	}
	,addbody: function(x) {
		var pre = null;
		var cx_ite = this.bodylisteners.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.bodylisteners.inlined_insert(pre,x);
		this.invalidatebody();
	}
	,removebody: function(x) {
		this.bodylisteners.remove(x);
		this.invalidatebody();
	}
	,invalidatebody: function() {
		var cx_ite = this.cbsets.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_bodylisteners = true;
			cx_ite = cx_ite.next;
		}
	}
	,addconstraint: function(x) {
		var pre = null;
		var cx_ite = this.conlisteners.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.conlisteners.inlined_insert(pre,x);
		this.invalidateconstraint();
	}
	,removeconstraint: function(x) {
		this.conlisteners.remove(x);
		this.invalidateconstraint();
	}
	,invalidateconstraint: function() {
		var cx_ite = this.cbsets.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_conlisteners = true;
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_nape.callbacks.ZPP_CbType
};
zpp_nape.util.ZPP_Flags = function() { };
$hxClasses["zpp_nape.util.ZPP_Flags"] = zpp_nape.util.ZPP_Flags;
zpp_nape.util.ZPP_Flags.__name__ = ["zpp_nape","util","ZPP_Flags"];
zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = null;
zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = null;
zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = null;
zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = null;
zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = null;
zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = null;
zpp_nape.util.ZPP_Flags.MassMode_FIXED = null;
zpp_nape.util.ZPP_Flags.BodyType_STATIC = null;
zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = null;
zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = null;
zpp_nape.util.ZPP_Flags.ListenerType_BODY = null;
zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = null;
zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = null;
zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = null;
zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = null;
zpp_nape.util.ZPP_Flags.ListenerType_PRE = null;
zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = null;
zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE = null;
zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = null;
zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = null;
zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = null;
zpp_nape.util.ZPP_Flags.CbEvent_END = null;
zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = null;
zpp_nape.util.ZPP_Flags.CbEvent_WAKE = null;
zpp_nape.util.ZPP_Flags.InteractionType_FLUID = null;
zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = null;
zpp_nape.util.ZPP_Flags.InteractionType_ANY = null;
zpp_nape.util.ZPP_Flags.CbEvent_BREAK = null;
zpp_nape.util.ZPP_Flags.CbEvent_PRE = null;
zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = null;
zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = null;
zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = null;
zpp_nape.util.ZPP_Flags.ValidationResult_VALID = null;
zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = null;
zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = null;
zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = null;
zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = null;
zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = null;
zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = null;
zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = null;
zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = null;
zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = null;
zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = null;
zpp_nape.callbacks.ZPP_Listener = function() {
	this.space = null;
	this.interaction = null;
	this.constraint = null;
	this.body = null;
	this.precedence = 0;
	this.event = 0;
	this.type = 0;
	this.id = 0;
	this.outer = null;
	this.id = zpp_nape.ZPP_ID.Listener();
};
$hxClasses["zpp_nape.callbacks.ZPP_Listener"] = zpp_nape.callbacks.ZPP_Listener;
zpp_nape.callbacks.ZPP_Listener.__name__ = ["zpp_nape","callbacks","ZPP_Listener"];
zpp_nape.callbacks.ZPP_Listener.setlt = function(a,b) {
	return a.precedence > b.precedence || a.precedence == b.precedence && a.id > b.id;
};
zpp_nape.callbacks.ZPP_Listener.prototype = {
	swapEvent: function(event) {
	}
	,invalidate_precedence: function() {
	}
	,addedToSpace: function() {
	}
	,removedFromSpace: function() {
	}
	,__class__: zpp_nape.callbacks.ZPP_Listener
};
zpp_nape.callbacks.ZPP_BodyListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_nape.callbacks.ZPP_Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.body = this;
	this.type = zpp_nape.util.ZPP_Flags.id_ListenerType_BODY;
	this.options = options.zpp_inner;
};
$hxClasses["zpp_nape.callbacks.ZPP_BodyListener"] = zpp_nape.callbacks.ZPP_BodyListener;
zpp_nape.callbacks.ZPP_BodyListener.__name__ = ["zpp_nape","callbacks","ZPP_BodyListener"];
zpp_nape.callbacks.ZPP_BodyListener.__super__ = zpp_nape.callbacks.ZPP_Listener;
zpp_nape.callbacks.ZPP_BodyListener.prototype = $extend(zpp_nape.callbacks.ZPP_Listener.prototype,{
	addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.addbody(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.bodylisteners.remove(this);
			cb.invalidatebody();
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		this.options.effect_change(cb,included,added);
		this.addedToSpace();
	}
	,invalidate_precedence: function() {
		if(this.space != null) {
			this.removedFromSpace();
			this.addedToSpace();
		}
	}
	,swapEvent: function(newev) {
		this.removedFromSpace();
		this.event = newev;
		this.addedToSpace();
	}
	,__class__: zpp_nape.callbacks.ZPP_BodyListener
});
zpp_nape.callbacks.ZPP_ConstraintListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_nape.callbacks.ZPP_Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.constraint = this;
	this.type = zpp_nape.util.ZPP_Flags.id_ListenerType_CONSTRAINT;
	this.options = options.zpp_inner;
};
$hxClasses["zpp_nape.callbacks.ZPP_ConstraintListener"] = zpp_nape.callbacks.ZPP_ConstraintListener;
zpp_nape.callbacks.ZPP_ConstraintListener.__name__ = ["zpp_nape","callbacks","ZPP_ConstraintListener"];
zpp_nape.callbacks.ZPP_ConstraintListener.__super__ = zpp_nape.callbacks.ZPP_Listener;
zpp_nape.callbacks.ZPP_ConstraintListener.prototype = $extend(zpp_nape.callbacks.ZPP_Listener.prototype,{
	addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.addconstraint(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.conlisteners.remove(this);
			cb.invalidateconstraint();
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		this.options.effect_change(cb,included,added);
		this.addedToSpace();
	}
	,invalidate_precedence: function() {
		if(this.space != null) {
			this.removedFromSpace();
			this.addedToSpace();
		}
	}
	,swapEvent: function(newev) {
		this.removedFromSpace();
		this.event = newev;
		this.addedToSpace();
	}
	,__class__: zpp_nape.callbacks.ZPP_ConstraintListener
});
zpp_nape.util.ZNPList_ZPP_CbType = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CbType"] = zpp_nape.util.ZNPList_ZPP_CbType;
zpp_nape.util.ZNPList_ZPP_CbType.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbType"];
zpp_nape.util.ZNPList_ZPP_CbType.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbType(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbType(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CbType
};
zpp_nape.callbacks.ZPP_InteractionListener = function(options1,options2,event,type) {
	this.handlerp = null;
	this.pure = false;
	this.allowSleepingCallbacks = false;
	this.handleri = null;
	this.options2 = null;
	this.options1 = null;
	this.itype = 0;
	this.outer_znp = null;
	this.outer_zni = null;
	zpp_nape.callbacks.ZPP_Listener.call(this);
	this.type = type;
	this.interaction = this;
	this.event = event;
	this.options1 = options1.zpp_inner;
	this.options2 = options2.zpp_inner;
	this.allowSleepingCallbacks = false;
};
$hxClasses["zpp_nape.callbacks.ZPP_InteractionListener"] = zpp_nape.callbacks.ZPP_InteractionListener;
zpp_nape.callbacks.ZPP_InteractionListener.__name__ = ["zpp_nape","callbacks","ZPP_InteractionListener"];
zpp_nape.callbacks.ZPP_InteractionListener.__super__ = zpp_nape.callbacks.ZPP_Listener;
zpp_nape.callbacks.ZPP_InteractionListener.prototype = $extend(zpp_nape.callbacks.ZPP_Listener.prototype,{
	setInteractionType: function(itype) {
		this.itype = itype;
	}
	,wake: function() {
		this.with_union(function(cb) {
			var cx_ite = cb.interactors.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				i.wake();
				cx_ite = cx_ite.next;
			}
		});
	}
	,CbSetset: function(A,B,lambda) {
		var U = zpp_nape.callbacks.ZPP_InteractionListener.UCbSet;
		var V = zpp_nape.callbacks.ZPP_InteractionListener.VCbSet;
		var W = zpp_nape.callbacks.ZPP_InteractionListener.WCbSet;
		var aite = A.head;
		var bite = B.head;
		while(aite != null && bite != null) {
			var a = aite.elt;
			var b = bite.elt;
			if(a == b) {
				W.inlined_add(a);
				aite = aite.next;
				bite = bite.next;
			} else if(zpp_nape.callbacks.ZPP_CbSet.setlt(a,b)) {
				U.inlined_add(a);
				aite = aite.next;
			} else {
				V.inlined_add(b);
				bite = bite.next;
			}
		}
		while(aite != null) {
			U.inlined_add(aite.elt);
			aite = aite.next;
		}
		while(bite != null) {
			V.inlined_add(bite.elt);
			bite = bite.next;
		}
		while(!(U.head == null)) {
			var x = U.pop_unsafe();
			var cx_ite = B.head;
			while(cx_ite != null) {
				var y = cx_ite.elt;
				lambda(x,y);
				cx_ite = cx_ite.next;
			}
		}
		while(!(V.head == null)) {
			var x1 = V.pop_unsafe();
			var cx_ite1 = W.head;
			while(cx_ite1 != null) {
				var y1 = cx_ite1.elt;
				lambda(x1,y1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!(W.head == null)) {
			var x2 = W.pop_unsafe();
			lambda(x2,x2);
			var cx_ite2 = W.head;
			while(cx_ite2 != null) {
				var y2 = cx_ite2.elt;
				lambda(x2,y2);
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,CbTypeset: function(A,B,lambda) {
		var U = zpp_nape.callbacks.ZPP_InteractionListener.UCbType;
		var V = zpp_nape.callbacks.ZPP_InteractionListener.VCbType;
		var W = zpp_nape.callbacks.ZPP_InteractionListener.WCbType;
		var aite = A.head;
		var bite = B.head;
		while(aite != null && bite != null) {
			var a = aite.elt;
			var b = bite.elt;
			if(a == b) {
				W.inlined_add(a);
				aite = aite.next;
				bite = bite.next;
			} else if(a.id < b.id) {
				U.inlined_add(a);
				aite = aite.next;
			} else {
				V.inlined_add(b);
				bite = bite.next;
			}
		}
		while(aite != null) {
			U.inlined_add(aite.elt);
			aite = aite.next;
		}
		while(bite != null) {
			V.inlined_add(bite.elt);
			bite = bite.next;
		}
		while(!(U.head == null)) {
			var x = U.pop_unsafe();
			var cx_ite = B.head;
			while(cx_ite != null) {
				var y = cx_ite.elt;
				lambda(x,y);
				cx_ite = cx_ite.next;
			}
		}
		while(!(V.head == null)) {
			var x1 = V.pop_unsafe();
			var cx_ite1 = W.head;
			while(cx_ite1 != null) {
				var y1 = cx_ite1.elt;
				lambda(x1,y1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!(W.head == null)) {
			var x2 = W.pop_unsafe();
			lambda(x2,x2);
			var cx_ite2 = W.head;
			while(cx_ite2 != null) {
				var y2 = cx_ite2.elt;
				lambda(x2,y2);
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,with_uniquesets: function(fresh) {
		var _g = this;
		var set;
		if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) set = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
			set = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = set.next;
			set.next = null;
		}
		null;
		set.lt = zpp_nape.callbacks.ZPP_CbSetPair.setlt;
		this.CbTypeset(this.options1.includes,this.options2.includes,function(a,b) {
			_g.CbSetset(a.cbsets,b.cbsets,function(a1,b1) {
				a1.validate();
				b1.validate();
				if(zpp_nape.callbacks.ZPP_CbSet.single_intersection(a1,b1,_g)) set.try_insert(zpp_nape.callbacks.ZPP_CbSetPair.get(a1,b1));
			});
		});
		set.clear_with(function(pair) {
			if(fresh) _g.space.freshListenerType(pair.a,pair.b); else _g.space.nullListenerType(pair.a,pair.b);
			var o = pair;
			o.a = o.b = null;
			o.listeners.clear();
			o.next = zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool;
			zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = o;
		});
		var o1 = set;
		o1.data = null;
		o1.lt = null;
		o1.swapped = null;
		o1.next = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = o1;
	}
	,with_union: function(lambda) {
		var ite1 = this.options1.includes.head;
		var ite2 = this.options2.includes.head;
		while(ite1 != null && ite2 != null) {
			var cb1 = ite1.elt;
			var cb2 = ite2.elt;
			if(cb1 == cb2) {
				lambda(cb1);
				ite1 = ite1.next;
				ite2 = ite2.next;
			} else if(cb1.id < cb2.id) {
				lambda(cb1);
				ite1 = ite1.next;
			} else {
				lambda(cb2);
				ite2 = ite2.next;
			}
		}
		while(ite1 != null) {
			lambda(ite1.elt);
			ite1 = ite1.next;
		}
		while(ite2 != null) {
			lambda(ite2.elt);
			ite2 = ite2.next;
		}
	}
	,addedToSpace: function() {
		var _g = this;
		var pre = this.type == zpp_nape.util.ZPP_Flags.id_ListenerType_PRE;
		this.with_union(function(cb) {
			cb.addint(_g);
			if(pre) {
				var cx_ite = cb.interactors.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					i.wake();
					cx_ite = cx_ite.next;
				}
			}
		});
		this.options1.handler = $bind(this,this.cbtype_change1);
		this.options2.handler = $bind(this,this.cbtype_change2);
		this.with_uniquesets(true);
	}
	,removedFromSpace: function() {
		var _g = this;
		this.with_uniquesets(false);
		var pre = this.type == zpp_nape.util.ZPP_Flags.id_ListenerType_PRE;
		this.with_union(function(cb) {
			cb.listeners.remove(_g);
			cb.invalidateint();
			if(pre) {
				var cx_ite = cb.interactors.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					i.wake();
					cx_ite = cx_ite.next;
				}
			}
		});
		this.options1.handler = null;
		this.options2.handler = null;
	}
	,invalidate_precedence: function() {
		var _g = this;
		if(this.space != null) {
			var pre = this.type == zpp_nape.util.ZPP_Flags.id_ListenerType_PRE;
			this.with_union(function(cb) {
				cb.listeners.remove(_g);
				cb.invalidateint();
				cb.addint(_g);
				if(pre) {
					var cx_ite = cb.interactors.head;
					while(cx_ite != null) {
						var i = cx_ite.elt;
						i.wake();
						cx_ite = cx_ite.next;
					}
				}
			});
		}
	}
	,cbtype_change1: function(cb,included,added) {
		this.cbtype_change(this.options1,cb,included,added);
	}
	,cbtype_change2: function(cb,included,added) {
		this.cbtype_change(this.options2,cb,included,added);
	}
	,cbtype_change: function(options,cb,included,added) {
		this.removedFromSpace();
		options.effect_change(cb,included,added);
		this.addedToSpace();
		null;
	}
	,swapEvent: function(newev) {
		this.removedFromSpace();
		this.event = newev;
		this.addedToSpace();
	}
	,__class__: zpp_nape.callbacks.ZPP_InteractionListener
});
zpp_nape.callbacks.ZPP_OptionType = function() {
	this.wrap_excludes = null;
	this.wrap_includes = null;
	this.excludes = null;
	this.includes = null;
	this.handler = null;
	this.outer = null;
	this.includes = new zpp_nape.util.ZNPList_ZPP_CbType();
	this.excludes = new zpp_nape.util.ZNPList_ZPP_CbType();
};
$hxClasses["zpp_nape.callbacks.ZPP_OptionType"] = zpp_nape.callbacks.ZPP_OptionType;
zpp_nape.callbacks.ZPP_OptionType.__name__ = ["zpp_nape","callbacks","ZPP_OptionType"];
zpp_nape.callbacks.ZPP_OptionType.argument = function(val) {
	if(val == null) return new nape.callbacks.OptionType(); else if(js.Boot.__instanceof(val,nape.callbacks.OptionType)) return val; else return new nape.callbacks.OptionType().including(val);
};
zpp_nape.callbacks.ZPP_OptionType.prototype = {
	setup_includes: function() {
		this.wrap_includes = zpp_nape.util.ZPP_CbTypeList.get(this.includes,true);
	}
	,setup_excludes: function() {
		this.wrap_excludes = zpp_nape.util.ZPP_CbTypeList.get(this.excludes,true);
	}
	,excluded: function(xs) {
		return this.nonemptyintersection(xs,this.excludes);
	}
	,included: function(xs) {
		return this.nonemptyintersection(xs,this.includes);
	}
	,compatible: function(xs) {
		return this.nonemptyintersection(xs,this.includes) && !this.nonemptyintersection(xs,this.excludes);
	}
	,nonemptyintersection: function(xs,ys) {
		var ret = false;
		var xite = xs.head;
		var eite = ys.head;
		while(eite != null && xite != null) {
			var ex = eite.elt;
			var xi = xite.elt;
			if(ex == xi) {
				ret = true;
				break;
			} else if(ex.id < xi.id) eite = eite.next; else xite = xite.next;
		}
		return ret;
	}
	,effect_change: function(val,included,added) {
		if(included) {
			if(added) {
				var pre = null;
				var cx_ite = this.includes.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(val.id < j.id) break;
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				this.includes.inlined_insert(pre,val);
			} else this.includes.remove(val);
		} else if(added) {
			var pre1 = null;
			var cx_ite1 = this.excludes.head;
			while(cx_ite1 != null) {
				var j1 = cx_ite1.elt;
				if(val.id < j1.id) break;
				pre1 = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			this.excludes.inlined_insert(pre1,val);
		} else this.excludes.remove(val);
	}
	,append_type: function(list,val) {
		if(list == this.includes) {
			if(!this.includes.has(val)) {
				if(!this.excludes.has(val)) {
					if(this.handler != null) this.handler(val,true,true); else this.effect_change(val,true,true);
				} else if(this.handler != null) this.handler(val,false,false); else this.effect_change(val,false,false);
			}
		} else if(!this.excludes.has(val)) {
			if(!this.includes.has(val)) {
				if(this.handler != null) this.handler(val,false,true); else this.effect_change(val,false,true);
			} else if(this.handler != null) this.handler(val,true,false); else this.effect_change(val,true,false);
		}
	}
	,set: function(options) {
		if(options != this) {
			while(!(this.includes.head == null)) this.append_type(this.excludes,this.includes.head.elt);
			while(!(this.excludes.head == null)) this.append_type(this.includes,this.excludes.head.elt);
			var cx_ite = options.excludes.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				this.append_type(this.excludes,i);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = options.includes.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				this.append_type(this.includes,i1);
				cx_ite1 = cx_ite1.next;
			}
		}
		return this;
	}
	,append: function(list,val) {
		if(js.Boot.__instanceof(val,nape.callbacks.CbType)) {
			var cb = val;
			this.append_type(list,cb.zpp_inner);
		} else if(js.Boot.__instanceof(val,nape.callbacks.CbTypeList)) {
			var cbs = val;
			var _g;
			cbs.zpp_inner.valmod();
			_g = nape.callbacks.CbTypeIterator.get(cbs);
			while(_g.hasNext()) {
				var cb1;
				_g.zpp_critical = false;
				cb1 = _g.zpp_inner.at(_g.zpp_i++);
				this.append_type(list,cb1.zpp_inner);
			}
		} else if((val instanceof Array) && val.__enum__ == null) {
			var cbs1 = val;
			var _g1 = 0;
			while(_g1 < cbs1.length) {
				var cb2 = cbs1[_g1];
				++_g1;
				var cbx = cb2;
				this.append_type(list,cbx.zpp_inner);
			}
		} else {
		}
	}
	,__class__: zpp_nape.callbacks.ZPP_OptionType
};
zpp_nape.constraint = {};
zpp_nape.constraint.ZPP_Constraint = function() {
	this.pre_dt = 0.0;
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.__velocity = false;
	this.ignore = false;
	this.component = null;
	this.removeOnBreak = false;
	this.breakUnderError = false;
	this.breakUnderForce = false;
	this.maxError = 0.0;
	this.maxForce = 0.0;
	this.damping = 0.0;
	this.frequency = 0.0;
	this.stiff = false;
	this.active = false;
	this.space = null;
	this.compound = null;
	this.userData = null;
	this.id = 0;
	this.outer = null;
	this.__velocity = false;
	this.id = zpp_nape.ZPP_ID.Constraint();
	this.stiff = true;
	this.active = true;
	this.ignore = false;
	this.frequency = 10;
	this.damping = 1;
	this.maxForce = Math.POSITIVE_INFINITY;
	this.maxError = Math.POSITIVE_INFINITY;
	this.breakUnderForce = false;
	this.removeOnBreak = true;
	this.pre_dt = -1.0;
	this.cbTypes = new zpp_nape.util.ZNPList_ZPP_CbType();
};
$hxClasses["zpp_nape.constraint.ZPP_Constraint"] = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_Constraint.__name__ = ["zpp_nape","constraint","ZPP_Constraint"];
zpp_nape.constraint.ZPP_Constraint.prototype = {
	clear: function() {
	}
	,immutable_midstep: function(name) {
	}
	,setupcbTypes: function() {
		this.wrap_cbTypes = zpp_nape.util.ZPP_CbTypeList.get(this.cbTypes);
		this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
		this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
		this.wrap_cbTypes.zpp_inner.dontremove = true;
	}
	,wrap_cbTypes_subber: function(pcb) {
		var cb = pcb.zpp_inner;
		if(this.cbTypes.has(cb)) {
			if(this.space != null) {
				this.dealloc_cbSet();
				cb.constraints.remove(this);
			}
			this.cbTypes.remove(cb);
			if(this.space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,wrap_cbTypes_adder: function(cb) {
		this.insert_cbtype(cb.zpp_inner);
		return false;
	}
	,insert_cbtype: function(cb) {
		if(!this.cbTypes.has(cb)) {
			if(this.space != null) {
				this.dealloc_cbSet();
				cb.constraints.add(this);
			}
			var pre = null;
			var cx_ite = this.cbTypes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(cb.id < j.id) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			this.cbTypes.inlined_insert(pre,cb);
			if(this.space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,alloc_cbSet: function() {
		if((this.cbSet = this.space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.count++;
			this.cbSet.constraints.add(this);
		}
	}
	,dealloc_cbSet: function() {
		if(this.cbSet != null) {
			this.cbSet.constraints.remove(this);
			if(--this.cbSet.count == 0) {
				this.space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.free();
				o.next = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
				zpp_nape.callbacks.ZPP_CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,activate: function() {
		if(this.space != null) this.activeInSpace();
	}
	,deactivate: function() {
		if(this.space != null) this.inactiveOrOutSpace();
	}
	,addedToSpace: function() {
		if(this.active) this.activeInSpace();
		this.activeBodies();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.constraints.add(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		if(this.active) this.inactiveOrOutSpace();
		this.inactiveBodies();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.constraints.remove(this);
			cx_ite = cx_ite.next;
		}
	}
	,activeInSpace: function() {
		this.alloc_cbSet();
		if(zpp_nape.space.ZPP_Component.zpp_pool == null) this.component = new zpp_nape.space.ZPP_Component(); else {
			this.component = zpp_nape.space.ZPP_Component.zpp_pool;
			zpp_nape.space.ZPP_Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		null;
		this.component.isBody = false;
		this.component.constraint = this;
	}
	,inactiveOrOutSpace: function() {
		this.dealloc_cbSet();
		var o = this.component;
		o.body = null;
		o.constraint = null;
		null;
		o.next = zpp_nape.space.ZPP_Component.zpp_pool;
		zpp_nape.space.ZPP_Component.zpp_pool = o;
		this.component = null;
	}
	,activeBodies: function() {
	}
	,inactiveBodies: function() {
	}
	,clearcache: function() {
	}
	,validate: function() {
	}
	,wake_connected: function() {
	}
	,forest: function() {
	}
	,pair_exists: function(id,di) {
		return false;
	}
	,broken: function() {
	}
	,warmStart: function() {
	}
	,preStep: function(dt) {
		return false;
	}
	,applyImpulseVel: function() {
		return false;
	}
	,applyImpulsePos: function() {
		return false;
	}
	,wake: function() {
		if(this.space != null) this.space.wake_constraint(this);
	}
	,draw: function(g) {
	}
	,copy: function(dict,todo) {
		return null;
	}
	,copyto: function(ret) {
		var me = this.outer;
		var _g = ((function($this) {
			var $r;
			if(me.zpp_inner.wrap_cbTypes == null) me.zpp_inner.setupcbTypes();
			$r = me.zpp_inner.wrap_cbTypes;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var cb;
			_g.zpp_critical = false;
			cb = _g.zpp_inner.at(_g.zpp_i++);
			((function($this) {
				var $r;
				if(ret.zpp_inner.wrap_cbTypes == null) ret.zpp_inner.setupcbTypes();
				$r = ret.zpp_inner.wrap_cbTypes;
				return $r;
			}(this))).add(cb);
		}
		ret.zpp_inner.removeOnBreak = me.zpp_inner.removeOnBreak;
		ret.zpp_inner.removeOnBreak;
		ret.set_breakUnderError(me.zpp_inner.breakUnderError);
		ret.set_breakUnderForce(me.zpp_inner.breakUnderForce);
		ret.set_maxError(me.zpp_inner.maxError);
		ret.set_maxForce(me.zpp_inner.maxForce);
		ret.set_damping(me.zpp_inner.damping);
		ret.set_frequency(me.zpp_inner.frequency);
		ret.set_stiff(me.zpp_inner.stiff);
		ret.set_ignore(me.zpp_inner.ignore);
		ret.set_active(me.zpp_inner.active);
	}
	,__class__: zpp_nape.constraint.ZPP_Constraint
};
zpp_nape.constraint.ZPP_AngleJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.scale = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.ratio = 1;
	this.jAcc = 0;
	this.slack = false;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
};
$hxClasses["zpp_nape.constraint.ZPP_AngleJoint"] = zpp_nape.constraint.ZPP_AngleJoint;
zpp_nape.constraint.ZPP_AngleJoint.__name__ = ["zpp_nape","constraint","ZPP_AngleJoint"];
zpp_nape.constraint.ZPP_AngleJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_AngleJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	is_slack: function() {
		var slack;
		var C = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
			this.scale = 1.0;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.scale = -1.0;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.scale = 1.0;
			slack = false;
		} else {
			this.scale = 0.0;
			C = 0;
			slack = true;
		}
		C;
		return slack;
	}
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape.geom.Vec3.get(0,0,-this.scale * this.jAcc); else return nape.geom.Vec3.get(0,0,this.ratio * this.scale * this.jAcc);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.AngleJoint(null,null,this.jointMin,this.jointMax,this.ratio);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: AngleJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: AngleJoint cannot be simulated with body1 == body2";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(this.jointMin > this.jointMax) throw "Error: AngleJoint must have jointMin <= jointMax";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
		this.slack = false;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		var C;
		var C1 = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C1 -= this.jointMax;
			this.slack = false;
			this.scale = 1.0;
		} else if(C1 < this.jointMin) {
			C1 = this.jointMin - C1;
			this.scale = -1.0;
			this.slack = false;
		} else if(C1 > this.jointMax) {
			C1 -= this.jointMax;
			this.scale = 1.0;
			this.slack = false;
		} else {
			this.scale = 0.0;
			C1 = 0;
			this.slack = true;
		}
		C = C1;
		if(!this.slack) {
			this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
			if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
			if(!this.stiff) {
				if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C * biasCoef;
				if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			this.b1.angvel -= this.scale * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) return false;
		var E = this.scale * (this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel);
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) this.jAcc = 0;
		if(this.breakUnderForce && (this.jAcc > this.jMax || this.jAcc < -this.jMax)) return true;
		if(!this.stiff) {
			if(this.jAcc > this.jMax) this.jAcc = this.jMax; else if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
		}
		j = this.jAcc - jOld;
		this.b1.angvel -= this.scale * this.b1.iinertia * j;
		this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var slack;
		var C = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
			this.scale = 1.0;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.scale = -1.0;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.scale = 1.0;
			slack = false;
		} else {
			this.scale = 0.0;
			C = 0;
			slack = true;
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
			E *= 0.5;
			j = -E * this.kMass;
			if(this.equal || j < 0) {
				this.b1.delta_rot(-this.scale * j * this.b1.iinertia);
				this.b2.delta_rot(this.ratio * this.scale * j * this.b2.iinertia);
			}
		}
		return false;
	}
	,draw: function(g) {
		var me = this.outer_zn;
		var minrad = 10;
		var delrad = 5 / Math.PI / 2;
		if((me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer) != (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_space().get_world()) {
			var min = me.zpp_inner_zn.ratio * (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot - this.jointMin;
			var max = me.zpp_inner_zn.ratio * (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot - this.jointMax;
			if(min > max) {
				var t = min;
				min = max;
				max = t;
			}
			if((me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot > min) {
				var dr;
				var x = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot;
				var y = max;
				if(x < y) dr = x; else dr = y;
				zpp_nape.constraint.ZPP_AngleDraw.drawSpiral(g,(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_position(),min,dr,minrad + (min - min) * delrad,minrad + (dr - min) * delrad,16776960);
			} else if(!this.stiff && (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot < min) zpp_nape.constraint.ZPP_AngleDraw.drawSpiralSpring(g,(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_position(),(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot,min,minrad + ((me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot - min) * delrad,minrad + (min - min) * delrad,16776960);
			if((me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot < max) {
				var dr1;
				var x1 = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot;
				var y1 = min;
				if(x1 > y1) dr1 = x1; else dr1 = y1;
				zpp_nape.constraint.ZPP_AngleDraw.drawSpiral(g,(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_position(),dr1,max,minrad + (dr1 - min) * delrad,minrad + (max - min) * delrad,65535);
			} else if(!this.stiff && (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot > max) zpp_nape.constraint.ZPP_AngleDraw.drawSpiralSpring(g,(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_position(),(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot,max,minrad + ((me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot - min) * delrad,minrad + (max - min) * delrad,65535);
			zpp_nape.constraint.ZPP_AngleDraw.indicator(g,(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_position(),(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot,minrad + ((me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot - min) * delrad,255);
		}
		if((me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer) != (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_space().get_world()) {
			var min1 = (this.jointMin + (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot) / me.zpp_inner_zn.ratio;
			var max1 = (this.jointMax + (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot) / me.zpp_inner_zn.ratio;
			if(min1 > max1) {
				var t1 = min1;
				min1 = max1;
				max1 = t1;
			}
			if((me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot > min1) {
				var dr2;
				var x2 = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot;
				var y2 = max1;
				if(x2 < y2) dr2 = x2; else dr2 = y2;
				zpp_nape.constraint.ZPP_AngleDraw.drawSpiral(g,(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_position(),min1,dr2,minrad + (min1 - min1) * delrad,minrad + (dr2 - min1) * delrad,16776960);
			} else if(!this.stiff && (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot < min1) zpp_nape.constraint.ZPP_AngleDraw.drawSpiralSpring(g,(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_position(),(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot,min1,minrad + ((me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot - min1) * delrad,minrad + (min1 - min1) * delrad,16776960);
			if((me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot < max1) {
				var dr3;
				var x3 = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot;
				var y3 = min1;
				if(x3 > y3) dr3 = x3; else dr3 = y3;
				zpp_nape.constraint.ZPP_AngleDraw.drawSpiral(g,(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_position(),dr3,max1,minrad + (dr3 - min1) * delrad,minrad + (max1 - min1) * delrad,65535);
			} else if(!this.stiff && (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot > max1) zpp_nape.constraint.ZPP_AngleDraw.drawSpiralSpring(g,(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_position(),(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot,max1,minrad + ((me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot - min1) * delrad,minrad + (max1 - min1) * delrad,65535);
			zpp_nape.constraint.ZPP_AngleDraw.indicator(g,(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_position(),(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot,minrad + ((me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot - min1) * delrad,16711680);
		}
	}
	,__class__: zpp_nape.constraint.ZPP_AngleJoint
});
zpp_nape.constraint.ZPP_AngleDraw = function() { };
$hxClasses["zpp_nape.constraint.ZPP_AngleDraw"] = zpp_nape.constraint.ZPP_AngleDraw;
zpp_nape.constraint.ZPP_AngleDraw.__name__ = ["zpp_nape","constraint","ZPP_AngleDraw"];
zpp_nape.constraint.ZPP_AngleDraw.indicator = function(g,c,ang,rad,col) {
	var dir = nape.geom.Vec2.get(Math.cos(ang),Math.sin(ang),null);
	g.drawFilledCircle(c.add(dir.mul(rad,true),true),2,col);
	dir.dispose();
};
zpp_nape.constraint.ZPP_AngleDraw.drawSpiralSpring = function(g,c,a0,a1,r0,r1,col,coils) {
	if(coils == null) coils = 4;
	if(a0 > a1) {
		var t = a0;
		a0 = a1;
		a1 = t;
		var t1 = r0;
		r0 = r1;
		r1 = t1;
	}
	if(a0 == a1) return;
	var dr = r1 - r0;
	var da = a1 - a0;
	var Delta;
	var x = 2 * Math.PI * dr / da;
	if(x < 0) Delta = -x; else Delta = x;
	var dcnt;
	var x1 = Math.ceil(da / zpp_nape.constraint.ZPP_AngleDraw.maxarc * 3);
	var y = 4 * coils;
	if(x1 > y) dcnt = x1; else dcnt = y;
	var drad = dr / dcnt;
	var dang = da / dcnt;
	var dtime = 1 / dcnt;
	var c0 = Math.cos(a0);
	var s0 = Math.sin(a0);
	var R0;
	var p = r0 + dr * 0;
	R0 = p + 0.75 * Delta * Math.sin(2 * coils * Math.PI * 0);
	var p0 = nape.geom.Vec2.get((function($this) {
		var $r;
		c.zpp_inner.validate();
		$r = c.zpp_inner.x;
		return $r;
	}(this)) + R0 * c0,(function($this) {
		var $r;
		c.zpp_inner.validate();
		$r = c.zpp_inner.y;
		return $r;
	}(this)) + R0 * s0,null);
	var DR = dr + 1.5 * coils * Delta * Math.PI * Math.cos(2 * coils * Math.PI * 0);
	var ux = DR * c0 - R0 * da * s0;
	var uy = DR * s0 + R0 * da * c0;
	var p1 = nape.geom.Vec2.get(null,null,null);
	var ct = nape.geom.Vec2.get(null,null,null);
	var _g = 0;
	while(_g < dcnt) {
		var i = _g++;
		var a11 = a0 + dang;
		var c1 = Math.cos(a11);
		var s1 = Math.sin(a11);
		var R1;
		var p2 = r0 + dr * (i + 1) * dtime;
		R1 = p2 + 0.75 * Delta * Math.sin(2 * coils * Math.PI * (i + 1) * dtime);
		p1.setxy((function($this) {
			var $r;
			c.zpp_inner.validate();
			$r = c.zpp_inner.x;
			return $r;
		}(this)) + R1 * c1,(function($this) {
			var $r;
			c.zpp_inner.validate();
			$r = c.zpp_inner.y;
			return $r;
		}(this)) + R1 * s1);
		var DR1 = dr + 1.5 * coils * Delta * Math.PI * Math.cos(2 * coils * Math.PI * (i + 1) * dtime);
		var vx = DR1 * c1 - R1 * da * s1;
		var vy = DR1 * s1 + R1 * da * c1;
		var den = ux * vy - uy * vx;
		if(den * den < nape.Config.epsilon || ux * vx + uy * vy <= 0 || ux * vx + uy * vy > 0.999) g.drawLine(p0,p1,col); else {
			var t2;
			t2 = (((function($this) {
				var $r;
				p1.zpp_inner.validate();
				$r = p1.zpp_inner.x;
				return $r;
			}(this)) - (function($this) {
				var $r;
				p0.zpp_inner.validate();
				$r = p0.zpp_inner.x;
				return $r;
			}(this))) * vy + ((function($this) {
				var $r;
				p0.zpp_inner.validate();
				$r = p0.zpp_inner.y;
				return $r;
			}(this)) - (function($this) {
				var $r;
				p1.zpp_inner.validate();
				$r = p1.zpp_inner.y;
				return $r;
			}(this))) * vx) / den;
			if(t2 <= 0) g.drawLine(p0,p1,col); else {
				ct.set_x((function($this) {
					var $r;
					p0.zpp_inner.validate();
					$r = p0.zpp_inner.x;
					return $r;
				}(this)) + ux * t2);
				ct.set_y((function($this) {
					var $r;
					p0.zpp_inner.validate();
					$r = p0.zpp_inner.y;
					return $r;
				}(this)) + uy * t2);
				g.drawCurve(p0,ct,p1,col);
			}
		}
		a0 = a11;
		c0 = c1;
		s0 = s1;
		ux = vx;
		uy = vy;
		p0.set(p1);
	}
	p0.dispose();
	p1.dispose();
	ct.dispose();
};
zpp_nape.constraint.ZPP_AngleDraw.drawSpiral = function(g,c,a0,a1,r0,r1,col) {
	if(a0 > a1) {
		var t = a0;
		a0 = a1;
		a1 = t;
		var t1 = r0;
		r0 = r1;
		r1 = t1;
	}
	if(a0 == a1) return;
	var dr = r1 - r0;
	var da = a1 - a0;
	var dcnt = Math.ceil(da / zpp_nape.constraint.ZPP_AngleDraw.maxarc);
	var drad = dr / dcnt;
	var dang = da / dcnt;
	var c0 = Math.cos(a0);
	var s0 = Math.sin(a0);
	var p0 = nape.geom.Vec2.get((function($this) {
		var $r;
		c.zpp_inner.validate();
		$r = c.zpp_inner.x;
		return $r;
	}(this)) + r0 * c0,(function($this) {
		var $r;
		c.zpp_inner.validate();
		$r = c.zpp_inner.y;
		return $r;
	}(this)) + r0 * s0,null);
	var ux = dr * c0 - r0 * da * s0;
	var uy = dr * s0 + r0 * da * c0;
	var p1 = nape.geom.Vec2.get(null,null,null);
	var ct = nape.geom.Vec2.get(null,null,null);
	var _g = 0;
	while(_g < dcnt) {
		var i = _g++;
		var r11 = r0 + drad;
		var a11 = a0 + dang;
		var c1 = Math.cos(a11);
		var s1 = Math.sin(a11);
		p1.setxy((function($this) {
			var $r;
			c.zpp_inner.validate();
			$r = c.zpp_inner.x;
			return $r;
		}(this)) + r11 * c1,(function($this) {
			var $r;
			c.zpp_inner.validate();
			$r = c.zpp_inner.y;
			return $r;
		}(this)) + r11 * s1);
		var vx = dr * c1 - r11 * da * s1;
		var vy = dr * s1 + r11 * da * c1;
		var den = ux * vy - uy * vx;
		if(den * den < nape.Config.epsilon) g.drawLine(p0,p1,col); else {
			var t2;
			t2 = (((function($this) {
				var $r;
				p1.zpp_inner.validate();
				$r = p1.zpp_inner.x;
				return $r;
			}(this)) - (function($this) {
				var $r;
				p0.zpp_inner.validate();
				$r = p0.zpp_inner.x;
				return $r;
			}(this))) * vy + ((function($this) {
				var $r;
				p0.zpp_inner.validate();
				$r = p0.zpp_inner.y;
				return $r;
			}(this)) - (function($this) {
				var $r;
				p1.zpp_inner.validate();
				$r = p1.zpp_inner.y;
				return $r;
			}(this))) * vx) / den;
			if(t2 <= 0) g.drawLine(p0,p1,col); else {
				ct.set_x((function($this) {
					var $r;
					p0.zpp_inner.validate();
					$r = p0.zpp_inner.x;
					return $r;
				}(this)) + ux * t2);
				ct.set_y((function($this) {
					var $r;
					p0.zpp_inner.validate();
					$r = p0.zpp_inner.y;
					return $r;
				}(this)) + uy * t2);
				g.drawCurve(p0,ct,p1,col);
			}
		}
		r0 = r11;
		a0 = a11;
		c0 = c1;
		s0 = s1;
		ux = vx;
		uy = vy;
		p0.set(p1);
	}
	p0.dispose();
	p1.dispose();
	ct.dispose();
};
zpp_nape.constraint.ZPP_CopyHelper = function() {
	this.cb = null;
	this.bc = null;
	this.id = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_CopyHelper"] = zpp_nape.constraint.ZPP_CopyHelper;
zpp_nape.constraint.ZPP_CopyHelper.__name__ = ["zpp_nape","constraint","ZPP_CopyHelper"];
zpp_nape.constraint.ZPP_CopyHelper.dict = function(id,bc) {
	var ret = new zpp_nape.constraint.ZPP_CopyHelper();
	ret.id = id;
	ret.bc = bc;
	return ret;
};
zpp_nape.constraint.ZPP_CopyHelper.todo = function(id,cb) {
	var ret = new zpp_nape.constraint.ZPP_CopyHelper();
	ret.id = id;
	ret.cb = cb;
	return ret;
};
zpp_nape.constraint.ZPP_CopyHelper.prototype = {
	__class__: zpp_nape.constraint.ZPP_CopyHelper
};
zpp_nape.constraint.ZPP_DistanceJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.jAcc = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
	this.cx1 = this.cx2 = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_DistanceJoint"] = zpp_nape.constraint.ZPP_DistanceJoint;
zpp_nape.constraint.ZPP_DistanceJoint.__name__ = ["zpp_nape","constraint","ZPP_DistanceJoint"];
zpp_nape.constraint.ZPP_DistanceJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_DistanceJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	is_slack: function() {
		var slack;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		ny = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		var C = nx * nx + ny * ny;
		if(C < nape.Config.epsilon) {
			nx = 0;
			ny = 0;
			C = 0;
			slack = true;
		} else {
			C = Math.sqrt(C);
			var t = 1.0 / C;
			nx *= t;
			ny *= t;
			if(this.equal) {
				C -= this.jointMax;
				slack = false;
			} else if(C < this.jointMin) {
				C = this.jointMin - C;
				nx = -nx;
				ny = -ny;
				slack = false;
			} else if(C > this.jointMax) {
				C -= this.jointMax;
				slack = false;
			} else {
				nx = 0;
				ny = 0;
				C = 0;
				slack = true;
			}
		}
		C;
		return slack;
	}
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape.geom.Vec3.get(-this.jAcc * this.nx,-this.jAcc * this.ny,-this.cx1 * this.jAcc); else return nape.geom.Vec3.get(this.jAcc * this.nx,this.jAcc * this.ny,this.cx2 * this.jAcc);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.DistanceJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.jointMin,this.jointMax);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: DistanceJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: DistanceJoint cannot be simulated with body1 == body2";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(this.jointMin > this.jointMax) throw "Error: DistanceJoint must have jointMin <= jointMax";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var C;
		this.nx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		this.ny = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		var C1 = this.nx * this.nx + this.ny * this.ny;
		if(C1 < nape.Config.epsilon) {
			this.nx = 0;
			this.ny = 0;
			C1 = 0;
			this.slack = true;
		} else {
			C1 = Math.sqrt(C1);
			var t = 1.0 / C1;
			this.nx *= t;
			this.ny *= t;
			if(this.equal) {
				C1 -= this.jointMax;
				this.slack = false;
			} else if(C1 < this.jointMin) {
				C1 = this.jointMin - C1;
				this.nx = -this.nx;
				this.ny = -this.ny;
				this.slack = false;
			} else if(C1 > this.jointMax) {
				C1 -= this.jointMax;
				this.slack = false;
			} else {
				this.nx = 0;
				this.ny = 0;
				C1 = 0;
				this.slack = true;
			}
		}
		C = C1;
		if(!this.slack) {
			this.cx1 = this.ny * this.a1relx - this.nx * this.a1rely;
			this.cx2 = this.ny * this.a2relx - this.nx * this.a2rely;
			this.kMass = this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia;
			if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
			if(!this.stiff) {
				if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C * biasCoef;
				if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			var t = this.b1.imass * this.jAcc;
			this.b1.velx -= this.nx * t;
			this.b1.vely -= this.ny * t;
			var t1 = this.b2.imass * this.jAcc;
			this.b2.velx += this.nx * t1;
			this.b2.vely += this.ny * t1;
			this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) return false;
		var E = this.nx * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.ny * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1;
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) this.jAcc = 0;
		if(this.breakUnderForce && this.jAcc < -this.jMax) return true;
		if(!this.stiff) {
			if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
		}
		j = this.jAcc - jOld;
		var t = this.b1.imass * j;
		this.b1.velx -= this.nx * t;
		this.b1.vely -= this.ny * t;
		var t1 = this.b2.imass * j;
		this.b2.velx += this.nx * t1;
		this.b2.vely += this.ny * t1;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
		this.b2.angvel += this.cx2 * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var slack;
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b2.posx + r2x - (this.b1.posx + r1x);
		ny = this.b2.posy + r2y - (this.b1.posy + r1y);
		var C = nx * nx + ny * ny;
		if(C < nape.Config.epsilon) {
			nx = 0;
			ny = 0;
			C = 0;
			slack = true;
		} else {
			C = Math.sqrt(C);
			var t = 1.0 / C;
			nx *= t;
			ny *= t;
			if(this.equal) {
				C -= this.jointMax;
				slack = false;
			} else if(C < this.jointMin) {
				C = this.jointMin - C;
				nx = -nx;
				ny = -ny;
				slack = false;
			} else if(C > this.jointMax) {
				C -= this.jointMax;
				slack = false;
			} else {
				nx = 0;
				ny = 0;
				C = 0;
				slack = true;
			}
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
			if(E * E < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
			E *= 0.5;
			if(E * E > 6) {
				var k = this.b1.smass + this.b2.smass;
				if(k > nape.Config.epsilon) {
					k = 0.75 / k;
					j = -E * k;
					if(this.equal || j < 0) {
						var t1 = j * this.b1.imass;
						this.b1.posx -= nx * t1;
						this.b1.posy -= ny * t1;
						var t2 = j * this.b2.imass;
						this.b2.posx += nx * t2;
						this.b2.posy += ny * t2;
						nx = this.b2.posx + r2x - (this.b1.posx + r1x);
						ny = this.b2.posy + r2y - (this.b1.posy + r1y);
						var C1 = nx * nx + ny * ny;
						if(C1 < nape.Config.epsilon) {
							nx = 0;
							ny = 0;
							C1 = 0;
							slack = true;
						} else {
							C1 = Math.sqrt(C1);
							var t3 = 1.0 / C1;
							nx *= t3;
							ny *= t3;
							if(this.equal) {
								C1 -= this.jointMax;
								slack = false;
							} else if(C1 < this.jointMin) {
								C1 = this.jointMin - C1;
								nx = -nx;
								ny = -ny;
								slack = false;
							} else if(C1 > this.jointMax) {
								C1 -= this.jointMax;
								slack = false;
							} else {
								nx = 0;
								ny = 0;
								C1 = 0;
								slack = true;
							}
						}
						E = C1;
						E *= 0.5;
					}
				}
			}
			var cx1;
			var cx2;
			var k1;
			cx1 = ny * r1x - nx * r1y;
			cx2 = ny * r2x - nx * r2y;
			k1 = this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia;
			if(k1 != 0) k1 = 1 / k1;
			j = -E * k1;
			if(this.equal || j < 0) {
				var t4 = this.b1.imass * j;
				this.b1.posx -= nx * t4;
				this.b1.posy -= ny * t4;
				var t5 = this.b2.imass * j;
				this.b2.posx += nx * t5;
				this.b2.posy += ny * t5;
				this.b1.delta_rot(-cx1 * this.b1.iinertia * j);
				this.b2.delta_rot(cx2 * this.b2.iinertia * j);
			}
		}
		return false;
	}
	,draw: function(g) {
		var me = this.outer_zn;
		var a1 = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a1 == null) me.zpp_inner_zn.setup_a1();
			$r = me.zpp_inner_zn.wrap_a1;
			return $r;
		}(this)));
		var a2 = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a2 == null) me.zpp_inner_zn.setup_a2();
			$r = me.zpp_inner_zn.wrap_a2;
			return $r;
		}(this)));
		var n = a2.sub(a1);
		var nl = Math.sqrt((function($this) {
			var $r;
			n.zpp_inner.validate();
			$r = n.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			n.zpp_inner.validate();
			$r = n.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			n.zpp_inner.validate();
			$r = n.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			n.zpp_inner.validate();
			$r = n.zpp_inner.y;
			return $r;
		}(this)));
		if(nl != 0) {
			n.muleq(1 / nl);
			var mid = a1.add(a2).muleq(0.5);
			var min1 = mid.sub(n.mul(this.jointMin * 0.5,true));
			var min2 = mid.add(n.mul(this.jointMin * 0.5,true));
			var max1 = mid.sub(n.mul(this.jointMax * 0.5,true));
			var max2 = mid.add(n.mul(this.jointMax * 0.5,true));
			g.drawLine(min1,min2,16776960);
			g.drawLine(max1,min1,65535);
			g.drawLine(max2,min2,65535);
			if(!this.stiff) {
				if(nl > this.jointMax) {
					g.drawSpring(max1,a1,65535);
					g.drawSpring(max2,a2,65535);
				} else if(nl < this.jointMin) {
					g.drawSpring(min1,a1,16776960);
					g.drawSpring(min2,a2,16776960);
				}
			}
			mid.dispose();
			min1.dispose();
			min2.dispose();
			max1.dispose();
			max2.dispose();
		}
		g.drawFilledCircle(a1,2,255);
		g.drawFilledCircle(a2,2,16711680);
		a1.dispose();
		a2.dispose();
		n.dispose();
	}
	,__class__: zpp_nape.constraint.ZPP_DistanceJoint
});
zpp_nape.constraint.ZPP_LineJoint = function() {
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_n = null;
	this.nrely = 0.0;
	this.nrelx = 0.0;
	this.nlocaly = 0.0;
	this.nlocalx = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.dot2 = 0.0;
	this.dot1 = 0.0;
	this.equal = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.scale = 0.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.nlocalx = 0;
	this.nlocaly = 0;
	this.nrelx = 0;
	this.nrely = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.jointMin = Math.NEGATIVE_INFINITY;
	this.jointMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
};
$hxClasses["zpp_nape.constraint.ZPP_LineJoint"] = zpp_nape.constraint.ZPP_LineJoint;
zpp_nape.constraint.ZPP_LineJoint.__name__ = ["zpp_nape","constraint","ZPP_LineJoint"];
zpp_nape.constraint.ZPP_LineJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_LineJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	bodyImpulse: function(b) {
		if(this.stepped) {
			var jx = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
			var jy = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
			if(b == this.b1) return nape.geom.Vec3.get(-jx,-jy,this.scale * this.cx1 * jy - this.dot1 * jx); else return nape.geom.Vec3.get(jx,jy,this.scale * this.cx1 * jy - this.dot1 * jx);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,validate_n: function() {
		this.wrap_n.zpp_inner.x = this.nlocalx;
		this.wrap_n.zpp_inner.y = this.nlocaly;
	}
	,invalidate_n: function(x) {
		this.immutable_midstep("Constraint::" + "n");
		this.nlocalx = x.x;
		this.nlocaly = x.y;
		this.zip_n = true;
		this.wake();
	}
	,setup_n: function() {
		this.wrap_n = nape.geom.Vec2.get(this.nlocalx,this.nlocaly,null);
		this.wrap_n.zpp_inner._inuse = true;
		this.wrap_n.zpp_inner._validate = $bind(this,this.validate_n);
		this.wrap_n.zpp_inner._invalidate = $bind(this,this.invalidate_n);
	}
	,validate_norm: function() {
		if(this.zip_n) {
			this.zip_n = false;
			var d = this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly;
			var imag = 1.0 / Math.sqrt(d);
			var t = imag;
			this.nlocalx *= t;
			this.nlocaly *= t;
		}
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.LineJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.outer_zn.get_direction(),this.jointMin,this.jointMax);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: AngleJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: DistanceJoint cannot be simulated with body1 == body2";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(this.jointMin > this.jointMax) throw "Error: DistanceJoint must have jointMin <= jointMax";
		if(this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly < nape.Config.epsilon) throw "Error: DistanceJoint direction must be non-degenerate";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.equal = this.jointMin == this.jointMax;
		this.stepped = true;
		this.validate_norm();
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.nrelx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
		this.nrely = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var dx = 0.0;
		var dy = 0.0;
		var Cx = 0.0;
		var Cy = 0.0;
		dx = this.b2.posx + this.a2relx - this.b1.posx - this.a1relx;
		dy = this.b2.posy + this.a2rely - this.b1.posy - this.a1rely;
		Cx = dy * this.nrelx - dx * this.nrely;
		Cy = this.nrelx * dx + this.nrely * dy;
		if(this.equal) {
			Cy -= this.jointMin;
			this.scale = 1.0;
		} else if(Cy > this.jointMax) {
			Cy -= this.jointMax;
			this.scale = 1.0;
		} else if(Cy < this.jointMin) {
			Cy = this.jointMin - Cy;
			this.scale = -1.0;
		} else {
			Cy = 0;
			this.scale = 0;
		}
		var drx = 0.0;
		var dry = 0.0;
		drx = dx + this.a1relx;
		dry = dy + this.a1rely;
		this.dot1 = this.nrelx * drx + this.nrely * dry;
		this.cx1 = dry * this.nrelx - drx * this.nrely;
		this.dot2 = this.nrelx * this.a2relx + this.nrely * this.a2rely;
		this.cx2 = this.a2rely * this.nrelx - this.a2relx * this.nrely;
		this.kMassa = this.b1.smass + this.b2.smass + this.dot1 * this.dot1 * this.b1.sinertia + this.dot2 * this.dot2 * this.b2.sinertia;
		this.kMassb = -this.scale * (this.dot1 * this.cx1 * this.b1.sinertia + this.dot2 * this.cx2 * this.b2.sinertia);
		this.kMassc = this.scale * this.scale * (this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia);
		var flag;
		var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
		if(det != det) {
			this.kMassa = this.kMassb = this.kMassc = 0;
			flag = 3;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassc != 0) this.kMassc = 1 / this.kMassc; else {
				this.kMassc = 0;
				flag1 |= 2;
			}
			this.kMassb = 0;
			flag = flag1;
		} else {
			det = 1 / det;
			var t = this.kMassc * det;
			this.kMassc = this.kMassa * det;
			this.kMassa = t;
			this.kMassb *= -det;
			flag = 0;
		}
		if((flag & 1) != 0) this.jAccx = 0;
		if((flag & 2) != 0) this.jAccy = 0;
		if(!this.stiff) {
			if(this.breakUnderError && Cx * Cx + Cy * Cy > this.maxError * this.maxError) return true;
			var biasCoef;
			var X;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			X = ig;
			this.kMassa *= X;
			this.kMassb *= X;
			this.kMassc *= X;
			this.biasx = Cx;
			this.biasy = Cy;
			var t1 = -biasCoef;
			this.biasx *= t1;
			this.biasy *= t1;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy;
			if(ls > t2 * t2) {
				var t3 = t2 * (1.0 / Math.sqrt(ls));
				this.biasx *= t3;
				this.biasy *= t3;
			}
		} else {
			this.gamma = 0;
			this.biasx = 0;
			this.biasy = 0;
		}
		var t4 = dtratio;
		this.jAccx *= t4;
		this.jAccy *= t4;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var J2x = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
		var J2y = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
		var t = this.b1.imass;
		this.b1.velx -= J2x * t;
		this.b1.vely -= J2y * t;
		var t1 = this.b2.imass;
		this.b2.velx += J2x * t1;
		this.b2.vely += J2y * t1;
		this.b1.angvel += (this.scale * this.cx1 * this.jAccy - this.dot1 * this.jAccx) * this.b1.iinertia;
		this.b2.angvel += (this.dot2 * this.jAccx - this.scale * this.cx2 * this.jAccy) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		var dvx = 0.0;
		var dvy = 0.0;
		dvx = this.b2.velx - this.b1.velx;
		dvy = this.b2.vely - this.b1.vely;
		dvx += this.b2.kinvelx - this.b1.kinvelx;
		dvy += this.b2.kinvely - this.b1.kinvely;
		Ex = dvy * this.nrelx - dvx * this.nrely + (this.b2.angvel + this.b2.kinangvel) * this.dot2 - (this.b1.angvel + this.b1.kinangvel) * this.dot1;
		Ey = this.scale * (this.nrelx * dvx + this.nrely * dvy - (this.b2.angvel + this.b2.kinangvel) * this.cx2 + (this.b1.angvel + this.b1.kinangvel) * this.cx1);
		var Jx = 0.0;
		var Jy = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		var t = this.kMassa * Jx + this.kMassb * Jy;
		Jy = this.kMassb * Jx + this.kMassc * Jy;
		Jx = t;
		var t1 = this.gamma;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		var jOldx = 0.0;
		var jOldy = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		var t2 = 1.0;
		this.jAccx += Jx * t2;
		this.jAccy += Jy * t2;
		if(this.jAccy > 0) this.jAccy = 0;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) return true;
		} else if(!this.stiff) {
			var t3 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
			if(ls > t3 * t3) {
				var t4 = t3 * (1.0 / Math.sqrt(ls));
				this.jAccx *= t4;
				this.jAccy *= t4;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		var J2x = this.scale * this.nrelx * Jy - this.nrely * Jx;
		var J2y = this.nrelx * Jx + this.scale * this.nrely * Jy;
		var t5 = this.b1.imass;
		this.b1.velx -= J2x * t5;
		this.b1.vely -= J2y * t5;
		var t6 = this.b2.imass;
		this.b2.velx += J2x * t6;
		this.b2.vely += J2y * t6;
		this.b1.angvel += (this.scale * this.cx1 * Jy - this.dot1 * Jx) * this.b1.iinertia;
		this.b2.angvel += (this.dot2 * Jx - this.scale * this.cx2 * Jy) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
		ny = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var dx = 0.0;
		var dy = 0.0;
		var scale;
		var Ex = 0.0;
		var Ey = 0.0;
		dx = this.b2.posx + r2x - this.b1.posx - r1x;
		dy = this.b2.posy + r2y - this.b1.posy - r1y;
		Ex = dy * nx - dx * ny;
		Ey = nx * dx + ny * dy;
		if(this.equal) {
			Ey -= this.jointMin;
			scale = 1.0;
		} else if(Ey > this.jointMax) {
			Ey -= this.jointMax;
			scale = 1.0;
		} else if(Ey < this.jointMin) {
			Ey = this.jointMin - Ey;
			scale = -1.0;
		} else {
			Ey = 0;
			scale = 0;
		}
		if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) return true;
		if(Ex * Ex + Ey * Ey < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
		var Jx = 0.0;
		var Jy = 0.0;
		var t = 0.5;
		Ex *= t;
		Ey *= t;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape.Config.epsilon) {
				k = 0.8 / k;
				var Jx1 = k * (ny * Ex - scale * nx * Ey);
				var Jy1 = k * (nx * Ex * scale - ny * Ex);
				var t1 = this.b1.imass;
				this.b1.posx -= Jx1 * t1;
				this.b1.posy -= Jy1 * t1;
				var t2 = this.b2.imass;
				this.b2.posx += Jx1 * t2;
				this.b2.posy += Jy1 * t2;
				dx = this.b2.posx + r2x - this.b1.posx - r1x;
				dy = this.b2.posy + r2y - this.b1.posy - r1y;
				Ex = dy * nx - dx * ny;
				Ey = nx * dx + ny * dy;
				if(this.equal) {
					Ey -= this.jointMin;
					scale = 1.0;
				} else if(Ey > this.jointMax) {
					Ey -= this.jointMax;
					scale = 1.0;
				} else if(Ey < this.jointMin) {
					Ey = this.jointMin - Ey;
					scale = -1.0;
				} else {
					Ey = 0;
					scale = 0;
				}
				var t3 = 0.5;
				Ex *= t3;
				Ey *= t3;
			}
		}
		var dot1;
		var dot2;
		var cx1;
		var cx2;
		var Ka = 0.0;
		var Kb = 0.0;
		var Kc = 0.0;
		var drx = 0.0;
		var dry = 0.0;
		drx = dx + r1x;
		dry = dy + r1y;
		dot1 = nx * drx + ny * dry;
		cx1 = dry * nx - drx * ny;
		dot2 = nx * r2x + ny * r2y;
		cx2 = r2y * nx - r2x * ny;
		Ka = this.b1.smass + this.b2.smass + dot1 * dot1 * this.b1.sinertia + dot2 * dot2 * this.b2.sinertia;
		Kb = -scale * (dot1 * cx1 * this.b1.sinertia + dot2 * cx2 * this.b2.sinertia);
		Kc = scale * scale * (this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia);
		Jx = -Ex;
		Jy = -Ey;
		var det = Ka * Kc - Kb * Kb;
		if(det != det) Jx = Jy = 0; else if(det == 0) {
			if(Ka != 0) Jx /= Ka; else Jx = 0;
			if(Kc != 0) Jy /= Kc; else Jy = 0;
		} else {
			det = 1 / det;
			var t4 = det * (Kc * Jx - Kb * Jy);
			Jy = det * (Ka * Jy - Kb * Jx);
			Jx = t4;
		}
		if(Jy > 0) Jy = 0;
		var J2x = scale * nx * Jy - ny * Jx;
		var J2y = nx * Jx + scale * ny * Jy;
		var t5 = this.b1.imass;
		this.b1.posx -= J2x * t5;
		this.b1.posy -= J2y * t5;
		var t6 = this.b2.imass;
		this.b2.posx += J2x * t6;
		this.b2.posy += J2y * t6;
		this.b1.delta_rot((scale * cx1 * Jy - dot1 * Jx) * this.b1.iinertia);
		this.b2.delta_rot((dot2 * Jx - scale * cx2 * Jy) * this.b2.iinertia);
		return false;
	}
	,draw: function(g) {
		var me = this.outer_zn;
		var a1 = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a1 == null) me.zpp_inner_zn.setup_a1();
			$r = me.zpp_inner_zn.wrap_a1;
			return $r;
		}(this)));
		var a2 = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a2 == null) me.zpp_inner_zn.setup_a2();
			$r = me.zpp_inner_zn.wrap_a2;
			return $r;
		}(this)));
		var dir = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).localVectorToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_n == null) me.zpp_inner_zn.setup_n();
			$r = me.zpp_inner_zn.wrap_n;
			return $r;
		}(this)));
		dir.muleq(1 / Math.sqrt((function($this) {
			var $r;
			dir.zpp_inner.validate();
			$r = dir.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			dir.zpp_inner.validate();
			$r = dir.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			dir.zpp_inner.validate();
			$r = dir.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			dir.zpp_inner.validate();
			$r = dir.zpp_inner.y;
			return $r;
		}(this))));
		var min = me.zpp_inner_zn.jointMin;
		var max = me.zpp_inner_zn.jointMax;
		if(min <= Math.NEGATIVE_INFINITY) min = -1000;
		if(max >= Math.POSITIVE_INFINITY) max = 1000;
		var del = a2.sub(a1);
		var pn = del.dot(dir);
		del.dispose();
		var e1 = a1.add(dir.mul(min,true));
		var e2 = a1.add(dir.mul(max,true));
		if(pn > min) g.drawLine(e1,a1.add(dir.mul((function($this) {
			var $r;
			var x = pn;
			var y = max;
			$r = x < y?x:y;
			return $r;
		}(this)),true),true),16776960);
		if(pn < max) g.drawLine(a1.add(dir.mul((function($this) {
			var $r;
			var x1 = pn;
			var y1 = min;
			$r = x1 > y1?x1:y1;
			return $r;
		}(this)),true),true),e2,65535);
		if(!this.stiff) {
			var anch;
			if(pn < this.jointMin) anch = nape.geom.Vec2.get((function($this) {
				var $r;
				e1.zpp_inner.validate();
				$r = e1.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				e1.zpp_inner.validate();
				$r = e1.zpp_inner.y;
				return $r;
			}(this)),false); else if(pn > this.jointMax) anch = nape.geom.Vec2.get((function($this) {
				var $r;
				e2.zpp_inner.validate();
				$r = e2.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				e2.zpp_inner.validate();
				$r = e2.zpp_inner.y;
				return $r;
			}(this)),false); else anch = a1.add(dir.mul(pn,true));
			g.drawSpring(anch,a2,16711935);
			anch.dispose();
		}
		g.drawFilledCircle(a1,2,255);
		g.drawFilledCircle(a2,2,16711680);
		a1.dispose();
		a2.dispose();
		e1.dispose();
		e2.dispose();
	}
	,__class__: zpp_nape.constraint.ZPP_LineJoint
});
zpp_nape.constraint.ZPP_MotorJoint = function() {
	this.stepped = false;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.rate = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.jAcc = 0;
	this.stepped = false;
	this.__velocity = true;
};
$hxClasses["zpp_nape.constraint.ZPP_MotorJoint"] = zpp_nape.constraint.ZPP_MotorJoint;
zpp_nape.constraint.ZPP_MotorJoint.__name__ = ["zpp_nape","constraint","ZPP_MotorJoint"];
zpp_nape.constraint.ZPP_MotorJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_MotorJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape.geom.Vec3.get(0,0,-this.jAcc); else return nape.geom.Vec3.get(0,0,this.ratio * this.jAcc);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.MotorJoint(null,null,this.rate,this.ratio);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: AngleJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: MotorJoint cannot be simulated with body1 == body2";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
		this.kMass = 1.0 / this.kMass;
		this.jAcc *= dtratio;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		this.b1.angvel -= this.b1.iinertia * this.jAcc;
		this.b2.angvel += this.ratio * this.b2.iinertia * this.jAcc;
	}
	,applyImpulseVel: function() {
		var E = this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel - this.rate;
		var j = -this.kMass * E;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(this.breakUnderForce) {
			if(this.jAcc > this.jMax || this.jAcc < -this.jMax) return true;
		} else if(this.jAcc < -this.jMax) this.jAcc = -this.jMax; else if(this.jAcc > this.jMax) this.jAcc = this.jMax;
		j = this.jAcc - jOld;
		this.b1.angvel -= this.b1.iinertia * j;
		this.b2.angvel += this.ratio * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		return false;
	}
	,__class__: zpp_nape.constraint.ZPP_MotorJoint
});
zpp_nape.constraint.ZPP_PivotJoint = function() {
	this.stepped = false;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.stepped = false;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_PivotJoint"] = zpp_nape.constraint.ZPP_PivotJoint;
zpp_nape.constraint.ZPP_PivotJoint.__name__ = ["zpp_nape","constraint","ZPP_PivotJoint"];
zpp_nape.constraint.ZPP_PivotJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_PivotJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape.geom.Vec3.get(-this.jAccx,-this.jAccy,-(this.jAccy * this.a1relx - this.jAccx * this.a1rely)); else return nape.geom.Vec3.get(this.jAccx,this.jAccy,this.jAccy * this.a2relx - this.jAccx * this.a2rely);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.PivotJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2());
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: PivotJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: PivotJoint cannot be simulated with body1 == body2 (body1=body2=" + this.b1.outer.toString() + ")";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")";
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var m = this.b1.smass + this.b2.smass;
		this.kMassa = m;
		this.kMassb = 0;
		this.kMassc = m;
		if(this.b1.sinertia != 0) {
			var X = this.a1relx * this.b1.sinertia;
			var Y = this.a1rely * this.b1.sinertia;
			this.kMassa += Y * this.a1rely;
			this.kMassb += -Y * this.a1relx;
			this.kMassc += X * this.a1relx;
		}
		if(this.b2.sinertia != 0) {
			var X1 = this.a2relx * this.b2.sinertia;
			var Y1 = this.a2rely * this.b2.sinertia;
			this.kMassa += Y1 * this.a2rely;
			this.kMassb += -Y1 * this.a2relx;
			this.kMassc += X1 * this.a2relx;
		}
		var flag;
		var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
		if(det != det) {
			this.kMassa = this.kMassb = this.kMassc = 0;
			flag = 3;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassc != 0) this.kMassc = 1 / this.kMassc; else {
				this.kMassc = 0;
				flag1 |= 2;
			}
			this.kMassb = 0;
			flag = flag1;
		} else {
			det = 1 / det;
			var t = this.kMassc * det;
			this.kMassc = this.kMassa * det;
			this.kMassa = t;
			this.kMassb *= -det;
			flag = 0;
		}
		if((flag & 1) != 0) this.jAccx = 0;
		if((flag & 2) != 0) this.jAccy = 0;
		if(!this.stiff) {
			var biasCoef;
			var X2;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			X2 = ig;
			this.kMassa *= X2;
			this.kMassb *= X2;
			this.kMassc *= X2;
			this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
			this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
			if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy > this.maxError * this.maxError) return true;
			var t1 = -biasCoef;
			this.biasx *= t1;
			this.biasy *= t1;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy;
			if(ls > t2 * t2) {
				var t3 = t2 * (1.0 / Math.sqrt(ls));
				this.biasx *= t3;
				this.biasy *= t3;
			}
		} else {
			this.biasx = 0;
			this.biasy = 0;
			this.gamma = 0;
		}
		var t4 = dtratio;
		this.jAccx *= t4;
		this.jAccy *= t4;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.jAccx * t;
		this.b1.vely -= this.jAccy * t;
		var t1 = this.b2.imass;
		this.b2.velx += this.jAccx * t1;
		this.b2.vely += this.jAccy * t1;
		this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely) * this.b1.iinertia;
		this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
		Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
		var Jx = 0.0;
		var Jy = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		var t = this.kMassa * Jx + this.kMassb * Jy;
		Jy = this.kMassb * Jx + this.kMassc * Jy;
		Jx = t;
		var t1 = this.gamma;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		var jOldx = 0.0;
		var jOldy = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		var t2 = 1.0;
		this.jAccx += Jx * t2;
		this.jAccy += Jy * t2;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) return true;
		} else if(!this.stiff) {
			var t3 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
			if(ls > t3 * t3) {
				var t4 = t3 * (1.0 / Math.sqrt(ls));
				this.jAccx *= t4;
				this.jAccy *= t4;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		var t5 = this.b1.imass;
		this.b1.velx -= Jx * t5;
		this.b1.vely -= Jy * t5;
		var t6 = this.b2.imass;
		this.b2.velx += Jx * t6;
		this.b2.vely += Jy * t6;
		this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely) * this.b1.iinertia;
		this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var Ex = 0.0;
		var Ey = 0.0;
		Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
		Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
		if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) return true;
		if(Ex * Ex + Ey * Ey < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
		var t = 0.5;
		Ex *= t;
		Ey *= t;
		var Jx = 0.0;
		var Jy = 0.0;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape.Config.epsilon) {
				k = 0.75 / k;
				Jx = -Ex * k;
				Jy = -Ey * k;
				var t1 = 20;
				var ls = Jx * Jx + Jy * Jy;
				if(ls > t1 * t1) {
					var t2 = t1 * (1.0 / Math.sqrt(ls));
					Jx *= t2;
					Jy *= t2;
				}
				var t3 = this.b1.imass;
				this.b1.posx -= Jx * t3;
				this.b1.posy -= Jy * t3;
				var t4 = this.b2.imass;
				this.b2.posx += Jx * t4;
				this.b2.posy += Jy * t4;
				Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
				Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
				var t5 = 0.5;
				Ex *= t5;
				Ey *= t5;
			}
		}
		var Ka = 0.0;
		var Kb = 0.0;
		var Kc = 0.0;
		var m = this.b1.smass + this.b2.smass;
		Ka = m;
		Kb = 0;
		Kc = m;
		if(this.b1.sinertia != 0) {
			var X = r1x * this.b1.sinertia;
			var Y = r1y * this.b1.sinertia;
			Ka += Y * r1y;
			Kb += -Y * r1x;
			Kc += X * r1x;
		}
		if(this.b2.sinertia != 0) {
			var X1 = r2x * this.b2.sinertia;
			var Y1 = r2y * this.b2.sinertia;
			Ka += Y1 * r2y;
			Kb += -Y1 * r2x;
			Kc += X1 * r2x;
		}
		Jx = -Ex;
		Jy = -Ey;
		var t6 = 6;
		var ls1 = Jx * Jx + Jy * Jy;
		if(ls1 > t6 * t6) {
			var t7 = t6 * (1.0 / Math.sqrt(ls1));
			Jx *= t7;
			Jy *= t7;
		}
		var det = Ka * Kc - Kb * Kb;
		if(det != det) Jx = Jy = 0; else if(det == 0) {
			if(Ka != 0) Jx /= Ka; else Jx = 0;
			if(Kc != 0) Jy /= Kc; else Jy = 0;
		} else {
			det = 1 / det;
			var t8 = det * (Kc * Jx - Kb * Jy);
			Jy = det * (Ka * Jy - Kb * Jx);
			Jx = t8;
		}
		var t9 = this.b1.imass;
		this.b1.posx -= Jx * t9;
		this.b1.posy -= Jy * t9;
		var t10 = this.b2.imass;
		this.b2.posx += Jx * t10;
		this.b2.posy += Jy * t10;
		this.b1.delta_rot(-(Jy * r1x - Jx * r1y) * this.b1.iinertia);
		this.b2.delta_rot((Jy * r2x - Jx * r2y) * this.b2.iinertia);
		return false;
	}
	,draw: function(g) {
		var me = this.outer_zn;
		var a1 = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a1 == null) me.zpp_inner_zn.setup_a1();
			$r = me.zpp_inner_zn.wrap_a1;
			return $r;
		}(this)));
		var a2 = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a2 == null) me.zpp_inner_zn.setup_a2();
			$r = me.zpp_inner_zn.wrap_a2;
			return $r;
		}(this)));
		if(!this.stiff) {
			var n = a2.sub(a1);
			var nl = Math.sqrt((function($this) {
				var $r;
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) * (function($this) {
				var $r;
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)) * (function($this) {
				var $r;
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)));
			if(nl != 0) g.drawSpring(a1,a2,16711935);
			n.dispose();
		}
		g.drawFilledCircle(a1,2,255);
		g.drawFilledCircle(a2,2,16711680);
		a1.dispose();
		a2.dispose();
	}
	,__class__: zpp_nape.constraint.ZPP_PivotJoint
});
zpp_nape.constraint.ZPP_PulleyJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a4 = null;
	this.a4rely = 0.0;
	this.a4relx = 0.0;
	this.a4localy = 0.0;
	this.a4localx = 0.0;
	this.b4 = null;
	this.wrap_a3 = null;
	this.a3rely = 0.0;
	this.a3relx = 0.0;
	this.a3localy = 0.0;
	this.a3localx = 0.0;
	this.b3 = null;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx4 = 0.0;
	this.cx3 = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.n34y = 0.0;
	this.n34x = 0.0;
	this.n12y = 0.0;
	this.n12x = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 1.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.a3localx = 0;
	this.a3localy = 0;
	this.a3relx = 0;
	this.a3rely = 0;
	this.a4localx = 0;
	this.a4localy = 0;
	this.a4relx = 0;
	this.a4rely = 0;
	this.n12x = 1;
	this.n12y = 0;
	this.n34x = 1;
	this.n34y = 0;
	this.jAcc = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
	this.cx1 = this.cx2 = this.cx3 = this.cx4 = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_PulleyJoint"] = zpp_nape.constraint.ZPP_PulleyJoint;
zpp_nape.constraint.ZPP_PulleyJoint.__name__ = ["zpp_nape","constraint","ZPP_PulleyJoint"];
zpp_nape.constraint.ZPP_PulleyJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_PulleyJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	is_slack: function() {
		var slack;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		this.a3relx = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		this.a3rely = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		this.a4relx = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		this.a4rely = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var n12x = 0.0;
		var n12y = 0.0;
		var n34x = 0.0;
		var n34y = 0.0;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		t12y = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		t34x = this.b4.posx + this.a4relx - (this.b3.posx + this.a3relx);
		t34y = this.b4.posy + this.a4rely - (this.b3.posy + this.a3rely);
		var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			n12x = t12x * t;
			n12y = t12y * t;
		}
		if(C34 != 0) {
			var t1 = 1.0 / C34;
			n34x = t34x * t1;
			n34y = t34y * t1;
			var t2 = this.ratio;
			n34x *= t2;
			n34y *= t2;
		} else {
			var t3 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
			n34x *= t3;
			n34y *= t3;
		}
		var C = C12 + this.ratio * C34;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			n12x = -n12x;
			n12y = -n12y;
			n34x = -n34x;
			n34y = -n34y;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			slack = false;
		} else {
			n12x = 0;
			n12y = 0;
			n34x = 0;
			n34y = 0;
			C = 0;
			slack = true;
		}
		C;
		return slack;
	}
	,bodyImpulse: function(b) {
		if(this.stepped) {
			var ret = nape.geom.Vec3.get();
			if(b == this.b1) {
				var _g = ret;
				_g.set_x((function($this) {
					var $r;
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.x;
					return $r;
				}(this)) - this.jAcc * this.n12x);
				var _g1 = ret;
				_g1.set_y((function($this) {
					var $r;
					_g1.zpp_inner.validate();
					$r = _g1.zpp_inner.y;
					return $r;
				}(this)) - this.jAcc * this.n12y);
				var _g2 = ret;
				_g2.set_z((function($this) {
					var $r;
					_g2.zpp_inner.validate();
					$r = _g2.zpp_inner.z;
					return $r;
				}(this)) - this.cx1 * this.jAcc);
			}
			if(b == this.b2) {
				var _g3 = ret;
				_g3.set_x((function($this) {
					var $r;
					_g3.zpp_inner.validate();
					$r = _g3.zpp_inner.x;
					return $r;
				}(this)) + this.jAcc * this.n12x);
				var _g4 = ret;
				_g4.set_y((function($this) {
					var $r;
					_g4.zpp_inner.validate();
					$r = _g4.zpp_inner.y;
					return $r;
				}(this)) + this.jAcc * this.n12y);
				var _g5 = ret;
				_g5.set_z((function($this) {
					var $r;
					_g5.zpp_inner.validate();
					$r = _g5.zpp_inner.z;
					return $r;
				}(this)) + this.cx2 * this.jAcc);
			}
			if(b == this.b3) {
				var _g6 = ret;
				_g6.set_x((function($this) {
					var $r;
					_g6.zpp_inner.validate();
					$r = _g6.zpp_inner.x;
					return $r;
				}(this)) - this.jAcc * this.n34x);
				var _g7 = ret;
				_g7.set_y((function($this) {
					var $r;
					_g7.zpp_inner.validate();
					$r = _g7.zpp_inner.y;
					return $r;
				}(this)) - this.jAcc * this.n34y);
				var _g8 = ret;
				_g8.set_z((function($this) {
					var $r;
					_g8.zpp_inner.validate();
					$r = _g8.zpp_inner.z;
					return $r;
				}(this)) - this.cx3 * this.jAcc);
			}
			if(b == this.b4) {
				var _g9 = ret;
				_g9.set_x((function($this) {
					var $r;
					_g9.zpp_inner.validate();
					$r = _g9.zpp_inner.x;
					return $r;
				}(this)) + this.jAcc * this.n34x);
				var _g10 = ret;
				_g10.set_y((function($this) {
					var $r;
					_g10.zpp_inner.validate();
					$r = _g10.zpp_inner.y;
					return $r;
				}(this)) + this.jAcc * this.n34y);
				var _g11 = ret;
				_g11.set_z((function($this) {
					var $r;
					_g11.zpp_inner.validate();
					$r = _g11.zpp_inner.z;
					return $r;
				}(this)) + this.cx4 * this.jAcc);
			}
			return ret;
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
		if(this.b3 != this.b1 && this.b3 != this.b2) {
			if(this.b3 != null) this.b3.constraints.add(this);
		}
		if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
			if(this.b4 != null) this.b4.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
		if(this.b3 != this.b1 && this.b3 != this.b2) {
			if(this.b3 != null) this.b3.constraints.remove(this);
		}
		if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
			if(this.b4 != null) this.b4.constraints.remove(this);
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,validate_a3: function() {
		this.wrap_a3.zpp_inner.x = this.a3localx;
		this.wrap_a3.zpp_inner.y = this.a3localy;
	}
	,invalidate_a3: function(x) {
		this.immutable_midstep("Constraint::" + "a3");
		this.a3localx = x.x;
		this.a3localy = x.y;
		this.wake();
	}
	,setup_a3: function() {
		this.wrap_a3 = nape.geom.Vec2.get(this.a3localx,this.a3localy,null);
		this.wrap_a3.zpp_inner._inuse = true;
		this.wrap_a3.zpp_inner._validate = $bind(this,this.validate_a3);
		this.wrap_a3.zpp_inner._invalidate = $bind(this,this.invalidate_a3);
	}
	,validate_a4: function() {
		this.wrap_a4.zpp_inner.x = this.a4localx;
		this.wrap_a4.zpp_inner.y = this.a4localy;
	}
	,invalidate_a4: function(x) {
		this.immutable_midstep("Constraint::" + "a4");
		this.a4localx = x.x;
		this.a4localy = x.y;
		this.wake();
	}
	,setup_a4: function() {
		this.wrap_a4 = nape.geom.Vec2.get(this.a4localx,this.a4localy,null);
		this.wrap_a4.zpp_inner._inuse = true;
		this.wrap_a4.zpp_inner._validate = $bind(this,this.validate_a4);
		this.wrap_a4.zpp_inner._invalidate = $bind(this,this.invalidate_a4);
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.PulleyJoint(null,null,null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.outer_zn.get_anchor3(),this.outer_zn.get_anchor4(),this.jointMin,this.jointMax,this.ratio);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		if(dict != null && this.b3 != null) {
			var b4 = null;
			var _g2 = 0;
			while(_g2 < dict.length) {
				var idc2 = dict[_g2];
				++_g2;
				if(idc2.id == this.b3.id) {
					b4 = idc2.bc;
					break;
				}
			}
			if(b4 != null) ret.zpp_inner_zn.b3 = b4.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b3.id,function(b5) {
				ret.zpp_inner_zn.b3 = b5.zpp_inner;
			}));
		}
		if(dict != null && this.b4 != null) {
			var b6 = null;
			var _g3 = 0;
			while(_g3 < dict.length) {
				var idc3 = dict[_g3];
				++_g3;
				if(idc3.id == this.b4.id) {
					b6 = idc3.bc;
					break;
				}
			}
			if(b6 != null) ret.zpp_inner_zn.b4 = b6.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b4.id,function(b7) {
				ret.zpp_inner_zn.b4 = b7.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null || this.b3 == null || this.b4 == null) throw "Error: PulleyJoint cannot be simulated with null bodies";
		if(this.b1 == this.b2 || this.b3 == this.b4) throw "Error: PulleyJoint cannot have body1==body2 or body3==body4";
		if(this.b1.space != this.space || this.b2.space != this.space || this.b3.space != this.space || this.b4.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(this.jointMin > this.jointMax) throw "Error: PulleyJoint must have jointMin <= jointMax";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic";
		if(!(this.b3.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b4.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic";
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
		if(this.b3 != null && this.b3.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b3.wake();
		if(this.b4 != null && this.b4.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b4.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
		if(this.b3.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr2;
			if(this.b3.component == this.b3.component.parent) xr2 = this.b3.component; else {
				var obj4 = this.b3.component;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				xr2 = obj4;
			}
			var yr2;
			if(this.component == this.component.parent) yr2 = this.component; else {
				var obj5 = this.component;
				var stack5 = null;
				while(obj5 != obj5.parent) {
					var nxt10 = obj5.parent;
					obj5.parent = stack5;
					stack5 = obj5;
					obj5 = nxt10;
				}
				while(stack5 != null) {
					var nxt11 = stack5.parent;
					stack5.parent = obj5;
					stack5 = nxt11;
				}
				yr2 = obj5;
			}
			if(xr2 != yr2) {
				if(xr2.rank < yr2.rank) xr2.parent = yr2; else if(xr2.rank > yr2.rank) yr2.parent = xr2; else {
					yr2.parent = xr2;
					xr2.rank++;
				}
			}
		}
		if(this.b4.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr3;
			if(this.b4.component == this.b4.component.parent) xr3 = this.b4.component; else {
				var obj6 = this.b4.component;
				var stack6 = null;
				while(obj6 != obj6.parent) {
					var nxt12 = obj6.parent;
					obj6.parent = stack6;
					stack6 = obj6;
					obj6 = nxt12;
				}
				while(stack6 != null) {
					var nxt13 = stack6.parent;
					stack6.parent = obj6;
					stack6 = nxt13;
				}
				xr3 = obj6;
			}
			var yr3;
			if(this.component == this.component.parent) yr3 = this.component; else {
				var obj7 = this.component;
				var stack7 = null;
				while(obj7 != obj7.parent) {
					var nxt14 = obj7.parent;
					obj7.parent = stack7;
					stack7 = obj7;
					obj7 = nxt14;
				}
				while(stack7 != null) {
					var nxt15 = stack7.parent;
					stack7.parent = obj7;
					stack7 = nxt15;
				}
				yr3 = obj7;
			}
			if(xr3 != yr3) {
				if(xr3.rank < yr3.rank) xr3.parent = yr3; else if(xr3.rank > yr3.rank) yr3.parent = xr3; else {
					yr3.parent = xr3;
					xr3.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && (this.b2.id == di || this.b3.id == di || this.b4.id == di) || this.b2.id == id && (this.b3.id == di || this.b4.id == di || this.b1.id == di) || this.b3.id == id && (this.b4.id == di || this.b1.id == di || this.b2.id == di) || this.b4.id == id && (this.b1.id == di || this.b2.id == di || this.b3.id == di);
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		this.a3relx = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		this.a3rely = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		this.a4relx = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		this.a4rely = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var C;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		t12y = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		t34x = this.b4.posx + this.a4relx - (this.b3.posx + this.a3relx);
		t34y = this.b4.posy + this.a4rely - (this.b3.posy + this.a3rely);
		var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			this.n12x = t12x * t;
			this.n12y = t12y * t;
		}
		if(C34 != 0) {
			var t1 = 1.0 / C34;
			this.n34x = t34x * t1;
			this.n34y = t34y * t1;
			var t2 = this.ratio;
			this.n34x *= t2;
			this.n34y *= t2;
		} else {
			var t3 = this.ratio / Math.sqrt(this.n34x * this.n34x + this.n34y * this.n34y);
			this.n34x *= t3;
			this.n34y *= t3;
		}
		var C1 = C12 + this.ratio * C34;
		if(this.equal) {
			C1 -= this.jointMax;
			this.slack = false;
		} else if(C1 < this.jointMin) {
			C1 = this.jointMin - C1;
			this.n12x = -this.n12x;
			this.n12y = -this.n12y;
			this.n34x = -this.n34x;
			this.n34y = -this.n34y;
			this.slack = false;
		} else if(C1 > this.jointMax) {
			C1 -= this.jointMax;
			this.slack = false;
		} else {
			this.n12x = 0;
			this.n12y = 0;
			this.n34x = 0;
			this.n34y = 0;
			C1 = 0;
			this.slack = true;
		}
		C = C1;
		if(!this.slack) {
			this.cx1 = this.n12y * this.a1relx - this.n12x * this.a1rely;
			this.cx2 = this.n12y * this.a2relx - this.n12x * this.a2rely;
			this.cx3 = this.n34y * this.a3relx - this.n34x * this.a3rely;
			this.cx4 = this.n34y * this.a4relx - this.n34x * this.a4rely;
			var ratioSq = this.ratio * this.ratio;
			var K = this.b1.smass + this.b2.smass + ratioSq * (this.b3.smass + this.b4.smass) + this.b1.sinertia * this.cx1 * this.cx1 + this.b2.sinertia * this.cx2 * this.cx2 + this.b3.sinertia * this.cx3 * this.cx3 + this.b4.sinertia * this.cx4 * this.cx4;
			if(this.b1 == this.b4) K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx4 * this.b1.sinertia);
			if(this.b1 == this.b3) K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx3 * this.b1.sinertia);
			if(this.b2 == this.b3) K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx3 * this.b2.sinertia);
			if(this.b2 == this.b4) K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx4 * this.b2.sinertia);
			this.kMass = K;
			if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
			if(!this.stiff) {
				if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C * biasCoef;
				if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			var t = this.b1.imass * this.jAcc;
			this.b1.velx -= this.n12x * t;
			this.b1.vely -= this.n12y * t;
			var t1 = this.b2.imass * this.jAcc;
			this.b2.velx += this.n12x * t1;
			this.b2.vely += this.n12y * t1;
			var t2 = this.b3.imass * this.jAcc;
			this.b3.velx -= this.n34x * t2;
			this.b3.vely -= this.n34y * t2;
			var t3 = this.b4.imass * this.jAcc;
			this.b4.velx += this.n34x * t3;
			this.b4.vely += this.n34y * t3;
			this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
			this.b3.angvel -= this.cx3 * this.b3.iinertia * this.jAcc;
			this.b4.angvel += this.cx4 * this.b4.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) return false;
		var E = this.n12x * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.n12y * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + this.n34x * (this.b4.velx + this.b4.kinvelx - this.b3.velx - this.b3.kinvelx) + this.n34y * (this.b4.vely + this.b4.kinvely - this.b3.vely - this.b3.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1 + (this.b4.angvel + this.b4.kinangvel) * this.cx4 - (this.b3.angvel + this.b3.kinangvel) * this.cx3;
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) this.jAcc = 0;
		if(this.breakUnderForce && this.jAcc < -this.jMax) return true;
		if(!this.stiff) {
			if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
		}
		j = this.jAcc - jOld;
		var t = this.b1.imass * j;
		this.b1.velx -= this.n12x * t;
		this.b1.vely -= this.n12y * t;
		var t1 = this.b2.imass * j;
		this.b2.velx += this.n12x * t1;
		this.b2.vely += this.n12y * t1;
		var t2 = this.b3.imass * j;
		this.b3.velx -= this.n34x * t2;
		this.b3.vely -= this.n34y * t2;
		var t3 = this.b4.imass * j;
		this.b4.velx += this.n34x * t3;
		this.b4.vely += this.n34y * t3;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
		this.b2.angvel += this.cx2 * this.b2.iinertia * j;
		this.b3.angvel -= this.cx3 * this.b3.iinertia * j;
		this.b4.angvel += this.cx4 * this.b4.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var r3x = 0.0;
		var r3y = 0.0;
		r3x = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		r3y = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		var r4x = 0.0;
		var r4y = 0.0;
		r4x = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		r4y = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var slack;
		var n12x = 0.0;
		var n12y = 0.0;
		var n34x = 0.0;
		var n34y = 0.0;
		n12x = this.n12x;
		n12y = this.n12y;
		n34x = this.n34x;
		n34y = this.n34y;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + r2x - (this.b1.posx + r1x);
		t12y = this.b2.posy + r2y - (this.b1.posy + r1y);
		t34x = this.b4.posx + r4x - (this.b3.posx + r3x);
		t34y = this.b4.posy + r4y - (this.b3.posy + r3y);
		var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			n12x = t12x * t;
			n12y = t12y * t;
		}
		if(C34 != 0) {
			var t1 = 1.0 / C34;
			n34x = t34x * t1;
			n34y = t34y * t1;
			var t2 = this.ratio;
			n34x *= t2;
			n34y *= t2;
		} else {
			var t3 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
			n34x *= t3;
			n34y *= t3;
		}
		var C = C12 + this.ratio * C34;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			n12x = -n12x;
			n12y = -n12y;
			n34x = -n34x;
			n34y = -n34y;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			slack = false;
		} else {
			n12x = 0;
			n12y = 0;
			n34x = 0;
			n34y = 0;
			C = 0;
			slack = true;
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
			if(E * E < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
			E *= 0.5;
			if(E * E > 6) {
				var k = this.b1.smass + this.b2.smass;
				if(k > nape.Config.epsilon) {
					k = 0.75 / k;
					j = -E * k;
					if(this.equal || j < 0) {
						var t4 = j * this.b1.imass;
						this.b1.posx -= n12x * t4;
						this.b1.posy -= n12y * t4;
						var t5 = j * this.b2.imass;
						this.b2.posx += n12x * t5;
						this.b2.posy += n12y * t5;
						var t6 = j * this.b3.imass;
						this.b3.posx -= n34x * t6;
						this.b3.posy -= n34y * t6;
						var t7 = j * this.b4.imass;
						this.b4.posx += n34x * t7;
						this.b4.posy += n34y * t7;
						var t12x1 = 0.0;
						var t12y1 = 0.0;
						var t34x1 = 0.0;
						var t34y1 = 0.0;
						t12x1 = this.b2.posx + r2x - (this.b1.posx + r1x);
						t12y1 = this.b2.posy + r2y - (this.b1.posy + r1y);
						t34x1 = this.b4.posx + r4x - (this.b3.posx + r3x);
						t34y1 = this.b4.posy + r4y - (this.b3.posy + r3y);
						var C121 = Math.sqrt(t12x1 * t12x1 + t12y1 * t12y1);
						var C341 = Math.sqrt(t34x1 * t34x1 + t34y1 * t34y1);
						if(C121 != 0) {
							var t8 = 1.0 / C121;
							n12x = t12x1 * t8;
							n12y = t12y1 * t8;
						}
						if(C341 != 0) {
							var t9 = 1.0 / C341;
							n34x = t34x1 * t9;
							n34y = t34y1 * t9;
							var t10 = this.ratio;
							n34x *= t10;
							n34y *= t10;
						} else {
							var t11 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
							n34x *= t11;
							n34y *= t11;
						}
						var C1 = C121 + this.ratio * C341;
						if(this.equal) {
							C1 -= this.jointMax;
							slack = false;
						} else if(C1 < this.jointMin) {
							C1 = this.jointMin - C1;
							n12x = -n12x;
							n12y = -n12y;
							n34x = -n34x;
							n34y = -n34y;
							slack = false;
						} else if(C1 > this.jointMax) {
							C1 -= this.jointMax;
							slack = false;
						} else {
							n12x = 0;
							n12y = 0;
							n34x = 0;
							n34y = 0;
							C1 = 0;
							slack = true;
						}
						E = C1;
						E *= 0.5;
					}
				}
			}
			var cx1;
			var cx2;
			var cx3;
			var cx4;
			var k1;
			cx1 = n12y * r1x - n12x * r1y;
			cx2 = n12y * r2x - n12x * r2y;
			cx3 = n34y * r3x - n34x * r3y;
			cx4 = n34y * r4x - n34x * r4y;
			var ratioSq = this.ratio * this.ratio;
			var K = this.b1.smass + this.b2.smass + ratioSq * (this.b3.smass + this.b4.smass) + this.b1.sinertia * cx1 * cx1 + this.b2.sinertia * cx2 * cx2 + this.b3.sinertia * cx3 * cx3 + this.b4.sinertia * cx4 * cx4;
			if(this.b1 == this.b4) K -= 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx4 * this.b1.sinertia);
			if(this.b1 == this.b3) K += 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx3 * this.b1.sinertia);
			if(this.b2 == this.b3) K -= 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx3 * this.b2.sinertia);
			if(this.b2 == this.b4) K += 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx4 * this.b2.sinertia);
			k1 = K;
			if(k1 != 0) k1 = 1 / k1;
			j = -E * k1;
			if(this.equal || j < 0) {
				var t12 = this.b1.imass * j;
				this.b1.posx -= n12x * t12;
				this.b1.posy -= n12y * t12;
				var t13 = this.b2.imass * j;
				this.b2.posx += n12x * t13;
				this.b2.posy += n12y * t13;
				var t14 = this.b3.imass * j;
				this.b3.posx -= n34x * t14;
				this.b3.posy -= n34y * t14;
				var t15 = this.b4.imass * j;
				this.b4.posx += n34x * t15;
				this.b4.posy += n34y * t15;
				this.b1.delta_rot(-cx1 * this.b1.iinertia * j);
				this.b2.delta_rot(cx2 * this.b2.iinertia * j);
				this.b3.delta_rot(-cx3 * this.b3.iinertia * j);
				this.b4.delta_rot(cx4 * this.b4.iinertia * j);
			}
		}
		return false;
	}
	,draw: function(g) {
		var me = this.outer_zn;
		var a1 = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a1 == null) me.zpp_inner_zn.setup_a1();
			$r = me.zpp_inner_zn.wrap_a1;
			return $r;
		}(this)));
		var a2 = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a2 == null) me.zpp_inner_zn.setup_a2();
			$r = me.zpp_inner_zn.wrap_a2;
			return $r;
		}(this)));
		var a3 = (me.zpp_inner_zn.b3 == null?null:me.zpp_inner_zn.b3.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a3 == null) me.zpp_inner_zn.setup_a3();
			$r = me.zpp_inner_zn.wrap_a3;
			return $r;
		}(this)));
		var a4 = (me.zpp_inner_zn.b4 == null?null:me.zpp_inner_zn.b4.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a4 == null) me.zpp_inner_zn.setup_a4();
			$r = me.zpp_inner_zn.wrap_a4;
			return $r;
		}(this)));
		var n12 = a2.sub(a1);
		var n34 = a4.sub(a3);
		var nl12 = Math.sqrt((function($this) {
			var $r;
			n12.zpp_inner.validate();
			$r = n12.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			n12.zpp_inner.validate();
			$r = n12.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			n12.zpp_inner.validate();
			$r = n12.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			n12.zpp_inner.validate();
			$r = n12.zpp_inner.y;
			return $r;
		}(this)));
		var nl34 = Math.sqrt((function($this) {
			var $r;
			n34.zpp_inner.validate();
			$r = n34.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			n34.zpp_inner.validate();
			$r = n34.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			n34.zpp_inner.validate();
			$r = n34.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			n34.zpp_inner.validate();
			$r = n34.zpp_inner.y;
			return $r;
		}(this)));
		this.drawLink(g,a1,a2,n12,nl12,nl34 * this.ratio,1.0,16776960,65535);
		this.drawLink(g,a3,a4,n34,nl34,nl12,1 / this.ratio,65535,16711935);
		g.drawFilledCircle(a1,2,255);
		g.drawFilledCircle(a2,2,16711680);
		g.drawFilledCircle(a3,2,65280);
		g.drawFilledCircle(a4,2,16711935);
		a1.dispose();
		a2.dispose();
		a3.dispose();
		a4.dispose();
		n12.dispose();
		n34.dispose();
	}
	,drawLink: function(g,a1,a2,n,nl,bias,scale,ca,cb) {
		if(nl != 0) {
			n.muleq(1 / nl);
			var mid = a1.add(a2).muleq(0.5);
			var cmin = (this.jointMin - bias) * scale;
			if(cmin < 0) cmin = 0;
			var cmax = (this.jointMax - bias) * scale;
			if(cmax < 0) cmax = 0;
			var min1 = mid.sub(n.mul(cmin * 0.5,true));
			var min2 = mid.add(n.mul(cmin * 0.5,true));
			var max1 = mid.sub(n.mul(cmax * 0.5,true));
			var max2 = mid.add(n.mul(cmax * 0.5,true));
			g.drawLine(min1,min2,ca);
			g.drawLine(max1,min1,cb);
			g.drawLine(max2,min2,cb);
			if(!this.stiff) {
				if(nl > cmax) {
					g.drawSpring(max1,a1,cb);
					g.drawSpring(max2,a2,cb);
				} else if(nl < cmin) {
					g.drawSpring(min1,a1,ca);
					g.drawSpring(min2,a2,ca);
				}
			}
			mid.dispose();
			min1.dispose();
			min2.dispose();
			max1.dispose();
			max2.dispose();
		}
	}
	,__class__: zpp_nape.constraint.ZPP_PulleyJoint
});
zpp_nape.constraint.ZPP_UserConstraint = function(dim,velonly) {
	this.jOld = null;
	this.J = null;
	this.vec3 = null;
	this.Keff = null;
	this.jMax = 0.0;
	this.velonly = false;
	this.gamma = 0.0;
	this.soft = 0.0;
	this.y = null;
	this.L = null;
	this.stepped = false;
	this.bias = null;
	this.jAcc = null;
	this.dim = 0;
	this.bodies = null;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.bodies = new Array();
	this.dim = dim;
	this.velonly = velonly;
	this.jAcc = new Array();
	this.bias = new Array();
	this.L = new Array();
	this.J = new Array();
	this.jOld = new Array();
	this.y = new Array();
	this.Keff = new Array();
	this.vec3 = nape.geom.Vec3.get(0,0,0);
	var _g = 0;
	while(_g < dim) {
		var i = _g++;
		this.jAcc[i] = this.bias[i] = this.J[i] = this.jOld[i] = this.y[i] = 0.0;
		var _g1 = 0;
		while(_g1 < dim) {
			var j = _g1++;
			this.L[i * dim + j] = 0.0;
		}
	}
	this.stepped = false;
};
$hxClasses["zpp_nape.constraint.ZPP_UserConstraint"] = zpp_nape.constraint.ZPP_UserConstraint;
zpp_nape.constraint.ZPP_UserConstraint.__name__ = ["zpp_nape","constraint","ZPP_UserConstraint"];
zpp_nape.constraint.ZPP_UserConstraint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_UserConstraint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	bindVec2_invalidate: function(_) {
		this.outer_zn.__invalidate();
	}
	,addBody: function(b) {
		var match = null;
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var x = _g1[_g];
			++_g;
			if(x.body == b) {
				match = x;
				break;
			}
		}
		if(match == null) {
			this.bodies.push(new zpp_nape.constraint.ZPP_UserBody(1,b));
			if(this.active && this.space != null) {
				if(b != null) b.constraints.add(this);
			}
		} else match.cnt++;
	}
	,remBody: function(b) {
		var match = null;
		var bl = this.bodies.length | 0;
		var i = 0;
		while(i < bl) {
			var x = this.bodies[i];
			if(x.body == b) {
				x.cnt--;
				if(x.cnt == 0) {
					if(bl > 0) this.bodies[i] = this.bodies[bl - 1];
					this.bodies.pop();
					if(this.active && this.space != null) {
						if(b != null) b.constraints.remove(this);
					}
				}
				match = x;
				break;
			}
			i++;
		}
		return match != null;
	}
	,bodyImpulse: function(b) {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] = this.jAcc[i];
		}
		var ret = nape.geom.Vec3.get(0,0,0);
		if(this.stepped) this.outer_zn.__impulse(this.J,b.outer,ret);
		return ret;
	}
	,activeBodies: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body != null) b.body.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body != null) b.body.constraints.remove(this);
		}
	}
	,copy: function(dict,todo) {
		var ret = this.outer_zn.__copy();
		this.copyto(ret);
		throw "not done yet";
		return ret;
	}
	,validate: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.space != this.space) throw "Error: Constraints must have each body within the same sapce to which the constraint has been assigned";
		}
		this.outer_zn.__validate();
	}
	,wake_connected: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) b.body.wake();
		}
	}
	,forest: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
				var xr;
				if(b.body.component == b.body.component.parent) xr = b.body.component; else {
					var obj = b.body.component;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt1 = stack.parent;
						stack.parent = obj;
						stack = nxt1;
					}
					xr = obj;
				}
				var yr;
				if(this.component == this.component.parent) yr = this.component; else {
					var obj1 = this.component;
					var stack1 = null;
					while(obj1 != obj1.parent) {
						var nxt2 = obj1.parent;
						obj1.parent = stack1;
						stack1 = obj1;
						obj1 = nxt2;
					}
					while(stack1 != null) {
						var nxt3 = stack1.parent;
						stack1.parent = obj1;
						stack1 = nxt3;
					}
					yr = obj1;
				}
				if(xr != yr) {
					if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
						yr.parent = xr;
						xr.rank++;
					}
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		var ret = false;
		var bl = this.bodies.length | 0;
		var _g = 0;
		while(_g < bl) {
			var bi = _g++;
			var b = this.bodies[bi].body;
			var _g1 = bi + 1;
			while(_g1 < bl) {
				var ci = _g1++;
				var c = this.bodies[ci].body;
				if(b.id == id && c.id == di || b.id == di && c.id == id) {
					ret = true;
					break;
				}
			}
			if(ret) break;
		}
		return ret;
	}
	,broken: function() {
		this.outer_zn.__broken();
	}
	,clearcache: function() {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.jAcc[i] = 0.0;
		}
		this.pre_dt = -1.0;
	}
	,lsq: function(v) {
		var sum = 0.0;
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			sum += v[i] * v[i];
		}
		return sum;
	}
	,_clamp: function(v,max) {
		var x = this.lsq(v);
		if(x > max * max) {
			var scale = max / Math.sqrt(x);
			var _g1 = 0;
			var _g = this.dim;
			while(_g1 < _g) {
				var i = _g1++;
				v[i] *= scale;
			}
		}
	}
	,solve: function(m) {
		var ind = 0;
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var j = _g1++;
			var sum = 0.0;
			var _g3 = 0;
			var _g2 = j - 1;
			while(_g3 < _g2) {
				var k = _g3++;
				sum += this.L[j * this.dim + k] * this.L[j * this.dim + k];
			}
			var rec = Math.sqrt(m[ind++] - sum);
			this.L[j * this.dim + j] = rec;
			if(rec != 0) {
				rec = 1.0 / rec;
				var _g31 = j + 1;
				var _g21 = this.dim;
				while(_g31 < _g21) {
					var i = _g31++;
					var sum1 = 0.0;
					var _g5 = 0;
					var _g4 = j - 1;
					while(_g5 < _g4) {
						var k1 = _g5++;
						sum1 += this.L[i * this.dim + k1] * this.L[j * this.dim + k1];
					}
					this.L[i * this.dim + j] = rec * (m[ind++] - sum1);
				}
			} else {
				var _g32 = j + 1;
				var _g22 = this.dim;
				while(_g32 < _g22) {
					var i1 = _g32++;
					this.L[i1 * this.dim + j] = 0.0;
				}
				ind += this.dim - j - 1;
			}
		}
		return this.L;
	}
	,transform: function(L,x) {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			var sum = x[i];
			var lii = L[i * this.dim + i];
			if(lii != 0) {
				var _g2 = 0;
				while(_g2 < i) {
					var k = _g2++;
					sum -= L[i * this.dim + k] * this.y[k];
				}
				this.y[i] = sum / lii;
			} else this.y[i] = 0.0;
		}
		var _g11 = 0;
		var _g3 = this.dim;
		while(_g11 < _g3) {
			var ix = _g11++;
			var i1 = this.dim - 1 - ix;
			var lii1 = L[i1 * this.dim + i1];
			if(lii1 != 0) {
				var sum1 = this.y[i1];
				var _g31 = i1 + 1;
				var _g21 = this.dim;
				while(_g31 < _g21) {
					var k1 = _g31++;
					sum1 -= L[k1 * this.dim + i1] * x[k1];
				}
				x[i1] = sum1 / lii1;
			} else x[i1] = 0.0;
		}
	}
	,preStep: function(dt) {
		this.outer_zn.__validate();
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.outer_zn.__prepare();
		this.outer_zn.__eff_mass(this.Keff);
		this.L = this.solve(this.Keff);
		if(!this.stiff && !this.velonly) {
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			this.soft = ig;
			this.outer_zn.__position(this.bias);
			if(this.breakUnderError && this.lsq(this.bias) > this.maxError * this.maxError) return true;
			var _g1 = 0;
			var _g = this.dim;
			while(_g1 < _g) {
				var i = _g1++;
				this.bias[i] *= -biasCoef;
			}
			this._clamp(this.bias,this.maxError);
		} else {
			var _g11 = 0;
			var _g2 = this.dim;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.bias[i1] = 0.0;
			}
			this.gamma = 0.0;
			this.soft = 1.0;
		}
		var _g12 = 0;
		var _g3 = this.dim;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this.jAcc[i2] *= dtratio;
		}
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var bs = _g1[_g];
			++_g;
			var b = bs.body;
			this.outer_zn.__impulse(this.jAcc,b.outer,this.vec3);
			var t = b.imass;
			b.velx += this.vec3.get_x() * t;
			b.vely += this.vec3.get_y() * t;
			b.angvel += this.vec3.get_z() * b.iinertia;
		}
	}
	,applyImpulseVel: function() {
		this.outer_zn.__velocity(this.J);
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] = this.bias[i] - this.J[i];
		}
		this.transform(this.L,this.J);
		var _g11 = 0;
		var _g2 = this.dim;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.jOld[i1] = this.jAcc[i1];
			this.jAcc[i1] += this.J[i1] = this.J[i1] * this.soft - this.jAcc[i1] * this.gamma;
		}
		this.outer_zn.__clamp(this.jAcc);
		if((this.breakUnderForce || !this.stiff) && this.lsq(this.jAcc) > this.jMax * this.jMax) {
			if(this.breakUnderForce) return true; else if(!this.stiff) this._clamp(this.jAcc,this.jMax);
		}
		var _g12 = 0;
		var _g3 = this.dim;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this.J[i2] = this.jAcc[i2] - this.jOld[i2];
		}
		var _g4 = 0;
		var _g13 = this.bodies;
		while(_g4 < _g13.length) {
			var bs = _g13[_g4];
			++_g4;
			var b = bs.body;
			this.outer_zn.__impulse(this.J,b.outer,this.vec3);
			var t = b.imass;
			b.velx += this.vec3.get_x() * t;
			b.vely += this.vec3.get_y() * t;
			b.angvel += this.vec3.get_z() * b.iinertia;
		}
		return false;
	}
	,applyImpulsePos: function() {
		if(this.velonly) return false;
		this.outer_zn.__prepare();
		this.outer_zn.__position(this.J);
		var lj = this.lsq(this.J);
		if(this.breakUnderError && lj > this.maxError * this.maxError) return true; else if(lj < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] *= -1;
		}
		this.outer_zn.__eff_mass(this.Keff);
		this.transform(this.solve(this.Keff),this.J);
		this.outer_zn.__clamp(this.J);
		var _g2 = 0;
		var _g11 = this.bodies;
		while(_g2 < _g11.length) {
			var bs = _g11[_g2];
			++_g2;
			var b = bs.body;
			this.outer_zn.__impulse(this.J,b.outer,this.vec3);
			var t = b.imass;
			b.posx += this.vec3.get_x() * t;
			b.posy += this.vec3.get_y() * t;
			b.delta_rot(this.vec3.get_z() * b.iinertia);
		}
		return false;
	}
	,draw: function(g) {
		this.outer_zn.__draw(g);
	}
	,__class__: zpp_nape.constraint.ZPP_UserConstraint
});
zpp_nape.constraint.ZPP_UserBody = function(cnt,body) {
	this.body = null;
	this.cnt = 0;
	this.cnt = cnt;
	this.body = body;
};
$hxClasses["zpp_nape.constraint.ZPP_UserBody"] = zpp_nape.constraint.ZPP_UserBody;
zpp_nape.constraint.ZPP_UserBody.__name__ = ["zpp_nape","constraint","ZPP_UserBody"];
zpp_nape.constraint.ZPP_UserBody.prototype = {
	__class__: zpp_nape.constraint.ZPP_UserBody
};
zpp_nape.constraint.ZPP_WeldJoint = function() {
	this.stepped = false;
	this.biasz = 0.0;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccz = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassf = 0.0;
	this.kMasse = 0.0;
	this.kMassc = 0.0;
	this.kMassd = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.phase = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.phase = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jAccz = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_WeldJoint"] = zpp_nape.constraint.ZPP_WeldJoint;
zpp_nape.constraint.ZPP_WeldJoint.__name__ = ["zpp_nape","constraint","ZPP_WeldJoint"];
zpp_nape.constraint.ZPP_WeldJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_WeldJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape.geom.Vec3.get(-this.jAccx,-this.jAccy,-(this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz)); else return nape.geom.Vec3.get(this.jAccx,this.jAccy,this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.PivotJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2());
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: AngleJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: WeldJoint cannot be simulated with body1 == body2";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.jAccz = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var m = this.b1.smass + this.b2.smass;
		this.kMassa = m;
		this.kMassb = 0;
		this.kMassd = m;
		this.kMassc = 0;
		this.kMasse = 0;
		this.kMassf = 0;
		if(this.b1.sinertia != 0) {
			var X = this.a1relx * this.b1.sinertia;
			var Y = this.a1rely * this.b1.sinertia;
			this.kMassa += Y * this.a1rely;
			this.kMassb += -Y * this.a1relx;
			this.kMassd += X * this.a1relx;
			this.kMassc += -Y;
			this.kMasse += X;
			this.kMassf += this.b1.sinertia;
		}
		if(this.b2.sinertia != 0) {
			var X1 = this.a2relx * this.b2.sinertia;
			var Y1 = this.a2rely * this.b2.sinertia;
			this.kMassa += Y1 * this.a2rely;
			this.kMassb += -Y1 * this.a2relx;
			this.kMassd += X1 * this.a2relx;
			this.kMassc += -Y1;
			this.kMasse += X1;
			this.kMassf += this.b2.sinertia;
		}
		var flag;
		var det = this.kMassa * (this.kMassd * this.kMassf - this.kMasse * this.kMasse) + this.kMassb * (this.kMassc * this.kMasse - this.kMassb * this.kMassf) + this.kMassc * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
		if(det != det) {
			this.kMassa = 0;
			this.kMassb = 0;
			this.kMassd = 0;
			this.kMassc = 0;
			this.kMasse = 0;
			this.kMassf = 0;
			flag = 7;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassd != 0) this.kMassd = 1 / this.kMassd; else {
				this.kMassd = 0;
				flag1 |= 2;
			}
			if(this.kMassf != 0) this.kMassf = 1 / this.kMassf; else {
				this.kMassf = 0;
				flag1 |= 4;
			}
			this.kMassb = this.kMassc = this.kMasse = 0.0;
			flag = flag1;
		} else {
			det = 1 / det;
			var A = det * (this.kMassd * this.kMassf - this.kMasse * this.kMasse);
			var B = det * (this.kMasse * this.kMassc - this.kMassb * this.kMassf);
			var D = det * (this.kMassa * this.kMassf - this.kMassc * this.kMassc);
			var C = det * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
			var E = det * (this.kMassb * this.kMassc - this.kMassa * this.kMasse);
			var F = det * (this.kMassa * this.kMassd - this.kMassb * this.kMassb);
			this.kMassa = A;
			this.kMassb = B;
			this.kMassd = D;
			this.kMassc = C;
			this.kMasse = E;
			this.kMassf = F;
			flag = 0;
		}
		if((flag & 1) != 0) this.jAccx = 0;
		if((flag & 2) != 0) this.jAccy = 0;
		if((flag & 4) != 0) this.jAccz = 0;
		if(!this.stiff) {
			var biasCoef;
			var X2;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			X2 = ig;
			this.kMassa *= X2;
			this.kMassb *= X2;
			this.kMassd *= X2;
			this.kMassc *= X2;
			this.kMasse *= X2;
			this.kMassf *= X2;
			this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
			this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
			this.biasz = this.b2.rot - this.b1.rot - this.phase;
			if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz > this.maxError * this.maxError) return true;
			var t = -biasCoef;
			var t1 = t;
			this.biasx *= t1;
			this.biasy *= t1;
			this.biasz *= t;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz;
			if(ls > t2 * t2) {
				var t3 = t2 * (1.0 / Math.sqrt(ls));
				var t4 = t3;
				this.biasx *= t4;
				this.biasy *= t4;
				this.biasz *= t3;
			}
		} else {
			this.biasx = 0;
			this.biasy = 0;
			this.biasz = 0;
			this.gamma = 0;
		}
		var t5 = dtratio;
		var t6 = t5;
		this.jAccx *= t6;
		this.jAccy *= t6;
		this.jAccz *= t5;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.jAccx * t;
		this.b1.vely -= this.jAccy * t;
		var t1 = this.b2.imass;
		this.b2.velx += this.jAccx * t1;
		this.b2.vely += this.jAccy * t1;
		this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz) * this.b1.iinertia;
		this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		var Ez = 0.0;
		Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
		Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
		Ez = this.b2.angvel + this.b2.kinangvel - this.b1.angvel - this.b1.kinangvel;
		var Jx = 0.0;
		var Jy = 0.0;
		var Jz = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		Jz = this.biasz - Ez;
		var X = this.kMassa * Jx + this.kMassb * Jy + this.kMassc * Jz;
		var Y = this.kMassb * Jx + this.kMassd * Jy + this.kMasse * Jz;
		Jz = this.kMassc * Jx + this.kMasse * Jy + this.kMassf * Jz;
		Jx = X;
		Jy = Y;
		var t = this.gamma;
		var t1 = t;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		Jz -= this.jAccz * t;
		var jOldx = 0.0;
		var jOldy = 0.0;
		var jOldz = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		jOldz = this.jAccz;
		var t2 = 1;
		var t3 = t2;
		this.jAccx += Jx * t3;
		this.jAccy += Jy * t3;
		this.jAccz += Jz * t2;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz > this.jMax * this.jMax) return true;
		} else if(!this.stiff) {
			var t4 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz;
			if(ls > t4 * t4) {
				var t5 = t4 * (1.0 / Math.sqrt(ls));
				var t6 = t5;
				this.jAccx *= t6;
				this.jAccy *= t6;
				this.jAccz *= t5;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		Jz = this.jAccz - jOldz;
		var t7 = this.b1.imass;
		this.b1.velx -= Jx * t7;
		this.b1.vely -= Jy * t7;
		var t8 = this.b2.imass;
		this.b2.velx += Jx * t8;
		this.b2.vely += Jy * t8;
		this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely + Jz) * this.b1.iinertia;
		this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely + Jz) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var Ex = 0.0;
		var Ey = 0.0;
		var Ez = 0.0;
		Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
		Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
		Ez = this.b2.rot - this.b1.rot - this.phase;
		var Jx = 0.0;
		var Jy = 0.0;
		var Jz = 0.0;
		if(this.breakUnderError && Ex * Ex + Ey * Ey + Ez * Ez > this.maxError * this.maxError) return true;
		var cont = true;
		if(Ex * Ex + Ey * Ey < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) {
			cont = false;
			Ex = 0;
			Ey = 0;
		}
		if(Ez * Ez < zpp_nape.util.ZPP_Math.sqr(nape.Config.constraintAngularSlop)) {
			if(!cont) return false; else Ez = 0;
		}
		var t = 0.5;
		var t1 = t;
		Ex *= t1;
		Ey *= t1;
		Ez *= t;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape.Config.epsilon) {
				k = 0.75 / k;
				Jx = -Ex * k;
				Jy = -Ey * k;
				var t2 = 20;
				var ls = Jx * Jx + Jy * Jy;
				if(ls > t2 * t2) {
					var t3 = t2 * (1.0 / Math.sqrt(ls));
					Jx *= t3;
					Jy *= t3;
				}
				var t4 = this.b1.imass;
				this.b1.posx -= Jx * t4;
				this.b1.posy -= Jy * t4;
				var t5 = this.b2.imass;
				this.b2.posx += Jx * t5;
				this.b2.posy += Jy * t5;
				Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
				Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
				Ez = this.b2.rot - this.b1.rot - this.phase;
				var t6 = 0.5;
				var t7 = t6;
				Ex *= t7;
				Ey *= t7;
				Ez *= t6;
			}
		}
		var Ka = 0.0;
		var Kb = 0.0;
		var Kd = 0.0;
		var Kc = 0.0;
		var Ke = 0.0;
		var Kf = 0.0;
		var m = this.b1.smass + this.b2.smass;
		Ka = m;
		Kb = 0;
		Kd = m;
		Kc = 0;
		Ke = 0;
		Kf = 0;
		if(this.b1.sinertia != 0) {
			var X = r1x * this.b1.sinertia;
			var Y = r1y * this.b1.sinertia;
			Ka += Y * r1y;
			Kb += -Y * r1x;
			Kd += X * r1x;
			Kc += -Y;
			Ke += X;
			Kf += this.b1.sinertia;
		}
		if(this.b2.sinertia != 0) {
			var X1 = r2x * this.b2.sinertia;
			var Y1 = r2y * this.b2.sinertia;
			Ka += Y1 * r2y;
			Kb += -Y1 * r2x;
			Kd += X1 * r2x;
			Kc += -Y1;
			Ke += X1;
			Kf += this.b2.sinertia;
		}
		Jx = -Ex;
		Jy = -Ey;
		Jz = -Ez;
		var t8 = 6;
		var ls1 = Jx * Jx + Jy * Jy;
		if(ls1 > t8 * t8) {
			var t9 = t8 * (1.0 / Math.sqrt(ls1));
			Jx *= t9;
			Jy *= t9;
		}
		zpp_nape.util.ZPP_Math.clamp(Jz,-0.25,0.25);
		var det = Ka * (Kd * Kf - Ke * Ke) + Kb * (Kc * Ke - Kb * Kf) + Kc * (Kb * Ke - Kc * Kd);
		if(det != det) Jx = Jy = Jz = 0; else if(det == 0) {
			if(Ka != 0) Jx /= Ka; else Jx = 0;
			if(Kd != 0) Jy /= Kd; else Jy = 0;
			if(Kf != 0) Jz /= Kf; else Jz = 0;
		} else {
			det = 1 / det;
			var B = Ke * Kc - Kb * Kf;
			var C = Kb * Ke - Kc * Kd;
			var E = Kb * Kc - Ka * Ke;
			var X2 = det * (Jx * (Kd * Kf - Ke * Ke) + Jy * B + Jz * C);
			var Y2 = det * (Jx * B + Jy * (Ka * Kf - Kc * Kc) + Jz * E);
			Jz = det * (Jx * C + Jy * E + Jz * (Ka * Kd - Kb * Kb));
			Jx = X2;
			Jy = Y2;
		}
		var t10 = this.b1.imass;
		this.b1.posx -= Jx * t10;
		this.b1.posy -= Jy * t10;
		var t11 = this.b2.imass;
		this.b2.posx += Jx * t11;
		this.b2.posy += Jy * t11;
		this.b1.delta_rot(-(Jy * r1x - Jx * r1y + Jz) * this.b1.iinertia);
		this.b2.delta_rot((Jy * r2x - Jx * r2y + Jz) * this.b2.iinertia);
		return false;
	}
	,draw: function(g) {
		var me = this.outer_zn;
		var a1 = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a1 == null) me.zpp_inner_zn.setup_a1();
			$r = me.zpp_inner_zn.wrap_a1;
			return $r;
		}(this)));
		var a2 = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a2 == null) me.zpp_inner_zn.setup_a2();
			$r = me.zpp_inner_zn.wrap_a2;
			return $r;
		}(this)));
		if(!this.stiff) {
			var n = a2.sub(a1);
			var nl = Math.sqrt((function($this) {
				var $r;
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) * (function($this) {
				var $r;
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)) * (function($this) {
				var $r;
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)));
			if(nl != 0) g.drawSpring(a1,a2,16711935);
			n.dispose();
			var minrad = 10;
			var delrad = 5 / Math.PI / 2;
			if((me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer) != (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_space().get_world()) {
				var max = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot - me.zpp_inner_zn.phase;
				var min = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot;
				if(min > max) {
					var t = min;
					min = max;
					max = t;
				}
				zpp_nape.constraint.ZPP_AngleDraw.drawSpiralSpring(g,(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_position(),min,max,minrad + (min - min) * delrad,minrad + (max - min) * delrad,16711808);
				zpp_nape.constraint.ZPP_AngleDraw.indicator(g,(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_position(),(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot,minrad + ((me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot - min) * delrad,16711808);
			}
			if((me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer) != (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_space().get_world()) {
				var max1 = me.zpp_inner_zn.phase + (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot;
				var min1 = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot;
				if(min1 > max1) {
					var t1 = min1;
					min1 = max1;
					max1 = t1;
				}
				zpp_nape.constraint.ZPP_AngleDraw.drawSpiralSpring(g,(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_position(),min1,max1,minrad + (min1 - min1) * delrad,minrad + (max1 - min1) * delrad,8388863);
				zpp_nape.constraint.ZPP_AngleDraw.indicator(g,(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_position(),(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot,minrad + ((me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot - min1) * delrad,8388863);
			}
		}
		g.drawFilledCircle(a1,2,255);
		g.drawFilledCircle(a2,2,16711680);
		a1.dispose();
		a2.dispose();
	}
	,__class__: zpp_nape.constraint.ZPP_WeldJoint
});
zpp_nape.dynamics = {};
zpp_nape.dynamics.ZPP_Arbiter = function() {
	this.sensorarb = null;
	this.fluidarb = null;
	this.colarb = null;
	this.type = 0;
	this.pair = null;
	this.ws2 = null;
	this.ws1 = null;
	this.b2 = null;
	this.b1 = null;
	this.invalidated = false;
	this.immState = 0;
	this.fresh = false;
	this.continuous = false;
	this.presentable = false;
	this.intchange = false;
	this.present = 0;
	this.sleeping = false;
	this.cleared = false;
	this.active = false;
	this.endGenerated = 0;
	this.sleep_stamp = 0;
	this.up_stamp = 0;
	this.stamp = 0;
	this.di = 0;
	this.id = 0;
	this.hnext = null;
	this.outer = null;
};
$hxClasses["zpp_nape.dynamics.ZPP_Arbiter"] = zpp_nape.dynamics.ZPP_Arbiter;
zpp_nape.dynamics.ZPP_Arbiter.__name__ = ["zpp_nape","dynamics","ZPP_Arbiter"];
zpp_nape.dynamics.ZPP_Arbiter.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_nape.dynamics.ZPP_Arbiter.internal = true;
			if(this.type == zpp_nape.dynamics.ZPP_Arbiter.COL) {
				this.colarb.outer_zn = new nape.dynamics.CollisionArbiter();
				this.outer = this.colarb.outer_zn;
			} else if(this.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) {
				this.fluidarb.outer_zn = new nape.dynamics.FluidArbiter();
				this.outer = this.fluidarb.outer_zn;
			} else this.outer = new nape.dynamics.Arbiter();
			this.outer.zpp_inner = this;
			zpp_nape.dynamics.ZPP_Arbiter.internal = false;
		}
		return this.outer;
	}
	,inactiveme: function() {
		return !this.active;
	}
	,acting: function() {
		return this.active && (this.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0;
	}
	,swap_features: function() {
		var t = this.b1;
		this.b1 = this.b2;
		this.b2 = t;
		var t1 = this.ws1;
		this.ws1 = this.ws2;
		this.ws2 = t1;
		var t2 = this.colarb.s1;
		this.colarb.s1 = this.colarb.s2;
		this.colarb.s2 = t2;
	}
	,lazyRetire: function(s,b) {
		this.cleared = true;
		if(b == null || this.b2 == b) this.b1.arbiters.inlined_try_remove(this);
		if(b == null || this.b1 == b) this.b2.arbiters.inlined_try_remove(this);
		if(this.pair != null) {
			this.pair.arb = null;
			this.pair = null;
		}
		this.active = false;
		s.f_arbiters.modified = true;
	}
	,sup_assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
	}
	,sup_retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
	}
	,__class__: zpp_nape.dynamics.ZPP_Arbiter
};
zpp_nape.dynamics.ZPP_SensorArbiter = function() {
	this.next = null;
	zpp_nape.dynamics.ZPP_Arbiter.call(this);
	this.type = zpp_nape.dynamics.ZPP_Arbiter.SENSOR;
	this.sensorarb = this;
};
$hxClasses["zpp_nape.dynamics.ZPP_SensorArbiter"] = zpp_nape.dynamics.ZPP_SensorArbiter;
zpp_nape.dynamics.ZPP_SensorArbiter.__name__ = ["zpp_nape","dynamics","ZPP_SensorArbiter"];
zpp_nape.dynamics.ZPP_SensorArbiter.__super__ = zpp_nape.dynamics.ZPP_Arbiter;
zpp_nape.dynamics.ZPP_SensorArbiter.prototype = $extend(zpp_nape.dynamics.ZPP_Arbiter.prototype,{
	alloc: function() {
	}
	,free: function() {
	}
	,assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
	}
	,retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
		var o = this;
		o.next = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
		zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = o;
	}
	,makemutable: function() {
	}
	,makeimmutable: function() {
	}
	,__class__: zpp_nape.dynamics.ZPP_SensorArbiter
});
zpp_nape.dynamics.ZPP_FluidArbiter = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.wrap_position = null;
	this.buoyy = 0.0;
	this.buoyx = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.lgamma = 0.0;
	this.dampy = 0.0;
	this.dampx = 0.0;
	this.vMassc = 0.0;
	this.vMassb = 0.0;
	this.vMassa = 0.0;
	this.agamma = 0.0;
	this.adamp = 0.0;
	this.wMass = 0.0;
	this.nodrag = false;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
	this.overlap = 0.0;
	this.centroidy = 0.0;
	this.centroidx = 0.0;
	this.next = null;
	this.outer_zn = null;
	zpp_nape.dynamics.ZPP_Arbiter.call(this);
	this.type = zpp_nape.dynamics.ZPP_Arbiter.FLUID;
	this.fluidarb = this;
	this.buoyx = 0;
	this.buoyy = 0;
	this.pre_dt = -1.0;
};
$hxClasses["zpp_nape.dynamics.ZPP_FluidArbiter"] = zpp_nape.dynamics.ZPP_FluidArbiter;
zpp_nape.dynamics.ZPP_FluidArbiter.__name__ = ["zpp_nape","dynamics","ZPP_FluidArbiter"];
zpp_nape.dynamics.ZPP_FluidArbiter.__super__ = zpp_nape.dynamics.ZPP_Arbiter;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype = $extend(zpp_nape.dynamics.ZPP_Arbiter.prototype,{
	alloc: function() {
	}
	,free: function() {
	}
	,position_validate: function() {
		this.wrap_position.zpp_inner.x = this.centroidx;
		this.wrap_position.zpp_inner.y = this.centroidy;
	}
	,position_invalidate: function(x) {
		this.centroidx = x.x;
		this.centroidy = x.y;
	}
	,getposition: function() {
		this.wrap_position = nape.geom.Vec2.get(null,null,null);
		this.wrap_position.zpp_inner._inuse = true;
		this.wrap_position.zpp_inner._immutable = !this.mutable;
		this.wrap_position.zpp_inner._validate = $bind(this,this.position_validate);
		this.wrap_position.zpp_inner._invalidate = $bind(this,this.position_invalidate);
	}
	,assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
		this.nx = 0;
		this.ny = 1;
		this.dampx = 0;
		this.dampy = 0;
		this.adamp = 0.0;
	}
	,retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
		var o = this;
		o.next = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
		zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = o;
		this.pre_dt = -1.0;
	}
	,makemutable: function() {
		this.mutable = true;
		if(this.wrap_position != null) this.wrap_position.zpp_inner._immutable = false;
	}
	,makeimmutable: function() {
		this.mutable = false;
		if(this.wrap_position != null) this.wrap_position.zpp_inner._immutable = true;
	}
	,inject: function(area,cx,cy) {
		this.overlap = area;
		this.centroidx = cx;
		this.centroidy = cy;
	}
	,preStep: function(s,dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.r1x = this.centroidx - this.b1.posx;
		this.r1y = this.centroidy - this.b1.posy;
		this.r2x = this.centroidx - this.b2.posx;
		this.r2y = this.centroidy - this.b2.posy;
		var g1x = 0.0;
		var g1y = 0.0;
		if(this.ws1.fluidEnabled && this.ws1.fluidProperties.wrap_gravity != null) {
			g1x = this.ws1.fluidProperties.gravityx;
			g1y = this.ws1.fluidProperties.gravityy;
		} else {
			g1x = s.gravityx;
			g1y = s.gravityy;
		}
		var g2x = 0.0;
		var g2y = 0.0;
		if(this.ws2.fluidEnabled && this.ws2.fluidProperties.wrap_gravity != null) {
			g2x = this.ws2.fluidProperties.gravityx;
			g2y = this.ws2.fluidProperties.gravityy;
		} else {
			g2x = s.gravityx;
			g2y = s.gravityy;
		}
		var buoyx = 0;
		var buoyy = 0;
		if(this.ws1.fluidEnabled && this.ws2.fluidEnabled) {
			var mass1 = this.overlap * this.ws1.fluidProperties.density;
			var mass2 = this.overlap * this.ws2.fluidProperties.density;
			if(mass1 > mass2) {
				var t = mass1 + mass2;
				buoyx -= g1x * t;
				buoyy -= g1y * t;
			} else if(mass1 < mass2) {
				var t1 = mass1 + mass2;
				buoyx += g2x * t1;
				buoyy += g2y * t1;
			} else {
				var gx = 0.0;
				var gy = 0.0;
				gx = g1x + g2x;
				gy = g1y + g2y;
				var t2 = 0.5;
				gx *= t2;
				gy *= t2;
				if(this.ws1.worldCOMx * gx + this.ws1.worldCOMy * gy > this.ws2.worldCOMx * gx + this.ws2.worldCOMy * gy) {
					var t3 = mass1 + mass2;
					buoyx -= gx * t3;
					buoyy -= gy * t3;
				} else {
					var t4 = mass1 + mass2;
					buoyx += gx * t4;
					buoyy += gy * t4;
				}
			}
		} else if(this.ws1.fluidEnabled) {
			var mass = this.overlap * this.ws1.fluidProperties.density;
			var t5 = mass;
			buoyx -= g1x * t5;
			buoyy -= g1y * t5;
		} else if(this.ws2.fluidEnabled) {
			var mass3 = this.overlap * this.ws2.fluidProperties.density;
			var t6 = mass3;
			buoyx += g2x * t6;
			buoyy += g2y * t6;
		}
		var t7 = dt;
		buoyx *= t7;
		buoyy *= t7;
		this.buoyx = buoyx;
		this.buoyy = buoyy;
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var t8 = this.b1.imass;
			this.b1.velx -= buoyx * t8;
			this.b1.vely -= buoyy * t8;
			this.b1.angvel -= (buoyy * this.r1x - buoyx * this.r1y) * this.b1.iinertia;
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var t9 = this.b2.imass;
			this.b2.velx += buoyx * t9;
			this.b2.vely += buoyy * t9;
			this.b2.angvel += (buoyy * this.r2x - buoyx * this.r2y) * this.b2.iinertia;
		}
		if((!this.ws1.fluidEnabled || this.ws1.fluidProperties.viscosity == 0) && (!this.ws2.fluidEnabled || this.ws2.fluidProperties.viscosity == 0)) {
			this.nodrag = true;
			this.dampx = 0;
			this.dampy = 0;
			this.adamp = 0;
		} else {
			this.nodrag = false;
			var tViscosity = 0.0;
			if(this.ws1.fluidEnabled) {
				this.ws2.validate_angDrag();
				tViscosity += this.ws1.fluidProperties.viscosity * this.ws2.angDrag * this.overlap / this.ws2.area;
			}
			if(this.ws2.fluidEnabled) {
				this.ws1.validate_angDrag();
				tViscosity += this.ws2.fluidProperties.viscosity * this.ws1.angDrag * this.overlap / this.ws1.area;
			}
			if(tViscosity != 0) {
				var iSum = this.b1.sinertia + this.b2.sinertia;
				if(iSum != 0) this.wMass = 1 / iSum; else this.wMass = 0.0;
				var biasCoef;
				tViscosity *= 0.0004;
				var omega = 2 * Math.PI * tViscosity;
				this.agamma = 1 / (dt * omega * (2 + omega * dt));
				var ig = 1 / (1 + this.agamma);
				biasCoef = dt * omega * omega * this.agamma;
				this.agamma *= ig;
				this.wMass *= ig;
			} else {
				this.wMass = 0.0;
				this.agamma = 0.0;
			}
			var vrnx = this.b2.velx + this.b2.kinvelx - this.r2y * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.r1y * (this.b2.angvel + this.b2.kinangvel));
			var vrny = this.b2.vely + this.b2.kinvely + this.r2x * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.r1x * (this.b1.angvel + this.b1.kinangvel));
			if(vrnx * vrnx + vrny * vrny < nape.Config.epsilon * nape.Config.epsilon) {
			} else {
				var d = vrnx * vrnx + vrny * vrny;
				var imag = 1.0 / Math.sqrt(d);
				var t10 = imag;
				vrnx *= t10;
				vrny *= t10;
				this.nx = vrnx;
				this.ny = vrny;
			}
			var tViscosity1 = 0.0;
			if(this.ws1.fluidEnabled) {
				var f = -this.ws1.fluidProperties.viscosity * this.overlap / this.ws2.area;
				if(this.ws2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) tViscosity1 -= f * this.ws2.circle.radius * nape.Config.fluidLinearDrag / (2 * this.ws2.circle.radius * Math.PI); else {
					var poly = this.ws2.polygon;
					var bord = 0.0;
					var acc = 0.0;
					var cx_ite = poly.edges.head;
					while(cx_ite != null) {
						var ex = cx_ite.elt;
						bord += ex.length;
						var fact = f * ex.length * (ex.gnormx * this.nx + ex.gnormy * this.ny);
						if(fact > 0) fact = fact *= -nape.Config.fluidVacuumDrag;
						acc -= fact * 0.5 * nape.Config.fluidLinearDrag;
						cx_ite = cx_ite.next;
					}
					tViscosity1 += acc / bord;
				}
			}
			if(this.ws2.fluidEnabled) {
				var f1 = -this.ws2.fluidProperties.viscosity * this.overlap / this.ws1.area;
				if(this.ws1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) tViscosity1 -= f1 * this.ws1.circle.radius * nape.Config.fluidLinearDrag / (2 * this.ws1.circle.radius * Math.PI); else {
					var poly1 = this.ws1.polygon;
					var bord1 = 0.0;
					var acc1 = 0.0;
					var cx_ite1 = poly1.edges.head;
					while(cx_ite1 != null) {
						var ex1 = cx_ite1.elt;
						bord1 += ex1.length;
						var fact1 = f1 * ex1.length * (ex1.gnormx * this.nx + ex1.gnormy * this.ny);
						if(fact1 > 0) fact1 = fact1 *= -nape.Config.fluidVacuumDrag;
						acc1 -= fact1 * 0.5 * nape.Config.fluidLinearDrag;
						cx_ite1 = cx_ite1.next;
					}
					tViscosity1 += acc1 / bord1;
				}
			}
			if(tViscosity1 != 0) {
				var m = this.b1.smass + this.b2.smass;
				var Ka = 0.0;
				var Kb = 0.0;
				var Kc = 0.0;
				Ka = m;
				Kb = 0;
				Kc = m;
				if(this.b1.sinertia != 0) {
					var X = this.r1x * this.b1.sinertia;
					var Y = this.r1y * this.b1.sinertia;
					Ka += Y * this.r1y;
					Kb += -Y * this.r1x;
					Kc += X * this.r1x;
				}
				if(this.b2.sinertia != 0) {
					var X1 = this.r2x * this.b2.sinertia;
					var Y1 = this.r2y * this.b2.sinertia;
					Ka += Y1 * this.r2y;
					Kb += -Y1 * this.r2x;
					Kc += X1 * this.r2x;
				}
				var det = Ka * Kc - Kb * Kb;
				if(det != det) {
					Ka = Kb = Kc = 0;
					3;
				} else if(det == 0) {
					var flag = 0;
					if(Ka != 0) Ka = 1 / Ka; else {
						Ka = 0;
						flag |= 1;
					}
					if(Kc != 0) Kc = 1 / Kc; else {
						Kc = 0;
						flag |= 2;
					}
					Kb = 0;
					flag;
				} else {
					det = 1 / det;
					var t11 = Kc * det;
					Kc = Ka * det;
					Ka = t11;
					Kb *= -det;
					0;
				}
				this.vMassa = Ka;
				this.vMassb = Kb;
				this.vMassc = Kc;
				var biasCoef1;
				var X2;
				var omega1 = 2 * Math.PI * tViscosity1;
				this.lgamma = 1 / (dt * omega1 * (2 + omega1 * dt));
				var ig1 = 1 / (1 + this.lgamma);
				biasCoef1 = dt * omega1 * omega1 * this.lgamma;
				this.lgamma *= ig1;
				X2 = ig1;
				this.vMassa *= X2;
				this.vMassb *= X2;
				this.vMassc *= X2;
			} else {
				this.vMassa = 0;
				this.vMassb = 0;
				this.vMassc = 0;
				this.lgamma = 0.0;
			}
		}
		var t12 = dtratio;
		this.dampx *= t12;
		this.dampy *= t12;
		this.adamp *= dtratio;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.dampx * t;
		this.b1.vely -= this.dampy * t;
		var t1 = this.b2.imass;
		this.b2.velx += this.dampx * t1;
		this.b2.vely += this.dampy * t1;
		this.b1.angvel -= this.b1.iinertia * (this.dampy * this.r1x - this.dampx * this.r1y);
		this.b2.angvel += this.b2.iinertia * (this.dampy * this.r2x - this.dampx * this.r2y);
		this.b1.angvel -= this.adamp * this.b1.iinertia;
		this.b2.angvel += this.adamp * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		if(!this.nodrag) {
			var w1 = this.b1.angvel + this.b1.kinangvel;
			var w2 = this.b2.angvel + this.b2.kinangvel;
			var jx = this.b1.velx + this.b1.kinvelx - this.r1y * w1 - (this.b2.velx + this.b2.kinvelx - this.r2y * w2);
			var jy = this.b1.vely + this.b1.kinvely + this.r1x * w1 - (this.b2.vely + this.b2.kinvely + this.r2x * w2);
			var t = this.vMassa * jx + this.vMassb * jy;
			jy = this.vMassb * jx + this.vMassc * jy;
			jx = t;
			var t1 = this.lgamma;
			jx -= this.dampx * t1;
			jy -= this.dampy * t1;
			var t2 = 1.0;
			this.dampx += jx * t2;
			this.dampy += jy * t2;
			var t3 = this.b1.imass;
			this.b1.velx -= jx * t3;
			this.b1.vely -= jy * t3;
			var t4 = this.b2.imass;
			this.b2.velx += jx * t4;
			this.b2.vely += jy * t4;
			this.b1.angvel -= this.b1.iinertia * (jy * this.r1x - jx * this.r1y);
			this.b2.angvel += this.b2.iinertia * (jy * this.r2x - jx * this.r2y);
			var j_damp = (w1 - w2) * this.wMass - this.adamp * this.agamma;
			this.adamp += j_damp;
			this.b1.angvel -= j_damp * this.b1.iinertia;
			this.b2.angvel += j_damp * this.b2.iinertia;
		}
	}
	,__class__: zpp_nape.dynamics.ZPP_FluidArbiter
});
zpp_nape.dynamics.ZPP_ColArbiter = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.stat = false;
	this.next = null;
	this.hpc2 = false;
	this.hc2 = false;
	this.oc2 = null;
	this.c2 = null;
	this.oc1 = null;
	this.c1 = null;
	this.__ref_vertex = 0;
	this.__ref_edge2 = null;
	this.__ref_edge1 = null;
	this.biasCoef = 0.0;
	this.rev = false;
	this.radius = 0.0;
	this.lproj = 0.0;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.surfacey = 0.0;
	this.surfacex = 0.0;
	this.k2y = 0.0;
	this.k2x = 0.0;
	this.k1y = 0.0;
	this.k1x = 0.0;
	this.rt2b = 0.0;
	this.rn2b = 0.0;
	this.rt2a = 0.0;
	this.rn2a = 0.0;
	this.rt1b = 0.0;
	this.rn1b = 0.0;
	this.rt1a = 0.0;
	this.rn1a = 0.0;
	this.jrAcc = 0.0;
	this.rMass = 0.0;
	this.Kc = 0.0;
	this.Kb = 0.0;
	this.Ka = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_normal = null;
	this.ny = 0.0;
	this.nx = 0.0;
	this.innards = null;
	this.wrap_contacts = null;
	this.contacts = null;
	this.s2 = null;
	this.s1 = null;
	this.userdef_rfric = false;
	this.userdef_restitution = false;
	this.userdef_stat_fric = false;
	this.userdef_dyn_fric = false;
	this.rfric = 0.0;
	this.restitution = 0.0;
	this.stat_fric = 0.0;
	this.dyn_fric = 0.0;
	this.outer_zn = null;
	zpp_nape.dynamics.ZPP_Arbiter.call(this);
	this.pre_dt = -1.0;
	this.contacts = new zpp_nape.dynamics.ZPP_Contact();
	this.innards = new zpp_nape.dynamics.ZPP_IContact();
	this.type = zpp_nape.dynamics.ZPP_Arbiter.COL;
	this.colarb = this;
};
$hxClasses["zpp_nape.dynamics.ZPP_ColArbiter"] = zpp_nape.dynamics.ZPP_ColArbiter;
zpp_nape.dynamics.ZPP_ColArbiter.__name__ = ["zpp_nape","dynamics","ZPP_ColArbiter"];
zpp_nape.dynamics.ZPP_ColArbiter.__super__ = zpp_nape.dynamics.ZPP_Arbiter;
zpp_nape.dynamics.ZPP_ColArbiter.prototype = $extend(zpp_nape.dynamics.ZPP_Arbiter.prototype,{
	normal_validate: function() {
		if(this.cleared) throw "Error: Arbiter not currently in use";
		this.wrap_normal.zpp_inner.x = this.nx;
		this.wrap_normal.zpp_inner.y = this.ny;
		if(this.ws1.id > this.ws2.id) {
			this.wrap_normal.zpp_inner.x = -this.wrap_normal.zpp_inner.x;
			this.wrap_normal.zpp_inner.y = -this.wrap_normal.zpp_inner.y;
		}
	}
	,getnormal: function() {
		this.wrap_normal = nape.geom.Vec2.get(0,0,null);
		this.wrap_normal.zpp_inner._immutable = true;
		this.wrap_normal.zpp_inner._inuse = true;
		this.wrap_normal.zpp_inner._validate = $bind(this,this.normal_validate);
	}
	,alloc: function() {
	}
	,free: function() {
		this.userdef_dyn_fric = false;
		this.userdef_stat_fric = false;
		this.userdef_restitution = false;
		this.userdef_rfric = false;
		this.__ref_edge1 = this.__ref_edge2 = null;
	}
	,injectContact: function(px,py,nx,ny,dist,hash,posOnly) {
		if(posOnly == null) posOnly = false;
		var c = null;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var cur = cx_ite;
			if(hash == cur.hash) {
				c = cur;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(c == null) {
			if(zpp_nape.dynamics.ZPP_Contact.zpp_pool == null) c = new zpp_nape.dynamics.ZPP_Contact(); else {
				c = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
				zpp_nape.dynamics.ZPP_Contact.zpp_pool = c.next;
				c.next = null;
			}
			null;
			var ci = c.inner;
			ci.jnAcc = ci.jtAcc = 0;
			c.hash = hash;
			c.fresh = true;
			c.arbiter = this;
			this.jrAcc = 0;
			this.contacts.inlined_add(c);
			this.innards.add(ci);
		} else c.fresh = false;
		c.px = px;
		c.py = py;
		this.nx = nx;
		this.ny = ny;
		c.dist = dist;
		c.stamp = this.stamp;
		c.posOnly = posOnly;
		return c;
	}
	,assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
		this.s1 = s1;
		this.s2 = s2;
		if(!this.userdef_restitution) {
			if(this.s1.material.elasticity <= Math.NEGATIVE_INFINITY || this.s2.material.elasticity <= Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity >= Math.POSITIVE_INFINITY || this.s2.material.elasticity >= Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
			if(this.restitution < 0) this.restitution = 0;
			if(this.restitution > 1) this.restitution = 1;
		}
		if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
		if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
		if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
	}
	,calcProperties: function() {
		if(!this.userdef_restitution) {
			if(this.s1.material.elasticity <= Math.NEGATIVE_INFINITY || this.s2.material.elasticity <= Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity >= Math.POSITIVE_INFINITY || this.s2.material.elasticity >= Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
			if(this.restitution < 0) this.restitution = 0;
			if(this.restitution > 1) this.restitution = 1;
		}
		if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
		if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
		if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
	}
	,validate_props: function() {
		if(this.invalidated) {
			this.invalidated = false;
			if(!this.userdef_restitution) {
				if(this.s1.material.elasticity <= Math.NEGATIVE_INFINITY || this.s2.material.elasticity <= Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity >= Math.POSITIVE_INFINITY || this.s2.material.elasticity >= Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
				if(this.restitution < 0) this.restitution = 0;
				if(this.restitution > 1) this.restitution = 1;
			}
			if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
			if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
			if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
		}
	}
	,retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
		while(!(this.contacts.next == null)) {
			var o = this.contacts.inlined_pop_unsafe();
			o.arbiter = null;
			o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
			zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
			this.innards.inlined_pop();
		}
		var o1 = this;
		o1.userdef_dyn_fric = false;
		o1.userdef_stat_fric = false;
		o1.userdef_restitution = false;
		o1.userdef_rfric = false;
		o1.__ref_edge1 = o1.__ref_edge2 = null;
		o1.next = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
		zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = o1;
		this.pre_dt = -1.0;
	}
	,makemutable: function() {
		this.mutable = true;
		if(this.wrap_normal != null) this.wrap_normal.zpp_inner._immutable = false;
		if(this.wrap_contacts != null) this.wrap_contacts.zpp_inner.immutable = false;
	}
	,makeimmutable: function() {
		this.mutable = false;
		if(this.wrap_normal != null) this.wrap_normal.zpp_inner._immutable = true;
		if(this.wrap_contacts != null) this.wrap_contacts.zpp_inner.immutable = true;
	}
	,contacts_adder: function(x) {
		return false;
	}
	,contacts_subber: function(x) {
		var pre = null;
		var prei = null;
		var cx_itei = this.innards.next;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var c = cx_ite;
			if(c == x.zpp_inner) {
				this.contacts.erase(pre);
				this.innards.erase(prei);
				var o = c;
				o.arbiter = null;
				o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
				zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
				break;
			}
			pre = cx_ite;
			prei = cx_itei;
			cx_itei = cx_itei.next;
			cx_ite = cx_ite.next;
		}
	}
	,setupcontacts: function() {
		this.wrap_contacts = zpp_nape.util.ZPP_ContactList.get(this.contacts,true);
		this.wrap_contacts.zpp_inner.immutable = !this.mutable;
		this.wrap_contacts.zpp_inner.adder = $bind(this,this.contacts_adder);
		this.wrap_contacts.zpp_inner.dontremove = true;
		this.wrap_contacts.zpp_inner.subber = $bind(this,this.contacts_subber);
	}
	,cleanupContacts: function() {
		var fst = true;
		var pre = null;
		var prei = null;
		var cx_itei = this.innards.next;
		this.hc2 = false;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var c = cx_ite;
			if(c.stamp + nape.Config.arbiterExpirationDelay < this.stamp) {
				cx_ite = this.contacts.inlined_erase(pre);
				cx_itei = this.innards.inlined_erase(prei);
				var o = c;
				o.arbiter = null;
				o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
				zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
				continue;
			}
			var ci = c.inner;
			var pact = c.active;
			c.active = c.stamp == this.stamp;
			if(c.active) {
				if(fst) {
					fst = false;
					this.c1 = ci;
					this.oc1 = c;
				} else {
					this.hc2 = true;
					this.c2 = ci;
					this.oc2 = c;
				}
			}
			if(pact != c.active) this.contacts.modified = true;
			pre = cx_ite;
			prei = cx_itei;
			cx_itei = cx_itei.next;
			cx_ite = cx_ite.next;
		}
		if(this.hc2) {
			this.hpc2 = true;
			if(this.oc1.posOnly) {
				var tmp = this.c1;
				this.c1 = this.c2;
				this.c2 = tmp;
				var tmp2 = this.oc1;
				this.oc1 = this.oc2;
				this.oc2 = tmp2;
				this.hc2 = false;
			} else if(this.oc2.posOnly) this.hc2 = false;
			if(this.oc1.posOnly) fst = true;
		} else this.hpc2 = false;
		return fst;
	}
	,preStep: function(dt) {
		if(this.invalidated) {
			this.invalidated = false;
			if(!this.userdef_restitution) {
				if(this.s1.material.elasticity <= Math.NEGATIVE_INFINITY || this.s2.material.elasticity <= Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity >= Math.POSITIVE_INFINITY || this.s2.material.elasticity >= Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
				if(this.restitution < 0) this.restitution = 0;
				if(this.restitution > 1) this.restitution = 1;
			}
			if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
			if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
			if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
		}
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		var mass_sum = this.b1.smass + this.b2.smass;
		this.hc2 = false;
		var fst = true;
		var statType = !(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC);
		var bias;
		if(statType) {
			if(this.continuous) bias = nape.Config.contactContinuousStaticBiasCoef; else bias = nape.Config.contactStaticBiasCoef;
		} else if(this.continuous) bias = nape.Config.contactContinuousBiasCoef; else bias = nape.Config.contactBiasCoef;
		this.biasCoef = bias;
		this.continuous = false;
		var pre = null;
		var prei = null;
		var cx_itei = this.innards.next;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var c = cx_ite;
			if(c.stamp + nape.Config.arbiterExpirationDelay < this.stamp) {
				cx_ite = this.contacts.inlined_erase(pre);
				cx_itei = this.innards.inlined_erase(prei);
				var o = c;
				o.arbiter = null;
				o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
				zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
				continue;
			}
			var ci = c.inner;
			var pact = c.active;
			c.active = c.stamp == this.stamp;
			if(c.active) {
				if(fst) {
					fst = false;
					this.c1 = ci;
					this.oc1 = c;
				} else {
					this.hc2 = true;
					this.c2 = ci;
					this.oc2 = c;
				}
				ci.r2x = c.px - this.b2.posx;
				ci.r2y = c.py - this.b2.posy;
				ci.r1x = c.px - this.b1.posx;
				ci.r1y = c.py - this.b1.posy;
				var kt = mass_sum + this.b2.sinertia * zpp_nape.util.ZPP_Math.sqr(ci.r2x * this.nx + ci.r2y * this.ny);
				kt += this.b1.sinertia * zpp_nape.util.ZPP_Math.sqr(ci.r1x * this.nx + ci.r1y * this.ny);
				if(kt < nape.Config.epsilon * nape.Config.epsilon) ci.tMass = 0; else ci.tMass = 1.0 / kt;
				var nt = mass_sum + this.b2.sinertia * zpp_nape.util.ZPP_Math.sqr(this.ny * ci.r2x - this.nx * ci.r2y);
				nt += this.b1.sinertia * zpp_nape.util.ZPP_Math.sqr(this.ny * ci.r1x - this.nx * ci.r1y);
				if(nt < nape.Config.epsilon * nape.Config.epsilon) ci.nMass = 0; else ci.nMass = 1.0 / nt;
				var vrx = 0.0;
				var vry = 0.0;
				var ang = this.b2.angvel + this.b2.kinangvel;
				vrx = this.b2.velx + this.b2.kinvelx - ci.r2y * ang;
				vry = this.b2.vely + this.b2.kinvely + ci.r2x * ang;
				ang = this.b1.angvel + this.b1.kinangvel;
				vrx -= this.b1.velx + this.b1.kinvelx - ci.r1y * ang;
				vry -= this.b1.vely + this.b1.kinvely + ci.r1x * ang;
				var vdot = this.nx * vrx + this.ny * vry;
				c.elasticity = this.restitution;
				ci.bounce = vdot * c.elasticity;
				if(ci.bounce > -nape.Config.elasticThreshold) ci.bounce = 0;
				vdot = vry * this.nx - vrx * this.ny;
				var thr = nape.Config.staticFrictionThreshold;
				if(vdot * vdot > thr * thr) ci.friction = this.dyn_fric; else ci.friction = this.stat_fric;
				ci.jnAcc *= dtratio;
				ci.jtAcc *= dtratio;
			}
			if(pact != c.active) this.contacts.modified = true;
			pre = cx_ite;
			prei = cx_itei;
			cx_itei = cx_itei.next;
			cx_ite = cx_ite.next;
		}
		if(this.hc2) {
			this.hpc2 = true;
			if(this.oc1.posOnly) {
				var tmp = this.c1;
				this.c1 = this.c2;
				this.c2 = tmp;
				var tmp2 = this.oc1;
				this.oc1 = this.oc2;
				this.oc2 = tmp2;
				this.hc2 = false;
			} else if(this.oc2.posOnly) this.hc2 = false;
			if(this.oc1.posOnly) fst = true;
		} else this.hpc2 = false;
		this.jrAcc *= dtratio;
		if(!fst) {
			this.rn1a = this.ny * this.c1.r1x - this.nx * this.c1.r1y;
			this.rt1a = this.c1.r1x * this.nx + this.c1.r1y * this.ny;
			this.rn1b = this.ny * this.c1.r2x - this.nx * this.c1.r2y;
			this.rt1b = this.c1.r2x * this.nx + this.c1.r2y * this.ny;
			this.k1x = this.b2.kinvelx - this.c1.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c1.r1y * this.b1.kinangvel);
			this.k1y = this.b2.kinvely + this.c1.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c1.r1x * this.b1.kinangvel);
		}
		if(this.hc2) {
			this.rn2a = this.ny * this.c2.r1x - this.nx * this.c2.r1y;
			this.rt2a = this.c2.r1x * this.nx + this.c2.r1y * this.ny;
			this.rn2b = this.ny * this.c2.r2x - this.nx * this.c2.r2y;
			this.rt2b = this.c2.r2x * this.nx + this.c2.r2y * this.ny;
			this.k2x = this.b2.kinvelx - this.c2.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c2.r1y * this.b1.kinangvel);
			this.k2y = this.b2.kinvely + this.c2.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c2.r1x * this.b1.kinangvel);
			this.kMassa = mass_sum + this.b1.sinertia * this.rn1a * this.rn1a + this.b2.sinertia * this.rn1b * this.rn1b;
			this.kMassb = mass_sum + this.b1.sinertia * this.rn1a * this.rn2a + this.b2.sinertia * this.rn1b * this.rn2b;
			this.kMassc = mass_sum + this.b1.sinertia * this.rn2a * this.rn2a + this.b2.sinertia * this.rn2b * this.rn2b;
			var norm = this.kMassa * this.kMassa + 2 * this.kMassb * this.kMassb + this.kMassc * this.kMassc;
			if(norm < nape.Config.illConditionedThreshold * (this.kMassa * this.kMassc - this.kMassb * this.kMassb)) {
				this.Ka = this.kMassa;
				this.Kb = this.kMassb;
				this.Kc = this.kMassc;
				var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
				if(det != det) {
					this.kMassa = this.kMassb = this.kMassc = 0;
					3;
				} else if(det == 0) {
					var flag = 0;
					if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
						this.kMassa = 0;
						flag |= 1;
					}
					if(this.kMassc != 0) this.kMassc = 1 / this.kMassc; else {
						this.kMassc = 0;
						flag |= 2;
					}
					this.kMassb = 0;
					flag;
				} else {
					det = 1 / det;
					var t = this.kMassc * det;
					this.kMassc = this.kMassa * det;
					this.kMassa = t;
					this.kMassb *= -det;
					0;
				}
			} else {
				this.hc2 = false;
				if(this.oc2.dist < this.oc1.dist) {
					var t1 = this.c1;
					this.c1 = this.c2;
					this.c2 = t1;
				}
				this.oc2.active = false;
				this.contacts.modified = true;
			}
		}
		this.surfacex = this.b2.svelx;
		this.surfacey = this.b2.svely;
		var t2 = 1.0;
		this.surfacex += this.b1.svelx * t2;
		this.surfacey += this.b1.svely * t2;
		this.surfacex = -this.surfacex;
		this.surfacey = -this.surfacey;
		this.rMass = this.b1.sinertia + this.b2.sinertia;
		if(this.rMass != 0) this.rMass = 1 / this.rMass;
		return fst;
	}
	,warmStart: function() {
		var jx = this.nx * this.c1.jnAcc - this.ny * this.c1.jtAcc;
		var jy = this.ny * this.c1.jnAcc + this.nx * this.c1.jtAcc;
		var t = this.b1.imass;
		this.b1.velx -= jx * t;
		this.b1.vely -= jy * t;
		this.b1.angvel -= this.b1.iinertia * (jy * this.c1.r1x - jx * this.c1.r1y);
		var t1 = this.b2.imass;
		this.b2.velx += jx * t1;
		this.b2.vely += jy * t1;
		this.b2.angvel += this.b2.iinertia * (jy * this.c1.r2x - jx * this.c1.r2y);
		if(this.hc2) {
			var jx1 = this.nx * this.c2.jnAcc - this.ny * this.c2.jtAcc;
			var jy1 = this.ny * this.c2.jnAcc + this.nx * this.c2.jtAcc;
			var t2 = this.b1.imass;
			this.b1.velx -= jx1 * t2;
			this.b1.vely -= jy1 * t2;
			this.b1.angvel -= this.b1.iinertia * (jy1 * this.c2.r1x - jx1 * this.c2.r1y);
			var t3 = this.b2.imass;
			this.b2.velx += jx1 * t3;
			this.b2.vely += jy1 * t3;
			this.b2.angvel += this.b2.iinertia * (jy1 * this.c2.r2x - jx1 * this.c2.r2y);
		}
		this.b2.angvel += this.jrAcc * this.b2.iinertia;
		this.b1.angvel -= this.jrAcc * this.b1.iinertia;
	}
	,applyImpulseVel: function() {
		var jx;
		var jy;
		var j;
		var jMax;
		var jOld;
		var cjAcc;
		var v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
		var v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
		j = (v1y * this.nx - v1x * this.ny + this.surfacex) * this.c1.tMass;
		jMax = this.c1.friction * this.c1.jnAcc;
		jOld = this.c1.jtAcc;
		cjAcc = jOld - j;
		if(cjAcc > jMax) cjAcc = jMax; else if(cjAcc < -jMax) cjAcc = -jMax;
		j = cjAcc - jOld;
		this.c1.jtAcc = cjAcc;
		jx = -this.ny * j;
		jy = this.nx * j;
		this.b2.velx += jx * this.b2.imass;
		this.b2.vely += jy * this.b2.imass;
		this.b1.velx -= jx * this.b1.imass;
		this.b1.vely -= jy * this.b1.imass;
		this.b2.angvel += this.rt1b * j * this.b2.iinertia;
		this.b1.angvel -= this.rt1a * j * this.b1.iinertia;
		if(this.hc2) {
			var v2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
			var v2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
			j = (v2y * this.nx - v2x * this.ny + this.surfacex) * this.c2.tMass;
			jMax = this.c2.friction * this.c2.jnAcc;
			jOld = this.c2.jtAcc;
			cjAcc = jOld - j;
			if(cjAcc > jMax) cjAcc = jMax; else if(cjAcc < -jMax) cjAcc = -jMax;
			j = cjAcc - jOld;
			this.c2.jtAcc = cjAcc;
			jx = -this.ny * j;
			jy = this.nx * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += this.rt2b * j * this.b2.iinertia;
			this.b1.angvel -= this.rt2a * j * this.b1.iinertia;
			v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
			v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
			v2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
			v2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
			var ax = this.c1.jnAcc;
			var ay = this.c2.jnAcc;
			var jnx = v1x * this.nx + v1y * this.ny + this.surfacey + this.c1.bounce - (this.Ka * ax + this.Kb * ay);
			var jny = v2x * this.nx + v2y * this.ny + this.surfacey + this.c2.bounce - (this.Kb * ax + this.Kc * ay);
			var xx = -(this.kMassa * jnx + this.kMassb * jny);
			var xy = -(this.kMassb * jnx + this.kMassc * jny);
			if(xx >= 0 && xy >= 0) {
				jnx = xx - ax;
				jny = xy - ay;
				this.c1.jnAcc = xx;
				this.c2.jnAcc = xy;
			} else {
				xx = -this.c1.nMass * jnx;
				if(xx >= 0 && this.Kb * xx + jny >= 0) {
					jnx = xx - ax;
					jny = -ay;
					this.c1.jnAcc = xx;
					this.c2.jnAcc = 0;
				} else {
					xy = -this.c2.nMass * jny;
					if(xy >= 0 && this.Kb * xy + jnx >= 0) {
						jnx = -ax;
						jny = xy - ay;
						this.c1.jnAcc = 0;
						this.c2.jnAcc = xy;
					} else if(jnx >= 0 && jny >= 0) {
						jnx = -ax;
						jny = -ay;
						this.c1.jnAcc = this.c2.jnAcc = 0;
					} else {
						jnx = 0;
						jny = 0;
					}
				}
			}
			j = jnx + jny;
			jx = this.nx * j;
			jy = this.ny * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += (this.rn1b * jnx + this.rn2b * jny) * this.b2.iinertia;
			this.b1.angvel -= (this.rn1a * jnx + this.rn2a * jny) * this.b1.iinertia;
		} else {
			if(this.radius != 0.0) {
				var dw = this.b2.angvel - this.b1.angvel;
				j = dw * this.rMass;
				jMax = this.rfric * this.c1.jnAcc;
				jOld = this.jrAcc;
				this.jrAcc -= j;
				if(this.jrAcc > jMax) this.jrAcc = jMax; else if(this.jrAcc < -jMax) this.jrAcc = -jMax;
				j = this.jrAcc - jOld;
				this.b2.angvel += j * this.b2.iinertia;
				this.b1.angvel -= j * this.b1.iinertia;
			}
			v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
			v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
			j = (this.c1.bounce + (this.nx * v1x + this.ny * v1y) + this.surfacey) * this.c1.nMass;
			jOld = this.c1.jnAcc;
			cjAcc = jOld - j;
			if(cjAcc < 0.0) cjAcc = 0.0;
			j = cjAcc - jOld;
			this.c1.jnAcc = cjAcc;
			jx = this.nx * j;
			jy = this.ny * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += this.rn1b * j * this.b2.iinertia;
			this.b1.angvel -= this.rn1a * j * this.b1.iinertia;
		}
	}
	,applyImpulsePos: function() {
		if(this.ptype == 2) {
			var c = this.c1;
			var dx = 0.0;
			var dy = 0.0;
			var r2x = 0.0;
			var r2y = 0.0;
			r2x = this.b2.axisy * c.lr2x - this.b2.axisx * c.lr2y;
			r2y = c.lr2x * this.b2.axisx + c.lr2y * this.b2.axisy;
			var t = 1.0;
			r2x += this.b2.posx * t;
			r2y += this.b2.posy * t;
			var r1x = 0.0;
			var r1y = 0.0;
			r1x = this.b1.axisy * c.lr1x - this.b1.axisx * c.lr1y;
			r1y = c.lr1x * this.b1.axisx + c.lr1y * this.b1.axisy;
			var t1 = 1.0;
			r1x += this.b1.posx * t1;
			r1y += this.b1.posy * t1;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = r2x - r1x;
			dy1 = r2y - r1y;
			var dl = Math.sqrt(dx1 * dx1 + dy1 * dy1);
			var r = this.radius - nape.Config.collisionSlop;
			var err = dl - r;
			if(dx1 * this.nx + dy1 * this.ny < 0) {
				dx1 = -dx1;
				dy1 = -dy1;
				err -= this.radius;
			}
			if(err < 0) {
				if(dl < nape.Config.epsilon) {
					if(this.b1.smass != 0.0) this.b1.posx += nape.Config.epsilon * 10; else this.b2.posx += nape.Config.epsilon * 10;
				} else {
					var t2 = 1.0 / dl;
					dx1 *= t2;
					dy1 *= t2;
					var px = 0.5 * (r1x + r2x);
					var py = 0.5 * (r1y + r2y);
					var pen = dl - r;
					r1x = px - this.b1.posx;
					r1y = py - this.b1.posy;
					r2x = px - this.b2.posx;
					r2y = py - this.b2.posy;
					var rn1 = dy1 * r1x - dx1 * r1y;
					var rn2 = dy1 * r2x - dx1 * r2y;
					var K = this.b2.smass + rn2 * rn2 * this.b2.sinertia + this.b1.smass + rn1 * rn1 * this.b1.sinertia;
					if(K != 0) {
						var jn = -this.biasCoef * pen / K;
						var Jx = 0.0;
						var Jy = 0.0;
						var t3 = jn;
						Jx = dx1 * t3;
						Jy = dy1 * t3;
						var t4 = this.b1.imass;
						this.b1.posx -= Jx * t4;
						this.b1.posy -= Jy * t4;
						this.b1.delta_rot(-rn1 * this.b1.iinertia * jn);
						var t5 = this.b2.imass;
						this.b2.posx += Jx * t5;
						this.b2.posy += Jy * t5;
						this.b2.delta_rot(rn2 * this.b2.iinertia * jn);
					}
				}
			}
		} else {
			var gnormx = 0.0;
			var gnormy = 0.0;
			var gproj;
			var clip1x = 0.0;
			var clip1y = 0.0;
			var clip2x = 0;
			var clip2y = 0;
			if(this.ptype == 0) {
				gnormx = this.b1.axisy * this.lnormx - this.b1.axisx * this.lnormy;
				gnormy = this.lnormx * this.b1.axisx + this.lnormy * this.b1.axisy;
				gproj = this.lproj + (gnormx * this.b1.posx + gnormy * this.b1.posy);
				clip1x = this.b2.axisy * this.c1.lr1x - this.b2.axisx * this.c1.lr1y;
				clip1y = this.c1.lr1x * this.b2.axisx + this.c1.lr1y * this.b2.axisy;
				var t6 = 1.0;
				clip1x += this.b2.posx * t6;
				clip1y += this.b2.posy * t6;
				if(this.hpc2) {
					clip2x = this.b2.axisy * this.c2.lr1x - this.b2.axisx * this.c2.lr1y;
					clip2y = this.c2.lr1x * this.b2.axisx + this.c2.lr1y * this.b2.axisy;
					var t7 = 1.0;
					clip2x += this.b2.posx * t7;
					clip2y += this.b2.posy * t7;
				}
			} else {
				gnormx = this.b2.axisy * this.lnormx - this.b2.axisx * this.lnormy;
				gnormy = this.lnormx * this.b2.axisx + this.lnormy * this.b2.axisy;
				gproj = this.lproj + (gnormx * this.b2.posx + gnormy * this.b2.posy);
				clip1x = this.b1.axisy * this.c1.lr1x - this.b1.axisx * this.c1.lr1y;
				clip1y = this.c1.lr1x * this.b1.axisx + this.c1.lr1y * this.b1.axisy;
				var t8 = 1.0;
				clip1x += this.b1.posx * t8;
				clip1y += this.b1.posy * t8;
				if(this.hpc2) {
					clip2x = this.b1.axisy * this.c2.lr1x - this.b1.axisx * this.c2.lr1y;
					clip2y = this.c2.lr1x * this.b1.axisx + this.c2.lr1y * this.b1.axisy;
					var t9 = 1.0;
					clip2x += this.b1.posx * t9;
					clip2y += this.b1.posy * t9;
				}
			}
			var err1 = clip1x * gnormx + clip1y * gnormy - gproj - this.radius;
			err1 += nape.Config.collisionSlop;
			var err2 = 0.0;
			if(this.hpc2) {
				err2 = clip2x * gnormx + clip2y * gnormy - gproj - this.radius;
				err2 += nape.Config.collisionSlop;
			}
			if(err1 < 0 || err2 < 0) {
				if(this.rev) {
					gnormx = -gnormx;
					gnormy = -gnormy;
				}
				var c1r1x = 0.0;
				var c1r1y = 0.0;
				c1r1x = clip1x - this.b1.posx;
				c1r1y = clip1y - this.b1.posy;
				var c1r2x = 0.0;
				var c1r2y = 0.0;
				c1r2x = clip1x - this.b2.posx;
				c1r2y = clip1y - this.b2.posy;
				var c2r1x = 0;
				var c2r1y = 0;
				var c2r2x = 0;
				var c2r2y = 0;
				if(this.hpc2) {
					c2r1x = clip2x - this.b1.posx;
					c2r1y = clip2y - this.b1.posy;
					c2r2x = clip2x - this.b2.posx;
					c2r2y = clip2y - this.b2.posy;
					var rn1a = gnormy * c1r1x - gnormx * c1r1y;
					var rn1b = gnormy * c1r2x - gnormx * c1r2y;
					var rn2a = gnormy * c2r1x - gnormx * c2r1y;
					var rn2b = gnormy * c2r2x - gnormx * c2r2y;
					var mass_sum = this.b1.smass + this.b2.smass;
					this.kMassa = mass_sum + this.b1.sinertia * rn1a * rn1a + this.b2.sinertia * rn1b * rn1b;
					this.kMassb = mass_sum + this.b1.sinertia * rn1a * rn2a + this.b2.sinertia * rn1b * rn2b;
					this.kMassc = mass_sum + this.b1.sinertia * rn2a * rn2a + this.b2.sinertia * rn2b * rn2b;
					var Ka = 0.0;
					var Kb = 0.0;
					var Kc = 0.0;
					Ka = this.kMassa;
					Kb = this.kMassb;
					Kc = this.kMassc;
					var bx = err1 * this.biasCoef;
					var by = err2 * this.biasCoef;
					do {
						var xx = 0.0;
						var xy = 0.0;
						xx = bx;
						xy = by;
						xx = -xx;
						xy = -xy;
						var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
						if(det != det) xx = xy = 0; else if(det == 0) {
							if(this.kMassa != 0) xx /= this.kMassa; else xx = 0;
							if(this.kMassc != 0) xy /= this.kMassc; else xy = 0;
						} else {
							det = 1 / det;
							var t10 = det * (this.kMassc * xx - this.kMassb * xy);
							xy = det * (this.kMassa * xy - this.kMassb * xx);
							xx = t10;
						}
						if(xx >= 0 && xy >= 0) {
							var t11 = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t11;
							this.b1.posy -= gnormy * t11;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t12 = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t12;
							this.b2.posy += gnormy * t12;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
						xx = -bx / Ka;
						xy = 0;
						var vn2 = Kb * xx + by;
						if(xx >= 0 && vn2 >= 0) {
							var t13 = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t13;
							this.b1.posy -= gnormy * t13;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t14 = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t14;
							this.b2.posy += gnormy * t14;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
						xx = 0;
						xy = -by / Kc;
						var vn1 = Kb * xy + bx;
						if(xy >= 0 && vn1 >= 0) {
							var t15 = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t15;
							this.b1.posy -= gnormy * t15;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t16 = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t16;
							this.b2.posy += gnormy * t16;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
					} while(false);
				} else {
					var rn11 = gnormy * c1r1x - gnormx * c1r1y;
					var rn21 = gnormy * c1r2x - gnormx * c1r2y;
					var K1 = this.b2.smass + rn21 * rn21 * this.b2.sinertia + this.b1.smass + rn11 * rn11 * this.b1.sinertia;
					if(K1 != 0) {
						var jn1 = -this.biasCoef * err1 / K1;
						var Jx1 = 0.0;
						var Jy1 = 0.0;
						var t17 = jn1;
						Jx1 = gnormx * t17;
						Jy1 = gnormy * t17;
						var t18 = this.b1.imass;
						this.b1.posx -= Jx1 * t18;
						this.b1.posy -= Jy1 * t18;
						this.b1.delta_rot(-rn11 * this.b1.iinertia * jn1);
						var t19 = this.b2.imass;
						this.b2.posx += Jx1 * t19;
						this.b2.posy += Jy1 * t19;
						this.b2.delta_rot(rn21 * this.b2.iinertia * jn1);
					}
				}
			}
		}
	}
	,__class__: zpp_nape.dynamics.ZPP_ColArbiter
});
zpp_nape.dynamics.ZPP_Contact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.elasticity = 0.0;
	this.dist = 0.0;
	this.fresh = false;
	this.hash = 0;
	this.stamp = 0;
	this.posOnly = false;
	this.active = false;
	this.inner = null;
	this.arbiter = null;
	this.wrap_position = null;
	this.py = 0.0;
	this.px = 0.0;
	this.outer = null;
	this.inner = new zpp_nape.dynamics.ZPP_IContact();
};
$hxClasses["zpp_nape.dynamics.ZPP_Contact"] = zpp_nape.dynamics.ZPP_Contact;
zpp_nape.dynamics.ZPP_Contact.__name__ = ["zpp_nape","dynamics","ZPP_Contact"];
zpp_nape.dynamics.ZPP_Contact.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_nape.dynamics.ZPP_Contact.internal = true;
			this.outer = new nape.dynamics.Contact();
			zpp_nape.dynamics.ZPP_Contact.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,position_validate: function() {
		this.wrap_position.zpp_inner.x = this.px;
		this.wrap_position.zpp_inner.y = this.py;
	}
	,getposition: function() {
		var me = this;
		this.wrap_position = nape.geom.Vec2.get(null,null,null);
		this.wrap_position.zpp_inner._inuse = true;
		this.wrap_position.zpp_inner._immutable = true;
		this.wrap_position.zpp_inner._validate = $bind(this,this.position_validate);
	}
	,inactiveme: function() {
		return !(this.active && this.arbiter != null && !(!this.arbiter.active));
	}
	,free: function() {
		this.arbiter = null;
	}
	,alloc: function() {
	}
	,elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,__class__: zpp_nape.dynamics.ZPP_Contact
};
zpp_nape.dynamics.ZPP_IContact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.lr2y = 0.0;
	this.lr2x = 0.0;
	this.lr1y = 0.0;
	this.lr1x = 0.0;
	this.jtAcc = 0.0;
	this.jnAcc = 0.0;
	this.friction = 0.0;
	this.bounce = 0.0;
	this.tMass = 0.0;
	this.nMass = 0.0;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
};
$hxClasses["zpp_nape.dynamics.ZPP_IContact"] = zpp_nape.dynamics.ZPP_IContact;
zpp_nape.dynamics.ZPP_IContact.__name__ = ["zpp_nape","dynamics","ZPP_IContact"];
zpp_nape.dynamics.ZPP_IContact.prototype = {
	elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,__class__: zpp_nape.dynamics.ZPP_IContact
};
zpp_nape.dynamics.ZPP_InteractionFilter = function() {
	this.fluidMask = 0;
	this.fluidGroup = 0;
	this.sensorMask = 0;
	this.sensorGroup = 0;
	this.collisionMask = 0;
	this.collisionGroup = 0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.collisionGroup = this.sensorGroup = this.fluidGroup = 1;
	this.collisionMask = this.sensorMask = this.fluidMask = -1;
};
$hxClasses["zpp_nape.dynamics.ZPP_InteractionFilter"] = zpp_nape.dynamics.ZPP_InteractionFilter;
zpp_nape.dynamics.ZPP_InteractionFilter.__name__ = ["zpp_nape","dynamics","ZPP_InteractionFilter"];
zpp_nape.dynamics.ZPP_InteractionFilter.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.dynamics.InteractionFilter();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,free: function() {
		this.outer = null;
	}
	,alloc: function() {
	}
	,feature_cons: function() {
		this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,copy: function() {
		var ret;
		if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) ret = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
			ret = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.collisionGroup = this.collisionGroup;
		ret.collisionMask = this.collisionMask;
		ret.sensorGroup = this.sensorGroup;
		ret.sensorMask = this.sensorMask;
		ret.fluidGroup = this.fluidGroup;
		ret.fluidMask = this.fluidMask;
		return ret;
	}
	,shouldCollide: function(x) {
		return (this.collisionMask & x.collisionGroup) != 0 && (x.collisionMask & this.collisionGroup) != 0;
	}
	,shouldSense: function(x) {
		return (this.sensorMask & x.sensorGroup) != 0 && (x.sensorMask & this.sensorGroup) != 0;
	}
	,shouldFlow: function(x) {
		return (this.fluidMask & x.fluidGroup) != 0 && (x.fluidMask & this.fluidGroup) != 0;
	}
	,invalidate: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.invalidate_filter();
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_nape.dynamics.ZPP_InteractionFilter
};
zpp_nape.dynamics.ZPP_InteractionGroup = function() {
	this.depth = 0;
	this.wrap_interactors = null;
	this.interactors = null;
	this.wrap_groups = null;
	this.groups = null;
	this.group = null;
	this.ignore = false;
	this.outer = null;
	this.depth = 0;
	this.groups = new zpp_nape.util.ZNPList_ZPP_InteractionGroup();
	this.interactors = new zpp_nape.util.ZNPList_ZPP_Interactor();
};
$hxClasses["zpp_nape.dynamics.ZPP_InteractionGroup"] = zpp_nape.dynamics.ZPP_InteractionGroup;
zpp_nape.dynamics.ZPP_InteractionGroup.__name__ = ["zpp_nape","dynamics","ZPP_InteractionGroup"];
zpp_nape.dynamics.ZPP_InteractionGroup.prototype = {
	setGroup: function(group) {
		if(this.group != group) {
			if(this.group != null) {
				this.group.groups.remove(this);
				this.depth = 0;
				this.group.invalidate(true);
			}
			this.group = group;
			if(group != null) {
				group.groups.add(this);
				this.depth = group.depth + 1;
				group.invalidate(true);
			} else this.invalidate(true);
		}
	}
	,invalidate: function(force) {
		if(force == null) force = false;
		if(!(force || this.ignore)) return;
		var cx_ite = this.interactors.head;
		while(cx_ite != null) {
			var b = cx_ite.elt;
			if(b.ibody != null) b.ibody.wake(); else if(b.ishape != null) b.ishape.body.wake(); else b.icompound.wake();
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.groups.head;
		while(cx_ite1 != null) {
			var g = cx_ite1.elt;
			g.invalidate(force);
			cx_ite1 = cx_ite1.next;
		}
	}
	,addGroup: function(group) {
		this.groups.add(group);
		group.depth = this.depth + 1;
	}
	,remGroup: function(group) {
		this.groups.remove(group);
		group.depth = 0;
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,remInteractor: function(intx,flag) {
		if(flag == null) flag = -1;
		this.interactors.remove(intx);
	}
	,__class__: zpp_nape.dynamics.ZPP_InteractionGroup
};
zpp_nape.dynamics.ZPP_SpaceArbiterList = function() {
	this.at_index_3 = 0;
	this.at_index_2 = 0;
	this.at_index_1 = 0;
	this.at_index_0 = 0;
	this.ite_3 = null;
	this.ite_2 = null;
	this.ite_1 = null;
	this.ite_0 = null;
	this.lengths = null;
	this.zip_length = false;
	this._length = 0;
	this.space = null;
	nape.dynamics.ArbiterList.call(this);
	this.at_index_0 = 0;
	this.at_index_1 = 0;
	this.at_index_2 = 0;
	this.at_index_3 = 0;
	this.zip_length = true;
	this._length = 0;
	this.lengths = new Array();
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		this.lengths.push(0);
	}
};
$hxClasses["zpp_nape.dynamics.ZPP_SpaceArbiterList"] = zpp_nape.dynamics.ZPP_SpaceArbiterList;
zpp_nape.dynamics.ZPP_SpaceArbiterList.__name__ = ["zpp_nape","dynamics","ZPP_SpaceArbiterList"];
zpp_nape.dynamics.ZPP_SpaceArbiterList.__super__ = nape.dynamics.ArbiterList;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype = $extend(nape.dynamics.ArbiterList.prototype,{
	zpp_gl: function() {
		this.zpp_vm();
		if(this.zip_length) {
			this._length = 0;
			var ind = 0;
			var len = 0;
			var cx_ite = this.space.c_arbiters_true.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) len++;
				cx_ite = cx_ite.next;
			}
			this.lengths[ind++] = len;
			this._length += len;
			var len1 = 0;
			var cx_ite1 = this.space.c_arbiters_false.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				if(i1.active) len1++;
				cx_ite1 = cx_ite1.next;
			}
			this.lengths[ind++] = len1;
			this._length += len1;
			var len2 = 0;
			var cx_ite2 = this.space.f_arbiters.head;
			while(cx_ite2 != null) {
				var i2 = cx_ite2.elt;
				if(i2.active) len2++;
				cx_ite2 = cx_ite2.next;
			}
			this.lengths[ind++] = len2;
			this._length += len2;
			var len3 = 0;
			var cx_ite3 = this.space.s_arbiters.head;
			while(cx_ite3 != null) {
				var i3 = cx_ite3.elt;
				if(i3.active) len3++;
				cx_ite3 = cx_ite3.next;
			}
			this.lengths[ind++] = len3;
			this._length += len3;
			this.zip_length = false;
		}
		return this._length;
	}
	,zpp_vm: function() {
		var modified = false;
		if(this.space.c_arbiters_true.modified) {
			modified = true;
			this.space.c_arbiters_true.modified = false;
		}
		if(this.space.c_arbiters_false.modified) {
			modified = true;
			this.space.c_arbiters_false.modified = false;
		}
		if(this.space.f_arbiters.modified) {
			modified = true;
			this.space.f_arbiters.modified = false;
		}
		if(this.space.s_arbiters.modified) {
			modified = true;
			this.space.s_arbiters.modified = false;
		}
		if(modified) {
			this.zip_length = true;
			this._length = 0;
			this.ite_0 = null;
			this.ite_1 = null;
			this.ite_2 = null;
			this.ite_3 = null;
		}
	}
	,push: function(obj) {
		return false;
	}
	,pop: function() {
		return null;
	}
	,unshift: function(obj) {
		return false;
	}
	,shift: function() {
		return null;
	}
	,remove: function(obj) {
		return false;
	}
	,clear: function() {
	}
	,at: function(index) {
		this.zpp_vm();
		var ret = null;
		var accum_length = 0;
		if(ret == null) {
			if(index < accum_length + this.lengths[0]) {
				var offset = index - accum_length;
				if(offset < this.at_index_0 || this.ite_0 == null) {
					this.at_index_0 = 0;
					this.ite_0 = this.space.c_arbiters_true.head;
					while(true) {
						var x = this.ite_0.elt;
						if(x.active) break;
						this.ite_0 = this.ite_0.next;
					}
				}
				while(this.at_index_0 != offset) {
					this.at_index_0++;
					this.ite_0 = this.ite_0.next;
					while(true) {
						var x1 = this.ite_0.elt;
						if(x1.active) break;
						this.ite_0 = this.ite_0.next;
					}
				}
				ret = this.ite_0.elt.wrapper();
			} else accum_length += this.lengths[0];
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[1]) {
				var offset1 = index - accum_length;
				if(offset1 < this.at_index_1 || this.ite_1 == null) {
					this.at_index_1 = 0;
					this.ite_1 = this.space.c_arbiters_false.head;
					while(true) {
						var x2 = this.ite_1.elt;
						if(x2.active) break;
						this.ite_1 = this.ite_1.next;
					}
				}
				while(this.at_index_1 != offset1) {
					this.at_index_1++;
					this.ite_1 = this.ite_1.next;
					while(true) {
						var x3 = this.ite_1.elt;
						if(x3.active) break;
						this.ite_1 = this.ite_1.next;
					}
				}
				ret = this.ite_1.elt.wrapper();
			} else accum_length += this.lengths[1];
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[2]) {
				var offset2 = index - accum_length;
				if(offset2 < this.at_index_2 || this.ite_2 == null) {
					this.at_index_2 = 0;
					this.ite_2 = this.space.f_arbiters.head;
					while(true) {
						var x4 = this.ite_2.elt;
						if(x4.active) break;
						this.ite_2 = this.ite_2.next;
					}
				}
				while(this.at_index_2 != offset2) {
					this.at_index_2++;
					this.ite_2 = this.ite_2.next;
					while(true) {
						var x5 = this.ite_2.elt;
						if(x5.active) break;
						this.ite_2 = this.ite_2.next;
					}
				}
				ret = this.ite_2.elt.wrapper();
			} else accum_length += this.lengths[2];
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[3]) {
				var offset3 = index - accum_length;
				if(offset3 < this.at_index_3 || this.ite_3 == null) {
					this.at_index_3 = 0;
					this.ite_3 = this.space.s_arbiters.head;
					while(true) {
						var x6 = this.ite_3.elt;
						if(x6.active) break;
						this.ite_3 = this.ite_3.next;
					}
				}
				while(this.at_index_3 != offset3) {
					this.at_index_3++;
					this.ite_3 = this.ite_3.next;
					while(true) {
						var x7 = this.ite_3.elt;
						if(x7.active) break;
						this.ite_3 = this.ite_3.next;
					}
				}
				ret = this.ite_3.elt.wrapper();
			} else accum_length += this.lengths[3];
		}
		return ret;
	}
	,__class__: zpp_nape.dynamics.ZPP_SpaceArbiterList
});
zpp_nape.geom = {};
zpp_nape.geom.ZPP_AABB = function() {
	this.wrap_max = null;
	this.maxy = 0.0;
	this.maxx = 0.0;
	this.wrap_min = null;
	this.miny = 0.0;
	this.minx = 0.0;
	this.next = null;
	this.outer = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
$hxClasses["zpp_nape.geom.ZPP_AABB"] = zpp_nape.geom.ZPP_AABB;
zpp_nape.geom.ZPP_AABB.__name__ = ["zpp_nape","geom","ZPP_AABB"];
zpp_nape.geom.ZPP_AABB.get = function(minx,miny,maxx,maxy) {
	var ret;
	if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) ret = new zpp_nape.geom.ZPP_AABB(); else {
		ret = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.minx = minx;
	ret.miny = miny;
	ret.maxx = maxx;
	ret.maxy = maxy;
	return ret;
};
zpp_nape.geom.ZPP_AABB.prototype = {
	validate: function() {
		if(this._validate != null) this._validate();
	}
	,invalidate: function() {
		if(this._invalidate != null) this._invalidate(this);
	}
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.geom.AABB();
			var o = this.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o.wrap_min = o.wrap_max = null;
			o._invalidate = null;
			o._validate = null;
			o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,alloc: function() {
	}
	,free: function() {
		if(this.outer != null) {
			this.outer.zpp_inner = null;
			this.outer = null;
		}
		this.wrap_min = this.wrap_max = null;
		this._invalidate = null;
		this._validate = null;
	}
	,copy: function() {
		return zpp_nape.geom.ZPP_AABB.get(this.minx,this.miny,this.maxx,this.maxy);
	}
	,width: function() {
		return this.maxx - this.minx;
	}
	,height: function() {
		return this.maxy - this.miny;
	}
	,perimeter: function() {
		return (this.maxx - this.minx + (this.maxy - this.miny)) * 2;
	}
	,getmin: function() {
		if(this.wrap_min == null) {
			this.wrap_min = nape.geom.Vec2.get(this.minx,this.miny,null);
			this.wrap_min.zpp_inner._inuse = true;
			if(this._immutable) this.wrap_min.zpp_inner._immutable = true; else this.wrap_min.zpp_inner._invalidate = $bind(this,this.mod_min);
			this.wrap_min.zpp_inner._validate = $bind(this,this.dom_min);
		}
		return this.wrap_min;
	}
	,dom_min: function() {
		if(this._validate != null) this._validate();
		this.wrap_min.zpp_inner.x = this.minx;
		this.wrap_min.zpp_inner.y = this.miny;
	}
	,mod_min: function(min) {
		if(min.x != this.minx || min.y != this.miny) {
			this.minx = min.x;
			this.miny = min.y;
			if(this._invalidate != null) this._invalidate(this);
		}
	}
	,getmax: function() {
		if(this.wrap_max == null) {
			this.wrap_max = nape.geom.Vec2.get(this.maxx,this.maxy,null);
			this.wrap_max.zpp_inner._inuse = true;
			if(this._immutable) this.wrap_max.zpp_inner._immutable = true; else this.wrap_max.zpp_inner._invalidate = $bind(this,this.mod_max);
			this.wrap_max.zpp_inner._validate = $bind(this,this.dom_max);
		}
		return this.wrap_max;
	}
	,dom_max: function() {
		if(this._validate != null) this._validate();
		this.wrap_max.zpp_inner.x = this.maxx;
		this.wrap_max.zpp_inner.y = this.maxy;
	}
	,mod_max: function(max) {
		if(max.x != this.maxx || max.y != this.maxy) {
			this.maxx = max.x;
			this.maxy = max.y;
			if(this._invalidate != null) this._invalidate(this);
		}
	}
	,intersectX: function(x) {
		return !(x.minx > this.maxx || this.minx > x.maxx);
	}
	,intersectY: function(x) {
		return !(x.miny > this.maxy || this.miny > x.maxy);
	}
	,intersect: function(x) {
		return x.miny <= this.maxy && this.miny <= x.maxy && x.minx <= this.maxx && this.minx <= x.maxx;
	}
	,combine: function(x) {
		if(x.minx < this.minx) this.minx = x.minx;
		if(x.maxx > this.maxx) this.maxx = x.maxx;
		if(x.miny < this.miny) this.miny = x.miny;
		if(x.maxy > this.maxy) this.maxy = x.maxy;
	}
	,contains: function(x) {
		return x.minx >= this.minx && x.miny >= this.miny && x.maxx <= this.maxx && x.maxy <= this.maxy;
	}
	,containsPoint: function(v) {
		return v.x >= this.minx && v.x <= this.maxx && v.y >= this.miny && v.y <= this.maxy;
	}
	,setCombine: function(a,b) {
		if(a.minx < b.minx) this.minx = a.minx; else this.minx = b.minx;
		if(a.miny < b.miny) this.miny = a.miny; else this.miny = b.miny;
		if(a.maxx > b.maxx) this.maxx = a.maxx; else this.maxx = b.maxx;
		if(a.maxy > b.maxy) this.maxy = a.maxy; else this.maxy = b.maxy;
	}
	,setExpand: function(a,fatten) {
		this.minx = a.minx - fatten;
		this.miny = a.miny - fatten;
		this.maxx = a.maxx + fatten;
		this.maxy = a.maxy + fatten;
	}
	,setExpandPoint: function(x,y) {
		if(x < this.minx) this.minx = x;
		if(x > this.maxx) this.maxx = x;
		if(y < this.miny) this.miny = y;
		if(y > this.maxy) this.maxy = y;
	}
	,toString: function() {
		return "{ x: " + this.minx + " y: " + this.miny + " w: " + (this.maxx - this.minx) + " h: " + (this.maxy - this.miny) + " }";
	}
	,__class__: zpp_nape.geom.ZPP_AABB
};
zpp_nape.util.ZNPList_ZPP_Vec2 = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Vec2"] = zpp_nape.util.ZNPList_ZPP_Vec2;
zpp_nape.util.ZNPList_ZPP_Vec2.__name__ = ["zpp_nape","util","ZNPList_ZPP_Vec2"];
zpp_nape.util.ZNPList_ZPP_Vec2.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Vec2(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Vec2(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Vec2
};
zpp_nape.geom.ZPP_Collide = function() { };
$hxClasses["zpp_nape.geom.ZPP_Collide"] = zpp_nape.geom.ZPP_Collide;
zpp_nape.geom.ZPP_Collide.__name__ = ["zpp_nape","geom","ZPP_Collide"];
zpp_nape.geom.ZPP_Collide.circleContains = function(c,p) {
	var dx = 0.0;
	var dy = 0.0;
	dx = p.x - c.worldCOMx;
	dy = p.y - c.worldCOMy;
	return dx * dx + dy * dy < c.radius * c.radius;
};
zpp_nape.geom.ZPP_Collide.polyContains = function(s,p) {
	var retvar;
	retvar = true;
	var cx_ite = s.edges.head;
	while(cx_ite != null) {
		var a = cx_ite.elt;
		if(a.gnormx * p.x + a.gnormy * p.y <= a.gprojection) {
			cx_ite = cx_ite.next;
			continue;
		} else {
			retvar = false;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return retvar;
};
zpp_nape.geom.ZPP_Collide.shapeContains = function(s,p) {
	if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) return zpp_nape.geom.ZPP_Collide.circleContains(s.circle,p); else return zpp_nape.geom.ZPP_Collide.polyContains(s.polygon,p);
};
zpp_nape.geom.ZPP_Collide.bodyContains = function(b,p) {
	var retvar;
	retvar = false;
	var cx_ite = b.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		if(zpp_nape.geom.ZPP_Collide.shapeContains(s,p)) {
			retvar = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return retvar;
};
zpp_nape.geom.ZPP_Collide.containTest = function(s1,s2) {
	if(s1.aabb.contains(s2.aabb)) if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
		if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			var minDist = s1.circle.radius + -s2.circle.radius;
			var px = 0.0;
			var py = 0.0;
			px = s2.circle.worldCOMx - s1.circle.worldCOMx;
			py = s2.circle.worldCOMy - s1.circle.worldCOMy;
			var distSqr = px * px + py * py;
			return distSqr <= minDist * minDist;
		} else {
			var retvar;
			retvar = true;
			var cx_ite = s2.polygon.gverts.next;
			while(cx_ite != null) {
				var p = cx_ite;
				if((function($this) {
					var $r;
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					{
						px1 = p.x - s1.circle.worldCOMx;
						py1 = p.y - s1.circle.worldCOMy;
					}
					var distSqr1 = px1 * px1 + py1 * py1;
					$r = distSqr1 <= minDist1 * minDist1;
					return $r;
				}(this))) {
					cx_ite = cx_ite.next;
					continue;
				} else {
					retvar = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
			return retvar;
		}
	} else if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
		var retvar1;
		retvar1 = true;
		var cx_ite1 = s1.polygon.edges.head;
		while(cx_ite1 != null) {
			var a = cx_ite1.elt;
			if(a.gnormx * s2.circle.worldCOMx + a.gnormy * s2.circle.worldCOMy + s2.circle.radius <= a.gprojection) {
				cx_ite1 = cx_ite1.next;
				continue;
			} else {
				retvar1 = false;
				break;
			}
			cx_ite1 = cx_ite1.next;
		}
		return retvar1;
	} else {
		var retvar2;
		retvar2 = true;
		var cx_ite2 = s1.polygon.edges.head;
		while(cx_ite2 != null) {
			var a1 = cx_ite2.elt;
			if((function($this) {
				var $r;
				var max = -1e+100;
				{
					var cx_ite3 = s2.polygon.gverts.next;
					while(cx_ite3 != null) {
						var v = cx_ite3;
						var k = a1.gnormx * v.x + a1.gnormy * v.y;
						if(k > max) max = k;
						cx_ite3 = cx_ite3.next;
					}
				}
				$r = max <= a1.gprojection;
				return $r;
			}(this))) {
				cx_ite2 = cx_ite2.next;
				continue;
			} else {
				retvar2 = false;
				break;
			}
			cx_ite2 = cx_ite2.next;
		}
		return retvar2;
	} else return false;
};
zpp_nape.geom.ZPP_Collide.contactCollide = function(s1,s2,arb,rev) {
	if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
		if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
			var cont = true;
			var max = -1e+100;
			var maxmin = -1e+100;
			var maxi = -1;
			var axis1 = null;
			var axis2 = null;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) min = k;
					if(min - ax.gprojection <= max) break;
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min >= 0) {
					cont = false;
					break;
				}
				if(min > max) {
					max = min;
					axis1 = ax;
					maxi = 1;
				}
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var cx_ite2 = s2.polygon.edges.head;
				while(cx_ite2 != null) {
					var ax1 = cx_ite2.elt;
					var min1 = 1e100;
					var cx_ite3 = s1.polygon.gverts.next;
					while(cx_ite3 != null) {
						var v1 = cx_ite3;
						var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
						if(k1 < min1) min1 = k1;
						if(min1 - ax1.gprojection <= max) break;
						cx_ite3 = cx_ite3.next;
					}
					min1 -= ax1.gprojection;
					if(min1 >= 0) {
						cont = false;
						break;
					}
					if(min1 > max) {
						max = min1;
						axis2 = ax1;
						maxi = 2;
					}
					cx_ite2 = cx_ite2.next;
				}
				if(!cont) return false; else {
					var q1;
					var q2;
					var ax2;
					var scale;
					if(maxi == 1) {
						q1 = s1.polygon;
						q2 = s2.polygon;
						ax2 = axis1;
						scale = 1.0;
					} else {
						q1 = s2.polygon;
						q2 = s1.polygon;
						ax2 = axis2;
						scale = -1.0;
					}
					var ay = null;
					var min2 = 1e100;
					var cx_ite4 = q2.edges.head;
					while(cx_ite4 != null) {
						var axis = cx_ite4.elt;
						var k2 = ax2.gnormx * axis.gnormx + ax2.gnormy * axis.gnormy;
						if(k2 < min2) {
							min2 = k2;
							ay = axis;
						}
						cx_ite4 = cx_ite4.next;
					}
					var c0x = 0.0;
					var c0y = 0.0;
					c0x = ay.gp0.x;
					c0y = ay.gp0.y;
					var c1x = 0.0;
					var c1y = 0.0;
					c1x = ay.gp1.x;
					c1y = ay.gp1.y;
					var dvx = 0.0;
					var dvy = 0.0;
					dvx = c1x - c0x;
					dvy = c1y - c0y;
					var d0 = ax2.gnormy * c0x - ax2.gnormx * c0y;
					var d1 = ax2.gnormy * c1x - ax2.gnormx * c1y;
					var den = 1 / (d1 - d0);
					var t = (-ax2.tp1 - d0) * den;
					if(t > nape.Config.epsilon) {
						var t1 = t;
						c0x += dvx * t1;
						c0y += dvy * t1;
					}
					var t2 = (-ax2.tp0 - d1) * den;
					if(t2 < -nape.Config.epsilon) {
						var t3 = t2;
						c1x += dvx * t3;
						c1y += dvy * t3;
					}
					var nx = 0.0;
					var ny = 0.0;
					var t4 = scale;
					nx = ax2.gnormx * t4;
					ny = ax2.gnormy * t4;
					arb.lnormx = ax2.lnormx;
					arb.lnormy = ax2.lnormy;
					arb.lproj = ax2.lprojection;
					arb.radius = 0;
					arb.rev = rev != (scale == -1);
					if(arb.rev) arb.ptype = 1; else arb.ptype = 0;
					var c0d = c0x * ax2.gnormx + c0y * ax2.gnormy - ax2.gprojection;
					var c1d = c1x * ax2.gnormx + c1y * ax2.gnormy - ax2.gprojection;
					if(c0d > 0 && c1d > 0) return false; else {
						if(rev) {
							nx = -nx;
							ny = -ny;
						}
						var con = arb.injectContact(c0x - ax2.gnormx * c0d * 0.5,c0y - ax2.gnormy * c0d * 0.5,nx,ny,c0d,arb.rev?1:0,c0d > 0);
						var t5 = 1.0;
						c0x -= q2.body.posx * t5;
						c0y -= q2.body.posy * t5;
						con.inner.lr1x = c0x * q2.body.axisy + c0y * q2.body.axisx;
						con.inner.lr1y = c0y * q2.body.axisy - c0x * q2.body.axisx;
						con = arb.injectContact(c1x - ax2.gnormx * c1d * 0.5,c1y - ax2.gnormy * c1d * 0.5,nx,ny,c1d,arb.rev?0:1,c1d > 0);
						var t6 = 1.0;
						c1x -= q2.body.posx * t6;
						c1y -= q2.body.posy * t6;
						con.inner.lr1x = c1x * q2.body.axisy + c1y * q2.body.axisx;
						con.inner.lr1y = c1y * q2.body.axisy - c1x * q2.body.axisx;
						if(maxi == 1) {
							arb.__ref_edge1 = ax2;
							arb.__ref_edge2 = ay;
						} else {
							arb.__ref_edge2 = ax2;
							arb.__ref_edge1 = ay;
						}
						return true;
					}
				}
			} else return false;
		} else {
			var max1 = -1e+100;
			var minmax = -1e+100;
			var cont1 = true;
			var a0 = null;
			var vi = null;
			var vite = s2.polygon.gverts.next;
			var cx_ite5 = s2.polygon.edges.head;
			while(cx_ite5 != null) {
				var a = cx_ite5.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont1 = false;
					break;
				}
				if(dist > max1) {
					max1 = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite5 = cx_ite5.next;
			}
			if(cont1) {
				var v0 = vi;
				var v11;
				if(vi.next == null) v11 = s2.polygon.gverts.next; else v11 = vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var co;
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					px = v0.x - s1.circle.worldCOMx;
					py = v0.y - s1.circle.worldCOMy;
					var distSqr = px * px + py * py;
					if(distSqr > minDist * minDist) co = null; else if(distSqr < nape.Config.epsilon * nape.Config.epsilon) co = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist,0,null); else {
						var invDist = 1.0 / Math.sqrt(distSqr);
						var dist1;
						if(invDist < nape.Config.epsilon) dist1 = 1e100; else dist1 = 1.0 / invDist;
						var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
						if(rev) co = arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,-px * invDist,-py * invDist,dist1 - minDist,0,null); else co = arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,px * invDist,py * invDist,dist1 - minDist,0,null);
					}
					if(co != null) {
						var con1 = co.inner;
						arb.ptype = 2;
						var vx = 0.0;
						var vy = 0.0;
						vx = v0.x - s2.polygon.body.posx;
						vy = v0.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = -1;
						if(rev) {
							con1.lr1x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr1y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr2x = s1.circle.localCOMx;
							con1.lr2y = s1.circle.localCOMy;
						} else {
							con1.lr2x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr2y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr1x = s1.circle.localCOMx;
							con1.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co != null;
				} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
					var co1;
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					px1 = v11.x - s1.circle.worldCOMx;
					py1 = v11.y - s1.circle.worldCOMy;
					var distSqr1 = px1 * px1 + py1 * py1;
					if(distSqr1 > minDist1 * minDist1) co1 = null; else if(distSqr1 < nape.Config.epsilon * nape.Config.epsilon) co1 = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist1,0,null); else {
						var invDist1 = 1.0 / Math.sqrt(distSqr1);
						var dist2;
						if(invDist1 < nape.Config.epsilon) dist2 = 1e100; else dist2 = 1.0 / invDist1;
						var df1 = 0.5 + (s1.circle.radius - 0.5 * minDist1) * invDist1;
						if(rev) co1 = arb.injectContact(s1.circle.worldCOMx + px1 * df1,s1.circle.worldCOMy + py1 * df1,-px1 * invDist1,-py1 * invDist1,dist2 - minDist1,0,null); else co1 = arb.injectContact(s1.circle.worldCOMx + px1 * df1,s1.circle.worldCOMy + py1 * df1,px1 * invDist1,py1 * invDist1,dist2 - minDist1,0,null);
					}
					if(co1 != null) {
						var con2 = co1.inner;
						arb.ptype = 2;
						var vx1 = 0.0;
						var vy1 = 0.0;
						vx1 = v11.x - s2.polygon.body.posx;
						vy1 = v11.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = 1;
						if(rev) {
							con2.lr1x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr1y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr2x = s1.circle.localCOMx;
							con2.lr2y = s1.circle.localCOMy;
						} else {
							con2.lr2x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr2y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr1x = s1.circle.localCOMx;
							con2.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co1 != null;
				} else {
					var nx1 = 0.0;
					var ny1 = 0.0;
					var t7 = s1.circle.radius + max1 * 0.5;
					nx1 = a0.gnormx * t7;
					ny1 = a0.gnormy * t7;
					var px2 = 0.0;
					var py2 = 0.0;
					px2 = s1.circle.worldCOMx - nx1;
					py2 = s1.circle.worldCOMy - ny1;
					var con3;
					if(rev) con3 = arb.injectContact(px2,py2,a0.gnormx,a0.gnormy,max1,0,null); else con3 = arb.injectContact(px2,py2,-a0.gnormx,-a0.gnormy,max1,0,null);
					if(rev) arb.ptype = 0; else arb.ptype = 1;
					arb.lnormx = a0.lnormx;
					arb.lnormy = a0.lnormy;
					arb.rev = !rev;
					arb.lproj = a0.lprojection;
					arb.radius = s1.circle.radius;
					con3.inner.lr1x = s1.circle.localCOMx;
					con3.inner.lr1y = s1.circle.localCOMy;
					arb.__ref_edge1 = a0;
					arb.__ref_vertex = 0;
					return true;
				}
			} else return false;
		}
	} else {
		var co2;
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px3 = 0.0;
		var py3 = 0.0;
		px3 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py3 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr2 = px3 * px3 + py3 * py3;
		if(distSqr2 > minDist2 * minDist2) co2 = null; else if(distSqr2 < nape.Config.epsilon * nape.Config.epsilon) co2 = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist2,0,null); else {
			var invDist2 = 1.0 / Math.sqrt(distSqr2);
			var dist3;
			if(invDist2 < nape.Config.epsilon) dist3 = 1e100; else dist3 = 1.0 / invDist2;
			var df2 = 0.5 + (s1.circle.radius - 0.5 * minDist2) * invDist2;
			if(rev) co2 = arb.injectContact(s1.circle.worldCOMx + px3 * df2,s1.circle.worldCOMy + py3 * df2,-px3 * invDist2,-py3 * invDist2,dist3 - minDist2,0,null); else co2 = arb.injectContact(s1.circle.worldCOMx + px3 * df2,s1.circle.worldCOMy + py3 * df2,px3 * invDist2,py3 * invDist2,dist3 - minDist2,0,null);
		}
		if(co2 != null) {
			var con4 = co2.inner;
			if(rev) {
				con4.lr1x = s2.circle.localCOMx;
				con4.lr1y = s2.circle.localCOMy;
				con4.lr2x = s1.circle.localCOMx;
				con4.lr2y = s1.circle.localCOMy;
			} else {
				con4.lr1x = s1.circle.localCOMx;
				con4.lr1y = s1.circle.localCOMy;
				con4.lr2x = s2.circle.localCOMx;
				con4.lr2y = s2.circle.localCOMy;
			}
			arb.radius = s1.circle.radius + s2.circle.radius;
			arb.ptype = 2;
			return true;
		} else return false;
	}
};
zpp_nape.geom.ZPP_Collide.testCollide_safe = function(s1,s2) {
	if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
		var t = s1;
		s1 = s2;
		s2 = t;
	}
	return zpp_nape.geom.ZPP_Collide.testCollide(s1,s2);
};
zpp_nape.geom.ZPP_Collide.testCollide = function(s1,s2) {
	if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
		var cont = true;
		var cx_ite = s1.polygon.edges.head;
		while(cx_ite != null) {
			var ax = cx_ite.elt;
			var min = 1e100;
			var cx_ite1 = s2.polygon.gverts.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var k = ax.gnormx * v.x + ax.gnormy * v.y;
				if(k < min) min = k;
				cx_ite1 = cx_ite1.next;
			}
			min -= ax.gprojection;
			if(min > 0) {
				cont = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(cont) {
			var cx_ite2 = s2.polygon.edges.head;
			while(cx_ite2 != null) {
				var ax1 = cx_ite2.elt;
				var min1 = 1e100;
				var cx_ite3 = s1.polygon.gverts.next;
				while(cx_ite3 != null) {
					var v1 = cx_ite3;
					var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
					if(k1 < min1) min1 = k1;
					cx_ite3 = cx_ite3.next;
				}
				min1 -= ax1.gprojection;
				if(min1 > 0) {
					cont = false;
					break;
				}
				cx_ite2 = cx_ite2.next;
			}
			return cont;
		} else return false;
	} else {
		var a0 = null;
		var vi = null;
		var cont1 = true;
		var max = -1e+100;
		var vite = s2.polygon.gverts.next;
		var cx_ite4 = s2.polygon.edges.head;
		while(cx_ite4 != null) {
			var a = cx_ite4.elt;
			var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
			if(dist > 0) {
				cont1 = false;
				break;
			}
			if(dist > max) {
				max = dist;
				a0 = a;
				vi = vite;
			}
			vite = vite.next;
			cx_ite4 = cx_ite4.next;
		}
		if(cont1) {
			var v0 = vi;
			var v11;
			if(vi.next == null) v11 = s2.polygon.gverts.next; else v11 = vi.next;
			var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
			if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
				var minDist = s1.circle.radius;
				var px = 0.0;
				var py = 0.0;
				px = v0.x - s1.circle.worldCOMx;
				py = v0.y - s1.circle.worldCOMy;
				var distSqr = px * px + py * py;
				return distSqr <= minDist * minDist;
			} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
				var minDist1 = s1.circle.radius;
				var px1 = 0.0;
				var py1 = 0.0;
				px1 = v11.x - s1.circle.worldCOMx;
				py1 = v11.y - s1.circle.worldCOMy;
				var distSqr1 = px1 * px1 + py1 * py1;
				return distSqr1 <= minDist1 * minDist1;
			} else return true;
		} else return false;
	} else {
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px2 = 0.0;
		var py2 = 0.0;
		px2 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py2 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr2 = px2 * px2 + py2 * py2;
		return distSqr2 <= minDist2 * minDist2;
	}
};
zpp_nape.geom.ZPP_Collide.flowCollide = function(s1,s2,arb) {
	if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
		var out1 = new Array();
		var out2 = new Array();
		var cont = true;
		var total = true;
		var cx_ite = s1.polygon.edges.head;
		while(cx_ite != null) {
			var ax = cx_ite.elt;
			var min = 1e100;
			var ind = 0;
			var cx_ite1 = s2.polygon.gverts.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var k = ax.gnormx * v.x + ax.gnormy * v.y;
				if(k < min) min = k;
				if(k >= ax.gprojection + nape.Config.epsilon) {
					out2[ind] = true;
					total = false;
				}
				ind++;
				cx_ite1 = cx_ite1.next;
			}
			min -= ax.gprojection;
			if(min > 0) {
				cont = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(total) {
			s2.polygon.validate_worldCOM();
			arb.overlap = s2.polygon.area;
			arb.centroidx = s2.polygon.worldCOMx;
			arb.centroidy = s2.polygon.worldCOMy;
			null;
			return true;
		} else if(cont) {
			total = true;
			var cx_ite2 = s2.polygon.edges.head;
			while(cx_ite2 != null) {
				var ax1 = cx_ite2.elt;
				var min1 = 1e100;
				var ind1 = 0;
				var cx_ite3 = s1.polygon.gverts.next;
				while(cx_ite3 != null) {
					var v1 = cx_ite3;
					var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
					if(k1 < min1) min1 = k1;
					if(k1 >= ax1.gprojection + nape.Config.epsilon) {
						out1[ind1] = true;
						total = false;
					}
					ind1++;
					cx_ite3 = cx_ite3.next;
				}
				min1 -= ax1.gprojection;
				if(min1 > 0) {
					cont = false;
					break;
				}
				cx_ite2 = cx_ite2.next;
			}
			if(total) {
				s1.polygon.validate_worldCOM();
				arb.overlap = s1.polygon.area;
				arb.centroidx = s1.polygon.worldCOMx;
				arb.centroidy = s1.polygon.worldCOMy;
				null;
				return true;
			} else if(cont) {
				while(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
					var p = zpp_nape.geom.ZPP_Collide.flowpoly.pop_unsafe();
					if(!p._inuse) {
						var o = p;
						if(o.outer != null) {
							o.outer.zpp_inner = null;
							o.outer = null;
						}
						o._isimmutable = null;
						o._validate = null;
						o._invalidate = null;
						o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
						zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
					}
				}
				var fst_vert = null;
				var poly1 = false;
				var ite1 = s1.polygon.gverts.next;
				var ind11 = 0;
				var ite2 = s2.polygon.gverts.next;
				var ind2 = 0;
				var _g1 = 0;
				var _g = s2.polygon.edgeCnt;
				while(_g1 < _g) {
					var i = _g1++;
					if(!out2[i]) {
						ind2 = i;
						break;
					} else ite2 = ite2.next;
				}
				if(ite2 == null) {
					ite2 = s2.polygon.gverts.next;
					poly1 = true;
					var _g11 = 0;
					var _g2 = s1.polygon.edgeCnt;
					while(_g11 < _g2) {
						var i1 = _g11++;
						if(!out1[i1]) {
							ind11 = i1;
							break;
						} else ite1 = ite1.next;
					}
					if(ite1 == null) ite1 = s1.polygon.gverts.next; else {
						zpp_nape.geom.ZPP_Collide.flowpoly.add(ite1);
						fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
					}
				} else {
					zpp_nape.geom.ZPP_Collide.flowpoly.add(ite2);
					fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
				}
				var cnt = 1;
				if(zpp_nape.geom.ZPP_Collide.flowpoly.head == null) {
					var cx_cont = true;
					var cx_itei = s1.polygon.gverts.next;
					var u = cx_itei;
					var cx_itej = cx_itei.next;
					while(cx_itej != null) {
						var v2 = cx_itej;
						var min2 = 2.0;
						var cx_cont1 = true;
						var cx_itei1 = s2.polygon.gverts.next;
						var a = cx_itei1;
						var cx_itej1 = cx_itei1.next;
						while(cx_itej1 != null) {
							var b = cx_itej1;
							var t = 0.0;
							if((function($this) {
								var $r;
								var _sx = 0.0;
								var _sy = 0.0;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx = 0.0;
								var _vy = 0.0;
								{
									_vx = v2.x - u.x;
									_vy = v2.y - u.y;
								}
								var _qx = 0.0;
								var _qy = 0.0;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > nape.Config.epsilon && txx < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > nape.Config.epsilon && sxx < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t < min2) {
									min2 = t;
									ite2 = cx_itei1;
								}
							}
							cx_itei1 = cx_itej1;
							a = b;
							cx_itej1 = cx_itej1.next;
						}
						if(cx_cont1) do {
							cx_itej1 = s2.polygon.gverts.next;
							var b1 = cx_itej1;
							var t1 = 0.0;
							if((function($this) {
								var $r;
								var _sx1 = 0.0;
								var _sy1 = 0.0;
								{
									_sx1 = u.x - a.x;
									_sy1 = u.y - a.y;
								}
								var _vx1 = 0.0;
								var _vy1 = 0.0;
								{
									_vx1 = v2.x - u.x;
									_vy1 = v2.y - u.y;
								}
								var _qx1 = 0.0;
								var _qy1 = 0.0;
								{
									_qx1 = b1.x - a.x;
									_qy1 = b1.y - a.y;
								}
								var den1 = _vy1 * _qx1 - _vx1 * _qy1;
								$r = den1 * den1 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den1 = 1 / den1;
									var txx1 = (_qy1 * _sx1 - _qx1 * _sy1) * den1;
									$r = txx1 > nape.Config.epsilon && txx1 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
										$r = sxx1 > nape.Config.epsilon && sxx1 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t1 = txx1;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t1 < min2) {
									min2 = t1;
									ite2 = cx_itei1;
								}
							}
						} while(false);
						if(min2 != 2.0) {
							var cx = 0.0;
							var cy = 0.0;
							var T = min2;
							cx = u.x + (v2.x - u.x) * T;
							cy = u.y + (v2.y - u.y) * T;
							fst_vert = zpp_nape.geom.ZPP_Vec2.get(cx,cy,null);
							zpp_nape.geom.ZPP_Collide.flowpoly.add(fst_vert);
							poly1 = true;
							ite1 = cx_itei;
							cx_cont = false;
							break;
						}
						cx_itei = cx_itej;
						u = v2;
						cx_itej = cx_itej.next;
					}
					if(cx_cont) do {
						cx_itej = s1.polygon.gverts.next;
						var v3 = cx_itej;
						var min3 = 2.0;
						var cx_cont2 = true;
						var cx_itei2 = s2.polygon.gverts.next;
						var a1 = cx_itei2;
						var cx_itej2 = cx_itei2.next;
						while(cx_itej2 != null) {
							var b2 = cx_itej2;
							var t2 = 0.0;
							if((function($this) {
								var $r;
								var _sx2 = 0.0;
								var _sy2 = 0.0;
								{
									_sx2 = u.x - a1.x;
									_sy2 = u.y - a1.y;
								}
								var _vx2 = 0.0;
								var _vy2 = 0.0;
								{
									_vx2 = v3.x - u.x;
									_vy2 = v3.y - u.y;
								}
								var _qx2 = 0.0;
								var _qy2 = 0.0;
								{
									_qx2 = b2.x - a1.x;
									_qy2 = b2.y - a1.y;
								}
								var den2 = _vy2 * _qx2 - _vx2 * _qy2;
								$r = den2 * den2 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den2 = 1 / den2;
									var txx2 = (_qy2 * _sx2 - _qx2 * _sy2) * den2;
									$r = txx2 > nape.Config.epsilon && txx2 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx2 = (_vy2 * _sx2 - _vx2 * _sy2) * den2;
										$r = sxx2 > nape.Config.epsilon && sxx2 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t2 = txx2;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t2 < min3) {
									min3 = t2;
									ite2 = cx_itei2;
								}
							}
							cx_itei2 = cx_itej2;
							a1 = b2;
							cx_itej2 = cx_itej2.next;
						}
						if(cx_cont2) do {
							cx_itej2 = s2.polygon.gverts.next;
							var b3 = cx_itej2;
							var t3 = 0.0;
							if((function($this) {
								var $r;
								var _sx3 = 0.0;
								var _sy3 = 0.0;
								{
									_sx3 = u.x - a1.x;
									_sy3 = u.y - a1.y;
								}
								var _vx3 = 0.0;
								var _vy3 = 0.0;
								{
									_vx3 = v3.x - u.x;
									_vy3 = v3.y - u.y;
								}
								var _qx3 = 0.0;
								var _qy3 = 0.0;
								{
									_qx3 = b3.x - a1.x;
									_qy3 = b3.y - a1.y;
								}
								var den3 = _vy3 * _qx3 - _vx3 * _qy3;
								$r = den3 * den3 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den3 = 1 / den3;
									var txx3 = (_qy3 * _sx3 - _qx3 * _sy3) * den3;
									$r = txx3 > nape.Config.epsilon && txx3 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx3 = (_vy3 * _sx3 - _vx3 * _sy3) * den3;
										$r = sxx3 > nape.Config.epsilon && sxx3 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t3 = txx3;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t3 < min3) {
									min3 = t3;
									ite2 = cx_itei2;
								}
							}
						} while(false);
						if(min3 != 2.0) {
							var cx1 = 0.0;
							var cy1 = 0.0;
							var T1 = min3;
							cx1 = u.x + (v3.x - u.x) * T1;
							cy1 = u.y + (v3.y - u.y) * T1;
							fst_vert = zpp_nape.geom.ZPP_Vec2.get(cx1,cy1,null);
							zpp_nape.geom.ZPP_Collide.flowpoly.add(fst_vert);
							poly1 = true;
							ite1 = cx_itei;
							break;
						}
					} while(false);
					cnt = 2;
				}
				while(true) if(poly1) {
					ite1 = ite1.next;
					ind11++;
					if(ite1 == null) {
						ite1 = s1.polygon.gverts.next;
						ind11 = 0;
					}
					if(!out1[ind11]) {
						var ex = ite1;
						if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(ex.x,ex.y,fst_vert.x,fst_vert.y) < nape.Config.epsilon) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(ex);
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						cnt = 1;
					} else {
						var a2 = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						var b4 = ite1;
						var u1 = ite2;
						var itm = ite2.next;
						if(itm == null) itm = s2.polygon.gverts.next;
						var max = -1.0;
						var itmo = null;
						var indo = 0;
						var icnt = 0;
						var beg_ite = itm;
						var cx_ite4 = itm;
						do {
							var v4 = cx_ite4;
							var t4 = 0.0;
							if((function($this) {
								var $r;
								var _sx4 = 0.0;
								var _sy4 = 0.0;
								{
									_sx4 = u1.x - a2.x;
									_sy4 = u1.y - a2.y;
								}
								var _vx4 = 0.0;
								var _vy4 = 0.0;
								{
									_vx4 = v4.x - u1.x;
									_vy4 = v4.y - u1.y;
								}
								var _qx4 = 0.0;
								var _qy4 = 0.0;
								{
									_qx4 = b4.x - a2.x;
									_qy4 = b4.y - a2.y;
								}
								var den4 = _vy4 * _qx4 - _vx4 * _qy4;
								$r = den4 * den4 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den4 = 1 / den4;
									var txx4 = (_qy4 * _sx4 - _qx4 * _sy4) * den4;
									$r = txx4 > nape.Config.epsilon && txx4 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx4 = (_vy4 * _sx4 - _vx4 * _sy4) * den4;
										$r = sxx4 > nape.Config.epsilon && sxx4 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t4 = txx4;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t4 >= max) {
									itmo = ite2;
									indo = ind2;
									if(++icnt == cnt) {
										max = t4;
										cx_ite4 = beg_ite;
										break;
									} else max = t4;
								}
							}
							u1 = v4;
							ite2 = cx_ite4;
							ind2++;
							if(ind2 >= s2.polygon.edgeCnt) ind2 = 0;
							cx_ite4 = cx_ite4.next;
							if(cx_ite4 == null) cx_ite4 = s2.polygon.gverts.next;
						} while(false);
						while(cx_ite4 != beg_ite) {
							var v5 = cx_ite4;
							var t5 = 0.0;
							if((function($this) {
								var $r;
								var _sx5 = 0.0;
								var _sy5 = 0.0;
								{
									_sx5 = u1.x - a2.x;
									_sy5 = u1.y - a2.y;
								}
								var _vx5 = 0.0;
								var _vy5 = 0.0;
								{
									_vx5 = v5.x - u1.x;
									_vy5 = v5.y - u1.y;
								}
								var _qx5 = 0.0;
								var _qy5 = 0.0;
								{
									_qx5 = b4.x - a2.x;
									_qy5 = b4.y - a2.y;
								}
								var den5 = _vy5 * _qx5 - _vx5 * _qy5;
								$r = den5 * den5 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den5 = 1 / den5;
									var txx5 = (_qy5 * _sx5 - _qx5 * _sy5) * den5;
									$r = txx5 > nape.Config.epsilon && txx5 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx5 = (_vy5 * _sx5 - _vx5 * _sy5) * den5;
										$r = sxx5 > nape.Config.epsilon && sxx5 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t5 = txx5;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t5 >= max) {
									itmo = ite2;
									indo = ind2;
									if(++icnt == cnt) {
										max = t5;
										cx_ite4 = beg_ite;
										break;
									} else max = t5;
								}
							}
							u1 = v5;
							ite2 = cx_ite4;
							ind2++;
							if(ind2 >= s2.polygon.edgeCnt) ind2 = 0;
							cx_ite4 = cx_ite4.next;
							if(cx_ite4 == null) cx_ite4 = s2.polygon.gverts.next;
						}
						if(itmo == null) break;
						var u2 = itmo;
						var itm2 = itmo.next;
						if(itm2 == null) itm2 = s2.polygon.gverts.next;
						var v6 = itm2;
						var cx2 = 0.0;
						var cy2 = 0.0;
						var T2 = max;
						cx2 = u2.x + (v6.x - u2.x) * T2;
						cy2 = u2.y + (v6.y - u2.y) * T2;
						if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(cx2,cy2,fst_vert.x,fst_vert.y) < nape.Config.epsilon) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx2,cy2,null));
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						ite2 = itmo;
						ind2 = indo;
						poly1 = !poly1;
						cnt = 2;
					}
				} else {
					ite2 = ite2.next;
					ind2++;
					if(ite2 == null) {
						ite2 = s2.polygon.gverts.next;
						ind2 = 0;
					}
					if(!out2[ind2]) {
						var ex1 = ite2;
						if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(ex1.x,ex1.y,fst_vert.x,fst_vert.y) < nape.Config.epsilon) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(ex1);
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						cnt = 1;
					} else {
						var a3 = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						var b5 = ite2;
						var u3 = ite1;
						var itm1 = ite1.next;
						if(itm1 == null) itm1 = s1.polygon.gverts.next;
						var max1 = -1.0;
						var itmo1 = null;
						var indo1 = 0;
						var icnt1 = 0;
						var beg_ite1 = itm1;
						var cx_ite5 = itm1;
						do {
							var v7 = cx_ite5;
							var t6 = 0.0;
							if((function($this) {
								var $r;
								var _sx6 = 0.0;
								var _sy6 = 0.0;
								{
									_sx6 = u3.x - a3.x;
									_sy6 = u3.y - a3.y;
								}
								var _vx6 = 0.0;
								var _vy6 = 0.0;
								{
									_vx6 = v7.x - u3.x;
									_vy6 = v7.y - u3.y;
								}
								var _qx6 = 0.0;
								var _qy6 = 0.0;
								{
									_qx6 = b5.x - a3.x;
									_qy6 = b5.y - a3.y;
								}
								var den6 = _vy6 * _qx6 - _vx6 * _qy6;
								$r = den6 * den6 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den6 = 1 / den6;
									var txx6 = (_qy6 * _sx6 - _qx6 * _sy6) * den6;
									$r = txx6 > nape.Config.epsilon && txx6 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx6 = (_vy6 * _sx6 - _vx6 * _sy6) * den6;
										$r = sxx6 > nape.Config.epsilon && sxx6 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t6 = txx6;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t6 >= max1) {
									itmo1 = ite1;
									indo1 = ind11;
									if(++icnt1 == cnt) {
										max1 = t6;
										cx_ite5 = beg_ite1;
										break;
									} else max1 = t6;
								}
							}
							u3 = v7;
							ite1 = cx_ite5;
							ind11++;
							if(ind11 >= s1.polygon.edgeCnt) ind11 = 0;
							cx_ite5 = cx_ite5.next;
							if(cx_ite5 == null) cx_ite5 = s1.polygon.gverts.next;
						} while(false);
						while(cx_ite5 != beg_ite1) {
							var v8 = cx_ite5;
							var t7 = 0.0;
							if((function($this) {
								var $r;
								var _sx7 = 0.0;
								var _sy7 = 0.0;
								{
									_sx7 = u3.x - a3.x;
									_sy7 = u3.y - a3.y;
								}
								var _vx7 = 0.0;
								var _vy7 = 0.0;
								{
									_vx7 = v8.x - u3.x;
									_vy7 = v8.y - u3.y;
								}
								var _qx7 = 0.0;
								var _qy7 = 0.0;
								{
									_qx7 = b5.x - a3.x;
									_qy7 = b5.y - a3.y;
								}
								var den7 = _vy7 * _qx7 - _vx7 * _qy7;
								$r = den7 * den7 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den7 = 1 / den7;
									var txx7 = (_qy7 * _sx7 - _qx7 * _sy7) * den7;
									$r = txx7 > nape.Config.epsilon && txx7 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx7 = (_vy7 * _sx7 - _vx7 * _sy7) * den7;
										$r = sxx7 > nape.Config.epsilon && sxx7 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t7 = txx7;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t7 >= max1) {
									itmo1 = ite1;
									indo1 = ind11;
									if(++icnt1 == cnt) {
										max1 = t7;
										cx_ite5 = beg_ite1;
										break;
									} else max1 = t7;
								}
							}
							u3 = v8;
							ite1 = cx_ite5;
							ind11++;
							if(ind11 >= s1.polygon.edgeCnt) ind11 = 0;
							cx_ite5 = cx_ite5.next;
							if(cx_ite5 == null) cx_ite5 = s1.polygon.gverts.next;
						}
						if(itmo1 == null) break;
						var u4 = itmo1;
						var itm21 = itmo1.next;
						if(itm21 == null) itm21 = s1.polygon.gverts.next;
						var v9 = itm21;
						var cx3 = 0.0;
						var cy3 = 0.0;
						var T3 = max1;
						cx3 = u4.x + (v9.x - u4.x) * T3;
						cy3 = u4.y + (v9.y - u4.y) * T3;
						if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(cx3,cy3,fst_vert.x,fst_vert.y) < nape.Config.epsilon) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx3,cy3,null));
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						ite1 = itmo1;
						ind11 = indo1;
						poly1 = !poly1;
						cnt = 2;
					}
				}
				if(zpp_nape.geom.ZPP_Collide.flowpoly.head != null && zpp_nape.geom.ZPP_Collide.flowpoly.head.next != null && zpp_nape.geom.ZPP_Collide.flowpoly.head.next.next != null) {
					var area = 0.0;
					var COMx = 0.0;
					var COMy = 0.0;
					COMx = 0;
					COMy = 0;
					area = 0.0;
					var cx_ite6 = zpp_nape.geom.ZPP_Collide.flowpoly.head;
					var u5 = cx_ite6.elt;
					cx_ite6 = cx_ite6.next;
					var v10 = cx_ite6.elt;
					cx_ite6 = cx_ite6.next;
					while(cx_ite6 != null) {
						var w = cx_ite6.elt;
						area += v10.x * (w.y - u5.y);
						var cf = w.y * v10.x - w.x * v10.y;
						COMx += (v10.x + w.x) * cf;
						COMy += (v10.y + w.y) * cf;
						u5 = v10;
						v10 = w;
						cx_ite6 = cx_ite6.next;
					}
					cx_ite6 = zpp_nape.geom.ZPP_Collide.flowpoly.head;
					var w1 = cx_ite6.elt;
					area += v10.x * (w1.y - u5.y);
					var cf1 = w1.y * v10.x - w1.x * v10.y;
					COMx += (v10.x + w1.x) * cf1;
					COMy += (v10.y + w1.y) * cf1;
					u5 = v10;
					v10 = w1;
					cx_ite6 = cx_ite6.next;
					var w2 = cx_ite6.elt;
					area += v10.x * (w2.y - u5.y);
					var cf2 = w2.y * v10.x - w2.x * v10.y;
					COMx += (v10.x + w2.x) * cf2;
					COMy += (v10.y + w2.y) * cf2;
					area *= 0.5;
					var ia = 1 / (6 * area);
					var t8 = ia;
					COMx *= t8;
					COMy *= t8;
					arb.overlap = -area;
					arb.centroidx = COMx;
					arb.centroidy = COMy;
					null;
					return true;
				} else return false;
			} else return false;
		} else return false;
	} else {
		var inte = new Array();
		var total1 = true;
		var a0 = null;
		var vi = null;
		var max2 = -1e+100;
		var cont1 = true;
		var vite = s2.polygon.gverts.next;
		var ind3 = 0;
		var cx_ite7 = s2.polygon.edges.head;
		while(cx_ite7 != null) {
			var a4 = cx_ite7.elt;
			var dist = a4.gnormx * s1.circle.worldCOMx + a4.gnormy * s1.circle.worldCOMy;
			if(dist > a4.gprojection + s1.circle.radius) {
				cont1 = false;
				break;
			} else if(dist + s1.circle.radius > a4.gprojection + nape.Config.epsilon) {
				total1 = false;
				inte[ind3] = true;
			}
			dist -= a4.gprojection + s1.circle.radius;
			if(dist > max2) {
				max2 = dist;
				a0 = a4;
				vi = vite;
			}
			vite = vite.next;
			ind3++;
			cx_ite7 = cx_ite7.next;
		}
		if(cont1) {
			if(total1) {
				arb.overlap = s1.circle.area;
				arb.centroidx = s1.circle.worldCOMx;
				arb.centroidy = s1.circle.worldCOMy;
				null;
				return true;
			} else {
				var v0 = vi;
				var v11;
				if(vi.next == null) v11 = s2.polygon.gverts.next; else v11 = vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy?(function($this) {
					var $r;
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					{
						px = v0.x - s1.circle.worldCOMx;
						py = v0.y - s1.circle.worldCOMy;
					}
					var distSqr = px * px + py * py;
					$r = distSqr <= minDist * minDist;
					return $r;
				}(this)):dt >= v11.y * a0.gnormx - v11.x * a0.gnormy?(function($this) {
					var $r;
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					{
						px1 = v11.x - s1.circle.worldCOMx;
						py1 = v11.y - s1.circle.worldCOMy;
					}
					var distSqr1 = px1 * px1 + py1 * py1;
					$r = distSqr1 <= minDist1 * minDist1;
					return $r;
				}(this)):true) {
					var ins = new Array();
					var ind4 = 0;
					var total2 = true;
					var vi1 = null;
					var vind = 0;
					var cx_ite8 = s2.polygon.gverts.next;
					while(cx_ite8 != null) {
						var v12 = cx_ite8;
						var dist1 = zpp_nape.geom.ZPP_VecMath.vec_dsq(v12.x,v12.y,s1.circle.worldCOMx,s1.circle.worldCOMy);
						if(!(ins[ind4] = dist1 <= s1.circle.radius * s1.circle.radius)) total2 = false; else {
							vind = ind4;
							vi1 = cx_ite8;
						}
						ind4++;
						cx_ite8 = cx_ite8.next;
					}
					if(total2) {
						s2.polygon.validate_worldCOM();
						arb.overlap = s2.polygon.area;
						arb.centroidx = s2.polygon.worldCOMx;
						arb.centroidy = s2.polygon.worldCOMy;
						null;
						return true;
					} else {
						while(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
							var p1 = zpp_nape.geom.ZPP_Collide.flowpoly.pop_unsafe();
							if(!p1._inuse) {
								var o1 = p1;
								if(o1.outer != null) {
									o1.outer.zpp_inner = null;
									o1.outer = null;
								}
								o1._isimmutable = null;
								o1._validate = null;
								o1._invalidate = null;
								o1.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
								zpp_nape.geom.ZPP_Vec2.zpp_pool = o1;
							}
						}
						zpp_nape.geom.ZPP_Collide.flowsegs.clear();
						var fst_vert1 = null;
						var state = 1;
						if(vi1 == null) {
							vi1 = s2.polygon.gverts.next;
							state = 2;
						} else zpp_nape.geom.ZPP_Collide.flowpoly.add(fst_vert1 = vi1);
						while(state != 0) if(state == 1) {
							vi1 = vi1.next;
							if(vi1 == null) vi1 = s2.polygon.gverts.next;
							vind++;
							if(vind >= s2.polygon.edgeCnt) vind = 0;
							if(ins[vind]) {
								if(zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,vi1.x,vi1.y) < nape.Config.epsilon) break;
								zpp_nape.geom.ZPP_Collide.flowpoly.add(vi1);
							} else {
								var u6 = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
								var v13 = vi1;
								var tval;
								var vx = 0.0;
								var vy = 0.0;
								vx = v13.x - u6.x;
								vy = v13.y - u6.y;
								var qx = 0.0;
								var qy = 0.0;
								qx = u6.x - s1.circle.worldCOMx;
								qy = u6.y - s1.circle.worldCOMy;
								var A = vx * vx + vy * vy;
								var B = 2 * (qx * vx + qy * vy);
								var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
								var D = Math.sqrt(B * B - 4 * A * C);
								A = 1 / (2 * A);
								var t9 = (-B - D) * A;
								if(t9 < nape.Config.epsilon) tval = (-B + D) * A; else tval = t9;
								var cx4 = 0.0;
								var cy4 = 0.0;
								var T4 = tval;
								cx4 = u6.x + (v13.x - u6.x) * T4;
								cy4 = u6.y + (v13.y - u6.y) * T4;
								if(zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx4,cy4) < nape.Config.epsilon) break;
								zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx4,cy4,null));
								state = 2;
							}
						} else if(state == 2) {
							var vi2 = vi1.next;
							if(vi2 == null) vi2 = s2.polygon.gverts.next;
							var u7 = vi1;
							state = 0;
							var beg_ite2 = vi2;
							var cx_ite9 = vi2;
							do {
								var v14 = cx_ite9;
								var vind2 = vind + 1;
								if(vind2 == s2.polygon.edgeCnt) vind2 = 0;
								if(inte[vind]) {
									if(ins[vind2]) {
										var tval1;
										var vx1 = 0.0;
										var vy1 = 0.0;
										vx1 = v14.x - u7.x;
										vy1 = v14.y - u7.y;
										var qx1 = 0.0;
										var qy1 = 0.0;
										qx1 = u7.x - s1.circle.worldCOMx;
										qy1 = u7.y - s1.circle.worldCOMy;
										var A1 = vx1 * vx1 + vy1 * vy1;
										var B1 = 2 * (qx1 * vx1 + qy1 * vy1);
										var C1 = qx1 * qx1 + qy1 * qy1 - s1.circle.radius * s1.circle.radius;
										var D1 = Math.sqrt(B1 * B1 - 4 * A1 * C1);
										A1 = 1 / (2 * A1);
										var t10 = (-B1 - D1) * A1;
										if(t10 < nape.Config.epsilon) tval1 = (-B1 + D1) * A1; else tval1 = t10;
										var cx5 = 0.0;
										var cy5 = 0.0;
										var T5 = tval1;
										cx5 = u7.x + (v14.x - u7.x) * T5;
										cy5 = u7.y + (v14.y - u7.y) * T5;
										if(zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx5,cy5) < nape.Config.epsilon) {
											state = 0;
											cx_ite9 = beg_ite2;
											break;
										}
										var cp = zpp_nape.geom.ZPP_Vec2.get(cx5,cy5,null);
										zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
										zpp_nape.geom.ZPP_Collide.flowsegs.add(cp);
										zpp_nape.geom.ZPP_Collide.flowpoly.add(cp);
										state = 1;
										cx_ite9 = beg_ite2;
										break;
									} else {
										var t0 = 0.0;
										var t11 = 0.0;
										var two;
										var vx2 = 0.0;
										var vy2 = 0.0;
										vx2 = v14.x - u7.x;
										vy2 = v14.y - u7.y;
										var qx2 = 0.0;
										var qy2 = 0.0;
										qx2 = u7.x - s1.circle.worldCOMx;
										qy2 = u7.y - s1.circle.worldCOMy;
										var A2 = vx2 * vx2 + vy2 * vy2;
										var B2 = 2 * (qx2 * vx2 + qy2 * vy2);
										var C2 = qx2 * qx2 + qy2 * qy2 - s1.circle.radius * s1.circle.radius;
										var D2 = B2 * B2 - 4 * A2 * C2;
										if(D2 * D2 < nape.Config.epsilon) {
											if(D2 < 0) t0 = 10.0; else t0 = t11 = -B2 / (2 * A2);
											two = false;
										} else {
											D2 = Math.sqrt(D2);
											A2 = 1 / (2 * A2);
											t0 = (-B2 - D2) * A2;
											t11 = (-B2 + D2) * A2;
											two = true;
										}
										if(t0 < 1 - nape.Config.epsilon && t11 > nape.Config.epsilon) {
											var cx6 = 0.0;
											var cy6 = 0.0;
											var T6 = t0;
											cx6 = u7.x + (v14.x - u7.x) * T6;
											cy6 = u7.y + (v14.y - u7.y) * T6;
											if(fst_vert1 != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx6,cy6) < nape.Config.epsilon) {
												state = 0;
												cx_ite9 = beg_ite2;
												break;
											}
											var cp1 = zpp_nape.geom.ZPP_Vec2.get(cx6,cy6,null);
											if(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
												zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
												zpp_nape.geom.ZPP_Collide.flowsegs.add(cp1);
											}
											zpp_nape.geom.ZPP_Collide.flowpoly.add(cp1);
											if(fst_vert1 == null) fst_vert1 = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
											if(two) {
												var cx7 = 0.0;
												var cy7 = 0.0;
												var T7 = t11;
												cx7 = u7.x + (v14.x - u7.x) * T7;
												cy7 = u7.y + (v14.y - u7.y) * T7;
												zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx7,cy7,null));
											}
										}
									}
								}
								u7 = v14;
								vi1 = cx_ite9;
								vind = vind2;
								cx_ite9 = cx_ite9.next;
								if(cx_ite9 == null) cx_ite9 = s2.polygon.gverts.next;
							} while(false);
							while(cx_ite9 != beg_ite2) {
								var v15 = cx_ite9;
								var vind21 = vind + 1;
								if(vind21 == s2.polygon.edgeCnt) vind21 = 0;
								if(inte[vind]) {
									if(ins[vind21]) {
										var tval2;
										var vx3 = 0.0;
										var vy3 = 0.0;
										vx3 = v15.x - u7.x;
										vy3 = v15.y - u7.y;
										var qx3 = 0.0;
										var qy3 = 0.0;
										qx3 = u7.x - s1.circle.worldCOMx;
										qy3 = u7.y - s1.circle.worldCOMy;
										var A3 = vx3 * vx3 + vy3 * vy3;
										var B3 = 2 * (qx3 * vx3 + qy3 * vy3);
										var C3 = qx3 * qx3 + qy3 * qy3 - s1.circle.radius * s1.circle.radius;
										var D3 = Math.sqrt(B3 * B3 - 4 * A3 * C3);
										A3 = 1 / (2 * A3);
										var t12 = (-B3 - D3) * A3;
										if(t12 < nape.Config.epsilon) tval2 = (-B3 + D3) * A3; else tval2 = t12;
										var cx8 = 0.0;
										var cy8 = 0.0;
										var T8 = tval2;
										cx8 = u7.x + (v15.x - u7.x) * T8;
										cy8 = u7.y + (v15.y - u7.y) * T8;
										if(zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx8,cy8) < nape.Config.epsilon) {
											state = 0;
											cx_ite9 = beg_ite2;
											break;
										}
										var cp2 = zpp_nape.geom.ZPP_Vec2.get(cx8,cy8,null);
										zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
										zpp_nape.geom.ZPP_Collide.flowsegs.add(cp2);
										zpp_nape.geom.ZPP_Collide.flowpoly.add(cp2);
										state = 1;
										cx_ite9 = beg_ite2;
										break;
									} else {
										var t01 = 0.0;
										var t13 = 0.0;
										var two1;
										var vx4 = 0.0;
										var vy4 = 0.0;
										vx4 = v15.x - u7.x;
										vy4 = v15.y - u7.y;
										var qx4 = 0.0;
										var qy4 = 0.0;
										qx4 = u7.x - s1.circle.worldCOMx;
										qy4 = u7.y - s1.circle.worldCOMy;
										var A4 = vx4 * vx4 + vy4 * vy4;
										var B4 = 2 * (qx4 * vx4 + qy4 * vy4);
										var C4 = qx4 * qx4 + qy4 * qy4 - s1.circle.radius * s1.circle.radius;
										var D4 = B4 * B4 - 4 * A4 * C4;
										if(D4 * D4 < nape.Config.epsilon) {
											if(D4 < 0) t01 = 10.0; else t01 = t13 = -B4 / (2 * A4);
											two1 = false;
										} else {
											D4 = Math.sqrt(D4);
											A4 = 1 / (2 * A4);
											t01 = (-B4 - D4) * A4;
											t13 = (-B4 + D4) * A4;
											two1 = true;
										}
										if(t01 < 1 - nape.Config.epsilon && t13 > nape.Config.epsilon) {
											var cx9 = 0.0;
											var cy9 = 0.0;
											var T9 = t01;
											cx9 = u7.x + (v15.x - u7.x) * T9;
											cy9 = u7.y + (v15.y - u7.y) * T9;
											if(fst_vert1 != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx9,cy9) < nape.Config.epsilon) {
												state = 0;
												cx_ite9 = beg_ite2;
												break;
											}
											var cp3 = zpp_nape.geom.ZPP_Vec2.get(cx9,cy9,null);
											if(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
												zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
												zpp_nape.geom.ZPP_Collide.flowsegs.add(cp3);
											}
											zpp_nape.geom.ZPP_Collide.flowpoly.add(cp3);
											if(fst_vert1 == null) fst_vert1 = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
											if(two1) {
												var cx10 = 0.0;
												var cy10 = 0.0;
												var T10 = t13;
												cx10 = u7.x + (v15.x - u7.x) * T10;
												cy10 = u7.y + (v15.y - u7.y) * T10;
												zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx10,cy10,null));
											}
										}
									}
								}
								u7 = v15;
								vi1 = cx_ite9;
								vind = vind21;
								cx_ite9 = cx_ite9.next;
								if(cx_ite9 == null) cx_ite9 = s2.polygon.gverts.next;
							}
						}
						if(zpp_nape.geom.ZPP_Collide.flowpoly.head == null) return false; else if(zpp_nape.geom.ZPP_Collide.flowpoly.head.next == null) {
							var all = true;
							var cx_ite10 = s2.polygon.edges.head;
							while(cx_ite10 != null) {
								var e = cx_ite10.elt;
								var dist2 = e.gnormx * s1.circle.worldCOMx + e.gnormy * s1.circle.worldCOMy;
								if(dist2 > e.gprojection) {
									all = false;
									break;
								}
								cx_ite10 = cx_ite10.next;
							}
							if(all) {
								arb.overlap = s1.circle.area;
								arb.centroidx = s1.circle.worldCOMx;
								arb.centroidy = s1.circle.worldCOMy;
								null;
								return true;
							} else return false;
						} else {
							var COMx1 = 0;
							var COMy1 = 0;
							var area1 = 0.0;
							if(zpp_nape.geom.ZPP_Collide.flowpoly.head.next.next != null) {
								var parea = 0.0;
								var pCOMx = 0.0;
								var pCOMy = 0.0;
								pCOMx = 0;
								pCOMy = 0;
								parea = 0.0;
								var cx_ite11 = zpp_nape.geom.ZPP_Collide.flowpoly.head;
								var u8 = cx_ite11.elt;
								cx_ite11 = cx_ite11.next;
								var v16 = cx_ite11.elt;
								cx_ite11 = cx_ite11.next;
								while(cx_ite11 != null) {
									var w3 = cx_ite11.elt;
									parea += v16.x * (w3.y - u8.y);
									var cf3 = w3.y * v16.x - w3.x * v16.y;
									pCOMx += (v16.x + w3.x) * cf3;
									pCOMy += (v16.y + w3.y) * cf3;
									u8 = v16;
									v16 = w3;
									cx_ite11 = cx_ite11.next;
								}
								cx_ite11 = zpp_nape.geom.ZPP_Collide.flowpoly.head;
								var w4 = cx_ite11.elt;
								parea += v16.x * (w4.y - u8.y);
								var cf4 = w4.y * v16.x - w4.x * v16.y;
								pCOMx += (v16.x + w4.x) * cf4;
								pCOMy += (v16.y + w4.y) * cf4;
								u8 = v16;
								v16 = w4;
								cx_ite11 = cx_ite11.next;
								var w5 = cx_ite11.elt;
								parea += v16.x * (w5.y - u8.y);
								var cf5 = w5.y * v16.x - w5.x * v16.y;
								pCOMx += (v16.x + w5.x) * cf5;
								pCOMy += (v16.y + w5.y) * cf5;
								parea *= 0.5;
								var ia1 = 1 / (6 * parea);
								var t14 = ia1;
								pCOMx *= t14;
								pCOMy *= t14;
								var t15 = -parea;
								COMx1 += pCOMx * t15;
								COMy1 += pCOMy * t15;
								area1 -= parea;
							} else {
								zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
								zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.next.elt);
							}
							while(!(zpp_nape.geom.ZPP_Collide.flowsegs.head == null)) {
								var u9 = zpp_nape.geom.ZPP_Collide.flowsegs.pop_unsafe();
								var v17 = zpp_nape.geom.ZPP_Collide.flowsegs.pop_unsafe();
								var dx = 0.0;
								var dy = 0.0;
								dx = v17.x - u9.x;
								dy = v17.y - u9.y;
								var nx = 0.0;
								var ny = 0.0;
								nx = dx;
								ny = dy;
								var d = nx * nx + ny * ny;
								var imag = 1.0 / Math.sqrt(d);
								var t16 = imag;
								nx *= t16;
								ny *= t16;
								var t17 = nx;
								nx = -ny;
								ny = t17;
								var cx11 = 0.0;
								var cy11 = 0.0;
								cx11 = u9.x + v17.x;
								cy11 = u9.y + v17.y;
								var t18 = 0.5;
								cx11 *= t18;
								cy11 *= t18;
								var t19 = 1.0;
								cx11 -= s1.circle.worldCOMx * t19;
								cy11 -= s1.circle.worldCOMy * t19;
								var xd = nx * cx11 + ny * cy11;
								var carea = 0.0;
								var ccom = 0.0;
								var X = xd;
								var cos = X / s1.circle.radius;
								var sin = Math.sqrt(1 - cos * cos);
								var theta = Math.acos(cos);
								carea = s1.circle.radius * (s1.circle.radius * theta - X * sin);
								ccom = 0.66666666666666663 * s1.circle.radius * sin * sin * sin / (theta - cos * sin);
								cx11 = s1.circle.worldCOMx;
								cy11 = s1.circle.worldCOMy;
								var t20 = ccom;
								cx11 += nx * t20;
								cy11 += ny * t20;
								var t21 = carea;
								COMx1 += cx11 * t21;
								COMy1 += cy11 * t21;
								area1 += carea;
							}
							var t22 = 1.0 / area1;
							COMx1 *= t22;
							COMy1 *= t22;
							arb.overlap = area1;
							arb.centroidx = COMx1;
							arb.centroidy = COMy1;
							null;
							return true;
						}
					}
				} else return false;
			}
		} else return false;
	} else {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var deltax = 0.0;
		var deltay = 0.0;
		deltax = c2.worldCOMx - c1.worldCOMx;
		deltay = c2.worldCOMy - c1.worldCOMy;
		var cr = c1.radius + c2.radius;
		var ds = deltax * deltax + deltay * deltay;
		if(ds > cr * cr) return false; else if(ds < nape.Config.epsilon * nape.Config.epsilon) {
			if(c1.radius < c2.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
				null;
			} else {
				arb.overlap = c2.area;
				arb.centroidx = c2.worldCOMx;
				arb.centroidy = c2.worldCOMy;
				null;
			}
			return true;
		} else {
			var d1 = Math.sqrt(ds);
			var id = 1 / d1;
			var x1 = 0.5 * (d1 - (c2.radius * c2.radius - c1.radius * c1.radius) * id);
			if(x1 <= -c1.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
				null;
			} else {
				var x2 = d1 - x1;
				if(x2 <= -c2.radius) {
					arb.overlap = c2.area;
					arb.centroidx = c2.worldCOMx;
					arb.centroidy = c2.worldCOMy;
					null;
				} else {
					var area11 = 0.0;
					var y1 = 0.0;
					var area2 = 0.0;
					var y2 = 0.0;
					var X1 = x1;
					var cos1 = X1 / c1.radius;
					var sin1 = Math.sqrt(1 - cos1 * cos1);
					var theta1 = Math.acos(cos1);
					area11 = c1.radius * (c1.radius * theta1 - X1 * sin1);
					y1 = 0.66666666666666663 * c1.radius * sin1 * sin1 * sin1 / (theta1 - cos1 * sin1);
					var X2 = x2;
					var cos2 = X2 / c2.radius;
					var sin2 = Math.sqrt(1 - cos2 * cos2);
					var theta2 = Math.acos(cos2);
					area2 = c2.radius * (c2.radius * theta2 - X2 * sin2);
					y2 = 0.66666666666666663 * c2.radius * sin2 * sin2 * sin2 / (theta2 - cos2 * sin2);
					var tarea = area11 + area2;
					var ya = (y1 * area11 + (d1 - y2) * area2) / tarea * id;
					arb.overlap = tarea;
					arb.centroidx = c1.worldCOMx + deltax * ya;
					arb.centroidy = c1.worldCOMy + deltay * ya;
					null;
				}
			}
			return true;
		}
	}
};
zpp_nape.geom.ZPP_Convex = function() { };
$hxClasses["zpp_nape.geom.ZPP_Convex"] = zpp_nape.geom.ZPP_Convex;
zpp_nape.geom.ZPP_Convex.__name__ = ["zpp_nape","geom","ZPP_Convex"];
zpp_nape.geom.ZPP_Convex.isinner = function(a,b,c) {
	var ux = 0.0;
	var uy = 0.0;
	ux = a.x - b.x;
	uy = a.y - b.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = c.x - b.x;
	vy = c.y - b.y;
	return vy * ux - vx * uy >= 0;
};
zpp_nape.geom.ZPP_Convex.optimise = function(P) {
	var F = P.vertices;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			p.sort();
			nite = nite.next;
		} while(nite != L);
	}
	var F1 = P.vertices;
	var L1 = P.vertices;
	if(F1 != null) {
		var nite1 = F1;
		do {
			var p1 = nite1;
			var pright = p1.prev;
			var ppre = null;
			var cx_ite = p1.diagonals.head;
			while(cx_ite != null) {
				var pdiag = cx_ite.elt;
				var pleft;
				if(cx_ite.next == null) pleft = p1.next; else pleft = cx_ite.next.elt;
				if(!zpp_nape.geom.ZPP_Convex.isinner(pleft,p1,pright)) {
					ppre = cx_ite;
					pright = pdiag;
					cx_ite = cx_ite.next;
					continue;
				}
				var removable = true;
				var q = pdiag;
				var qright = q.prev;
				var qpre = null;
				var cx_ite1 = q.diagonals.head;
				while(cx_ite1 != null) {
					var qdiag = cx_ite1.elt;
					if(qdiag == p1) {
						var qleft;
						if(cx_ite1.next == null) qleft = q.next; else qleft = cx_ite1.next.elt;
						removable = zpp_nape.geom.ZPP_Convex.isinner(qleft,q,qright);
						break;
					}
					qright = qdiag;
					qpre = cx_ite1;
					cx_ite1 = cx_ite1.next;
				}
				if(removable) {
					cx_ite = p1.diagonals.erase(ppre);
					q.diagonals.erase(qpre);
					continue;
				}
				pright = pdiag;
				ppre = cx_ite;
				cx_ite = cx_ite.next;
			}
			nite1 = nite1.next;
		} while(nite1 != L1);
	}
};
zpp_nape.geom.ZPP_ConvexRayResult = function() {
	this.toiDistance = 0.0;
	this.next = null;
	this.inner = false;
	this.ray = null;
	this.position = null;
	this.convex = null;
	this.shape = null;
	this.normal = null;
};
$hxClasses["zpp_nape.geom.ZPP_ConvexRayResult"] = zpp_nape.geom.ZPP_ConvexRayResult;
zpp_nape.geom.ZPP_ConvexRayResult.__name__ = ["zpp_nape","geom","ZPP_ConvexRayResult"];
zpp_nape.geom.ZPP_ConvexRayResult.getRay = function(normal,time,inner,shape) {
	var ret;
	if(zpp_nape.geom.ZPP_ConvexRayResult.rayPool == null) {
		zpp_nape.geom.ZPP_ConvexRayResult.internal = true;
		ret = new nape.geom.RayResult();
		ret.zpp_inner = new zpp_nape.geom.ZPP_ConvexRayResult();
		ret.zpp_inner.ray = ret;
		zpp_nape.geom.ZPP_ConvexRayResult.internal = false;
	} else {
		ret = zpp_nape.geom.ZPP_ConvexRayResult.rayPool.ray;
		zpp_nape.geom.ZPP_ConvexRayResult.rayPool = zpp_nape.geom.ZPP_ConvexRayResult.rayPool.next;
		ret.zpp_inner.next = null;
	}
	var zinner = ret.zpp_inner;
	zinner.normal = normal;
	normal.zpp_inner._immutable = true;
	zinner.toiDistance = time;
	zinner.inner = inner;
	zinner.shape = shape;
	return ret;
};
zpp_nape.geom.ZPP_ConvexRayResult.getConvex = function(normal,position,toiDistance,shape) {
	var ret;
	if(zpp_nape.geom.ZPP_ConvexRayResult.convexPool == null) {
		zpp_nape.geom.ZPP_ConvexRayResult.internal = true;
		ret = new nape.geom.ConvexResult();
		ret.zpp_inner = new zpp_nape.geom.ZPP_ConvexRayResult();
		ret.zpp_inner.convex = ret;
		zpp_nape.geom.ZPP_ConvexRayResult.internal = false;
	} else {
		ret = zpp_nape.geom.ZPP_ConvexRayResult.convexPool.convex;
		zpp_nape.geom.ZPP_ConvexRayResult.convexPool = zpp_nape.geom.ZPP_ConvexRayResult.convexPool.next;
		ret.zpp_inner.next = null;
	}
	var inner = ret.zpp_inner;
	inner.normal = normal;
	inner.position = position;
	normal.zpp_inner._immutable = true;
	position.zpp_inner._immutable = true;
	inner.toiDistance = toiDistance;
	inner.shape = shape;
	return ret;
};
zpp_nape.geom.ZPP_ConvexRayResult.prototype = {
	disposed: function() {
	}
	,free: function() {
		this.normal.zpp_inner._immutable = false;
		this.normal.dispose();
		if(this.position != null) {
			this.position.zpp_inner._immutable = false;
			this.position.dispose();
		}
		this.shape = null;
		this.toiDistance = 0.0;
		if(this.convex != null) {
			this.next = zpp_nape.geom.ZPP_ConvexRayResult.convexPool;
			zpp_nape.geom.ZPP_ConvexRayResult.convexPool = this;
		} else {
			this.next = zpp_nape.geom.ZPP_ConvexRayResult.rayPool;
			zpp_nape.geom.ZPP_ConvexRayResult.rayPool = this;
		}
	}
	,__class__: zpp_nape.geom.ZPP_ConvexRayResult
};
zpp_nape.geom.ZPP_CutVert = function() {
	this.used = false;
	this.rank = 0;
	this.parent = null;
	this.positive = false;
	this.value = 0.0;
	this.vert = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.next = null;
	this.prev = null;
};
$hxClasses["zpp_nape.geom.ZPP_CutVert"] = zpp_nape.geom.ZPP_CutVert;
zpp_nape.geom.ZPP_CutVert.__name__ = ["zpp_nape","geom","ZPP_CutVert"];
zpp_nape.geom.ZPP_CutVert.path = function(poly) {
	var ret;
	if(zpp_nape.geom.ZPP_CutVert.zpp_pool == null) ret = new zpp_nape.geom.ZPP_CutVert(); else {
		ret = zpp_nape.geom.ZPP_CutVert.zpp_pool;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.vert = poly;
	ret.parent = ret;
	ret.rank = 0;
	ret.used = false;
	return ret;
};
zpp_nape.geom.ZPP_CutVert.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.vert = null;
		this.parent = null;
	}
	,__class__: zpp_nape.geom.ZPP_CutVert
};
zpp_nape.geom.ZPP_CutInt = function() {
	this.path1 = null;
	this.start = null;
	this.end = null;
	this.path0 = null;
	this.vertex = false;
	this.virtualint = false;
	this.time = 0.0;
	this.next = null;
};
$hxClasses["zpp_nape.geom.ZPP_CutInt"] = zpp_nape.geom.ZPP_CutInt;
zpp_nape.geom.ZPP_CutInt.__name__ = ["zpp_nape","geom","ZPP_CutInt"];
zpp_nape.geom.ZPP_CutInt.get = function(time,end,start,path0,path1,virtualint,vertex) {
	if(vertex == null) vertex = false;
	if(virtualint == null) virtualint = false;
	var ret;
	if(zpp_nape.geom.ZPP_CutInt.zpp_pool == null) ret = new zpp_nape.geom.ZPP_CutInt(); else {
		ret = zpp_nape.geom.ZPP_CutInt.zpp_pool;
		zpp_nape.geom.ZPP_CutInt.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.virtualint = virtualint;
	ret.end = end;
	ret.start = start;
	ret.path0 = path0;
	ret.path1 = path1;
	ret.time = time;
	ret.vertex = vertex;
	return ret;
};
zpp_nape.geom.ZPP_CutInt.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.end = this.start = null;
		this.path0 = this.path1 = null;
	}
	,__class__: zpp_nape.geom.ZPP_CutInt
};
zpp_nape.geom.ZPP_Cutter = function() { };
$hxClasses["zpp_nape.geom.ZPP_Cutter"] = zpp_nape.geom.ZPP_Cutter;
zpp_nape.geom.ZPP_Cutter.__name__ = ["zpp_nape","geom","ZPP_Cutter"];
zpp_nape.geom.ZPP_Cutter.run = function(P,_start,_end,bstart,bend,output) {
	var px = 0.0;
	var py = 0.0;
	_start.zpp_inner.validate();
	px = _start.zpp_inner.x;
	_start.zpp_inner.validate();
	py = _start.zpp_inner.y;
	var dx = 0.0;
	var dy = 0.0;
	dx = (function($this) {
		var $r;
		_end.zpp_inner.validate();
		$r = _end.zpp_inner.x;
		return $r;
	}(this)) - px;
	dy = (function($this) {
		var $r;
		_end.zpp_inner.validate();
		$r = _end.zpp_inner.y;
		return $r;
	}(this)) - py;
	var min;
	if(bstart) min = 0; else min = Math.NEGATIVE_INFINITY;
	var max;
	if(bend) max = 1; else max = Math.POSITIVE_INFINITY;
	var crx = -(py * dx - px * dy);
	var verts = null;
	var clashes = false;
	var p = P;
	do {
		var c;
		if(zpp_nape.geom.ZPP_CutVert.zpp_pool == null) c = new zpp_nape.geom.ZPP_CutVert(); else {
			c = zpp_nape.geom.ZPP_CutVert.zpp_pool;
			zpp_nape.geom.ZPP_CutVert.zpp_pool = c.next;
			c.next = null;
		}
		null;
		c.vert = p;
		c.posx = c.vert.x;
		c.posy = c.vert.y;
		c.value = c.posy * dx - c.posx * dy + crx;
		c.positive = c.value > 0;
		if(c.value == 0) clashes = true;
		var obj = c;
		if(verts == null) verts = obj.prev = obj.next = obj; else {
			obj.prev = verts;
			obj.next = verts.next;
			verts.next.prev = obj;
			verts.next = obj;
		}
		verts = obj;
		p = p.next;
	} while(p != P);
	if(clashes) {
		var start = null;
		var F = verts;
		var L = verts;
		if(F != null) {
			var nite = F;
			do {
				var p1 = nite;
				if(p1.value != 0.0) {
					start = p1;
					break;
				}
				nite = nite.next;
			} while(nite != L);
		}
		var nx = 0.0;
		var ny = 0.0;
		nx = dx;
		ny = dy;
		var d = nx * nx + ny * ny;
		var imag = 1.0 / Math.sqrt(d);
		var t = imag;
		nx *= t;
		ny *= t;
		var t1 = nx;
		nx = -ny;
		ny = t1;
		var pre = null;
		var p2 = start;
		do {
			if(p2.value != 0.0 && (pre == null || p2 == pre.next)) {
				pre = p2;
				p2 = p2.next;
				continue;
			}
			var prod = pre.value * p2.value;
			if(prod == 0) {
				p2 = p2.next;
				continue;
			}
			var a = pre.next;
			var positive;
			if(prod > 0) positive = pre.positive; else {
				var b = a.next;
				var midx = 0.0;
				var midy = 0.0;
				midx = a.posx + b.posx;
				midy = a.posy + b.posy;
				var t2 = 0.5;
				midx *= t2;
				midy *= t2;
				var x = midx + nx * 1e-8;
				var y = midy + ny * 1e-8;
				var ret = false;
				var F1 = P;
				var L1 = P;
				if(F1 != null) {
					var nite1 = F1;
					do {
						var p3 = nite1;
						var q = p3.prev;
						if((p3.y < y && q.y >= y || q.y < y && p3.y >= y) && (p3.x <= x || q.x <= x)) {
							if(p3.x + (y - p3.y) / (q.y - p3.y) * (q.x - p3.x) < x) ret = !ret;
						}
						nite1 = nite1.next;
					} while(nite1 != L1);
				}
				positive = ret;
			}
			var F2 = a;
			var L2 = p2;
			if(F2 != null) {
				var nite2 = F2;
				do {
					var q1 = nite2;
					q1.positive = positive;
					nite2 = nite2.next;
				} while(nite2 != L2);
			}
			pre = p2;
			p2 = p2.next;
		} while(p2 != start);
		do {
			if(p2.value != 0.0 && (pre == null || p2 == pre.next)) {
				pre = p2;
				p2 = p2.next;
				continue;
			}
			var prod1 = pre.value * p2.value;
			if(prod1 == 0) {
				p2 = p2.next;
				continue;
			}
			var a1 = pre.next;
			var positive1;
			if(prod1 > 0) positive1 = pre.positive; else {
				var b1 = a1.next;
				var midx1 = 0.0;
				var midy1 = 0.0;
				midx1 = a1.posx + b1.posx;
				midy1 = a1.posy + b1.posy;
				var t3 = 0.5;
				midx1 *= t3;
				midy1 *= t3;
				var x1 = midx1 + nx * 1e-8;
				var y1 = midy1 + ny * 1e-8;
				var ret1 = false;
				var F3 = P;
				var L3 = P;
				if(F3 != null) {
					var nite3 = F3;
					do {
						var p4 = nite3;
						var q2 = p4.prev;
						if((p4.y < y1 && q2.y >= y1 || q2.y < y1 && p4.y >= y1) && (p4.x <= x1 || q2.x <= x1)) {
							if(p4.x + (y1 - p4.y) / (q2.y - p4.y) * (q2.x - p4.x) < x1) ret1 = !ret1;
						}
						nite3 = nite3.next;
					} while(nite3 != L3);
				}
				positive1 = ret1;
			}
			var F4 = a1;
			var L4 = p2;
			if(F4 != null) {
				var nite4 = F4;
				do {
					var q3 = nite4;
					q3.positive = positive1;
					nite4 = nite4.next;
				} while(nite4 != L4);
			}
			pre = p2;
			p2 = p2.next;
		} while(false);
	}
	if(zpp_nape.geom.ZPP_Cutter.ints == null) zpp_nape.geom.ZPP_Cutter.ints = new zpp_nape.util.ZNPList_ZPP_CutInt();
	if(zpp_nape.geom.ZPP_Cutter.paths == null) zpp_nape.geom.ZPP_Cutter.paths = new zpp_nape.util.ZNPList_ZPP_CutVert();
	var start1 = null;
	var obj1 = zpp_nape.geom.ZPP_GeomVert.get(verts.posx,verts.posy);
	if(start1 == null) start1 = obj1.prev = obj1.next = obj1; else {
		obj1.next = start1;
		obj1.prev = start1.prev;
		start1.prev.next = obj1;
		start1.prev = obj1;
	}
	obj1;
	var origin = start1;
	var firstpath = zpp_nape.geom.ZPP_CutVert.path(start1);
	zpp_nape.geom.ZPP_Cutter.paths.add(firstpath);
	var i = verts;
	do {
		var j = i.next;
		var pj = zpp_nape.geom.ZPP_GeomVert.get(j.posx,j.posy);
		if(i.positive == j.positive) {
			var obj2 = pj;
			if(start1 == null) start1 = obj2.prev = obj2.next = obj2; else {
				obj2.next = start1;
				obj2.prev = start1.prev;
				start1.prev.next = obj2;
				start1.prev = obj2;
			}
			obj2;
		} else {
			var ux = 0.0;
			var uy = 0.0;
			ux = j.posx - i.posx;
			uy = j.posy - i.posy;
			var denom = dy * ux - dx * uy;
			denom = 1 / denom;
			var pax = 0.0;
			var pay = 0.0;
			pax = px - i.posx;
			pay = py - i.posy;
			var s = (uy * pax - ux * pay) * denom;
			if(s < min || s > max) {
				zpp_nape.geom.ZPP_Cutter.ints.add(zpp_nape.geom.ZPP_CutInt.get(s,null,null,null,null,true,null));
				var obj3 = pj;
				if(start1 == null) start1 = obj3.prev = obj3.next = obj3; else {
					obj3.next = start1;
					obj3.prev = start1.prev;
					start1.prev.next = obj3;
					start1.prev = obj3;
				}
				obj3;
			} else if(i.value == 0) {
				var endof = start1.prev;
				start1 = null;
				var obj4 = zpp_nape.geom.ZPP_GeomVert.get(endof.x,endof.y);
				if(start1 == null) start1 = obj4.prev = obj4.next = obj4; else {
					obj4.next = start1;
					obj4.prev = start1.prev;
					start1.prev.next = obj4;
					start1.prev = obj4;
				}
				obj4;
				var obj5 = pj;
				if(start1 == null) start1 = obj5.prev = obj5.next = obj5; else {
					obj5.next = start1;
					obj5.prev = start1.prev;
					start1.prev.next = obj5;
					start1.prev = obj5;
				}
				obj5;
				var prepath = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.paths.add(zpp_nape.geom.ZPP_CutVert.path(start1));
				var postpath = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.ints.add(zpp_nape.geom.ZPP_CutInt.get(s,endof,start1,prepath,postpath,true,null));
			} else if(j.value == 0) {
				var obj6 = pj;
				if(start1 == null) start1 = obj6.prev = obj6.next = obj6; else {
					obj6.next = start1;
					obj6.prev = start1.prev;
					start1.prev.next = obj6;
					start1.prev = obj6;
				}
				obj6;
				var endof1 = start1.prev;
				start1 = null;
				var obj7 = zpp_nape.geom.ZPP_GeomVert.get(j.posx,j.posy);
				if(start1 == null) start1 = obj7.prev = obj7.next = obj7; else {
					obj7.next = start1;
					obj7.prev = start1.prev;
					start1.prev.next = obj7;
					start1.prev = obj7;
				}
				obj7;
				var prepath1 = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.paths.add(zpp_nape.geom.ZPP_CutVert.path(start1));
				var postpath1 = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.ints.add(zpp_nape.geom.ZPP_CutInt.get(s,endof1,start1,prepath1,postpath1,true,null));
			} else {
				var t4 = (dy * pax - dx * pay) * denom;
				var qx = 0.0;
				var qy = 0.0;
				qx = i.posx;
				qy = i.posy;
				var t5 = t4;
				qx += ux * t5;
				qy += uy * t5;
				var obj8 = zpp_nape.geom.ZPP_GeomVert.get(qx,qy);
				if(start1 == null) start1 = obj8.prev = obj8.next = obj8; else {
					obj8.next = start1;
					obj8.prev = start1.prev;
					start1.prev.next = obj8;
					start1.prev = obj8;
				}
				obj8;
				var endof2 = start1.prev;
				start1 = null;
				var obj9 = zpp_nape.geom.ZPP_GeomVert.get(qx,qy);
				if(start1 == null) start1 = obj9.prev = obj9.next = obj9; else {
					obj9.next = start1;
					obj9.prev = start1.prev;
					start1.prev.next = obj9;
					start1.prev = obj9;
				}
				obj9;
				var obj10 = pj;
				if(start1 == null) start1 = obj10.prev = obj10.next = obj10; else {
					obj10.next = start1;
					obj10.prev = start1.prev;
					start1.prev.next = obj10;
					start1.prev = obj10;
				}
				obj10;
				var prepath2 = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.paths.add(zpp_nape.geom.ZPP_CutVert.path(start1));
				var postpath2 = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.ints.add(zpp_nape.geom.ZPP_CutInt.get(s,endof2,start1,prepath2,postpath2,false,null));
			}
		}
		i = i.next;
	} while(i != verts);
	var endof3 = start1.prev;
	endof3.next.prev = origin.prev;
	origin.prev.next = endof3.next;
	endof3.next = origin;
	origin.prev = endof3;
	var lastpath = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
	var xr;
	if(firstpath == firstpath.parent) xr = firstpath; else {
		var obj11 = firstpath;
		var stack = null;
		while(obj11 != obj11.parent) {
			var nxt = obj11.parent;
			obj11.parent = stack;
			stack = obj11;
			obj11 = nxt;
		}
		while(stack != null) {
			var nxt1 = stack.parent;
			stack.parent = obj11;
			stack = nxt1;
		}
		xr = obj11;
	}
	var yr;
	if(lastpath == lastpath.parent) yr = lastpath; else {
		var obj12 = lastpath;
		var stack1 = null;
		while(obj12 != obj12.parent) {
			var nxt2 = obj12.parent;
			obj12.parent = stack1;
			stack1 = obj12;
			obj12 = nxt2;
		}
		while(stack1 != null) {
			var nxt3 = stack1.parent;
			stack1.parent = obj12;
			stack1 = nxt3;
		}
		yr = obj12;
	}
	if(xr != yr) {
		if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
			yr.parent = xr;
			xr.rank++;
		}
	}
	var xxlist = zpp_nape.geom.ZPP_Cutter.ints;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt4 = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt4 = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt4 = left;
						left = left.next;
						leftSize--;
					} else if(left.elt.time < right.elt.time) {
						nxt4 = left;
						left = left.next;
						leftSize--;
					} else {
						nxt4 = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt4; else head = nxt4;
					tail = nxt4;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	while(!(zpp_nape.geom.ZPP_Cutter.ints.head == null)) {
		var i1 = zpp_nape.geom.ZPP_Cutter.ints.pop_unsafe();
		var j1 = zpp_nape.geom.ZPP_Cutter.ints.pop_unsafe();
		if(!i1.virtualint && !j1.virtualint) {
			i1.end.next.prev = j1.start.prev;
			j1.start.prev.next = i1.end.next;
			i1.end.next = j1.start;
			j1.start.prev = i1.end;
			j1.end.next.prev = i1.start.prev;
			i1.start.prev.next = j1.end.next;
			j1.end.next = i1.start;
			i1.start.prev = j1.end;
			var xr1;
			if(i1.path0 == i1.path0.parent) xr1 = i1.path0; else {
				var obj13 = i1.path0;
				var stack2 = null;
				while(obj13 != obj13.parent) {
					var nxt5 = obj13.parent;
					obj13.parent = stack2;
					stack2 = obj13;
					obj13 = nxt5;
				}
				while(stack2 != null) {
					var nxt6 = stack2.parent;
					stack2.parent = obj13;
					stack2 = nxt6;
				}
				xr1 = obj13;
			}
			var yr1;
			if(j1.path1 == j1.path1.parent) yr1 = j1.path1; else {
				var obj14 = j1.path1;
				var stack3 = null;
				while(obj14 != obj14.parent) {
					var nxt7 = obj14.parent;
					obj14.parent = stack3;
					stack3 = obj14;
					obj14 = nxt7;
				}
				while(stack3 != null) {
					var nxt8 = stack3.parent;
					stack3.parent = obj14;
					stack3 = nxt8;
				}
				yr1 = obj14;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
			var xr2;
			if(i1.path1 == i1.path1.parent) xr2 = i1.path1; else {
				var obj15 = i1.path1;
				var stack4 = null;
				while(obj15 != obj15.parent) {
					var nxt9 = obj15.parent;
					obj15.parent = stack4;
					stack4 = obj15;
					obj15 = nxt9;
				}
				while(stack4 != null) {
					var nxt10 = stack4.parent;
					stack4.parent = obj15;
					stack4 = nxt10;
				}
				xr2 = obj15;
			}
			var yr2;
			if(j1.path0 == j1.path0.parent) yr2 = j1.path0; else {
				var obj16 = j1.path0;
				var stack5 = null;
				while(obj16 != obj16.parent) {
					var nxt11 = obj16.parent;
					obj16.parent = stack5;
					stack5 = obj16;
					obj16 = nxt11;
				}
				while(stack5 != null) {
					var nxt12 = stack5.parent;
					stack5.parent = obj16;
					stack5 = nxt12;
				}
				yr2 = obj16;
			}
			if(xr2 != yr2) {
				if(xr2.rank < yr2.rank) xr2.parent = yr2; else if(xr2.rank > yr2.rank) yr2.parent = xr2; else {
					yr2.parent = xr2;
					xr2.rank++;
				}
			}
		} else if(i1.virtualint && !j1.virtualint) {
			if(j1.end != null && j1.end.prev == j1.end) {
				j1.end.next = j1.end.prev = null;
				var o = j1.end;
				if(o.wrap != null) {
					o.wrap.zpp_inner._inuse = false;
					o.wrap.dispose();
					o.wrap = null;
				}
				o.prev = o.next = null;
				o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
				zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
				j1.end = null;
			} else {
				var retnodes = j1.end.prev;
				j1.end.prev.next = j1.end.next;
				j1.end.next.prev = j1.end.prev;
				j1.end.next = j1.end.prev = null;
				var o1 = j1.end;
				if(o1.wrap != null) {
					o1.wrap.zpp_inner._inuse = false;
					o1.wrap.dispose();
					o1.wrap = null;
				}
				o1.prev = o1.next = null;
				o1.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
				zpp_nape.geom.ZPP_GeomVert.zpp_pool = o1;
				j1.end = null;
				j1.end = retnodes;
			}
			if(!j1.vertex) {
				if(j1.end != j1.path0.vert) {
					j1.start.x = j1.end.x;
					j1.start.y = j1.end.y;
					if(j1.end != null && j1.end.prev == j1.end) {
						j1.end.next = j1.end.prev = null;
						var o2 = j1.end;
						if(o2.wrap != null) {
							o2.wrap.zpp_inner._inuse = false;
							o2.wrap.dispose();
							o2.wrap = null;
						}
						o2.prev = o2.next = null;
						o2.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o2;
						j1.end = null;
					} else {
						var retnodes1 = j1.end.prev;
						j1.end.prev.next = j1.end.next;
						j1.end.next.prev = j1.end.prev;
						j1.end.next = j1.end.prev = null;
						var o3 = j1.end;
						if(o3.wrap != null) {
							o3.wrap.zpp_inner._inuse = false;
							o3.wrap.dispose();
							o3.wrap = null;
						}
						o3.prev = o3.next = null;
						o3.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o3;
						j1.end = null;
						j1.end = retnodes1;
					}
				} else {
					var n = j1.start.next;
					j1.start.x = n.x;
					j1.start.y = n.y;
					if(n != null && n.prev == n) {
						n.next = n.prev = null;
						var o4 = n;
						if(o4.wrap != null) {
							o4.wrap.zpp_inner._inuse = false;
							o4.wrap.dispose();
							o4.wrap = null;
						}
						o4.prev = o4.next = null;
						o4.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o4;
						n = null;
					} else {
						n.prev.next = n.next;
						n.next.prev = n.prev;
						n.next = n.prev = null;
						var o5 = n;
						if(o5.wrap != null) {
							o5.wrap.zpp_inner._inuse = false;
							o5.wrap.dispose();
							o5.wrap = null;
						}
						o5.prev = o5.next = null;
						o5.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o5;
					}
				}
			}
			j1.end.next.prev = j1.start.prev;
			j1.start.prev.next = j1.end.next;
			j1.end.next = j1.start;
			j1.start.prev = j1.end;
			var xr3;
			if(j1.path0 == j1.path0.parent) xr3 = j1.path0; else {
				var obj17 = j1.path0;
				var stack6 = null;
				while(obj17 != obj17.parent) {
					var nxt13 = obj17.parent;
					obj17.parent = stack6;
					stack6 = obj17;
					obj17 = nxt13;
				}
				while(stack6 != null) {
					var nxt14 = stack6.parent;
					stack6.parent = obj17;
					stack6 = nxt14;
				}
				xr3 = obj17;
			}
			var yr3;
			if(j1.path1 == j1.path1.parent) yr3 = j1.path1; else {
				var obj18 = j1.path1;
				var stack7 = null;
				while(obj18 != obj18.parent) {
					var nxt15 = obj18.parent;
					obj18.parent = stack7;
					stack7 = obj18;
					obj18 = nxt15;
				}
				while(stack7 != null) {
					var nxt16 = stack7.parent;
					stack7.parent = obj18;
					stack7 = nxt16;
				}
				yr3 = obj18;
			}
			if(xr3 != yr3) {
				if(xr3.rank < yr3.rank) xr3.parent = yr3; else if(xr3.rank > yr3.rank) yr3.parent = xr3; else {
					yr3.parent = xr3;
					xr3.rank++;
				}
			}
		} else if(j1.virtualint && !i1.virtualint) {
			if(i1.end != null && i1.end.prev == i1.end) {
				i1.end.next = i1.end.prev = null;
				var o6 = i1.end;
				if(o6.wrap != null) {
					o6.wrap.zpp_inner._inuse = false;
					o6.wrap.dispose();
					o6.wrap = null;
				}
				o6.prev = o6.next = null;
				o6.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
				zpp_nape.geom.ZPP_GeomVert.zpp_pool = o6;
				i1.end = null;
			} else {
				var retnodes2 = i1.end.prev;
				i1.end.prev.next = i1.end.next;
				i1.end.next.prev = i1.end.prev;
				i1.end.next = i1.end.prev = null;
				var o7 = i1.end;
				if(o7.wrap != null) {
					o7.wrap.zpp_inner._inuse = false;
					o7.wrap.dispose();
					o7.wrap = null;
				}
				o7.prev = o7.next = null;
				o7.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
				zpp_nape.geom.ZPP_GeomVert.zpp_pool = o7;
				i1.end = null;
				i1.end = retnodes2;
			}
			if(!i1.vertex) {
				if(i1.end != i1.path0.vert) {
					i1.start.x = i1.end.x;
					i1.start.y = i1.end.y;
					if(i1.end != null && i1.end.prev == i1.end) {
						i1.end.next = i1.end.prev = null;
						var o8 = i1.end;
						if(o8.wrap != null) {
							o8.wrap.zpp_inner._inuse = false;
							o8.wrap.dispose();
							o8.wrap = null;
						}
						o8.prev = o8.next = null;
						o8.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o8;
						i1.end = null;
					} else {
						var retnodes3 = i1.end.prev;
						i1.end.prev.next = i1.end.next;
						i1.end.next.prev = i1.end.prev;
						i1.end.next = i1.end.prev = null;
						var o9 = i1.end;
						if(o9.wrap != null) {
							o9.wrap.zpp_inner._inuse = false;
							o9.wrap.dispose();
							o9.wrap = null;
						}
						o9.prev = o9.next = null;
						o9.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o9;
						i1.end = null;
						i1.end = retnodes3;
					}
				} else {
					var n1 = i1.start.next;
					i1.start.x = n1.x;
					i1.start.y = n1.y;
					if(n1 != null && n1.prev == n1) {
						n1.next = n1.prev = null;
						var o10 = n1;
						if(o10.wrap != null) {
							o10.wrap.zpp_inner._inuse = false;
							o10.wrap.dispose();
							o10.wrap = null;
						}
						o10.prev = o10.next = null;
						o10.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o10;
						n1 = null;
					} else {
						n1.prev.next = n1.next;
						n1.next.prev = n1.prev;
						n1.next = n1.prev = null;
						var o11 = n1;
						if(o11.wrap != null) {
							o11.wrap.zpp_inner._inuse = false;
							o11.wrap.dispose();
							o11.wrap = null;
						}
						o11.prev = o11.next = null;
						o11.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o11;
					}
				}
			}
			i1.end.next.prev = i1.start.prev;
			i1.start.prev.next = i1.end.next;
			i1.end.next = i1.start;
			i1.start.prev = i1.end;
			var xr4;
			if(i1.path0 == i1.path0.parent) xr4 = i1.path0; else {
				var obj19 = i1.path0;
				var stack8 = null;
				while(obj19 != obj19.parent) {
					var nxt17 = obj19.parent;
					obj19.parent = stack8;
					stack8 = obj19;
					obj19 = nxt17;
				}
				while(stack8 != null) {
					var nxt18 = stack8.parent;
					stack8.parent = obj19;
					stack8 = nxt18;
				}
				xr4 = obj19;
			}
			var yr4;
			if(i1.path1 == i1.path1.parent) yr4 = i1.path1; else {
				var obj20 = i1.path1;
				var stack9 = null;
				while(obj20 != obj20.parent) {
					var nxt19 = obj20.parent;
					obj20.parent = stack9;
					stack9 = obj20;
					obj20 = nxt19;
				}
				while(stack9 != null) {
					var nxt20 = stack9.parent;
					stack9.parent = obj20;
					stack9 = nxt20;
				}
				yr4 = obj20;
			}
			if(xr4 != yr4) {
				if(xr4.rank < yr4.rank) xr4.parent = yr4; else if(xr4.rank > yr4.rank) yr4.parent = xr4; else {
					yr4.parent = xr4;
					xr4.rank++;
				}
			}
		}
		var o12 = i1;
		o12.end = o12.start = null;
		o12.path0 = o12.path1 = null;
		o12.next = zpp_nape.geom.ZPP_CutInt.zpp_pool;
		zpp_nape.geom.ZPP_CutInt.zpp_pool = o12;
		var o13 = j1;
		o13.end = o13.start = null;
		o13.path0 = o13.path1 = null;
		o13.next = zpp_nape.geom.ZPP_CutInt.zpp_pool;
		zpp_nape.geom.ZPP_CutInt.zpp_pool = o13;
	}
	var ret2;
	if(output == null) ret2 = new nape.geom.GeomPolyList(); else ret2 = output;
	var cx_ite = zpp_nape.geom.ZPP_Cutter.paths.head;
	while(cx_ite != null) {
		var p5 = cx_ite.elt;
		var poly;
		if(p5 == p5.parent) poly = p5; else {
			var obj21 = p5;
			var stack10 = null;
			while(obj21 != obj21.parent) {
				var nxt21 = obj21.parent;
				obj21.parent = stack10;
				stack10 = obj21;
				obj21 = nxt21;
			}
			while(stack10 != null) {
				var nxt22 = stack10.parent;
				stack10.parent = obj21;
				stack10 = nxt22;
			}
			poly = obj21;
		}
		if(poly.used) {
			cx_ite = cx_ite.next;
			continue;
		}
		poly.used = true;
		var p6 = poly.vert;
		var skip = true;
		while(poly.vert != null && (skip || p6 != poly.vert)) {
			skip = false;
			if(p6.x == p6.next.x && p6.y == p6.next.y) {
				if(p6 == poly.vert) {
					if(p6.next == p6) poly.vert = null; else poly.vert = p6.next;
					skip = true;
				}
				if(p6 != null && p6.prev == p6) {
					p6.next = p6.prev = null;
					p6 = p6 = null;
				} else {
					var retnodes4 = p6.next;
					p6.prev.next = p6.next;
					p6.next.prev = p6.prev;
					p6.next = p6.prev = null;
					p6 = null;
					p6 = retnodes4;
				}
			} else p6 = p6.next;
		}
		if(poly.vert != null) {
			var gp = nape.geom.GeomPoly.get();
			gp.zpp_inner.vertices = poly.vert;
			if(ret2.zpp_inner.reverse_flag) ret2.push(gp); else ret2.unshift(gp);
		}
		cx_ite = cx_ite.next;
	}
	while(!(zpp_nape.geom.ZPP_Cutter.paths.head == null)) {
		var p7 = zpp_nape.geom.ZPP_Cutter.paths.pop_unsafe();
		var o14 = p7;
		o14.vert = null;
		o14.parent = null;
		o14.next = zpp_nape.geom.ZPP_CutVert.zpp_pool;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = o14;
	}
	while(!(verts == null)) if(verts != null && verts.prev == verts) {
		verts.next = verts.prev = null;
		var o15 = verts;
		o15.vert = null;
		o15.parent = null;
		o15.next = zpp_nape.geom.ZPP_CutVert.zpp_pool;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = o15;
		verts = verts = null;
	} else {
		var retnodes5 = verts.next;
		verts.prev.next = verts.next;
		verts.next.prev = verts.prev;
		verts.next = verts.prev = null;
		var o16 = verts;
		o16.vert = null;
		o16.parent = null;
		o16.next = zpp_nape.geom.ZPP_CutVert.zpp_pool;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = o16;
		verts = null;
		verts = retnodes5;
	}
	return ret2;
};
zpp_nape.geom.ZPP_Geom = function() { };
$hxClasses["zpp_nape.geom.ZPP_Geom"] = zpp_nape.geom.ZPP_Geom;
zpp_nape.geom.ZPP_Geom.__name__ = ["zpp_nape","geom","ZPP_Geom"];
zpp_nape.geom.ZPP_Geom.validateShape = function(s) {
	if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.validate_gaxi();
	if(s.zip_aabb) {
		if(s.body != null) {
			s.zip_aabb = false;
			if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
		}
	}
	if(s.zip_worldCOM) {
		if(s.body != null) {
			s.zip_worldCOM = false;
			if(s.zip_localCOM) {
				s.zip_localCOM = false;
				if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
				if(s.wrap_localCOM != null) {
					s.wrap_localCOM.zpp_inner.x = s.localCOMx;
					s.wrap_localCOM.zpp_inner.y = s.localCOMy;
				}
			}
			s.body.validate_axis();
			s.worldCOMx = s.body.posx + (s.body.axisy * s.localCOMx - s.body.axisx * s.localCOMy);
			s.worldCOMy = s.body.posy + (s.localCOMx * s.body.axisx + s.localCOMy * s.body.axisy);
		}
	}
};
zpp_nape.geom.ZPP_GeomVert = function() {
	this.forced = false;
	this.wrap = null;
	this.next = null;
	this.prev = null;
	this.y = 0.0;
	this.x = 0.0;
};
$hxClasses["zpp_nape.geom.ZPP_GeomVert"] = zpp_nape.geom.ZPP_GeomVert;
zpp_nape.geom.ZPP_GeomVert.__name__ = ["zpp_nape","geom","ZPP_GeomVert"];
zpp_nape.geom.ZPP_GeomVert.get = function(x,y) {
	var ret;
	if(zpp_nape.geom.ZPP_GeomVert.zpp_pool == null) ret = new zpp_nape.geom.ZPP_GeomVert(); else {
		ret = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.forced = false;
	ret.x = x;
	ret.y = y;
	return ret;
};
zpp_nape.geom.ZPP_GeomVert.prototype = {
	free: function() {
		if(this.wrap != null) {
			this.wrap.zpp_inner._inuse = false;
			this.wrap.dispose();
			this.wrap = null;
		}
		this.prev = this.next = null;
	}
	,alloc: function() {
		this.forced = false;
	}
	,wrapper: function() {
		if(this.wrap == null) {
			this.wrap = nape.geom.Vec2.get(this.x,this.y,null);
			this.wrap.zpp_inner._inuse = true;
			this.wrap.zpp_inner._invalidate = $bind(this,this.modwrap);
			this.wrap.zpp_inner._validate = $bind(this,this.getwrap);
		}
		return this.wrap;
	}
	,modwrap: function(n) {
		this.x = n.x;
		this.y = n.y;
	}
	,getwrap: function() {
		this.wrap.zpp_inner.x = this.x;
		this.wrap.zpp_inner.y = this.y;
	}
	,__class__: zpp_nape.geom.ZPP_GeomVert
};
zpp_nape.geom.ZPP_GeomPoly = function(outer) {
	this.vertices = null;
	this.outer = null;
	this.outer = outer;
};
$hxClasses["zpp_nape.geom.ZPP_GeomPoly"] = zpp_nape.geom.ZPP_GeomPoly;
zpp_nape.geom.ZPP_GeomPoly.__name__ = ["zpp_nape","geom","ZPP_GeomPoly"];
zpp_nape.geom.ZPP_GeomPoly.prototype = {
	__class__: zpp_nape.geom.ZPP_GeomPoly
};
zpp_nape.geom.ZPP_GeomVertexIterator = function() {
	this.next = null;
	this.outer = null;
	this.forward = false;
	this.first = false;
	this.start = null;
	this.ptr = null;
	this.outer = new nape.geom.GeomVertexIterator();
};
$hxClasses["zpp_nape.geom.ZPP_GeomVertexIterator"] = zpp_nape.geom.ZPP_GeomVertexIterator;
zpp_nape.geom.ZPP_GeomVertexIterator.__name__ = ["zpp_nape","geom","ZPP_GeomVertexIterator"];
zpp_nape.geom.ZPP_GeomVertexIterator.get = function(poly,forward) {
	var ret;
	if(zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool == null) ret = new zpp_nape.geom.ZPP_GeomVertexIterator(); else {
		ret = zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool;
		zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.outer.zpp_inner = ret;
	ret.ptr = poly;
	ret.forward = forward;
	ret.start = poly;
	ret.first = poly != null;
	return ret.outer;
};
zpp_nape.geom.ZPP_GeomVertexIterator.prototype = {
	free: function() {
		this.outer.zpp_inner = null;
		this.ptr = this.start = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_GeomVertexIterator
};
zpp_nape.geom.ZPP_MarchSpan = function() {
	this.next = null;
	this.out = false;
	this.rank = 0;
	this.parent = null;
	this.parent = this;
};
$hxClasses["zpp_nape.geom.ZPP_MarchSpan"] = zpp_nape.geom.ZPP_MarchSpan;
zpp_nape.geom.ZPP_MarchSpan.__name__ = ["zpp_nape","geom","ZPP_MarchSpan"];
zpp_nape.geom.ZPP_MarchSpan.prototype = {
	free: function() {
		this.parent = this;
	}
	,alloc: function() {
		this.out = false;
		this.rank = 0;
	}
	,__class__: zpp_nape.geom.ZPP_MarchSpan
};
zpp_nape.geom.ZPP_MarchPair = function() {
	this.next = null;
	this.spanr = null;
	this.span2 = null;
	this.span1 = null;
	this.pd = null;
	this.okeyr = 0;
	this.keyr = 0;
	this.pr = null;
	this.okey2 = 0;
	this.key2 = 0;
	this.p2 = null;
	this.okey1 = 0;
	this.key1 = 0;
	this.p1 = null;
};
$hxClasses["zpp_nape.geom.ZPP_MarchPair"] = zpp_nape.geom.ZPP_MarchPair;
zpp_nape.geom.ZPP_MarchPair.__name__ = ["zpp_nape","geom","ZPP_MarchPair"];
zpp_nape.geom.ZPP_MarchPair.prototype = {
	free: function() {
		this.p1 = this.p2 = this.pr = this.pd = null;
		this.span1 = this.span2 = this.spanr = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_MarchPair
};
zpp_nape.geom.ZPP_MarchingSquares = function() {
};
$hxClasses["zpp_nape.geom.ZPP_MarchingSquares"] = zpp_nape.geom.ZPP_MarchingSquares;
zpp_nape.geom.ZPP_MarchingSquares.__name__ = ["zpp_nape","geom","ZPP_MarchingSquares"];
zpp_nape.geom.ZPP_MarchingSquares.isos = null;
zpp_nape.geom.ZPP_MarchingSquares.ints = null;
zpp_nape.geom.ZPP_MarchingSquares.map = null;
zpp_nape.geom.ZPP_MarchingSquares.run = function(iso,bx0,by0,bx1,by1,cell,quality,combine,ret) {
	var xp;
	xp = (bx1 - bx0) / (function($this) {
		var $r;
		cell.zpp_inner.validate();
		$r = cell.zpp_inner.x;
		return $r;
	}(this));
	var xn = xp | 0;
	var yp;
	yp = (by1 - by0) / (function($this) {
		var $r;
		cell.zpp_inner.validate();
		$r = cell.zpp_inner.y;
		return $r;
	}(this));
	var yn = yp | 0;
	if(xp != xn) xn++;
	if(yp != yn) yn++;
	if(combine) {
		if(zpp_nape.geom.ZPP_MarchingSquares.map == null) zpp_nape.geom.ZPP_MarchingSquares.map = new zpp_nape.util.ZNPArray2_ZPP_MarchPair(xn,yn); else zpp_nape.geom.ZPP_MarchingSquares.map.resize(xn,yn,null);
	}
	if(zpp_nape.geom.ZPP_MarchingSquares.isos == null) zpp_nape.geom.ZPP_MarchingSquares.isos = new zpp_nape.util.ZNPArray2_Float(xn + 1,yn + 1); else zpp_nape.geom.ZPP_MarchingSquares.isos.resize(xn + 1,yn + 1,0);
	var _g1 = 0;
	var _g = yn + 1;
	while(_g1 < _g) {
		var y = _g1++;
		var yc;
		if(y == 0) yc = by0; else if(y <= yn) yc = by0 + (function($this) {
			var $r;
			cell.zpp_inner.validate();
			$r = cell.zpp_inner.y;
			return $r;
		}(this)) * y; else yc = by1;
		var _g3 = 0;
		var _g2 = xn + 1;
		while(_g3 < _g2) {
			var x = _g3++;
			var xc;
			if(x == 0) xc = bx0; else if(x <= xn) xc = bx0 + (function($this) {
				var $r;
				cell.zpp_inner.validate();
				$r = cell.zpp_inner.x;
				return $r;
			}(this)) * x; else xc = bx1;
			zpp_nape.geom.ZPP_MarchingSquares.isos.set(x,y,iso(xc,yc));
		}
	}
	if(zpp_nape.geom.ZPP_MarchingSquares.ints == null) zpp_nape.geom.ZPP_MarchingSquares.ints = new zpp_nape.util.ZNPArray2_ZPP_GeomVert(xn + 1,(yn << 1) + 1); else zpp_nape.geom.ZPP_MarchingSquares.ints.resize(xn + 1,(yn << 1) + 1,null);
	var spans = null;
	if(combine) {
		if(zpp_nape.geom.ZPP_MarchSpan.zpp_pool == null) spans = new zpp_nape.geom.ZPP_MarchSpan(); else {
			spans = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
			zpp_nape.geom.ZPP_MarchSpan.zpp_pool = spans.next;
			spans.next = null;
		}
		spans.out = false;
		spans.rank = 0;
	}
	var py = by0;
	var _g4 = 0;
	while(_g4 < yn) {
		var y1 = _g4++;
		var y0 = py;
		var y11;
		if(y1 == yn - 1) y11 = by1; else y11 = by0 + (function($this) {
			var $r;
			cell.zpp_inner.validate();
			$r = cell.zpp_inner.y;
			return $r;
		}(this)) * (y1 + 1);
		py = y11;
		var px = bx0;
		var pre = null;
		var _g11 = 0;
		while(_g11 < xn) {
			var x1 = _g11++;
			var x0 = px;
			var x11;
			if(x1 == xn - 1) x11 = bx1; else x11 = bx0 + (function($this) {
				var $r;
				cell.zpp_inner.validate();
				$r = cell.zpp_inner.x;
				return $r;
			}(this)) * (x1 + 1);
			px = x11;
			var fstx = x1 == 0 || !combine;
			var fsty = y1 == 0 || !combine;
			var sndx = x1 == xn - 1 || !combine;
			var sndy = y1 == yn - 1 || !combine;
			var pp = zpp_nape.geom.ZPP_MarchingSquares.me.marchSquare(iso,zpp_nape.geom.ZPP_MarchingSquares.isos,zpp_nape.geom.ZPP_MarchingSquares.ints,x0,y0,x11,y11,x1,y1,fstx,fsty,sndx,sndy,quality);
			if(pp == null) {
				pre = null;
				continue;
			}
			if(combine) {
				var pd;
				if(pp.p2 != null && pp.okey2 != 14) pd = pp.p2; else pd = pp.p1;
				if(((pd == pp.p2?pp.okey2:pp.okey1) & 128) == 0) pp.pd = pd.prev; else pp.pd = pd.prev.prev;
				zpp_nape.geom.ZPP_MarchingSquares.map.set(x1,y1,pp);
				if(pre != null && zpp_nape.geom.ZPP_MarchingSquares.me.combLeft(pp.key1)) {
					zpp_nape.geom.ZPP_MarchingSquares.me.combLR(pre,pp);
					pp.span1 = pre.spanr;
				} else {
					if(zpp_nape.geom.ZPP_MarchSpan.zpp_pool == null) pp.span1 = new zpp_nape.geom.ZPP_MarchSpan(); else {
						pp.span1 = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
						zpp_nape.geom.ZPP_MarchSpan.zpp_pool = pp.span1.next;
						pp.span1.next = null;
					}
					pp.span1.alloc();
					pp.span1.next = spans;
					spans = pp.span1;
				}
				if(pp.p2 != null) {
					if(zpp_nape.geom.ZPP_MarchSpan.zpp_pool == null) pp.span2 = new zpp_nape.geom.ZPP_MarchSpan(); else {
						pp.span2 = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
						zpp_nape.geom.ZPP_MarchSpan.zpp_pool = pp.span2.next;
						pp.span2.next = null;
					}
					pp.span2.alloc();
					pp.span2.next = spans;
					spans = pp.span2;
					pp.spanr = pp.span2;
				} else pp.spanr = pp.span1;
				if(zpp_nape.geom.ZPP_MarchingSquares.me.combRight(pp.keyr)) pre = pp; else pre = null;
			} else {
				zpp_nape.geom.ZPP_MarchingSquares.me.output(ret,pp.p1);
				if(pp.p2 != null) zpp_nape.geom.ZPP_MarchingSquares.me.output(ret,pp.p2);
				var o = pp;
				o.p1 = o.p2 = o.pr = o.pd = null;
				o.span1 = o.span2 = o.spanr = null;
				o.next = zpp_nape.geom.ZPP_MarchPair.zpp_pool;
				zpp_nape.geom.ZPP_MarchPair.zpp_pool = o;
			}
		}
	}
	if(!combine) return;
	var _g5 = 1;
	while(_g5 < yn) {
		var y2 = _g5++;
		var pre1 = null;
		var _g12 = 0;
		while(_g12 < xn) {
			var x2 = _g12++;
			var b = zpp_nape.geom.ZPP_MarchingSquares.map.get(x2,y2);
			if(b == null) {
				pre1 = null;
				continue;
			}
			var bkey;
			if(b.p2 != null && b.okey2 == 14) bkey = b.okey2; else bkey = b.okey1;
			if(!zpp_nape.geom.ZPP_MarchingSquares.me.combUp(bkey)) {
				pre1 = null;
				continue;
			}
			var a = zpp_nape.geom.ZPP_MarchingSquares.map.get(x2,y2 - 1);
			if(a == null) {
				pre1 = null;
				continue;
			}
			var akey;
			if(a.p2 != null && a.okey2 == 56) akey = a.okey2; else akey = a.okey1;
			if(!zpp_nape.geom.ZPP_MarchingSquares.me.combDown(akey)) {
				pre1 = null;
				continue;
			}
			var ad;
			if(a.p2 != null && a.okey2 == 56) ad = a.span2; else ad = a.span1;
			var bu;
			if(b.p2 != null && b.okey2 == 14) bu = b.span2; else bu = b.span1;
			if((ad == ad.parent?ad:(function($this) {
				var $r;
				var obj = ad;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				$r = obj;
				return $r;
			}(this))) == (bu == bu.parent?bu:(function($this) {
				var $r;
				var obj1 = bu;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				$r = obj1;
				return $r;
			}(this)))) {
				if(pre1 != bu) zpp_nape.geom.ZPP_MarchingSquares.me.combUD_virtual(a,b);
			} else {
				var xr;
				if(ad == ad.parent) xr = ad; else {
					var obj2 = ad;
					var stack2 = null;
					while(obj2 != obj2.parent) {
						var nxt4 = obj2.parent;
						obj2.parent = stack2;
						stack2 = obj2;
						obj2 = nxt4;
					}
					while(stack2 != null) {
						var nxt5 = stack2.parent;
						stack2.parent = obj2;
						stack2 = nxt5;
					}
					xr = obj2;
				}
				var yr;
				if(bu == bu.parent) yr = bu; else {
					var obj3 = bu;
					var stack3 = null;
					while(obj3 != obj3.parent) {
						var nxt6 = obj3.parent;
						obj3.parent = stack3;
						stack3 = obj3;
						obj3 = nxt6;
					}
					while(stack3 != null) {
						var nxt7 = stack3.parent;
						stack3.parent = obj3;
						stack3 = nxt7;
					}
					yr = obj3;
				}
				if(xr != yr) {
					if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
						yr.parent = xr;
						xr.rank++;
					}
				}
				zpp_nape.geom.ZPP_MarchingSquares.me.combUD(a,b);
			}
			var key;
			if(bu == b.span2) key = b.okey2; else key = b.okey1;
			if((key & 4) != 0) pre1 = bu; else pre1 = null;
		}
	}
	var _g6 = 0;
	while(_g6 < yn) {
		var y3 = _g6++;
		var _g13 = 0;
		while(_g13 < xn) {
			var x3 = _g13++;
			var p = zpp_nape.geom.ZPP_MarchingSquares.map.get(x3,y3);
			if(p == null) continue;
			var root;
			if(p.span1 == p.span1.parent) root = p.span1; else {
				var obj4 = p.span1;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				root = obj4;
			}
			if(!root.out) {
				root.out = true;
				zpp_nape.geom.ZPP_MarchingSquares.me.output(ret,p.p1);
			}
			if(p.p2 != null) {
				if(p.span2 == p.span2.parent) root = p.span2; else {
					var obj5 = p.span2;
					var stack5 = null;
					while(obj5 != obj5.parent) {
						var nxt10 = obj5.parent;
						obj5.parent = stack5;
						stack5 = obj5;
						obj5 = nxt10;
					}
					while(stack5 != null) {
						var nxt11 = stack5.parent;
						stack5.parent = obj5;
						stack5 = nxt11;
					}
					root = obj5;
				}
				if(!root.out) {
					root.out = true;
					zpp_nape.geom.ZPP_MarchingSquares.me.output(ret,p.p2);
				}
			}
			var o1 = p;
			o1.p1 = o1.p2 = o1.pr = o1.pd = null;
			o1.span1 = o1.span2 = o1.spanr = null;
			o1.next = zpp_nape.geom.ZPP_MarchPair.zpp_pool;
			zpp_nape.geom.ZPP_MarchPair.zpp_pool = o1;
			zpp_nape.geom.ZPP_MarchingSquares.map.set(x3,y3,null);
		}
	}
	while(spans != null) {
		var t = spans;
		spans = t.next;
		var o2 = t;
		o2.parent = o2;
		o2.next = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
		zpp_nape.geom.ZPP_MarchSpan.zpp_pool = o2;
	}
};
zpp_nape.geom.ZPP_MarchingSquares.ISO = function(iso,x,y) {
	return iso(x,y);
};
zpp_nape.geom.ZPP_MarchingSquares.prototype = {
	output: function(ret,poly) {
		if(poly == null || poly.next == poly || poly.next == poly.prev?true:(function($this) {
			var $r;
			var a;
			{
				var area = 0.0;
				var F = poly;
				var L = poly;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						area += v.x * (v.next.y - v.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
				a = area * 0.5;
			}
			$r = a * a < nape.Config.epsilon * nape.Config.epsilon;
			return $r;
		}(this))) {
			while(!(poly == null)) if(poly != null && poly.prev == poly) {
				poly.next = poly.prev = null;
				poly = poly = null;
			} else {
				var retnodes = poly.next;
				poly.prev.next = poly.next;
				poly.next.prev = poly.prev;
				poly.next = poly.prev = null;
				poly = null;
				poly = retnodes;
			}
			return;
		}
		var gp = nape.geom.GeomPoly.get();
		gp.zpp_inner.vertices = poly;
		if(ret.zpp_inner.reverse_flag) ret.push(gp); else ret.unshift(gp);
	}
	,linkright: function(poly,key) {
		var kind = key & 7;
		if(kind == 0) return poly; else if(kind == 3) return poly.next.next; else return poly.next;
	}
	,linkleft: function(poly,key) {
		if((key & 1) == 0) return poly.prev; else return poly;
	}
	,linkdown: function(poly,key) {
		if((key & 128) == 0) return poly.prev; else return poly.prev.prev;
	}
	,linkup: function(poly,key) {
		return poly;
	}
	,combLR: function(a,b) {
		var ap = this.linkright(a.pr,a.okeyr);
		var bp = this.linkleft(b.p1,b.okey1);
		var ap2 = ap.next;
		var bp2 = bp.prev;
		if((a.keyr & 4) != 0) {
			if(b.pr == b.p1) b.pr = ap.prev;
			b.p1 = ap.prev;
			ap.prev.next = bp.next;
			bp.next.prev = ap.prev;
			var o = ap;
			if(o.wrap != null) {
				o.wrap.zpp_inner._inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.prev = o.next = null;
			o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
			zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		} else {
			ap.next = bp.next;
			bp.next.prev = ap;
		}
		var o1 = bp;
		if(o1.wrap != null) {
			o1.wrap.zpp_inner._inuse = false;
			o1.wrap.dispose();
			o1.wrap = null;
		}
		o1.prev = o1.next = null;
		o1.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o1;
		if((a.keyr & 16) != 0) {
			b.pd = ap2.next;
			ap2.next.prev = bp2.prev;
			bp2.prev.next = ap2.next;
			var o2 = ap2;
			if(o2.wrap != null) {
				o2.wrap.zpp_inner._inuse = false;
				o2.wrap.dispose();
				o2.wrap = null;
			}
			o2.prev = o2.next = null;
			o2.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
			zpp_nape.geom.ZPP_GeomVert.zpp_pool = o2;
		} else {
			ap2.prev = bp2.prev;
			bp2.prev.next = ap2;
		}
		var o3 = bp2;
		if(o3.wrap != null) {
			o3.wrap.zpp_inner._inuse = false;
			o3.wrap.dispose();
			o3.wrap = null;
		}
		o3.prev = o3.next = null;
		o3.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o3;
	}
	,combUD: function(a,b) {
		var ad;
		if(a.p2 != null && a.key2 == 56) ad = a.p2; else ad = a.p1;
		var bu;
		if(b.p2 != null && b.key2 == 14) bu = b.p2; else bu = b.p1;
		var ap = a.pd;
		var bp = bu;
		var ap2 = ap.prev;
		var bp2 = bp.next;
		bp.next = ap.next;
		ap.next.prev = bp;
		var o = ap;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		bp2.prev = ap2.prev;
		ap2.prev.next = bp2;
		if(ap2 == a.p1) a.p1 = bp2;
		var o1 = ap2;
		if(o1.wrap != null) {
			o1.wrap.zpp_inner._inuse = false;
			o1.wrap.dispose();
			o1.wrap = null;
		}
		o1.prev = o1.next = null;
		o1.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o1;
	}
	,combUD_virtual: function(a,b) {
		var ad;
		if(a.p2 != null && a.key2 == 56) ad = a.p2; else ad = a.p1;
		var bu;
		if(b.p2 != null && b.key2 == 14) bu = b.p2; else bu = b.p1;
		var ap = a.pd;
		var bp = bu;
		var ap2 = ap.prev;
		var bp2 = bp.next;
		ap.forced = bp.forced = ap2.forced = bp2.forced = true;
	}
	,combLeft: function(key) {
		var flag = key & 1 | (key & 192) >> 5;
		return this.comb(flag);
	}
	,combRight: function(key) {
		var flag = (key & 28) >> 2;
		return this.comb(flag);
	}
	,combUp: function(key) {
		var flag = key & 7;
		return this.comb(flag);
	}
	,combDown: function(key) {
		var flag = (key & 112) >> 4;
		return this.comb(flag);
	}
	,comb: function(flag) {
		var cnt = 0;
		if((flag & 1) != 0) cnt++;
		if((flag & 2) != 0) cnt++;
		if((flag & 4) != 0) cnt++;
		return cnt >= 2;
	}
	,marchSquare: function(iso,isos,ints,x0,y0,x1,y1,xn,yn,fstx,fsty,sndx,sndy,quality) {
		var key = 0;
		var v0 = isos.list[yn * isos.width + xn];
		if(v0 < 0) key |= 8;
		var v1 = isos.list[yn * isos.width + (xn + 1)];
		if(v1 < 0) key |= 4;
		var v2 = isos.list[(yn + 1) * isos.width + (xn + 1)];
		if(v2 < 0) key |= 2;
		var v3 = isos.list[(yn + 1) * isos.width + xn];
		if(v3 < 0) key |= 1;
		if(key == 0) return null; else {
			var ret;
			if(zpp_nape.geom.ZPP_MarchPair.zpp_pool == null) ret = new zpp_nape.geom.ZPP_MarchPair(); else {
				ret = zpp_nape.geom.ZPP_MarchPair.zpp_pool;
				zpp_nape.geom.ZPP_MarchPair.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			if(key != 10 && key != 5) {
				var val = zpp_nape.geom.ZPP_MarchingSquares.look_march[key];
				ret.okey1 = val;
				var _g = 0;
				while(_g < 8) {
					var i = _g++;
					if((val & 1 << i) != 0) {
						var p = null;
						if(i == 0) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
							if(fstx || fsty) p.forced = true;
						} else if(i == 2) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
							if(sndx || fsty) p.forced = true;
						} else if(i == 4) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
							if(sndx || sndy) p.forced = true;
						} else if(i == 6) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
							if(fstx || sndy) p.forced = true;
						} else if(i == 1) {
							p = ints.list[(yn << 1) * ints.width + xn];
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
								ints.list[(yn << 1) * ints.width + xn] = p;
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(fsty) p.forced = true;
							if(p.x == x0 || p.x == x1) {
								if(p.x == x0 && (val & 1) != 0 || p.x == x1 && (val & 4) != 0) val ^= 2;
							}
						} else if(i == 5) {
							p = ints.list[((yn << 1) + 2) * ints.width + xn];
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
								ints.list[((yn << 1) + 2) * ints.width + xn] = p;
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(sndy) p.forced = true;
							if(p.x == x0 || p.x == x1) {
								if(p.x == x0 && (val & 64) != 0 || p.x == x1 && (val & 16) != 0) val ^= 32;
							}
						} else if(i == 3) {
							p = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
								ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(sndx) p.forced = true;
							if(p.y == y0 || p.y == y1) {
								if(p.y == y0 && (val & 4) != 0 || p.y == y1 && (val & 16) != 0) val ^= 8;
							}
						} else {
							p = ints.list[((yn << 1) + 1) * ints.width + xn];
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
								ints.list[((yn << 1) + 1) * ints.width + xn] = p;
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(fstx) p.forced = true;
							if(p.y == y0 || p.y == y1) {
								if(p.y == y0 && (val & 1) != 0 || p.y == y1 && (val & 64) != 0) val ^= 128;
							}
						}
						var obj = p;
						if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
							obj.prev = ret.p1;
							obj.next = ret.p1.next;
							ret.p1.next.prev = obj;
							ret.p1.next = obj;
						}
						ret.p1 = obj;
					}
				}
				ret.p1 = ret.p1.next;
				ret.key1 = val;
				if(val == 1 || val == 4 || val == 16 || val == 64 || val == 3 || val == 12 || val == 48 || val == 192 || val == 129 || val == 6 || val == 24 || val == 96 || val == 5 || val == 20 || val == 80 || val == 65 || val == 17 || val == 68) {
					val = 0;
					ret.key1 = 0;
					ret.p1 = null;
				}
				if(val == 0) ret = null; else {
					ret.pr = ret.p1;
					ret.okeyr = ret.okey1;
					ret.keyr = ret.key1;
				}
			} else {
				var mid = iso(0.5 * (x0 + x1),0.5 * (y0 + y1)) < 0;
				if(key == 10) {
					if(mid) {
						var val1 = 187;
						ret.okey1 = val1;
						var _g1 = 0;
						while(_g1 < 8) {
							var i1 = _g1++;
							if((val1 & 1 << i1) != 0) {
								var p1 = null;
								if(i1 == 0) {
									p1 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
									if(fstx || fsty) p1.forced = true;
								} else if(i1 == 2) {
									p1 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
									if(sndx || fsty) p1.forced = true;
								} else if(i1 == 4) {
									p1 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
									if(sndx || sndy) p1.forced = true;
								} else if(i1 == 6) {
									p1 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
									if(fstx || sndy) p1.forced = true;
								} else if(i1 == 1) {
									p1 = ints.list[(yn << 1) * ints.width + xn];
									if(p1 == null) {
										p1 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p1;
									} else p1 = zpp_nape.geom.ZPP_GeomVert.get(p1.x,p1.y);
									if(fsty) p1.forced = true;
									if(p1.x == x0 || p1.x == x1) {
										if(p1.x == x0 && (val1 & 1) != 0 || p1.x == x1 && (val1 & 4) != 0) val1 ^= 2;
									}
								} else if(i1 == 5) {
									p1 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p1 == null) {
										p1 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p1;
									} else p1 = zpp_nape.geom.ZPP_GeomVert.get(p1.x,p1.y);
									if(sndy) p1.forced = true;
									if(p1.x == x0 || p1.x == x1) {
										if(p1.x == x0 && (val1 & 64) != 0 || p1.x == x1 && (val1 & 16) != 0) val1 ^= 32;
									}
								} else if(i1 == 3) {
									p1 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p1 == null) {
										p1 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p1;
									} else p1 = zpp_nape.geom.ZPP_GeomVert.get(p1.x,p1.y);
									if(sndx) p1.forced = true;
									if(p1.y == y0 || p1.y == y1) {
										if(p1.y == y0 && (val1 & 4) != 0 || p1.y == y1 && (val1 & 16) != 0) val1 ^= 8;
									}
								} else {
									p1 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p1 == null) {
										p1 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p1;
									} else p1 = zpp_nape.geom.ZPP_GeomVert.get(p1.x,p1.y);
									if(fstx) p1.forced = true;
									if(p1.y == y0 || p1.y == y1) {
										if(p1.y == y0 && (val1 & 1) != 0 || p1.y == y1 && (val1 & 64) != 0) val1 ^= 128;
									}
								}
								var obj1 = p1;
								if(ret.p1 == null) ret.p1 = obj1.prev = obj1.next = obj1; else {
									obj1.prev = ret.p1;
									obj1.next = ret.p1.next;
									ret.p1.next.prev = obj1;
									ret.p1.next = obj1;
								}
								ret.p1 = obj1;
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val1;
						if(val1 == 1 || val1 == 4 || val1 == 16 || val1 == 64 || val1 == 3 || val1 == 12 || val1 == 48 || val1 == 192 || val1 == 129 || val1 == 6 || val1 == 24 || val1 == 96 || val1 == 5 || val1 == 20 || val1 == 80 || val1 == 65 || val1 == 17 || val1 == 68) {
							val1 = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val1 == 0) ret = null; else {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						}
					} else {
						var val2 = 131;
						ret.okey1 = val2;
						var _g2 = 0;
						while(_g2 < 8) {
							var i2 = _g2++;
							if((val2 & 1 << i2) != 0) {
								var p2 = null;
								if(i2 == 0) {
									p2 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
									if(fstx || fsty) p2.forced = true;
								} else if(i2 == 2) {
									p2 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
									if(sndx || fsty) p2.forced = true;
								} else if(i2 == 4) {
									p2 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
									if(sndx || sndy) p2.forced = true;
								} else if(i2 == 6) {
									p2 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
									if(fstx || sndy) p2.forced = true;
								} else if(i2 == 1) {
									p2 = ints.list[(yn << 1) * ints.width + xn];
									if(p2 == null) {
										p2 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p2;
									} else p2 = zpp_nape.geom.ZPP_GeomVert.get(p2.x,p2.y);
									if(fsty) p2.forced = true;
									if(p2.x == x0 || p2.x == x1) {
										if(p2.x == x0 && (val2 & 1) != 0 || p2.x == x1 && (val2 & 4) != 0) val2 ^= 2;
									}
								} else if(i2 == 5) {
									p2 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p2 == null) {
										p2 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p2;
									} else p2 = zpp_nape.geom.ZPP_GeomVert.get(p2.x,p2.y);
									if(sndy) p2.forced = true;
									if(p2.x == x0 || p2.x == x1) {
										if(p2.x == x0 && (val2 & 64) != 0 || p2.x == x1 && (val2 & 16) != 0) val2 ^= 32;
									}
								} else if(i2 == 3) {
									p2 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p2 == null) {
										p2 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p2;
									} else p2 = zpp_nape.geom.ZPP_GeomVert.get(p2.x,p2.y);
									if(sndx) p2.forced = true;
									if(p2.y == y0 || p2.y == y1) {
										if(p2.y == y0 && (val2 & 4) != 0 || p2.y == y1 && (val2 & 16) != 0) val2 ^= 8;
									}
								} else {
									p2 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p2 == null) {
										p2 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p2;
									} else p2 = zpp_nape.geom.ZPP_GeomVert.get(p2.x,p2.y);
									if(fstx) p2.forced = true;
									if(p2.y == y0 || p2.y == y1) {
										if(p2.y == y0 && (val2 & 1) != 0 || p2.y == y1 && (val2 & 64) != 0) val2 ^= 128;
									}
								}
								var obj2 = p2;
								if(ret.p1 == null) ret.p1 = obj2.prev = obj2.next = obj2; else {
									obj2.prev = ret.p1;
									obj2.next = ret.p1.next;
									ret.p1.next.prev = obj2;
									ret.p1.next = obj2;
								}
								ret.p1 = obj2;
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val2;
						if(val2 == 1 || val2 == 4 || val2 == 16 || val2 == 64 || val2 == 3 || val2 == 12 || val2 == 48 || val2 == 192 || val2 == 129 || val2 == 6 || val2 == 24 || val2 == 96 || val2 == 5 || val2 == 20 || val2 == 80 || val2 == 65 || val2 == 17 || val2 == 68) {
							val2 = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val2 != 0) {
							var val3 = 56;
							ret.okey2 = val3;
							var _g3 = 0;
							while(_g3 < 8) {
								var i3 = _g3++;
								if((val3 & 1 << i3) != 0) {
									var p3 = null;
									if(i3 == 0) {
										p3 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
										if(fstx || fsty) p3.forced = true;
									} else if(i3 == 2) {
										p3 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
										if(sndx || fsty) p3.forced = true;
									} else if(i3 == 4) {
										p3 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
										if(sndx || sndy) p3.forced = true;
									} else if(i3 == 6) {
										p3 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
										if(fstx || sndy) p3.forced = true;
									} else if(i3 == 1) {
										p3 = ints.list[(yn << 1) * ints.width + xn];
										if(p3 == null) {
											p3 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
											ints.list[(yn << 1) * ints.width + xn] = p3;
										} else p3 = zpp_nape.geom.ZPP_GeomVert.get(p3.x,p3.y);
										if(fsty) p3.forced = true;
										if(p3.x == x0 || p3.x == x1) {
											if(p3.x == x0 && (val3 & 1) != 0 || p3.x == x1 && (val3 & 4) != 0) val3 ^= 2;
										}
									} else if(i3 == 5) {
										p3 = ints.list[((yn << 1) + 2) * ints.width + xn];
										if(p3 == null) {
											p3 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
											ints.list[((yn << 1) + 2) * ints.width + xn] = p3;
										} else p3 = zpp_nape.geom.ZPP_GeomVert.get(p3.x,p3.y);
										if(sndy) p3.forced = true;
										if(p3.x == x0 || p3.x == x1) {
											if(p3.x == x0 && (val3 & 64) != 0 || p3.x == x1 && (val3 & 16) != 0) val3 ^= 32;
										}
									} else if(i3 == 3) {
										p3 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
										if(p3 == null) {
											p3 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p3;
										} else p3 = zpp_nape.geom.ZPP_GeomVert.get(p3.x,p3.y);
										if(sndx) p3.forced = true;
										if(p3.y == y0 || p3.y == y1) {
											if(p3.y == y0 && (val3 & 4) != 0 || p3.y == y1 && (val3 & 16) != 0) val3 ^= 8;
										}
									} else {
										p3 = ints.list[((yn << 1) + 1) * ints.width + xn];
										if(p3 == null) {
											p3 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + xn] = p3;
										} else p3 = zpp_nape.geom.ZPP_GeomVert.get(p3.x,p3.y);
										if(fstx) p3.forced = true;
										if(p3.y == y0 || p3.y == y1) {
											if(p3.y == y0 && (val3 & 1) != 0 || p3.y == y1 && (val3 & 64) != 0) val3 ^= 128;
										}
									}
									var obj3 = p3;
									if(ret.p2 == null) ret.p2 = obj3.prev = obj3.next = obj3; else {
										obj3.prev = ret.p2;
										obj3.next = ret.p2.next;
										ret.p2.next.prev = obj3;
										ret.p2.next = obj3;
									}
									ret.p2 = obj3;
								}
							}
							ret.p2 = ret.p2.next;
							ret.key2 = val3;
							if(val3 == 1 || val3 == 4 || val3 == 16 || val3 == 64 || val3 == 3 || val3 == 12 || val3 == 48 || val3 == 192 || val3 == 129 || val3 == 6 || val3 == 24 || val3 == 96 || val3 == 5 || val3 == 20 || val3 == 80 || val3 == 65 || val3 == 17 || val3 == 68) {
								val3 = 0;
								ret.key2 = 0;
								ret.p2 = null;
							}
							if(val3 == 0) {
								ret.pr = ret.p1;
								ret.okeyr = ret.okey1;
								ret.keyr = ret.key1;
							} else {
								ret.pr = ret.p2;
								ret.okeyr = ret.okey2;
								ret.keyr = ret.key2;
							}
						} else {
							var val4 = 56;
							ret.okey1 = val4;
							var _g4 = 0;
							while(_g4 < 8) {
								var i4 = _g4++;
								if((val4 & 1 << i4) != 0) {
									var p4 = null;
									if(i4 == 0) {
										p4 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
										if(fstx || fsty) p4.forced = true;
									} else if(i4 == 2) {
										p4 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
										if(sndx || fsty) p4.forced = true;
									} else if(i4 == 4) {
										p4 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
										if(sndx || sndy) p4.forced = true;
									} else if(i4 == 6) {
										p4 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
										if(fstx || sndy) p4.forced = true;
									} else if(i4 == 1) {
										p4 = ints.list[(yn << 1) * ints.width + xn];
										if(p4 == null) {
											p4 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
											ints.list[(yn << 1) * ints.width + xn] = p4;
										} else p4 = zpp_nape.geom.ZPP_GeomVert.get(p4.x,p4.y);
										if(fsty) p4.forced = true;
										if(p4.x == x0 || p4.x == x1) {
											if(p4.x == x0 && (val4 & 1) != 0 || p4.x == x1 && (val4 & 4) != 0) val4 ^= 2;
										}
									} else if(i4 == 5) {
										p4 = ints.list[((yn << 1) + 2) * ints.width + xn];
										if(p4 == null) {
											p4 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
											ints.list[((yn << 1) + 2) * ints.width + xn] = p4;
										} else p4 = zpp_nape.geom.ZPP_GeomVert.get(p4.x,p4.y);
										if(sndy) p4.forced = true;
										if(p4.x == x0 || p4.x == x1) {
											if(p4.x == x0 && (val4 & 64) != 0 || p4.x == x1 && (val4 & 16) != 0) val4 ^= 32;
										}
									} else if(i4 == 3) {
										p4 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
										if(p4 == null) {
											p4 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p4;
										} else p4 = zpp_nape.geom.ZPP_GeomVert.get(p4.x,p4.y);
										if(sndx) p4.forced = true;
										if(p4.y == y0 || p4.y == y1) {
											if(p4.y == y0 && (val4 & 4) != 0 || p4.y == y1 && (val4 & 16) != 0) val4 ^= 8;
										}
									} else {
										p4 = ints.list[((yn << 1) + 1) * ints.width + xn];
										if(p4 == null) {
											p4 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + xn] = p4;
										} else p4 = zpp_nape.geom.ZPP_GeomVert.get(p4.x,p4.y);
										if(fstx) p4.forced = true;
										if(p4.y == y0 || p4.y == y1) {
											if(p4.y == y0 && (val4 & 1) != 0 || p4.y == y1 && (val4 & 64) != 0) val4 ^= 128;
										}
									}
									var obj4 = p4;
									if(ret.p1 == null) ret.p1 = obj4.prev = obj4.next = obj4; else {
										obj4.prev = ret.p1;
										obj4.next = ret.p1.next;
										ret.p1.next.prev = obj4;
										ret.p1.next = obj4;
									}
									ret.p1 = obj4;
								}
							}
							ret.p1 = ret.p1.next;
							ret.key1 = val4;
							if(val4 == 1 || val4 == 4 || val4 == 16 || val4 == 64 || val4 == 3 || val4 == 12 || val4 == 48 || val4 == 192 || val4 == 129 || val4 == 6 || val4 == 24 || val4 == 96 || val4 == 5 || val4 == 20 || val4 == 80 || val4 == 65 || val4 == 17 || val4 == 68) {
								val4 = 0;
								ret.key1 = 0;
								ret.p1 = null;
							}
							if(val4 == 0) ret = null; else {
								ret.pr = ret.p1;
								ret.okeyr = ret.okey1;
								ret.keyr = ret.key1;
							}
						}
					}
				} else if(mid) {
					var val5 = 238;
					ret.okey1 = val5;
					var _g5 = 0;
					while(_g5 < 8) {
						var i5 = _g5++;
						if((val5 & 1 << i5) != 0) {
							var p5 = null;
							if(i5 == 0) {
								p5 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
								if(fstx || fsty) p5.forced = true;
							} else if(i5 == 2) {
								p5 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
								if(sndx || fsty) p5.forced = true;
							} else if(i5 == 4) {
								p5 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
								if(sndx || sndy) p5.forced = true;
							} else if(i5 == 6) {
								p5 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
								if(fstx || sndy) p5.forced = true;
							} else if(i5 == 1) {
								p5 = ints.list[(yn << 1) * ints.width + xn];
								if(p5 == null) {
									p5 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									ints.list[(yn << 1) * ints.width + xn] = p5;
								} else p5 = zpp_nape.geom.ZPP_GeomVert.get(p5.x,p5.y);
								if(fsty) p5.forced = true;
								if(p5.x == x0 || p5.x == x1) {
									if(p5.x == x0 && (val5 & 1) != 0 || p5.x == x1 && (val5 & 4) != 0) val5 ^= 2;
								}
							} else if(i5 == 5) {
								p5 = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p5 == null) {
									p5 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									ints.list[((yn << 1) + 2) * ints.width + xn] = p5;
								} else p5 = zpp_nape.geom.ZPP_GeomVert.get(p5.x,p5.y);
								if(sndy) p5.forced = true;
								if(p5.x == x0 || p5.x == x1) {
									if(p5.x == x0 && (val5 & 64) != 0 || p5.x == x1 && (val5 & 16) != 0) val5 ^= 32;
								}
							} else if(i5 == 3) {
								p5 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p5 == null) {
									p5 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p5;
								} else p5 = zpp_nape.geom.ZPP_GeomVert.get(p5.x,p5.y);
								if(sndx) p5.forced = true;
								if(p5.y == y0 || p5.y == y1) {
									if(p5.y == y0 && (val5 & 4) != 0 || p5.y == y1 && (val5 & 16) != 0) val5 ^= 8;
								}
							} else {
								p5 = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p5 == null) {
									p5 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + xn] = p5;
								} else p5 = zpp_nape.geom.ZPP_GeomVert.get(p5.x,p5.y);
								if(fstx) p5.forced = true;
								if(p5.y == y0 || p5.y == y1) {
									if(p5.y == y0 && (val5 & 1) != 0 || p5.y == y1 && (val5 & 64) != 0) val5 ^= 128;
								}
							}
							var obj5 = p5;
							if(ret.p1 == null) ret.p1 = obj5.prev = obj5.next = obj5; else {
								obj5.prev = ret.p1;
								obj5.next = ret.p1.next;
								ret.p1.next.prev = obj5;
								ret.p1.next = obj5;
							}
							ret.p1 = obj5;
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val5;
					if(val5 == 1 || val5 == 4 || val5 == 16 || val5 == 64 || val5 == 3 || val5 == 12 || val5 == 48 || val5 == 192 || val5 == 129 || val5 == 6 || val5 == 24 || val5 == 96 || val5 == 5 || val5 == 20 || val5 == 80 || val5 == 65 || val5 == 17 || val5 == 68) {
						val5 = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val5 == 0) ret = null; else {
						ret.pr = ret.p1;
						ret.okeyr = ret.okey1;
						ret.keyr = ret.key1;
					}
				} else {
					var val6 = 224;
					ret.okey1 = val6;
					var _g6 = 0;
					while(_g6 < 8) {
						var i6 = _g6++;
						if((val6 & 1 << i6) != 0) {
							var p6 = null;
							if(i6 == 0) {
								p6 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
								if(fstx || fsty) p6.forced = true;
							} else if(i6 == 2) {
								p6 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
								if(sndx || fsty) p6.forced = true;
							} else if(i6 == 4) {
								p6 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
								if(sndx || sndy) p6.forced = true;
							} else if(i6 == 6) {
								p6 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
								if(fstx || sndy) p6.forced = true;
							} else if(i6 == 1) {
								p6 = ints.list[(yn << 1) * ints.width + xn];
								if(p6 == null) {
									p6 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									ints.list[(yn << 1) * ints.width + xn] = p6;
								} else p6 = zpp_nape.geom.ZPP_GeomVert.get(p6.x,p6.y);
								if(fsty) p6.forced = true;
								if(p6.x == x0 || p6.x == x1) {
									if(p6.x == x0 && (val6 & 1) != 0 || p6.x == x1 && (val6 & 4) != 0) val6 ^= 2;
								}
							} else if(i6 == 5) {
								p6 = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p6 == null) {
									p6 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									ints.list[((yn << 1) + 2) * ints.width + xn] = p6;
								} else p6 = zpp_nape.geom.ZPP_GeomVert.get(p6.x,p6.y);
								if(sndy) p6.forced = true;
								if(p6.x == x0 || p6.x == x1) {
									if(p6.x == x0 && (val6 & 64) != 0 || p6.x == x1 && (val6 & 16) != 0) val6 ^= 32;
								}
							} else if(i6 == 3) {
								p6 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p6 == null) {
									p6 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p6;
								} else p6 = zpp_nape.geom.ZPP_GeomVert.get(p6.x,p6.y);
								if(sndx) p6.forced = true;
								if(p6.y == y0 || p6.y == y1) {
									if(p6.y == y0 && (val6 & 4) != 0 || p6.y == y1 && (val6 & 16) != 0) val6 ^= 8;
								}
							} else {
								p6 = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p6 == null) {
									p6 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + xn] = p6;
								} else p6 = zpp_nape.geom.ZPP_GeomVert.get(p6.x,p6.y);
								if(fstx) p6.forced = true;
								if(p6.y == y0 || p6.y == y1) {
									if(p6.y == y0 && (val6 & 1) != 0 || p6.y == y1 && (val6 & 64) != 0) val6 ^= 128;
								}
							}
							var obj6 = p6;
							if(ret.p1 == null) ret.p1 = obj6.prev = obj6.next = obj6; else {
								obj6.prev = ret.p1;
								obj6.next = ret.p1.next;
								ret.p1.next.prev = obj6;
								ret.p1.next = obj6;
							}
							ret.p1 = obj6;
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val6;
					if(val6 == 1 || val6 == 4 || val6 == 16 || val6 == 64 || val6 == 3 || val6 == 12 || val6 == 48 || val6 == 192 || val6 == 129 || val6 == 6 || val6 == 24 || val6 == 96 || val6 == 5 || val6 == 20 || val6 == 80 || val6 == 65 || val6 == 17 || val6 == 68) {
						val6 = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val6 != 0) {
						var val7 = 14;
						ret.okey2 = val7;
						var _g7 = 0;
						while(_g7 < 8) {
							var i7 = _g7++;
							if((val7 & 1 << i7) != 0) {
								var p7 = null;
								if(i7 == 0) {
									p7 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
									if(fstx || fsty) p7.forced = true;
								} else if(i7 == 2) {
									p7 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
									if(sndx || fsty) p7.forced = true;
								} else if(i7 == 4) {
									p7 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
									if(sndx || sndy) p7.forced = true;
								} else if(i7 == 6) {
									p7 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
									if(fstx || sndy) p7.forced = true;
								} else if(i7 == 1) {
									p7 = ints.list[(yn << 1) * ints.width + xn];
									if(p7 == null) {
										p7 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p7;
									} else p7 = zpp_nape.geom.ZPP_GeomVert.get(p7.x,p7.y);
									if(fsty) p7.forced = true;
									if(p7.x == x0 || p7.x == x1) {
										if(p7.x == x0 && (val7 & 1) != 0 || p7.x == x1 && (val7 & 4) != 0) val7 ^= 2;
									}
								} else if(i7 == 5) {
									p7 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p7 == null) {
										p7 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p7;
									} else p7 = zpp_nape.geom.ZPP_GeomVert.get(p7.x,p7.y);
									if(sndy) p7.forced = true;
									if(p7.x == x0 || p7.x == x1) {
										if(p7.x == x0 && (val7 & 64) != 0 || p7.x == x1 && (val7 & 16) != 0) val7 ^= 32;
									}
								} else if(i7 == 3) {
									p7 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p7 == null) {
										p7 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p7;
									} else p7 = zpp_nape.geom.ZPP_GeomVert.get(p7.x,p7.y);
									if(sndx) p7.forced = true;
									if(p7.y == y0 || p7.y == y1) {
										if(p7.y == y0 && (val7 & 4) != 0 || p7.y == y1 && (val7 & 16) != 0) val7 ^= 8;
									}
								} else {
									p7 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p7 == null) {
										p7 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p7;
									} else p7 = zpp_nape.geom.ZPP_GeomVert.get(p7.x,p7.y);
									if(fstx) p7.forced = true;
									if(p7.y == y0 || p7.y == y1) {
										if(p7.y == y0 && (val7 & 1) != 0 || p7.y == y1 && (val7 & 64) != 0) val7 ^= 128;
									}
								}
								var obj7 = p7;
								if(ret.p2 == null) ret.p2 = obj7.prev = obj7.next = obj7; else {
									obj7.prev = ret.p2;
									obj7.next = ret.p2.next;
									ret.p2.next.prev = obj7;
									ret.p2.next = obj7;
								}
								ret.p2 = obj7;
							}
						}
						ret.p2 = ret.p2.next;
						ret.key2 = val7;
						if(val7 == 1 || val7 == 4 || val7 == 16 || val7 == 64 || val7 == 3 || val7 == 12 || val7 == 48 || val7 == 192 || val7 == 129 || val7 == 6 || val7 == 24 || val7 == 96 || val7 == 5 || val7 == 20 || val7 == 80 || val7 == 65 || val7 == 17 || val7 == 68) {
							val7 = 0;
							ret.key2 = 0;
							ret.p2 = null;
						}
						if(val7 == 0) {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						} else {
							ret.pr = ret.p2;
							ret.okeyr = ret.okey2;
							ret.keyr = ret.key2;
						}
					} else {
						var val8 = 14;
						ret.okey1 = val8;
						var _g8 = 0;
						while(_g8 < 8) {
							var i8 = _g8++;
							if((val8 & 1 << i8) != 0) {
								var p8 = null;
								if(i8 == 0) {
									p8 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
									if(fstx || fsty) p8.forced = true;
								} else if(i8 == 2) {
									p8 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
									if(sndx || fsty) p8.forced = true;
								} else if(i8 == 4) {
									p8 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
									if(sndx || sndy) p8.forced = true;
								} else if(i8 == 6) {
									p8 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
									if(fstx || sndy) p8.forced = true;
								} else if(i8 == 1) {
									p8 = ints.list[(yn << 1) * ints.width + xn];
									if(p8 == null) {
										p8 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p8;
									} else p8 = zpp_nape.geom.ZPP_GeomVert.get(p8.x,p8.y);
									if(fsty) p8.forced = true;
									if(p8.x == x0 || p8.x == x1) {
										if(p8.x == x0 && (val8 & 1) != 0 || p8.x == x1 && (val8 & 4) != 0) val8 ^= 2;
									}
								} else if(i8 == 5) {
									p8 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p8 == null) {
										p8 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p8;
									} else p8 = zpp_nape.geom.ZPP_GeomVert.get(p8.x,p8.y);
									if(sndy) p8.forced = true;
									if(p8.x == x0 || p8.x == x1) {
										if(p8.x == x0 && (val8 & 64) != 0 || p8.x == x1 && (val8 & 16) != 0) val8 ^= 32;
									}
								} else if(i8 == 3) {
									p8 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p8 == null) {
										p8 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p8;
									} else p8 = zpp_nape.geom.ZPP_GeomVert.get(p8.x,p8.y);
									if(sndx) p8.forced = true;
									if(p8.y == y0 || p8.y == y1) {
										if(p8.y == y0 && (val8 & 4) != 0 || p8.y == y1 && (val8 & 16) != 0) val8 ^= 8;
									}
								} else {
									p8 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p8 == null) {
										p8 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p8;
									} else p8 = zpp_nape.geom.ZPP_GeomVert.get(p8.x,p8.y);
									if(fstx) p8.forced = true;
									if(p8.y == y0 || p8.y == y1) {
										if(p8.y == y0 && (val8 & 1) != 0 || p8.y == y1 && (val8 & 64) != 0) val8 ^= 128;
									}
								}
								var obj8 = p8;
								if(ret.p1 == null) ret.p1 = obj8.prev = obj8.next = obj8; else {
									obj8.prev = ret.p1;
									obj8.next = ret.p1.next;
									ret.p1.next.prev = obj8;
									ret.p1.next = obj8;
								}
								ret.p1 = obj8;
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val8;
						if(val8 == 1 || val8 == 4 || val8 == 16 || val8 == 64 || val8 == 3 || val8 == 12 || val8 == 48 || val8 == 192 || val8 == 129 || val8 == 6 || val8 == 24 || val8 == 96 || val8 == 5 || val8 == 20 || val8 == 80 || val8 == 65 || val8 == 17 || val8 == 68) {
							val8 = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val8 == 0) ret = null; else {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						}
					}
				}
			}
			return ret;
		}
	}
	,lerp: function(x0,x1,v0,v1) {
		if(v0 == 0) return x0; else if(v1 == 0) return x1; else {
			var dv = v0 - v1;
			var t;
			if(dv * dv < nape.Config.epsilon * nape.Config.epsilon) t = 0.5; else t = v0 / dv;
			if(t < 0) t = 0; else if(t > 1) t = 1;
			return x0 + t * (x1 - x0);
		}
	}
	,xlerp: function(x0,x1,y,v0,v1,iso,quality) {
		var xm = this.lerp(x0,x1,v0,v1);
		while(quality-- != 0 && x0 < xm && xm < x1) {
			var vm = iso(xm,y);
			if(vm == 0) break;
			if(v0 * vm < 0) {
				x1 = xm;
				v1 = vm;
			} else {
				x0 = xm;
				v0 = vm;
			}
			xm = this.lerp(x0,x1,v0,v1);
		}
		return xm;
	}
	,ylerp: function(y0,y1,x,v0,v1,iso,quality) {
		var ym = this.lerp(y0,y1,v0,v1);
		while(quality-- != 0 && y0 < ym && ym < y1) {
			var vm = iso(x,ym);
			if(vm == 0) break;
			if(v0 * vm < 0) {
				y1 = ym;
				v1 = vm;
			} else {
				y0 = ym;
				v0 = vm;
			}
			ym = this.lerp(y0,y1,v0,v1);
		}
		return ym;
	}
	,__class__: zpp_nape.geom.ZPP_MarchingSquares
};
zpp_nape.geom.ZPP_Mat23 = function() {
	this.next = null;
	this._invalidate = null;
	this.ty = 0.0;
	this.tx = 0.0;
	this.d = 0.0;
	this.c = 0.0;
	this.b = 0.0;
	this.a = 0.0;
	this.outer = null;
};
$hxClasses["zpp_nape.geom.ZPP_Mat23"] = zpp_nape.geom.ZPP_Mat23;
zpp_nape.geom.ZPP_Mat23.__name__ = ["zpp_nape","geom","ZPP_Mat23"];
zpp_nape.geom.ZPP_Mat23.get = function() {
	var ret;
	if(zpp_nape.geom.ZPP_Mat23.zpp_pool == null) ret = new zpp_nape.geom.ZPP_Mat23(); else {
		ret = zpp_nape.geom.ZPP_Mat23.zpp_pool;
		zpp_nape.geom.ZPP_Mat23.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	return ret;
};
zpp_nape.geom.ZPP_Mat23.identity = function() {
	var ret = zpp_nape.geom.ZPP_Mat23.get();
	ret.setas(1,0,0,1,0,0);
	return ret;
};
zpp_nape.geom.ZPP_Mat23.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.geom.Mat23();
			var o = this.outer.zpp_inner;
			o.next = zpp_nape.geom.ZPP_Mat23.zpp_pool;
			zpp_nape.geom.ZPP_Mat23.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,invalidate: function() {
		if(this._invalidate != null) this._invalidate();
	}
	,set: function(m) {
		this.setas(m.a,m.b,m.c,m.d,m.tx,m.ty);
	}
	,setas: function(a,b,c,d,tx,ty) {
		this.tx = tx;
		this.ty = ty;
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
	}
	,free: function() {
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_Mat23
};
zpp_nape.geom.ZPP_MatMN = function(m,n) {
	this.x = null;
	this.n = 0;
	this.m = 0;
	this.outer = null;
	this.m = m;
	this.n = n;
	this.x = new Array();
	var _g1 = 0;
	var _g = m * n;
	while(_g1 < _g) {
		var i = _g1++;
		this.x.push(0.0);
	}
};
$hxClasses["zpp_nape.geom.ZPP_MatMN"] = zpp_nape.geom.ZPP_MatMN;
zpp_nape.geom.ZPP_MatMN.__name__ = ["zpp_nape","geom","ZPP_MatMN"];
zpp_nape.geom.ZPP_MatMN.prototype = {
	__class__: zpp_nape.geom.ZPP_MatMN
};
zpp_nape.geom.ZPP_Monotone = function() { };
$hxClasses["zpp_nape.geom.ZPP_Monotone"] = zpp_nape.geom.ZPP_Monotone;
zpp_nape.geom.ZPP_Monotone.__name__ = ["zpp_nape","geom","ZPP_Monotone"];
zpp_nape.geom.ZPP_Monotone.bisector = function(b) {
	var a = b.prev;
	var c = b.next;
	var ux = 0.0;
	var uy = 0.0;
	ux = b.x - a.x;
	uy = b.y - a.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = c.x - b.x;
	vy = c.y - b.y;
	var ret = zpp_nape.geom.ZPP_Vec2.get(-uy - vy,ux + vx,null);
	var d = ret.x * ret.x + ret.y * ret.y;
	var imag = 1.0 / Math.sqrt(d);
	var t = imag;
	ret.x *= t;
	ret.y *= t;
	if(vy * ux - vx * uy < 0) {
		ret.x = -ret.x;
		ret.y = -ret.y;
	}
	return ret;
};
zpp_nape.geom.ZPP_Monotone.below = function(p,q) {
	if(p.y < q.y) return true; else if(p.y > q.y) return false; else if(p.x < q.x) return true; else if(p.x > q.x) return false; else {
		var po = zpp_nape.geom.ZPP_Monotone.bisector(p);
		var qo = zpp_nape.geom.ZPP_Monotone.bisector(q);
		var t = 1.0;
		po.x += p.x * t;
		po.y += p.y * t;
		var t1 = 1.0;
		qo.x += q.x * t1;
		qo.y += q.y * t1;
		var ret = po.x < qo.x || po.x == qo.x && po.y < qo.y;
		var o = po;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		var o1 = qo;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o1;
		return ret;
	}
};
zpp_nape.geom.ZPP_Monotone.above = function(p,q) {
	return zpp_nape.geom.ZPP_Monotone.below(q,p);
};
zpp_nape.geom.ZPP_Monotone.left_vertex = function(p) {
	var pre = p.prev;
	return pre.y > p.y || pre.y == p.y && p.next.y < p.y;
};
zpp_nape.geom.ZPP_Monotone.isMonotone = function(P) {
	var min = P;
	var max = P;
	var F = P.next;
	var L = P;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			if(p.y < min.y) min = p;
			if(p.y > max.y) max = p;
			nite = nite.next;
		} while(nite != L);
	}
	var ret = true;
	var pre = min;
	if(max != min.next) {
		var F1 = min.next;
		var L1 = max;
		if(F1 != null) {
			var nite1 = F1;
			do {
				var p1 = nite1;
				if(p1.y < pre.y) {
					ret = false;
					break;
				}
				pre = p1;
				nite1 = nite1.next;
			} while(nite1 != L1);
		}
	}
	if(!ret) return false;
	pre = min;
	if(max != min.prev) {
		var F2 = min.prev;
		var L2 = max;
		if(F2 != null) {
			var nite2 = F2;
			do {
				var p2 = nite2;
				if(p2.y < pre.y) {
					ret = false;
					break;
				}
				pre = p2;
				nite2 = nite2.prev;
			} while(nite2 != L2);
		}
	}
	return ret;
};
zpp_nape.geom.ZPP_Monotone.sharedPPoly = null;
zpp_nape.geom.ZPP_Monotone.getShared = function() {
	if(zpp_nape.geom.ZPP_Monotone.sharedPPoly == null) zpp_nape.geom.ZPP_Monotone.sharedPPoly = new zpp_nape.geom.ZPP_PartitionedPoly();
	return zpp_nape.geom.ZPP_Monotone.sharedPPoly;
};
zpp_nape.geom.ZPP_Monotone.decompose = function(P,poly) {
	if(poly == null) poly = new zpp_nape.geom.ZPP_PartitionedPoly(P); else poly.init(P);
	if(poly.vertices == null) return poly;
	if(zpp_nape.geom.ZPP_Monotone.queue == null) zpp_nape.geom.ZPP_Monotone.queue = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
	var F = poly.vertices;
	var L = poly.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			zpp_nape.geom.ZPP_Monotone.queue.add(p);
			var ux = 0.0;
			var uy = 0.0;
			ux = p.next.x - p.x;
			uy = p.next.y - p.y;
			var vx = 0.0;
			var vy = 0.0;
			vx = p.prev.x - p.x;
			vy = p.prev.y - p.y;
			var cx = vy * ux - vx * uy > 0.0;
			if(zpp_nape.geom.ZPP_Monotone.below(p.prev,p)) {
				if(zpp_nape.geom.ZPP_Monotone.below(p.next,p)) {
					if(cx) p.type = 0; else p.type = 3;
				} else p.type = 4;
			} else if(zpp_nape.geom.ZPP_Monotone.below(p,p.next)) {
				if(cx) p.type = 1; else p.type = 2;
			} else p.type = 4;
			nite = nite.next;
		} while(nite != L);
	}
	var xxlist = zpp_nape.geom.ZPP_Monotone.queue;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else if(zpp_nape.geom.ZPP_Monotone.above(left.elt,right.elt)) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else {
						nxt = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt; else head = nxt;
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	if(zpp_nape.geom.ZPP_Monotone.edges == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) zpp_nape.geom.ZPP_Monotone.edges = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
			zpp_nape.geom.ZPP_Monotone.edges = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = zpp_nape.geom.ZPP_Monotone.edges.next;
			zpp_nape.geom.ZPP_Monotone.edges.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Monotone.edges.lt = zpp_nape.geom.ZPP_PartitionVertex.edge_lt;
		zpp_nape.geom.ZPP_Monotone.edges.swapped = zpp_nape.geom.ZPP_PartitionVertex.edge_swap;
	}
	while(!(zpp_nape.geom.ZPP_Monotone.queue.head == null)) {
		var v = zpp_nape.geom.ZPP_Monotone.queue.pop_unsafe();
		var _g = v.type;
		switch(_g) {
		case 0:
			v.helper = v;
			v.node = zpp_nape.geom.ZPP_Monotone.edges.insert(v);
			break;
		case 1:
			var e = v.prev;
			if(e.helper.type == 2) poly.add_diagonal(v,e.helper);
			zpp_nape.geom.ZPP_Monotone.edges.remove_node(e.node);
			break;
		case 3:
			var e1;
			var ret = null;
			if(!zpp_nape.geom.ZPP_Monotone.edges.empty()) {
				var set_ite = zpp_nape.geom.ZPP_Monotone.edges.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!zpp_nape.geom.ZPP_PartitionVertex.vert_lt(elt,v)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			e1 = ret;
			if(e1 != null) {
				poly.add_diagonal(v,e1.helper);
				e1.helper = v;
			}
			v.node = zpp_nape.geom.ZPP_Monotone.edges.insert(v);
			v.helper = v;
			break;
		case 2:
			var e2 = v.prev;
			if(e2.helper.type == 2) poly.add_diagonal(v,e2.helper);
			zpp_nape.geom.ZPP_Monotone.edges.remove_node(e2.node);
			var e3;
			var ret1 = null;
			if(!zpp_nape.geom.ZPP_Monotone.edges.empty()) {
				var set_ite1 = zpp_nape.geom.ZPP_Monotone.edges.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var elt1 = set_ite1.data;
					if(!zpp_nape.geom.ZPP_PartitionVertex.vert_lt(elt1,v)) {
						ret1 = elt1;
						break;
					}
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			e3 = ret1;
			if(e3 != null) {
				if(e3.helper.type == 2) poly.add_diagonal(v,e3.helper);
				e3.helper = v;
			}
			break;
		case 4:
			var pre = v.prev;
			if(zpp_nape.geom.ZPP_Monotone.left_vertex(v)) {
				if(pre.helper.type == 2) poly.add_diagonal(v,pre.helper);
				zpp_nape.geom.ZPP_Monotone.edges.remove_node(pre.node);
				v.node = zpp_nape.geom.ZPP_Monotone.edges.insert(v);
				v.helper = v;
			} else {
				var e4;
				var ret2 = null;
				if(!zpp_nape.geom.ZPP_Monotone.edges.empty()) {
					var set_ite2 = zpp_nape.geom.ZPP_Monotone.edges.parent;
					while(set_ite2.prev != null) set_ite2 = set_ite2.prev;
					while(set_ite2 != null) {
						var elt2 = set_ite2.data;
						if(!zpp_nape.geom.ZPP_PartitionVertex.vert_lt(elt2,v)) {
							ret2 = elt2;
							break;
						}
						if(set_ite2.next != null) {
							set_ite2 = set_ite2.next;
							while(set_ite2.prev != null) set_ite2 = set_ite2.prev;
						} else {
							while(set_ite2.parent != null && set_ite2 == set_ite2.parent.next) set_ite2 = set_ite2.parent;
							set_ite2 = set_ite2.parent;
						}
					}
				}
				e4 = ret2;
				if(e4.helper.type == 2) poly.add_diagonal(v,e4.helper);
				e4.helper = v;
			}
			break;
		}
	}
	return poly;
};
zpp_nape.geom.ZPP_PartitionVertex = function() {
	this.node = null;
	this.prev = null;
	this.next = null;
	this.rightchain = false;
	this.helper = null;
	this.type = 0;
	this.diagonals = null;
	this.forced = false;
	this.y = 0.0;
	this.x = 0.0;
	this.mag = 0;
	this.id = 0;
	this.id = zpp_nape.geom.ZPP_PartitionVertex.nextId++;
	this.diagonals = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
};
$hxClasses["zpp_nape.geom.ZPP_PartitionVertex"] = zpp_nape.geom.ZPP_PartitionVertex;
zpp_nape.geom.ZPP_PartitionVertex.__name__ = ["zpp_nape","geom","ZPP_PartitionVertex"];
zpp_nape.geom.ZPP_PartitionVertex.get = function(x) {
	var ret;
	if(zpp_nape.geom.ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.geom.ZPP_PartitionVertex(); else {
		ret = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
		zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = x.x;
	ret.y = x.y;
	return ret;
};
zpp_nape.geom.ZPP_PartitionVertex.rightdistance = function(edge,vert) {
	var flip = edge.next.y > edge.y;
	var ux = 0.0;
	var uy = 0.0;
	ux = edge.next.x - edge.x;
	uy = edge.next.y - edge.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = vert.x - edge.x;
	vy = vert.y - edge.y;
	return (flip?-1.0:1.0) * (vy * ux - vx * uy);
};
zpp_nape.geom.ZPP_PartitionVertex.vert_lt = function(edge,vert) {
	if(vert == edge || vert == edge.next) return true; else if(edge.y == edge.next.y) return (function($this) {
		var $r;
		var x = edge.x;
		var y = edge.next.x;
		$r = x < y?x:y;
		return $r;
	}(this)) <= vert.x; else return zpp_nape.geom.ZPP_PartitionVertex.rightdistance(edge,vert) <= 0.0;
};
zpp_nape.geom.ZPP_PartitionVertex.edge_swap = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
};
zpp_nape.geom.ZPP_PartitionVertex.edge_lt = function(p,q) {
	if(p == q && p.next == q.next) return false;
	if(p == q.next) return !zpp_nape.geom.ZPP_PartitionVertex.vert_lt(p,q); else if(q == p.next) return zpp_nape.geom.ZPP_PartitionVertex.vert_lt(q,p); else if(p.y == p.next.y) if(q.y == q.next.y) return (function($this) {
		var $r;
		var x = p.x;
		var y = p.next.x;
		$r = x > y?x:y;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var x1 = q.x;
		var y1 = q.next.x;
		$r = x1 > y1?x1:y1;
		return $r;
	}(this)); else return zpp_nape.geom.ZPP_PartitionVertex.rightdistance(q,p) > 0.0 || zpp_nape.geom.ZPP_PartitionVertex.rightdistance(q,p.next) > 0.0; else {
		var qRight = zpp_nape.geom.ZPP_PartitionVertex.rightdistance(p,q);
		var qNextRight = zpp_nape.geom.ZPP_PartitionVertex.rightdistance(p,q.next);
		if(qRight == 0 && qNextRight == 0) return (function($this) {
			var $r;
			var x2 = p.x;
			var y2 = p.next.x;
			$r = x2 > y2?x2:y2;
			return $r;
		}(this)) > (function($this) {
			var $r;
			var x3 = q.x;
			var y3 = q.next.x;
			$r = x3 > y3?x3:y3;
			return $r;
		}(this));
		if(qRight * qNextRight >= 0) return qRight < 0 || qNextRight < 0;
		var pRight = zpp_nape.geom.ZPP_PartitionVertex.rightdistance(q,p);
		var pNextRight = zpp_nape.geom.ZPP_PartitionVertex.rightdistance(q,p.next);
		if(pRight * pNextRight >= 0) return pRight > 0 || pNextRight > 0;
		return false;
	}
};
zpp_nape.geom.ZPP_PartitionVertex.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.helper = null;
	}
	,copy: function() {
		var ret;
		if(zpp_nape.geom.ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.geom.ZPP_PartitionVertex(); else {
			ret = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
			zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.x = this.x;
		ret.y = this.y;
		ret.forced = this.forced;
		return ret;
	}
	,sort: function() {
		var ux = 0.0;
		var uy = 0.0;
		var vx = 0.0;
		var vy = 0.0;
		var vorient;
		ux = this.prev.x - this.x;
		uy = this.prev.y - this.y;
		vx = this.next.x - this.x;
		vy = this.next.y - this.y;
		var ret = vy * ux - vx * uy;
		if(ret > 0) vorient = -1; else if(ret == 0) vorient = 0; else vorient = 1;
		var xxlist = this.diagonals;
		if(!(xxlist.head == null) && xxlist.head.next != null) {
			var head = xxlist.head;
			var tail = null;
			var left = null;
			var right = null;
			var nxt = null;
			var listSize = 1;
			var numMerges;
			var leftSize;
			var rightSize;
			do {
				numMerges = 0;
				left = head;
				tail = head = null;
				while(left != null) {
					numMerges++;
					right = left;
					leftSize = 0;
					rightSize = listSize;
					while(right != null && leftSize < listSize) {
						leftSize++;
						right = right.next;
					}
					while(leftSize > 0 || rightSize > 0 && right != null) {
						if(leftSize == 0) {
							nxt = right;
							right = right.next;
							rightSize--;
						} else if(rightSize == 0 || right == null) {
							nxt = left;
							left = left.next;
							leftSize--;
						} else if(vorient == 1?(function($this) {
							var $r;
							{
								ux = left.elt.x - $this.x;
								uy = left.elt.y - $this.y;
							}
							{
								vx = right.elt.x - $this.x;
								vy = right.elt.y - $this.y;
							}
							var ret1 = vy * ux - vx * uy;
							$r = ret1 > 0?-1:ret1 == 0?0:1;
							return $r;
						}(this)) == 1:(function($this) {
							var $r;
							var d1;
							{
								ux = $this.prev.x - $this.x;
								uy = $this.prev.y - $this.y;
								vx = left.elt.x - $this.x;
								vy = left.elt.y - $this.y;
								var ret2 = vy * ux - vx * uy;
								if(ret2 > 0) d1 = -1; else if(ret2 == 0) d1 = 0; else d1 = 1;
							}
							var d2;
							{
								ux = $this.prev.x - $this.x;
								uy = $this.prev.y - $this.y;
								vx = right.elt.x - $this.x;
								vy = right.elt.y - $this.y;
								var ret3 = vy * ux - vx * uy;
								if(ret3 > 0) d2 = -1; else if(ret3 == 0) d2 = 0; else d2 = 1;
							}
							$r = d1 * d2 == 1 || d1 * d2 == 0 && (d1 == 1 || d2 == 1)?(function($this) {
								var $r;
								{
									ux = left.elt.x - $this.x;
									uy = left.elt.y - $this.y;
								}
								{
									vx = right.elt.x - $this.x;
									vy = right.elt.y - $this.y;
								}
								var ret4 = vy * ux - vx * uy;
								$r = ret4 > 0?-1:ret4 == 0?0:1;
								return $r;
							}($this)) == 1:d1 == -1 || d2 == -1?d2 == -1:d1 == 0 && d2 == 0?(function($this) {
								var $r;
								{
									ux = $this.x - $this.prev.x;
									uy = $this.y - $this.prev.y;
								}
								{
									vx = left.elt.x - $this.x;
									vy = left.elt.y - $this.y;
								}
								var d11 = ux * vx + uy * vy;
								{
									vx = right.elt.x - $this.x;
									vy = right.elt.y - $this.y;
								}
								var d21 = ux * vx + uy * vy;
								$r = d11 < 0 && d21 > 0?true:d21 < 0 && d11 > 0?false:true;
								return $r;
							}($this)):true;
							return $r;
						}(this))) {
							nxt = left;
							left = left.next;
							leftSize--;
						} else {
							nxt = right;
							right = right.next;
							rightSize--;
						}
						if(tail != null) tail.next = nxt; else head = nxt;
						tail = nxt;
					}
					left = right;
				}
				tail.next = null;
				listSize <<= 1;
			} while(numMerges > 1);
			xxlist.head = head;
			xxlist.modified = true;
			xxlist.pushmod = true;
		}
	}
	,__class__: zpp_nape.geom.ZPP_PartitionVertex
};
zpp_nape.geom.ZPP_PartitionedPoly = function(P) {
	this.next = null;
	this.vertices = null;
	this.init(P);
};
$hxClasses["zpp_nape.geom.ZPP_PartitionedPoly"] = zpp_nape.geom.ZPP_PartitionedPoly;
zpp_nape.geom.ZPP_PartitionedPoly.__name__ = ["zpp_nape","geom","ZPP_PartitionedPoly"];
zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList = null;
zpp_nape.geom.ZPP_PartitionedPoly.getSharedPP = function() {
	if(zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList = new zpp_nape.util.ZNPList_ZPP_PartitionedPoly();
	return zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList;
};
zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = null;
zpp_nape.geom.ZPP_PartitionedPoly.getShared = function() {
	if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
	return zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
};
zpp_nape.geom.ZPP_PartitionedPoly.prototype = {
	eq: function(a,b) {
		return zpp_nape.geom.ZPP_VecMath.vec_dsq(a.x,a.y,b.x,b.y) < nape.Config.epsilon * nape.Config.epsilon;
	}
	,alloc: function() {
	}
	,free: function() {
	}
	,init: function(P) {
		if(P == null) return;
		var cw;
		cw = (function($this) {
			var $r;
			var area = 0.0;
			{
				var F = P;
				var L = P;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						area += v.x * (v.next.y - v.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
			}
			$r = area * 0.5;
			return $r;
		}(this)) > 0.0;
		var p = P;
		do {
			if(cw) {
				var obj = zpp_nape.geom.ZPP_PartitionVertex.get(p);
				if(this.vertices == null) this.vertices = obj.prev = obj.next = obj; else {
					obj.prev = this.vertices;
					obj.next = this.vertices.next;
					this.vertices.next.prev = obj;
					this.vertices.next = obj;
				}
				this.vertices = obj;
			} else {
				var obj1 = zpp_nape.geom.ZPP_PartitionVertex.get(p);
				if(this.vertices == null) this.vertices = obj1.prev = obj1.next = obj1; else {
					obj1.next = this.vertices;
					obj1.prev = this.vertices.prev;
					this.vertices.prev.next = obj1;
					this.vertices.prev = obj1;
				}
				this.vertices = obj1;
			}
			this.vertices.forced = p.forced;
			p = p.next;
		} while(p != P);
		this.remove_collinear_vertices();
	}
	,remove_collinear_vertices: function() {
		var p = this.vertices;
		var skip = true;
		while(skip || p != this.vertices) {
			skip = false;
			if(this.eq(p,p.next)) {
				if(p == this.vertices) {
					this.vertices = p.next;
					skip = true;
				}
				if(p.forced) p.next.forced = true;
				if(p != null && p.prev == p) {
					p.next = p.prev = null;
					var o = p;
					o.helper = null;
					null;
					o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
					zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
					p = p = null;
				} else {
					var retnodes = p.next;
					p.prev.next = p.next;
					p.next.prev = p.prev;
					p.next = p.prev = null;
					var o1 = p;
					o1.helper = null;
					null;
					o1.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
					zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o1;
					p = null;
					p = retnodes;
				}
				if(p == null) {
					this.vertices = null;
					break;
				}
			} else p = p.next;
		}
		if(this.vertices == null) return true;
		var removed;
		do {
			removed = false;
			p = this.vertices;
			skip = true;
			while(skip || p != this.vertices) {
				skip = false;
				var pre = p.prev;
				var ux = 0.0;
				var uy = 0.0;
				ux = p.x - pre.x;
				uy = p.y - pre.y;
				var vx = 0.0;
				var vy = 0.0;
				vx = p.next.x - p.x;
				vy = p.next.y - p.y;
				var crs = vy * ux - vx * uy;
				if(crs * crs >= nape.Config.epsilon * nape.Config.epsilon) p = p.next; else {
					if(p == this.vertices) {
						this.vertices = p.next;
						skip = true;
					}
					if(p != null && p.prev == p) {
						p.next = p.prev = null;
						var o2 = p;
						o2.helper = null;
						null;
						o2.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
						zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o2;
						p = p = null;
					} else {
						var retnodes1 = p.next;
						p.prev.next = p.next;
						p.next.prev = p.prev;
						p.next = p.prev = null;
						var o3 = p;
						o3.helper = null;
						null;
						o3.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
						zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o3;
						p = null;
						p = retnodes1;
					}
					removed = true;
					if(p == null) {
						removed = false;
						this.vertices = null;
						break;
					}
				}
			}
		} while(removed);
		return this.vertices == null;
	}
	,add_diagonal: function(p,q) {
		p.diagonals.add(q);
		q.diagonals.add(p);
		p.forced = q.forced = true;
	}
	,extract_partitions: function(ret) {
		if(ret == null) ret = new zpp_nape.util.ZNPList_ZPP_PartitionedPoly();
		if(this.vertices != null) {
			var F = this.vertices;
			var L = this.vertices;
			if(F != null) {
				var nite = F;
				do {
					var c = nite;
					c.sort();
					nite = nite.next;
				} while(nite != L);
			}
			this.pull_partitions(this.vertices,ret);
			while(!(this.vertices == null)) if(this.vertices != null && this.vertices.prev == this.vertices) {
				this.vertices.next = this.vertices.prev = null;
				var o = this.vertices;
				o.helper = null;
				null;
				o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
				zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
				this.vertices = this.vertices = null;
			} else {
				var retnodes = this.vertices.next;
				this.vertices.prev.next = this.vertices.next;
				this.vertices.next.prev = this.vertices.prev;
				this.vertices.next = this.vertices.prev = null;
				var o1 = this.vertices;
				o1.helper = null;
				null;
				o1.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
				zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o1;
				this.vertices = null;
				this.vertices = retnodes;
			}
			var pre = null;
			var cx_ite = ret.head;
			while(cx_ite != null) {
				var p = cx_ite.elt;
				if(p.remove_collinear_vertices()) {
					ret.erase(pre);
					continue;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
		}
		return ret;
	}
	,pull_partitions: function(start,ret) {
		var poly;
		if(zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool == null) poly = new zpp_nape.geom.ZPP_PartitionedPoly(); else {
			poly = zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool;
			zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = poly.next;
			poly.next = null;
		}
		null;
		var next = start;
		do {
			var obj = next.copy();
			if(poly.vertices == null) poly.vertices = obj.prev = obj.next = obj; else {
				obj.prev = poly.vertices;
				obj.next = poly.vertices.next;
				poly.vertices.next.prev = obj;
				poly.vertices.next = obj;
			}
			poly.vertices = obj;
			poly.vertices.forced = next.forced;
			if(!(next.diagonals.head == null)) {
				var diag = next.diagonals.inlined_pop_unsafe();
				if(diag == start) break; else next = this.pull_partitions(next,ret);
			} else next = next.next;
		} while(next != start);
		if((function($this) {
			var $r;
			var area = 0.0;
			{
				var F = poly.vertices;
				var L = poly.vertices;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						area += v.x * (v.next.y - v.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
			}
			$r = area * 0.5;
			return $r;
		}(this)) != 0) ret.add(poly);
		return next;
	}
	,extract: function(ret) {
		if(ret == null) ret = new zpp_nape.util.ZNPList_ZPP_GeomVert();
		if(this.vertices != null) {
			var F = this.vertices;
			var L = this.vertices;
			if(F != null) {
				var nite = F;
				do {
					var c = nite;
					c.sort();
					nite = nite.next;
				} while(nite != L);
			}
			this.pull(this.vertices,ret);
			while(!(this.vertices == null)) if(this.vertices != null && this.vertices.prev == this.vertices) {
				this.vertices.next = this.vertices.prev = null;
				var o = this.vertices;
				o.helper = null;
				null;
				o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
				zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
				this.vertices = this.vertices = null;
			} else {
				var retnodes = this.vertices.next;
				this.vertices.prev.next = this.vertices.next;
				this.vertices.next.prev = this.vertices.prev;
				this.vertices.next = this.vertices.prev = null;
				var o1 = this.vertices;
				o1.helper = null;
				null;
				o1.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
				zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o1;
				this.vertices = null;
				this.vertices = retnodes;
			}
		}
		return ret;
	}
	,pull: function(start,ret) {
		var poly = null;
		var next = start;
		do {
			var obj = zpp_nape.geom.ZPP_GeomVert.get(next.x,next.y);
			if(poly == null) poly = obj.prev = obj.next = obj; else {
				obj.prev = poly;
				obj.next = poly.next;
				poly.next.prev = obj;
				poly.next = obj;
			}
			poly = obj;
			poly.forced = next.forced;
			if(!(next.diagonals.head == null)) {
				var diag = next.diagonals.inlined_pop_unsafe();
				if(diag == start) break; else next = this.pull(next,ret);
			} else next = next.next;
		} while(next != start);
		var area;
		var area1 = 0.0;
		var F = poly;
		var L = poly;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				area1 += v.x * (v.next.y - v.prev.y);
				nite = nite.next;
			} while(nite != L);
		}
		area = area1 * 0.5;
		if(area * area >= nape.Config.epsilon * nape.Config.epsilon) {
			if(!(function($this) {
				var $r;
				var p = poly;
				var skip = true;
				while(skip || p != poly) {
					skip = false;
					if(zpp_nape.geom.ZPP_VecMath.vec_dsq(p.x,p.y,p.next.x,p.next.y) < nape.Config.epsilon * nape.Config.epsilon) {
						if(p == poly) {
							poly = p.next;
							skip = true;
						}
						if(p.forced) p.next.forced = true;
						if(p != null && p.prev == p) {
							p.next = p.prev = null;
							p = p = null;
						} else {
							var retnodes = p.next;
							p.prev.next = p.next;
							p.next.prev = p.prev;
							p.next = p.prev = null;
							p = null;
							p = retnodes;
						}
						if(p == null) {
							poly = null;
							break;
						}
					} else p = p.next;
				}
				if(poly != null) {
					var removed;
					do {
						removed = false;
						p = poly;
						skip = true;
						while(skip || p != poly) {
							skip = false;
							var pre = p.prev;
							var ux = 0.0;
							var uy = 0.0;
							ux = p.x - pre.x;
							uy = p.y - pre.y;
							var vx = 0.0;
							var vy = 0.0;
							vx = p.next.x - p.x;
							vy = p.next.y - p.y;
							var crs = vy * ux - vx * uy;
							if(crs * crs >= nape.Config.epsilon * nape.Config.epsilon) p = p.next; else {
								if(p == poly) {
									poly = p.next;
									skip = true;
								}
								if(p != null && p.prev == p) {
									p.next = p.prev = null;
									p = p = null;
								} else {
									var retnodes1 = p.next;
									p.prev.next = p.next;
									p.next.prev = p.prev;
									p.next = p.prev = null;
									p = null;
									p = retnodes1;
								}
								removed = true;
								if(p == null) {
									removed = false;
									poly = null;
									break;
								}
							}
						}
					} while(removed);
				}
				$r = poly == null;
				return $r;
			}(this))) ret.add(poly);
		}
		return next;
	}
	,__class__: zpp_nape.geom.ZPP_PartitionedPoly
};
zpp_nape.geom.ZPP_Ray = function() {
	this.zip_dir = false;
	this.absnormaly = 0.0;
	this.absnormalx = 0.0;
	this.normaly = 0.0;
	this.normalx = 0.0;
	this.idiry = 0.0;
	this.idirx = 0.0;
	this.diry = 0.0;
	this.dirx = 0.0;
	this.originy = 0.0;
	this.originx = 0.0;
	this.userData = null;
	this.maxdist = 0.0;
	this.direction = null;
	this.origin = null;
	this.origin = nape.geom.Vec2.get(null,null,null);
	this.origin.zpp_inner._invalidate = $bind(this,this.origin_invalidate);
	this.direction = nape.geom.Vec2.get(null,null,null);
	this.direction.zpp_inner._invalidate = $bind(this,this.direction_invalidate);
	this.originx = 0;
	this.originy = 0;
	this.dirx = 0;
	this.diry = 0;
	this.zip_dir = false;
};
$hxClasses["zpp_nape.geom.ZPP_Ray"] = zpp_nape.geom.ZPP_Ray;
zpp_nape.geom.ZPP_Ray.__name__ = ["zpp_nape","geom","ZPP_Ray"];
zpp_nape.geom.ZPP_Ray.prototype = {
	origin_invalidate: function(x) {
		this.originx = x.x;
		this.originy = x.y;
	}
	,direction_invalidate: function(x) {
		this.dirx = x.x;
		this.diry = x.y;
		this.zip_dir = true;
	}
	,invalidate_dir: function() {
		this.zip_dir = true;
	}
	,validate_dir: function() {
		if(this.zip_dir) {
			this.zip_dir = false;
			var d = this.dirx * this.dirx + this.diry * this.diry;
			var imag = 1.0 / Math.sqrt(d);
			var t = imag;
			this.dirx *= t;
			this.diry *= t;
			this.idirx = 1 / this.dirx;
			this.idiry = 1 / this.diry;
			this.normalx = -this.diry;
			this.normaly = this.dirx;
			var x = this.normalx;
			if(x < 0) this.absnormalx = -x; else this.absnormalx = x;
			var x1 = this.normaly;
			if(x1 < 0) this.absnormaly = -x1; else this.absnormaly = x1;
		}
	}
	,rayAABB: function() {
		var x0 = this.originx;
		var x1 = x0;
		var y0 = this.originy;
		var y1 = y0;
		if(this.maxdist >= Math.POSITIVE_INFINITY) {
			if(this.dirx > 0) x1 = Math.POSITIVE_INFINITY; else if(this.dirx < 0) x1 = Math.NEGATIVE_INFINITY;
			if(this.diry > 0) y1 = Math.POSITIVE_INFINITY; else if(this.diry < 0) y1 = Math.NEGATIVE_INFINITY;
		} else {
			x1 += this.maxdist * this.dirx;
			y1 += this.maxdist * this.diry;
		}
		if(x1 < x0) {
			var t = x0;
			x0 = x1;
			x1 = t;
		}
		if(y1 < y0) {
			var t1 = y0;
			y0 = y1;
			y1 = t1;
		}
		var rayab = zpp_nape.geom.ZPP_AABB.get(x0,y0,x1,y1);
		return rayab;
	}
	,aabbtest: function(a) {
		var dot1 = this.normalx * (this.originx - 0.5 * (a.minx + a.maxx)) + this.normaly * (this.originy - 0.5 * (a.miny + a.maxy));
		var dot2 = this.absnormalx * 0.5 * (a.maxx - a.minx) + this.absnormaly * 0.5 * (a.maxy - a.miny);
		return (function($this) {
			var $r;
			var x = dot1;
			$r = x < 0?-x:x;
			return $r;
		}(this)) < dot2;
	}
	,aabbsect: function(a) {
		var cx = this.originx >= a.minx && this.originx <= a.maxx;
		var cy = this.originy >= a.miny && this.originy <= a.maxy;
		if(cx && cy) return 0.0; else {
			var ret = -1.0;
			do {
				if(this.dirx >= 0 && this.originx >= a.maxx) break;
				if(this.dirx <= 0 && this.originx <= a.minx) break;
				if(this.diry >= 0 && this.originy >= a.maxy) break;
				if(this.diry <= 0 && this.originy <= a.miny) break;
				if(this.dirx > 0) {
					var t = (a.minx - this.originx) * this.idirx;
					if(t >= 0 && t <= this.maxdist) {
						var y = this.originy + t * this.diry;
						if(y >= a.miny && y <= a.maxy) {
							ret = t;
							break;
						}
					}
				} else if(this.dirx < 0) {
					var t1 = (a.maxx - this.originx) * this.idirx;
					if(t1 >= 0 && t1 <= this.maxdist) {
						var y1 = this.originy + t1 * this.diry;
						if(y1 >= a.miny && y1 <= a.maxy) {
							ret = t1;
							break;
						}
					}
				}
				if(this.diry > 0) {
					var t2 = (a.miny - this.originy) * this.idiry;
					if(t2 >= 0 && t2 <= this.maxdist) {
						var x = this.originx + t2 * this.dirx;
						if(x >= a.minx && x <= a.maxx) {
							ret = t2;
							break;
						}
					}
				} else if(this.diry < 0) {
					var t3 = (a.maxy - this.originy) * this.idiry;
					if(t3 >= 0 && t3 <= this.maxdist) {
						var x1 = this.originx + t3 * this.dirx;
						if(x1 >= a.minx && x1 <= a.maxx) {
							ret = t3;
							break;
						}
					}
				}
			} while(false);
			return ret;
		}
	}
	,circlesect: function(c,inner,mint) {
		if(c.zip_worldCOM) {
			if(c.body != null) {
				c.zip_worldCOM = false;
				if(c.zip_localCOM) {
					c.zip_localCOM = false;
					if(c.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) c.polygon.__validate_localCOM();
					if(c.wrap_localCOM != null) {
						c.wrap_localCOM.zpp_inner.x = c.localCOMx;
						c.wrap_localCOM.zpp_inner.y = c.localCOMy;
					}
				}
				c.body.validate_axis();
				c.worldCOMx = c.body.posx + (c.body.axisy * c.localCOMx - c.body.axisx * c.localCOMy);
				c.worldCOMy = c.body.posy + (c.localCOMx * c.body.axisx + c.localCOMy * c.body.axisy);
			}
		}
		var acx = 0.0;
		var acy = 0.0;
		acx = this.originx - c.worldCOMx;
		acy = this.originy - c.worldCOMy;
		var A = this.dirx * this.dirx + this.diry * this.diry;
		var B = 2 * (acx * this.dirx + acy * this.diry);
		var C = acx * acx + acy * acy - c.radius * c.radius;
		var det = B * B - 4 * A * C;
		if(det == 0) {
			var t = -B / 2 * A;
			if((!inner || C > 0) && t > 0 && t < mint && t <= this.maxdist) {
				var nx = 0.0;
				var ny = 0.0;
				nx = this.originx;
				ny = this.originy;
				var t1 = t;
				nx += this.dirx * t1;
				ny += this.diry * t1;
				var t2 = 1.0;
				nx -= c.worldCOMx * t2;
				ny -= c.worldCOMy * t2;
				var d = nx * nx + ny * ny;
				var imag = 1.0 / Math.sqrt(d);
				var t3 = imag;
				nx *= t3;
				ny *= t3;
				if(C <= 0) {
					nx = -nx;
					ny = -ny;
				}
				return zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),t,C <= 0,c.outer);
			} else return null;
		} else {
			det = Math.sqrt(det);
			A = 1 / (2 * A);
			var t0 = (-B - det) * A;
			var t11 = (-B + det) * A;
			if(t0 > 0) {
				if(t0 < mint && t0 <= this.maxdist) {
					var nx1 = 0.0;
					var ny1 = 0.0;
					nx1 = this.originx;
					ny1 = this.originy;
					var t4 = t0;
					nx1 += this.dirx * t4;
					ny1 += this.diry * t4;
					var t5 = 1.0;
					nx1 -= c.worldCOMx * t5;
					ny1 -= c.worldCOMy * t5;
					var d1 = nx1 * nx1 + ny1 * ny1;
					var imag1 = 1.0 / Math.sqrt(d1);
					var t6 = imag1;
					nx1 *= t6;
					ny1 *= t6;
					return zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx1,ny1,null),t0,false,c.outer);
				} else return null;
			} else if(t11 > 0 && inner) {
				if(t11 < mint && t11 <= this.maxdist) {
					var nx2 = 0.0;
					var ny2 = 0.0;
					nx2 = this.originx;
					ny2 = this.originy;
					var t7 = t11;
					nx2 += this.dirx * t7;
					ny2 += this.diry * t7;
					var t8 = 1.0;
					nx2 -= c.worldCOMx * t8;
					ny2 -= c.worldCOMy * t8;
					var d2 = nx2 * nx2 + ny2 * ny2;
					var imag2 = 1.0 / Math.sqrt(d2);
					var t9 = imag2;
					nx2 *= t9;
					ny2 *= t9;
					nx2 = -nx2;
					ny2 = -ny2;
					return zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx2,ny2,null),t11,true,c.outer);
				} else return null;
			} else return null;
		}
	}
	,circlesect2: function(c,inner,list) {
		if(c.zip_worldCOM) {
			if(c.body != null) {
				c.zip_worldCOM = false;
				if(c.zip_localCOM) {
					c.zip_localCOM = false;
					if(c.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) c.polygon.__validate_localCOM();
					if(c.wrap_localCOM != null) {
						c.wrap_localCOM.zpp_inner.x = c.localCOMx;
						c.wrap_localCOM.zpp_inner.y = c.localCOMy;
					}
				}
				c.body.validate_axis();
				c.worldCOMx = c.body.posx + (c.body.axisy * c.localCOMx - c.body.axisx * c.localCOMy);
				c.worldCOMy = c.body.posy + (c.localCOMx * c.body.axisx + c.localCOMy * c.body.axisy);
			}
		}
		var acx = 0.0;
		var acy = 0.0;
		acx = this.originx - c.worldCOMx;
		acy = this.originy - c.worldCOMy;
		var A = this.dirx * this.dirx + this.diry * this.diry;
		var B = 2 * (acx * this.dirx + acy * this.diry);
		var C = acx * acx + acy * acy - c.radius * c.radius;
		var det = B * B - 4 * A * C;
		if(det == 0) {
			var t = -B / 2 * A;
			if((!inner || C > 0) && t > 0 && t <= this.maxdist) {
				var nx = 0.0;
				var ny = 0.0;
				nx = this.originx;
				ny = this.originy;
				var t1 = t;
				nx += this.dirx * t1;
				ny += this.diry * t1;
				var t2 = 1.0;
				nx -= c.worldCOMx * t2;
				ny -= c.worldCOMy * t2;
				var d = nx * nx + ny * ny;
				var imag = 1.0 / Math.sqrt(d);
				var t3 = imag;
				nx *= t3;
				ny *= t3;
				if(C <= 0) {
					nx = -nx;
					ny = -ny;
				}
				var res = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),t,C <= 0,c.outer);
				var pre = null;
				var cx_ite = list.zpp_inner.inner.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(res.zpp_inner.toiDistance < j.zpp_inner.toiDistance) break;
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				list.zpp_inner.inner.inlined_insert(pre,res);
			}
		} else {
			det = Math.sqrt(det);
			A = 1 / (2 * A);
			var t0 = (-B - det) * A;
			var t11 = (-B + det) * A;
			if(t0 > 0 && t0 <= this.maxdist) {
				var nx1 = 0.0;
				var ny1 = 0.0;
				nx1 = this.originx;
				ny1 = this.originy;
				var t4 = t0;
				nx1 += this.dirx * t4;
				ny1 += this.diry * t4;
				var t5 = 1.0;
				nx1 -= c.worldCOMx * t5;
				ny1 -= c.worldCOMy * t5;
				var d1 = nx1 * nx1 + ny1 * ny1;
				var imag1 = 1.0 / Math.sqrt(d1);
				var t6 = imag1;
				nx1 *= t6;
				ny1 *= t6;
				var res1 = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx1,ny1,null),t0,false,c.outer);
				var pre1 = null;
				var cx_ite1 = list.zpp_inner.inner.head;
				while(cx_ite1 != null) {
					var j1 = cx_ite1.elt;
					if(res1.zpp_inner.toiDistance < j1.zpp_inner.toiDistance) break;
					pre1 = cx_ite1;
					cx_ite1 = cx_ite1.next;
				}
				list.zpp_inner.inner.inlined_insert(pre1,res1);
			}
			if(t11 > 0 && t11 <= this.maxdist && inner) {
				var nx2 = 0.0;
				var ny2 = 0.0;
				nx2 = this.originx;
				ny2 = this.originy;
				var t7 = t11;
				nx2 += this.dirx * t7;
				ny2 += this.diry * t7;
				var t8 = 1.0;
				nx2 -= c.worldCOMx * t8;
				ny2 -= c.worldCOMy * t8;
				var d2 = nx2 * nx2 + ny2 * ny2;
				var imag2 = 1.0 / Math.sqrt(d2);
				var t9 = imag2;
				nx2 *= t9;
				ny2 *= t9;
				nx2 = -nx2;
				ny2 = -ny2;
				var res2 = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx2,ny2,null),t11,true,c.outer);
				var pre2 = null;
				var cx_ite2 = list.zpp_inner.inner.head;
				while(cx_ite2 != null) {
					var j2 = cx_ite2.elt;
					if(res2.zpp_inner.toiDistance < j2.zpp_inner.toiDistance) break;
					pre2 = cx_ite2;
					cx_ite2 = cx_ite2.next;
				}
				list.zpp_inner.inner.inlined_insert(pre2,res2);
			}
		}
	}
	,polysect: function(p,inner,mint) {
		var min = mint;
		var edge = null;
		var ei = p.edges.head;
		var cx_cont = true;
		var cx_itei = p.gverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var e = ei.elt;
			if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
				var _vx = 0.0;
				var _vy = 0.0;
				_vx = v.x - u.x;
				_vy = v.y - u.y;
				var _sx = 0.0;
				var _sy = 0.0;
				_sx = u.x - this.originx;
				_sy = u.y - this.originy;
				var den = _vy * this.dirx - _vx * this.diry;
				if(den * den > nape.Config.epsilon) {
					den = 1 / den;
					var sxx = (_vy * _sx - _vx * _sy) * den;
					if(sxx > 0 && sxx < min && sxx <= this.maxdist) {
						var txx = (this.diry * _sx - this.dirx * _sy) * den;
						if(txx > -nape.Config.epsilon && txx < 1 + nape.Config.epsilon) {
							min = sxx;
							edge = ei.elt;
						}
					}
				}
			}
			ei = ei.next;
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) do {
			cx_itej = p.gverts.next;
			var v1 = cx_itej;
			var e1 = ei.elt;
			if(inner || e1.gnormx * this.dirx + e1.gnormy * this.diry < 0) {
				var _vx1 = 0.0;
				var _vy1 = 0.0;
				_vx1 = v1.x - u.x;
				_vy1 = v1.y - u.y;
				var _sx1 = 0.0;
				var _sy1 = 0.0;
				_sx1 = u.x - this.originx;
				_sy1 = u.y - this.originy;
				var den1 = _vy1 * this.dirx - _vx1 * this.diry;
				if(den1 * den1 > nape.Config.epsilon) {
					den1 = 1 / den1;
					var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
					if(sxx1 > 0 && sxx1 < min && sxx1 <= this.maxdist) {
						var txx1 = (this.diry * _sx1 - this.dirx * _sy1) * den1;
						if(txx1 > -nape.Config.epsilon && txx1 < 1 + nape.Config.epsilon) {
							min = sxx1;
							edge = ei.elt;
						}
					}
				}
			}
			ei = ei.next;
		} while(false);
		if(edge != null) {
			var nx = 0.0;
			var ny = 0.0;
			nx = edge.gnormx;
			ny = edge.gnormy;
			var inner1 = nx * this.dirx + ny * this.diry > 0;
			if(inner1) {
				nx = -nx;
				ny = -ny;
			}
			return zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),min,inner1,p.outer);
		} else return null;
	}
	,polysect2: function(p,inner,list) {
		var min = Math.POSITIVE_INFINITY;
		var max = -1.0;
		var edge = null;
		var edgemax = null;
		var ei = p.edges.head;
		var cx_cont = true;
		var cx_itei = p.gverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var e = ei.elt;
			if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
				var _vx = 0.0;
				var _vy = 0.0;
				_vx = v.x - u.x;
				_vy = v.y - u.y;
				var _sx = 0.0;
				var _sy = 0.0;
				_sx = u.x - this.originx;
				_sy = u.y - this.originy;
				var den = _vy * this.dirx - _vx * this.diry;
				if(den * den > nape.Config.epsilon) {
					den = 1 / den;
					var sxx = (_vy * _sx - _vx * _sy) * den;
					if(sxx > 0 && sxx <= this.maxdist && (sxx < min || sxx > max)) {
						var txx = (this.diry * _sx - this.dirx * _sy) * den;
						if(txx > -nape.Config.epsilon && txx < 1 + nape.Config.epsilon) {
							if(sxx < min) {
								min = sxx;
								edge = ei.elt;
							}
							if(sxx > max) {
								max = sxx;
								edgemax = ei.elt;
							}
						}
					}
				}
			}
			ei = ei.next;
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) do {
			cx_itej = p.gverts.next;
			var v1 = cx_itej;
			var e1 = ei.elt;
			if(inner || e1.gnormx * this.dirx + e1.gnormy * this.diry < 0) {
				var _vx1 = 0.0;
				var _vy1 = 0.0;
				_vx1 = v1.x - u.x;
				_vy1 = v1.y - u.y;
				var _sx1 = 0.0;
				var _sy1 = 0.0;
				_sx1 = u.x - this.originx;
				_sy1 = u.y - this.originy;
				var den1 = _vy1 * this.dirx - _vx1 * this.diry;
				if(den1 * den1 > nape.Config.epsilon) {
					den1 = 1 / den1;
					var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
					if(sxx1 > 0 && sxx1 <= this.maxdist && (sxx1 < min || sxx1 > max)) {
						var txx1 = (this.diry * _sx1 - this.dirx * _sy1) * den1;
						if(txx1 > -nape.Config.epsilon && txx1 < 1 + nape.Config.epsilon) {
							if(sxx1 < min) {
								min = sxx1;
								edge = ei.elt;
							}
							if(sxx1 > max) {
								max = sxx1;
								edgemax = ei.elt;
							}
						}
					}
				}
			}
			ei = ei.next;
		} while(false);
		if(edge != null) {
			var nx = 0.0;
			var ny = 0.0;
			nx = edge.gnormx;
			ny = edge.gnormy;
			var inner1 = nx * this.dirx + ny * this.diry > 0;
			if(inner1) {
				nx = -nx;
				ny = -ny;
			}
			var ret = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),min,inner1,p.outer);
			var pre = null;
			var cx_ite = list.zpp_inner.inner.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(ret.zpp_inner.toiDistance < j.zpp_inner.toiDistance) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			list.zpp_inner.inner.inlined_insert(pre,ret);
		}
		if(edgemax != null && edge != edgemax) {
			var nx1 = 0.0;
			var ny1 = 0.0;
			nx1 = edgemax.gnormx;
			ny1 = edgemax.gnormy;
			var inner2 = nx1 * this.dirx + ny1 * this.diry > 0;
			if(inner2) {
				nx1 = -nx1;
				ny1 = -ny1;
			}
			var ret1 = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx1,ny1,null),max,inner2,p.outer);
			var pre1 = null;
			var cx_ite1 = list.zpp_inner.inner.head;
			while(cx_ite1 != null) {
				var j1 = cx_ite1.elt;
				if(ret1.zpp_inner.toiDistance < j1.zpp_inner.toiDistance) break;
				pre1 = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			list.zpp_inner.inner.inlined_insert(pre1,ret1);
		}
	}
	,__class__: zpp_nape.geom.ZPP_Ray
};
zpp_nape.geom.ZPP_SimpleVert = function() {
	this.node = null;
	this.next = null;
	this.id = 0;
	this.links = null;
	this.y = 0.0;
	this.x = 0.0;
	this.forced = false;
	this.id = zpp_nape.ZPP_ID.ZPP_SimpleVert();
	if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) this.links = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
		this.links = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = this.links.next;
		this.links.next = null;
	}
	null;
	this.links.lt = zpp_nape.geom.ZPP_SimpleVert.less_xy;
};
$hxClasses["zpp_nape.geom.ZPP_SimpleVert"] = zpp_nape.geom.ZPP_SimpleVert;
zpp_nape.geom.ZPP_SimpleVert.__name__ = ["zpp_nape","geom","ZPP_SimpleVert"];
zpp_nape.geom.ZPP_SimpleVert.less_xy = function(p,q) {
	return p.y < q.y || p.y == q.y && p.x < q.x;
};
zpp_nape.geom.ZPP_SimpleVert.swap_nodes = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
};
zpp_nape.geom.ZPP_SimpleVert.get = function(x,y) {
	var ret;
	if(zpp_nape.geom.ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimpleVert(); else {
		ret = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = x;
	ret.y = y;
	return ret;
};
zpp_nape.geom.ZPP_SimpleVert.prototype = {
	free: function() {
		this.links.clear();
		this.node = null;
		this.forced = false;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_SimpleVert
};
zpp_nape.geom.ZPP_SimpleSeg = function() {
	this.node = null;
	this.prev = null;
	this.next = null;
	this.id = 0;
	this.vertices = null;
	this.right = null;
	this.left = null;
	this.id = zpp_nape.ZPP_ID.ZPP_SimpleSeg();
	if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) this.vertices = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
		this.vertices = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = this.vertices.next;
		this.vertices.next = null;
	}
	null;
	this.vertices.lt = $bind(this,this.less_xy);
};
$hxClasses["zpp_nape.geom.ZPP_SimpleSeg"] = zpp_nape.geom.ZPP_SimpleSeg;
zpp_nape.geom.ZPP_SimpleSeg.__name__ = ["zpp_nape","geom","ZPP_SimpleSeg"];
zpp_nape.geom.ZPP_SimpleSeg.get = function(left,right) {
	var ret;
	if(zpp_nape.geom.ZPP_SimpleSeg.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimpleSeg(); else {
		ret = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
		zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.left = left;
	ret.right = right;
	ret.vertices.insert(left);
	ret.vertices.insert(right);
	return ret;
};
zpp_nape.geom.ZPP_SimpleSeg.prototype = {
	free: function() {
		this.left = this.right = null;
		this.prev = null;
		this.node = null;
		this.vertices.clear();
	}
	,alloc: function() {
	}
	,less_xy: function(a,b) {
		return a.x < b.x || a.x == b.x && a.y < b.y;
	}
	,__class__: zpp_nape.geom.ZPP_SimpleSeg
};
zpp_nape.geom.ZPP_SimpleEvent = function() {
	this.next = null;
	this.node = null;
	this.segment2 = null;
	this.segment = null;
	this.vertex = null;
	this.type = 0;
};
$hxClasses["zpp_nape.geom.ZPP_SimpleEvent"] = zpp_nape.geom.ZPP_SimpleEvent;
zpp_nape.geom.ZPP_SimpleEvent.__name__ = ["zpp_nape","geom","ZPP_SimpleEvent"];
zpp_nape.geom.ZPP_SimpleEvent.swap_nodes = function(a,b) {
	var t = a.node;
	a.node = b.node;
	b.node = t;
};
zpp_nape.geom.ZPP_SimpleEvent.less_xy = function(a,b) {
	if(a.vertex.x < b.vertex.x) return true; else if(a.vertex.x > b.vertex.x) return false; else if(a.vertex.y < b.vertex.y) return true; else if(a.vertex.y > b.vertex.y) return false; else return a.type < b.type;
};
zpp_nape.geom.ZPP_SimpleEvent.get = function(v) {
	var ret;
	if(zpp_nape.geom.ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimpleEvent(); else {
		ret = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.vertex = v;
	return ret;
};
zpp_nape.geom.ZPP_SimpleEvent.prototype = {
	free: function() {
		this.vertex = null;
		this.segment = this.segment2 = null;
		this.node = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_SimpleEvent
};
zpp_nape.geom.ZPP_SimpleSweep = function() {
	this.tree = null;
	this.sweepx = 0.0;
	if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) this.tree = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
		this.tree = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = this.tree.next;
		this.tree.next = null;
	}
	null;
	this.tree.lt = $bind(this,this.edge_lt);
	this.tree.swapped = $bind(this,this.swap_nodes);
};
$hxClasses["zpp_nape.geom.ZPP_SimpleSweep"] = zpp_nape.geom.ZPP_SimpleSweep;
zpp_nape.geom.ZPP_SimpleSweep.__name__ = ["zpp_nape","geom","ZPP_SimpleSweep"];
zpp_nape.geom.ZPP_SimpleSweep.prototype = {
	swap_nodes: function(p,q) {
		var t = p.node;
		p.node = q.node;
		q.node = t;
	}
	,edge_lt: function(p,q) {
		var ux = 0.0;
		var uy = 0.0;
		var vx = 0.0;
		var vy = 0.0;
		var flip;
		if(p.left == q.left && p.right == q.right) return false; else if(p.left == q.right) if(p.left.x == p.right.x) {
			if(p.left.y < p.right.y) return p.left.y > q.left.y; else return p.right.y > q.left.y;
		} else return (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.left.x - p.left.x;
				vy = q.left.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0; else if(p.right == q.left) return !(q.left.x == q.right.x?q.left.y < q.right.y?q.left.y > p.left.y:q.right.y > p.left.y:(function($this) {
			var $r;
			flip = q.right.x < q.left.x;
			{
				ux = q.right.x - q.left.x;
				uy = q.right.y - q.left.y;
			}
			{
				vx = p.left.x - q.left.x;
				vy = p.left.y - q.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0); else if(p.left == q.left) if(p.left.x == p.right.x) {
			if(p.left.y < p.right.y) return p.left.y > q.right.y; else return p.right.y > q.right.y;
		} else return (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.right.x - p.left.x;
				vy = q.right.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0; else if(p.right == q.right) if(p.left.x == p.right.x) {
			if(p.left.y < p.right.y) return p.left.y > q.left.y; else return p.right.y > q.left.y;
		} else return (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.left.x - p.left.x;
				vy = q.left.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0;
		if(p.left.x == p.right.x) {
			if(q.left.x == q.right.x) {
				var pmax;
				if(p.left.y < p.right.y) pmax = p.right; else pmax = p.left;
				var qmax;
				if(q.left.y < q.right.y) qmax = q.right; else qmax = q.left;
				return pmax.y > qmax.y;
			} else {
				var plrg;
				flip = q.right.x < q.left.x;
				ux = q.right.x - q.left.x;
				uy = q.right.y - q.left.y;
				vx = p.left.x - q.left.x;
				vy = p.left.y - q.left.y;
				if(flip) plrg = uy * vx - ux * vy; else plrg = vy * ux - vx * uy;
				var aplrg;
				flip = q.right.x < q.left.x;
				ux = q.right.x - q.left.x;
				uy = q.right.y - q.left.y;
				vx = p.right.x - q.left.x;
				vy = p.right.y - q.left.y;
				if(flip) aplrg = uy * vx - ux * vy; else aplrg = vy * ux - vx * uy;
				if(plrg * aplrg >= 0) return plrg >= 0.0; else return this.sweepx >= p.left.x;
			}
		} else if(q.left.x == q.right.x) {
			var qlrg;
			flip = p.right.x < p.left.x;
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
			vx = q.left.x - p.left.x;
			vy = q.left.y - p.left.y;
			if(flip) qlrg = uy * vx - ux * vy; else qlrg = vy * ux - vx * uy;
			var aqlrg;
			flip = p.right.x < p.left.x;
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
			vx = q.right.x - p.left.x;
			vy = q.right.y - p.left.y;
			if(flip) aqlrg = uy * vx - ux * vy; else aqlrg = vy * ux - vx * uy;
			if(qlrg * aqlrg >= 0) return qlrg < 0.0; else return this.sweepx < q.left.x;
		} else {
			var qlrg1;
			qlrg1 = (function($this) {
				var $r;
				flip = p.right.x < p.left.x;
				{
					ux = p.right.x - p.left.x;
					uy = p.right.y - p.left.y;
				}
				{
					vx = q.left.x - p.left.x;
					vy = q.left.y - p.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this)) < 0.0;
			var aqlrg1;
			aqlrg1 = (function($this) {
				var $r;
				flip = p.right.x < p.left.x;
				{
					ux = p.right.x - p.left.x;
					uy = p.right.y - p.left.y;
				}
				{
					vx = q.right.x - p.left.x;
					vy = q.right.y - p.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this)) < 0.0;
			if(qlrg1 == aqlrg1) return qlrg1; else {
				var plrg1;
				plrg1 = (function($this) {
					var $r;
					flip = q.right.x < q.left.x;
					{
						ux = q.right.x - q.left.x;
						uy = q.right.y - q.left.y;
					}
					{
						vx = p.left.x - q.left.x;
						vy = p.left.y - q.left.y;
					}
					$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
					return $r;
				}(this)) >= 0.0;
				var aplrg1;
				aplrg1 = (function($this) {
					var $r;
					flip = q.right.x < q.left.x;
					{
						ux = q.right.x - q.left.x;
						uy = q.right.y - q.left.y;
					}
					{
						vx = p.right.x - q.left.x;
						vy = p.right.y - q.left.y;
					}
					$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
					return $r;
				}(this)) >= 0.0;
				if(plrg1 == aplrg1) return plrg1;
				var py = (this.sweepx - p.left.x) / (p.right.x - p.left.x) * (p.right.y - p.left.y) + p.left.y;
				var qy = (this.sweepx - q.left.x) / (q.right.x - q.left.x) * (q.right.y - q.left.y) + q.left.y;
				return py > qy;
			}
		}
	}
	,clear: function() {
		this.tree.clear();
	}
	,add: function(e) {
		e.node = this.tree.insert(e);
		var nxt = this.tree.successor_node(e.node);
		var pre = this.tree.predecessor_node(e.node);
		if(nxt != null) {
			e.next = nxt.data;
			nxt.data.prev = e;
		}
		if(pre != null) {
			e.prev = pre.data;
			pre.data.next = e;
		}
		return e;
	}
	,remove: function(e) {
		var nxt = this.tree.successor_node(e.node);
		var pre = this.tree.predecessor_node(e.node);
		if(nxt != null) nxt.data.prev = e.prev;
		if(pre != null) pre.data.next = e.next;
		this.tree.remove_node(e.node);
		e.node = null;
	}
	,intersect: function(p,q) {
		if(p == null || q == null) return false; else if(p.left == q.left || p.left == q.right || p.right == q.left || p.right == q.right) return false; else {
			var lsign = (q.left.x - p.left.x) * (p.right.y - p.left.y) - (p.right.x - p.left.x) * (q.left.y - p.left.y);
			var rsign = (q.right.x - p.left.x) * (p.right.y - p.left.y) - (p.right.x - p.left.x) * (q.right.y - p.left.y);
			if(lsign * rsign > 0) return false; else {
				var lsign2 = (p.left.x - q.left.x) * (q.right.y - q.left.y) - (q.right.x - q.left.x) * (p.left.y - q.left.y);
				var rsign2 = (p.right.x - q.left.x) * (q.right.y - q.left.y) - (q.right.x - q.left.x) * (p.right.y - q.left.y);
				if(lsign2 * rsign2 > 0) return false; else if(lsign * rsign >= 0 && lsign2 * rsign2 >= 0) return true; else return true;
			}
		}
	}
	,intersection: function(p,q) {
		if(p == null || q == null) return null; else if(p.left == q.left || p.left == q.right || p.right == q.left || p.right == q.right) return null; else {
			var ux = 0.0;
			var uy = 0.0;
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
			var vx = 0.0;
			var vy = 0.0;
			vx = q.right.x - q.left.x;
			vy = q.right.y - q.left.y;
			var denom = vy * ux - vx * uy;
			if(denom == 0.0) return null;
			denom = 1 / denom;
			var cx = 0.0;
			var cy = 0.0;
			cx = q.left.x - p.left.x;
			cy = q.left.y - p.left.y;
			var t = (vy * cx - vx * cy) * denom;
			if(t < 0 || t > 1) return null;
			var s = (uy * cx - ux * cy) * denom;
			if(s < 0 || s > 1) return null;
			var vet;
			if(s == 0 || s == 1 || t == 0 || t == 1) if(s == 0) vet = q.left; else if(s == 1) vet = q.right; else if(t == 0) vet = p.left; else vet = p.right; else vet = zpp_nape.geom.ZPP_SimpleVert.get(0.5 * (p.left.x + ux * t + q.left.x + vx * s),0.5 * (p.left.y + uy * t + q.left.y + vy * s));
			var ret = zpp_nape.geom.ZPP_SimpleEvent.get(vet);
			ret.type = 0;
			ret.segment = p;
			ret.segment2 = q;
			return ret;
		}
	}
	,__class__: zpp_nape.geom.ZPP_SimpleSweep
};
zpp_nape.geom.ZPP_Simple = function() { };
$hxClasses["zpp_nape.geom.ZPP_Simple"] = zpp_nape.geom.ZPP_Simple;
zpp_nape.geom.ZPP_Simple.__name__ = ["zpp_nape","geom","ZPP_Simple"];
zpp_nape.geom.ZPP_Simple.decompose = function(poly,rets) {
	if(zpp_nape.geom.ZPP_Simple.sweep == null) {
		zpp_nape.geom.ZPP_Simple.sweep = new zpp_nape.geom.ZPP_SimpleSweep();
		zpp_nape.geom.ZPP_Simple.inthash = new zpp_nape.util.FastHash2_Hashable2_Boolfalse();
	}
	if(zpp_nape.geom.ZPP_Simple.vertices == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) zpp_nape.geom.ZPP_Simple.vertices = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
			zpp_nape.geom.ZPP_Simple.vertices = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = zpp_nape.geom.ZPP_Simple.vertices.next;
			zpp_nape.geom.ZPP_Simple.vertices.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Simple.vertices.lt = zpp_nape.geom.ZPP_SimpleVert.less_xy;
		zpp_nape.geom.ZPP_Simple.vertices.swapped = zpp_nape.geom.ZPP_SimpleVert.swap_nodes;
	}
	if(zpp_nape.geom.ZPP_Simple.queue == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) zpp_nape.geom.ZPP_Simple.queue = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
			zpp_nape.geom.ZPP_Simple.queue = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = zpp_nape.geom.ZPP_Simple.queue.next;
			zpp_nape.geom.ZPP_Simple.queue.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Simple.queue.lt = zpp_nape.geom.ZPP_SimpleEvent.less_xy;
		zpp_nape.geom.ZPP_Simple.queue.swapped = zpp_nape.geom.ZPP_SimpleEvent.swap_nodes;
	}
	var fst = null;
	var pre = null;
	var F = poly;
	var L = poly;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			var vert = zpp_nape.geom.ZPP_SimpleVert.get(v.x,v.y);
			var vx;
			var cur = zpp_nape.geom.ZPP_Simple.vertices.parent;
			while(cur != null) if(zpp_nape.geom.ZPP_Simple.vertices.lt(vert,cur.data)) cur = cur.prev; else if(zpp_nape.geom.ZPP_Simple.vertices.lt(cur.data,vert)) cur = cur.next; else break;
			vx = cur;
			if(vx != null) {
				var o = vert;
				o.links.clear();
				o.node = null;
				o.forced = false;
				o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
				vert = vx.data;
			} else vert.node = zpp_nape.geom.ZPP_Simple.vertices.insert(vert);
			if(pre != null) {
				var e1 = zpp_nape.geom.ZPP_SimpleEvent.get(pre);
				var e2 = zpp_nape.geom.ZPP_SimpleEvent.get(vert);
				var seg;
				if(zpp_nape.geom.ZPP_SimpleEvent.less_xy(e1,e2)) {
					e1.type = 1;
					e2.type = 2;
					seg = zpp_nape.geom.ZPP_SimpleSeg.get(pre,vert);
				} else {
					e1.type = 2;
					e2.type = 1;
					seg = zpp_nape.geom.ZPP_SimpleSeg.get(vert,pre);
				}
				e1.segment = e2.segment = seg;
				zpp_nape.geom.ZPP_Simple.queue.insert(e1);
				zpp_nape.geom.ZPP_Simple.queue.insert(e2);
				pre.links.insert(vert);
				vert.links.insert(pre);
			}
			pre = vert;
			if(fst == null) fst = vert;
			nite = nite.next;
		} while(nite != L);
	}
	var e11 = zpp_nape.geom.ZPP_SimpleEvent.get(pre);
	var e21 = zpp_nape.geom.ZPP_SimpleEvent.get(fst);
	var seg1;
	if(zpp_nape.geom.ZPP_SimpleEvent.less_xy(e11,e21)) {
		e11.type = 1;
		e21.type = 2;
		seg1 = zpp_nape.geom.ZPP_SimpleSeg.get(pre,fst);
	} else {
		e11.type = 2;
		e21.type = 1;
		seg1 = zpp_nape.geom.ZPP_SimpleSeg.get(fst,pre);
	}
	e11.segment = e21.segment = seg1;
	zpp_nape.geom.ZPP_Simple.queue.insert(e11);
	zpp_nape.geom.ZPP_Simple.queue.insert(e21);
	pre.links.insert(fst);
	fst.links.insert(pre);
	if(zpp_nape.geom.ZPP_Simple.ints == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) zpp_nape.geom.ZPP_Simple.ints = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
			zpp_nape.geom.ZPP_Simple.ints = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = zpp_nape.geom.ZPP_Simple.ints.next;
			zpp_nape.geom.ZPP_Simple.ints.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Simple.ints.lt = zpp_nape.geom.ZPP_SimpleEvent.less_xy;
	}
	while(!zpp_nape.geom.ZPP_Simple.queue.empty()) {
		var e = zpp_nape.geom.ZPP_Simple.queue.pop_front();
		zpp_nape.geom.ZPP_Simple.sweep.sweepx = e.vertex.x;
		if(e.type == 1) {
			var s = e.segment;
			zpp_nape.geom.ZPP_Simple.sweep.add(s);
			if(s.next != null && s != null && !(s.next.id < s.id?zpp_nape.geom.ZPP_Simple.inthash.has(s.next.id,s.id):zpp_nape.geom.ZPP_Simple.inthash.has(s.id,s.next.id))) {
				var intx = zpp_nape.geom.ZPP_Simple.sweep.intersection(s.next,s);
				if(intx != null) {
					if(intx.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex;
						var cur1 = zpp_nape.geom.ZPP_Simple.queue.parent;
						while(cur1 != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx,cur1.data)) cur1 = cur1.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur1.data,intx)) cur1 = cur1.next; else break;
						ex = cur1;
						if(ex == null) {
							var vx1;
							var cur2 = zpp_nape.geom.ZPP_Simple.ints.parent;
							while(cur2 != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx,cur2.data)) cur2 = cur2.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur2.data,intx)) cur2 = cur2.next; else break;
							vx1 = cur2;
							if(vx1 != null) {
								var o1 = intx.vertex;
								o1.links.clear();
								o1.node = null;
								o1.forced = false;
								o1.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o1;
								intx.vertex = vx1.data.vertex;
								vx1.data = intx;
								zpp_nape.geom.ZPP_Simple.queue.insert(intx);
							} else {
								zpp_nape.geom.ZPP_Simple.queue.insert(intx);
								zpp_nape.geom.ZPP_Simple.ints.insert(intx);
							}
							if(s.next.id < s.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(s.next.id,s.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(s.id,s.next.id,true));
						} else {
							var x = ex.data;
							var o2 = intx.vertex;
							o2.links.clear();
							o2.node = null;
							o2.forced = false;
							o2.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o2;
							var o3 = intx;
							o3.vertex = null;
							o3.segment = o3.segment2 = null;
							o3.node = null;
							o3.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o3;
						}
					} else {
						var o4 = intx.vertex;
						o4.links.clear();
						o4.node = null;
						o4.forced = false;
						o4.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o4;
						var o5 = intx;
						o5.vertex = null;
						o5.segment = o5.segment2 = null;
						o5.node = null;
						o5.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o5;
					}
				}
			}
			if(s != null && s.prev != null && !(s.id < s.prev.id?zpp_nape.geom.ZPP_Simple.inthash.has(s.id,s.prev.id):zpp_nape.geom.ZPP_Simple.inthash.has(s.prev.id,s.id))) {
				var intx1 = zpp_nape.geom.ZPP_Simple.sweep.intersection(s,s.prev);
				if(intx1 != null) {
					if(intx1.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex1;
						var cur3 = zpp_nape.geom.ZPP_Simple.queue.parent;
						while(cur3 != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx1,cur3.data)) cur3 = cur3.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur3.data,intx1)) cur3 = cur3.next; else break;
						ex1 = cur3;
						if(ex1 == null) {
							var vx2;
							var cur4 = zpp_nape.geom.ZPP_Simple.ints.parent;
							while(cur4 != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx1,cur4.data)) cur4 = cur4.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur4.data,intx1)) cur4 = cur4.next; else break;
							vx2 = cur4;
							if(vx2 != null) {
								var o6 = intx1.vertex;
								o6.links.clear();
								o6.node = null;
								o6.forced = false;
								o6.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o6;
								intx1.vertex = vx2.data.vertex;
								vx2.data = intx1;
								zpp_nape.geom.ZPP_Simple.queue.insert(intx1);
							} else {
								zpp_nape.geom.ZPP_Simple.queue.insert(intx1);
								zpp_nape.geom.ZPP_Simple.ints.insert(intx1);
							}
							if(s.id < s.prev.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(s.id,s.prev.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(s.prev.id,s.id,true));
						} else {
							var x1 = ex1.data;
							var o7 = intx1.vertex;
							o7.links.clear();
							o7.node = null;
							o7.forced = false;
							o7.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o7;
							var o8 = intx1;
							o8.vertex = null;
							o8.segment = o8.segment2 = null;
							o8.node = null;
							o8.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o8;
						}
					} else {
						var o9 = intx1.vertex;
						o9.links.clear();
						o9.node = null;
						o9.forced = false;
						o9.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o9;
						var o10 = intx1;
						o10.vertex = null;
						o10.segment = o10.segment2 = null;
						o10.node = null;
						o10.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o10;
					}
				}
			}
		} else if(e.type == 2) {
			var s1 = e.segment;
			if(s1.node != null) {
				var nxt = s1.next;
				var pre1 = s1.prev;
				zpp_nape.geom.ZPP_Simple.sweep.remove(s1);
				var o11 = s1;
				o11.left = o11.right = null;
				o11.prev = null;
				o11.node = null;
				o11.vertices.clear();
				o11.next = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
				zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = o11;
				if(nxt != null && pre1 != null && !(nxt.id < pre1.id?zpp_nape.geom.ZPP_Simple.inthash.has(nxt.id,pre1.id):zpp_nape.geom.ZPP_Simple.inthash.has(pre1.id,nxt.id))) {
					var intx2 = zpp_nape.geom.ZPP_Simple.sweep.intersection(nxt,pre1);
					if(intx2 != null) {
						if(intx2.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
							var ex2;
							var cur5 = zpp_nape.geom.ZPP_Simple.queue.parent;
							while(cur5 != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx2,cur5.data)) cur5 = cur5.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur5.data,intx2)) cur5 = cur5.next; else break;
							ex2 = cur5;
							if(ex2 == null) {
								var vx3;
								var cur6 = zpp_nape.geom.ZPP_Simple.ints.parent;
								while(cur6 != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx2,cur6.data)) cur6 = cur6.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur6.data,intx2)) cur6 = cur6.next; else break;
								vx3 = cur6;
								if(vx3 != null) {
									var o12 = intx2.vertex;
									o12.links.clear();
									o12.node = null;
									o12.forced = false;
									o12.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
									zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o12;
									intx2.vertex = vx3.data.vertex;
									vx3.data = intx2;
									zpp_nape.geom.ZPP_Simple.queue.insert(intx2);
								} else {
									zpp_nape.geom.ZPP_Simple.queue.insert(intx2);
									zpp_nape.geom.ZPP_Simple.ints.insert(intx2);
								}
								if(nxt.id < pre1.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(nxt.id,pre1.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(pre1.id,nxt.id,true));
							} else {
								var x2 = ex2.data;
								var o13 = intx2.vertex;
								o13.links.clear();
								o13.node = null;
								o13.forced = false;
								o13.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o13;
								var o14 = intx2;
								o14.vertex = null;
								o14.segment = o14.segment2 = null;
								o14.node = null;
								o14.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
								zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o14;
							}
						} else {
							var o15 = intx2.vertex;
							o15.links.clear();
							o15.node = null;
							o15.forced = false;
							o15.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o15;
							var o16 = intx2;
							o16.vertex = null;
							o16.segment = o16.segment2 = null;
							o16.node = null;
							o16.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o16;
						}
					}
				}
			}
		} else {
			var intx3 = e.vertex;
			var pnull = intx3.node == null;
			var a = e.segment;
			var b = e.segment2;
			if(b.next != a) {
				var t = a;
				a = b;
				b = t;
			}
			var anew;
			anew = (function($this) {
				var $r;
				var cur7 = a.vertices.parent;
				while(cur7 != null) if(a.vertices.lt(intx3,cur7.data)) cur7 = cur7.prev; else if(a.vertices.lt(cur7.data,intx3)) cur7 = cur7.next; else break;
				$r = cur7;
				return $r;
			}(this)) == null;
			var bnew;
			bnew = (function($this) {
				var $r;
				var cur8 = b.vertices.parent;
				while(cur8 != null) if(b.vertices.lt(intx3,cur8.data)) cur8 = cur8.prev; else if(b.vertices.lt(cur8.data,intx3)) cur8 = cur8.next; else break;
				$r = cur8;
				return $r;
			}(this)) == null;
			if(anew) {
				var aint = a.vertices.insert(intx3);
				var naleft;
				if(intx3 == a.left) naleft = intx3; else naleft = a.vertices.predecessor_node(aint).data;
				var naright;
				if(intx3 == a.right) naright = intx3; else naright = a.vertices.successor_node(aint).data;
				naleft.links.remove(naright);
				if(intx3 != naleft) naleft.links.insert(intx3);
				naright.links.remove(naleft);
				if(intx3 != naright) naright.links.insert(intx3);
				if(intx3 != naleft) intx3.links.insert(naleft);
				if(intx3 != naright) intx3.links.insert(naright);
			}
			if(bnew) {
				var bint = b.vertices.insert(intx3);
				var nbleft;
				if(intx3 == b.left) nbleft = intx3; else nbleft = b.vertices.predecessor_node(bint).data;
				var nbright;
				if(intx3 == b.right) nbright = intx3; else nbright = b.vertices.successor_node(bint).data;
				nbleft.links.remove(nbright);
				if(intx3 != nbleft) nbleft.links.insert(intx3);
				nbright.links.remove(nbleft);
				if(intx3 != nbright) nbright.links.insert(intx3);
				if(intx3 != nbleft) intx3.links.insert(nbleft);
				if(intx3 != nbright) intx3.links.insert(nbright);
			}
			if(pnull) intx3.node = zpp_nape.geom.ZPP_Simple.vertices.insert(intx3);
			intx3.forced = true;
			if(pnull) {
				var an = a.node;
				var bn = b.node;
				an.data = b;
				bn.data = a;
				a.node = bn;
				b.node = an;
				b.next = a.next;
				a.next = b;
				a.prev = b.prev;
				b.prev = a;
				if(a.prev != null) a.prev.next = a;
				if(b.next != null) b.next.prev = b;
			}
			if(b.next != null && b != null && !(b.next.id < b.id?zpp_nape.geom.ZPP_Simple.inthash.has(b.next.id,b.id):zpp_nape.geom.ZPP_Simple.inthash.has(b.id,b.next.id))) {
				var intx4 = zpp_nape.geom.ZPP_Simple.sweep.intersection(b.next,b);
				if(intx4 != null) {
					if(intx4.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex3;
						var cur9 = zpp_nape.geom.ZPP_Simple.queue.parent;
						while(cur9 != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx4,cur9.data)) cur9 = cur9.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur9.data,intx4)) cur9 = cur9.next; else break;
						ex3 = cur9;
						if(ex3 == null) {
							var vx4;
							var cur10 = zpp_nape.geom.ZPP_Simple.ints.parent;
							while(cur10 != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx4,cur10.data)) cur10 = cur10.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur10.data,intx4)) cur10 = cur10.next; else break;
							vx4 = cur10;
							if(vx4 != null) {
								var o17 = intx4.vertex;
								o17.links.clear();
								o17.node = null;
								o17.forced = false;
								o17.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o17;
								intx4.vertex = vx4.data.vertex;
								vx4.data = intx4;
								zpp_nape.geom.ZPP_Simple.queue.insert(intx4);
							} else {
								zpp_nape.geom.ZPP_Simple.queue.insert(intx4);
								zpp_nape.geom.ZPP_Simple.ints.insert(intx4);
							}
							if(b.next.id < b.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(b.next.id,b.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(b.id,b.next.id,true));
						} else {
							var x3 = ex3.data;
							var o18 = intx4.vertex;
							o18.links.clear();
							o18.node = null;
							o18.forced = false;
							o18.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o18;
							var o19 = intx4;
							o19.vertex = null;
							o19.segment = o19.segment2 = null;
							o19.node = null;
							o19.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o19;
						}
					} else {
						var o20 = intx4.vertex;
						o20.links.clear();
						o20.node = null;
						o20.forced = false;
						o20.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o20;
						var o21 = intx4;
						o21.vertex = null;
						o21.segment = o21.segment2 = null;
						o21.node = null;
						o21.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o21;
					}
				}
			}
			if(a != null && a.prev != null && !(a.id < a.prev.id?zpp_nape.geom.ZPP_Simple.inthash.has(a.id,a.prev.id):zpp_nape.geom.ZPP_Simple.inthash.has(a.prev.id,a.id))) {
				var intx5 = zpp_nape.geom.ZPP_Simple.sweep.intersection(a,a.prev);
				if(intx5 != null) {
					if(intx5.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex4;
						var cur11 = zpp_nape.geom.ZPP_Simple.queue.parent;
						while(cur11 != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx5,cur11.data)) cur11 = cur11.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur11.data,intx5)) cur11 = cur11.next; else break;
						ex4 = cur11;
						if(ex4 == null) {
							var vx5;
							var cur12 = zpp_nape.geom.ZPP_Simple.ints.parent;
							while(cur12 != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx5,cur12.data)) cur12 = cur12.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur12.data,intx5)) cur12 = cur12.next; else break;
							vx5 = cur12;
							if(vx5 != null) {
								var o22 = intx5.vertex;
								o22.links.clear();
								o22.node = null;
								o22.forced = false;
								o22.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o22;
								intx5.vertex = vx5.data.vertex;
								vx5.data = intx5;
								zpp_nape.geom.ZPP_Simple.queue.insert(intx5);
							} else {
								zpp_nape.geom.ZPP_Simple.queue.insert(intx5);
								zpp_nape.geom.ZPP_Simple.ints.insert(intx5);
							}
							if(a.id < a.prev.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(a.id,a.prev.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(a.prev.id,a.id,true));
						} else {
							var x4 = ex4.data;
							var o23 = intx5.vertex;
							o23.links.clear();
							o23.node = null;
							o23.forced = false;
							o23.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o23;
							var o24 = intx5;
							o24.vertex = null;
							o24.segment = o24.segment2 = null;
							o24.node = null;
							o24.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o24;
						}
					} else {
						var o25 = intx5.vertex;
						o25.links.clear();
						o25.node = null;
						o25.forced = false;
						o25.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o25;
						var o26 = intx5;
						o26.vertex = null;
						o26.segment = o26.segment2 = null;
						o26.node = null;
						o26.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o26;
					}
				}
			}
			zpp_nape.geom.ZPP_Simple.ints.remove(e);
		}
		var o27 = e;
		o27.vertex = null;
		o27.segment = o27.segment2 = null;
		o27.node = null;
		o27.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o27;
	}
	var _g1 = 0;
	var _g = zpp_nape.geom.ZPP_Simple.inthash.table.length;
	while(_g1 < _g) {
		var i = _g1++;
		var n = zpp_nape.geom.ZPP_Simple.inthash.table[i];
		if(n == null) continue;
		while(n != null) {
			var t1 = n.hnext;
			n.hnext = null;
			var o28 = n;
			o28.next = zpp_nape.util.Hashable2_Boolfalse.zpp_pool;
			zpp_nape.util.Hashable2_Boolfalse.zpp_pool = o28;
			n = t1;
		}
		zpp_nape.geom.ZPP_Simple.inthash.table[i] = null;
	}
	if(rets == null) rets = new zpp_nape.util.ZNPList_ZPP_GeomVert();
	while(!zpp_nape.geom.ZPP_Simple.vertices.empty()) zpp_nape.geom.ZPP_Simple.clip_polygon(zpp_nape.geom.ZPP_Simple.vertices,rets);
	return rets;
};
zpp_nape.geom.ZPP_Simple.clip_polygon = function(vertices,rets) {
	var ret = null;
	var cur = vertices.first();
	var fst = cur;
	var pren = cur.links.parent;
	var nxtn;
	if(pren.prev == null) nxtn = pren.next; else nxtn = pren.prev;
	var pre = pren.data;
	var nxt = nxtn.data;
	if((function($this) {
		var $r;
		var ux = 0.0;
		var uy = 0.0;
		{
			ux = cur.x - pre.x;
			uy = cur.y - pre.y;
		}
		var vx = 0.0;
		var vy = 0.0;
		{
			vx = nxt.x - cur.x;
			vy = nxt.y - cur.y;
		}
		$r = vy * ux - vx * uy;
		return $r;
	}(this)) < 0) nxt = pre;
	var obj = zpp_nape.geom.ZPP_GeomVert.get(cur.x,cur.y);
	if(ret == null) ret = obj.prev = obj.next = obj; else {
		obj.prev = ret;
		obj.next = ret.next;
		ret.next.prev = obj;
		ret.next = obj;
	}
	ret = obj;
	ret.forced = cur.forced;
	while(true) {
		cur.links.remove(nxt);
		nxt.links.remove(cur);
		if(nxt == fst) {
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o = cur;
				o.links.clear();
				o.node = null;
				o.forced = false;
				o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
			}
			break;
		}
		var obj1 = zpp_nape.geom.ZPP_GeomVert.get(nxt.x,nxt.y);
		if(ret == null) ret = obj1.prev = obj1.next = obj1; else {
			obj1.prev = ret;
			obj1.next = ret.next;
			ret.next.prev = obj1;
			ret.next = obj1;
		}
		ret = obj1;
		ret.forced = nxt.forced;
		if(nxt.links.singular()) {
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o1 = cur;
				o1.links.clear();
				o1.node = null;
				o1.forced = false;
				o1.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o1;
			}
			cur = nxt;
			nxt = nxt.links.parent.data;
		} else {
			var min = null;
			var minl = 0.0;
			if(!nxt.links.empty()) {
				var set_ite = nxt.links.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var p = set_ite.data;
					if(min == null) {
						min = p;
						var ux1 = 0.0;
						var uy1 = 0.0;
						ux1 = nxt.x - cur.x;
						uy1 = nxt.y - cur.y;
						var vx1 = 0.0;
						var vy1 = 0.0;
						vx1 = p.x - nxt.x;
						vy1 = p.y - nxt.y;
						minl = vy1 * ux1 - vx1 * uy1;
					} else {
						var nleft;
						var ux2 = 0.0;
						var uy2 = 0.0;
						ux2 = nxt.x - cur.x;
						uy2 = nxt.y - cur.y;
						var vx2 = 0.0;
						var vy2 = 0.0;
						vx2 = p.x - nxt.x;
						vy2 = p.y - nxt.y;
						nleft = vy2 * ux2 - vx2 * uy2;
						if(nleft > 0 && minl <= 0) {
							min = p;
							minl = nleft;
						} else if(minl * nleft >= 0) {
							var pleft;
							var ux3 = 0.0;
							var uy3 = 0.0;
							ux3 = nxt.x - p.x;
							uy3 = nxt.y - p.y;
							var vx3 = 0.0;
							var vy3 = 0.0;
							vx3 = min.x - nxt.x;
							vy3 = min.y - nxt.y;
							pleft = vy3 * ux3 - vx3 * uy3;
							if(pleft > 0) {
								min = p;
								minl = nleft;
							}
						}
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o2 = cur;
				o2.links.clear();
				o2.node = null;
				o2.forced = false;
				o2.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o2;
			}
			cur = nxt;
			nxt = min;
		}
	}
	vertices.remove(fst);
	var o3 = fst;
	o3.links.clear();
	o3.node = null;
	o3.forced = false;
	o3.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
	zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o3;
	rets.add(ret);
};
zpp_nape.geom.ZPP_Simple.isSimple = function(poly) {
	if(zpp_nape.geom.ZPP_Simple.sweep == null) {
		zpp_nape.geom.ZPP_Simple.sweep = new zpp_nape.geom.ZPP_SimpleSweep();
		zpp_nape.geom.ZPP_Simple.inthash = new zpp_nape.util.FastHash2_Hashable2_Boolfalse();
	}
	var vertices = zpp_nape.geom.ZPP_Simple.list_vertices;
	if(vertices == null) vertices = zpp_nape.geom.ZPP_Simple.list_vertices = new zpp_nape.util.ZNPList_ZPP_SimpleVert();
	var F = poly;
	var L = poly;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			vertices.add(zpp_nape.geom.ZPP_SimpleVert.get(v.x,v.y));
			nite = nite.next;
		} while(nite != L);
	}
	var queue = zpp_nape.geom.ZPP_Simple.list_queue;
	if(queue == null) queue = zpp_nape.geom.ZPP_Simple.list_queue = new zpp_nape.util.ZNPList_ZPP_SimpleEvent();
	var cx_ite = vertices.head;
	var u = cx_ite.elt;
	cx_ite = cx_ite.next;
	while(cx_ite != null) {
		var v1 = cx_ite.elt;
		var e1 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(u));
		var e2 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(v1));
		e1.segment = zpp_nape.geom.ZPP_SimpleEvent.less_xy(e1,e2)?(function($this) {
			var $r;
			e1.type = 1;
			e2.type = 2;
			$r = e2.segment = zpp_nape.geom.ZPP_SimpleSeg.get(u,v1);
			return $r;
		}(this)):(function($this) {
			var $r;
			e1.type = 2;
			e2.type = 1;
			$r = e2.segment = zpp_nape.geom.ZPP_SimpleSeg.get(v1,u);
			return $r;
		}(this));
		u = v1;
		cx_ite = cx_ite.next;
	}
	var v2 = vertices.head.elt;
	var e11 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(u));
	var e21 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(v2));
	e11.segment = zpp_nape.geom.ZPP_SimpleEvent.less_xy(e11,e21)?(function($this) {
		var $r;
		e11.type = 1;
		e21.type = 2;
		$r = e21.segment = zpp_nape.geom.ZPP_SimpleSeg.get(u,v2);
		return $r;
	}(this)):(function($this) {
		var $r;
		e11.type = 2;
		e21.type = 1;
		$r = e21.segment = zpp_nape.geom.ZPP_SimpleSeg.get(v2,u);
		return $r;
	}(this));
	var xxlist = queue;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else if(zpp_nape.geom.ZPP_SimpleEvent.less_xy(left.elt,right.elt)) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else {
						nxt = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt; else head = nxt;
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	var ret = true;
	while(!(queue.head == null)) {
		var e = queue.pop_unsafe();
		var seg = e.segment;
		if(e.type == 1) {
			zpp_nape.geom.ZPP_Simple.sweep.add(seg);
			if(zpp_nape.geom.ZPP_Simple.sweep.intersect(seg,seg.next) || zpp_nape.geom.ZPP_Simple.sweep.intersect(seg,seg.prev)) {
				ret = false;
				break;
			}
		} else if(e.type == 2) {
			if(zpp_nape.geom.ZPP_Simple.sweep.intersect(seg.prev,seg.next)) {
				ret = false;
				break;
			}
			zpp_nape.geom.ZPP_Simple.sweep.remove(seg);
			var o = seg;
			o.left = o.right = null;
			o.prev = null;
			o.node = null;
			o.vertices.clear();
			o.next = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
			zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = o;
		}
		var o1 = e;
		o1.vertex = null;
		o1.segment = o1.segment2 = null;
		o1.node = null;
		o1.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o1;
	}
	while(!(queue.head == null)) {
		var e3 = queue.pop_unsafe();
		if(e3.type == 2) {
			var o2 = e3.segment;
			o2.left = o2.right = null;
			o2.prev = null;
			o2.node = null;
			o2.vertices.clear();
			o2.next = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
			zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = o2;
		}
		var o3 = e3;
		o3.vertex = null;
		o3.segment = o3.segment2 = null;
		o3.node = null;
		o3.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o3;
	}
	zpp_nape.geom.ZPP_Simple.sweep.clear();
	while(!(vertices.head == null)) {
		var o4 = vertices.pop_unsafe();
		o4.links.clear();
		o4.node = null;
		o4.forced = false;
		o4.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o4;
	}
	return ret;
};
zpp_nape.geom.ZPP_SimplifyV = function() {
	this.forced = false;
	this.flag = false;
	this.prev = null;
	this.next = null;
	this.y = 0.0;
	this.x = 0.0;
};
$hxClasses["zpp_nape.geom.ZPP_SimplifyV"] = zpp_nape.geom.ZPP_SimplifyV;
zpp_nape.geom.ZPP_SimplifyV.__name__ = ["zpp_nape","geom","ZPP_SimplifyV"];
zpp_nape.geom.ZPP_SimplifyV.get = function(v) {
	var ret;
	if(zpp_nape.geom.ZPP_SimplifyV.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimplifyV(); else {
		ret = zpp_nape.geom.ZPP_SimplifyV.zpp_pool;
		zpp_nape.geom.ZPP_SimplifyV.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = v.x;
	ret.y = v.y;
	ret.flag = false;
	return ret;
};
zpp_nape.geom.ZPP_SimplifyV.prototype = {
	free: function() {
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_SimplifyV
};
zpp_nape.geom.ZPP_SimplifyP = function() {
	this.max = null;
	this.min = null;
	this.next = null;
};
$hxClasses["zpp_nape.geom.ZPP_SimplifyP"] = zpp_nape.geom.ZPP_SimplifyP;
zpp_nape.geom.ZPP_SimplifyP.__name__ = ["zpp_nape","geom","ZPP_SimplifyP"];
zpp_nape.geom.ZPP_SimplifyP.get = function(min,max) {
	var ret;
	if(zpp_nape.geom.ZPP_SimplifyP.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimplifyP(); else {
		ret = zpp_nape.geom.ZPP_SimplifyP.zpp_pool;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.min = min;
	ret.max = max;
	return ret;
};
zpp_nape.geom.ZPP_SimplifyP.prototype = {
	free: function() {
		this.min = this.max = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_SimplifyP
};
zpp_nape.geom.ZPP_Simplify = function() { };
$hxClasses["zpp_nape.geom.ZPP_Simplify"] = zpp_nape.geom.ZPP_Simplify;
zpp_nape.geom.ZPP_Simplify.__name__ = ["zpp_nape","geom","ZPP_Simplify"];
zpp_nape.geom.ZPP_Simplify.lessval = function(a,b) {
	return a.x - b.x + (a.y - b.y);
};
zpp_nape.geom.ZPP_Simplify.less = function(a,b) {
	return a.x - b.x + (a.y - b.y) < 0.0;
};
zpp_nape.geom.ZPP_Simplify.distance = function(v,a,b) {
	var nx = 0.0;
	var ny = 0.0;
	nx = b.x - a.x;
	ny = b.y - a.y;
	var cx = 0.0;
	var cy = 0.0;
	cx = v.x - a.x;
	cy = v.y - a.y;
	var den = nx * nx + ny * ny;
	if(den == 0.0) return cx * cx + cy * cy; else {
		var t = (cx * nx + cy * ny) / (nx * nx + ny * ny);
		if(t <= 0) return cx * cx + cy * cy; else if(t >= 1) return zpp_nape.geom.ZPP_VecMath.vec_dsq(v.x,v.y,b.x,b.y); else {
			var t1 = t;
			cx -= nx * t1;
			cy -= ny * t1;
			return cx * cx + cy * cy;
		}
	}
};
zpp_nape.geom.ZPP_Simplify.simplify = function(P,epsilon) {
	var ret = null;
	var min = null;
	var max = null;
	epsilon *= epsilon;
	if(zpp_nape.geom.ZPP_Simplify.stack == null) zpp_nape.geom.ZPP_Simplify.stack = new zpp_nape.util.ZNPList_ZPP_SimplifyP();
	var pre = null;
	var fst = null;
	var cur = P;
	do {
		var v = zpp_nape.geom.ZPP_SimplifyV.get(cur);
		v.forced = cur.forced;
		if(v.forced) {
			v.flag = true;
			if(pre != null) zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(pre,v)); else fst = v;
			pre = v;
		}
		var obj = v;
		if(ret == null) ret = obj.prev = obj.next = obj; else {
			obj.prev = ret;
			obj.next = ret.next;
			ret.next.prev = obj;
			ret.next = obj;
		}
		ret = obj;
		if(min == null) {
			min = ret;
			max = ret;
		} else {
			if(ret.x - min.x + (ret.y - min.y) < 0.0) min = ret;
			if(max.x - ret.x + (max.y - ret.y) < 0.0) max = ret;
		}
		cur = cur.next;
	} while(cur != P);
	if(zpp_nape.geom.ZPP_Simplify.stack.head == null) {
		if(fst == null) {
			min.flag = max.flag = true;
			zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(min,max));
			zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(max,min));
		} else {
			var d1 = min.x - fst.x + (min.y - fst.y);
			if(d1 < 0) d1 = -d1;
			var d2 = max.x - fst.x + (max.y - fst.y);
			if(d2 < 0) d2 = -d2;
			if(d1 > d2) {
				min.flag = fst.flag = true;
				zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(min,fst));
				zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(fst,min));
			} else {
				max.flag = fst.flag = true;
				zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(max,fst));
				zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(fst,max));
			}
		}
	} else zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(pre,fst));
	while(!(zpp_nape.geom.ZPP_Simplify.stack.head == null)) {
		var cur1 = zpp_nape.geom.ZPP_Simplify.stack.pop_unsafe();
		var min1 = cur1.min;
		var max1 = cur1.max;
		var o = cur1;
		o.min = o.max = null;
		o.next = zpp_nape.geom.ZPP_SimplifyP.zpp_pool;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool = o;
		var dmax = epsilon;
		var dv = null;
		var ite = min1.next;
		while(ite != max1) {
			var dist = zpp_nape.geom.ZPP_Simplify.distance(ite,min1,max1);
			if(dist > dmax) {
				dmax = dist;
				dv = ite;
			}
			ite = ite.next;
		}
		if(dv != null) {
			dv.flag = true;
			zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(min1,dv));
			zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(dv,max1));
		}
	}
	var retp = null;
	while(ret != null) {
		if(ret.flag) {
			var obj1 = zpp_nape.geom.ZPP_GeomVert.get(ret.x,ret.y);
			if(retp == null) retp = obj1.prev = obj1.next = obj1; else {
				obj1.prev = retp;
				obj1.next = retp.next;
				retp.next.prev = obj1;
				retp.next = obj1;
			}
			retp = obj1;
			retp.forced = ret.forced;
		}
		if(ret != null && ret.prev == ret) {
			ret.next = ret.prev = null;
			var o1 = ret;
			o1.next = zpp_nape.geom.ZPP_SimplifyV.zpp_pool;
			zpp_nape.geom.ZPP_SimplifyV.zpp_pool = o1;
			ret = ret = null;
		} else {
			var retnodes = ret.next;
			ret.prev.next = ret.next;
			ret.next.prev = ret.prev;
			ret.next = ret.prev = null;
			var o2 = ret;
			o2.next = zpp_nape.geom.ZPP_SimplifyV.zpp_pool;
			zpp_nape.geom.ZPP_SimplifyV.zpp_pool = o2;
			ret = null;
			ret = retnodes;
		}
	}
	return retp;
};
zpp_nape.geom.ZPP_ToiEvent = function() {
	this.kinematic = false;
	this.failed = false;
	this.slipped = false;
	this.axis = null;
	this.c2 = null;
	this.c1 = null;
	this.frozen2 = false;
	this.frozen1 = false;
	this.arbiter = null;
	this.s2 = null;
	this.s1 = null;
	this.toi = 0.0;
	this.next = null;
	this.c1 = new zpp_nape.geom.ZPP_Vec2();
	this.c2 = new zpp_nape.geom.ZPP_Vec2();
	this.axis = new zpp_nape.geom.ZPP_Vec2();
};
$hxClasses["zpp_nape.geom.ZPP_ToiEvent"] = zpp_nape.geom.ZPP_ToiEvent;
zpp_nape.geom.ZPP_ToiEvent.__name__ = ["zpp_nape","geom","ZPP_ToiEvent"];
zpp_nape.geom.ZPP_ToiEvent.prototype = {
	alloc: function() {
		this.failed = false;
		this.s1 = this.s2 = null;
		this.arbiter = null;
	}
	,free: function() {
	}
	,__class__: zpp_nape.geom.ZPP_ToiEvent
};
zpp_nape.geom.ZPP_SweepDistance = function() { };
$hxClasses["zpp_nape.geom.ZPP_SweepDistance"] = zpp_nape.geom.ZPP_SweepDistance;
zpp_nape.geom.ZPP_SweepDistance.__name__ = ["zpp_nape","geom","ZPP_SweepDistance"];
zpp_nape.geom.ZPP_SweepDistance.dynamicSweep = function(toi,timeStep,lowerBound,negRadius,userAPI) {
	if(userAPI == null) userAPI = false;
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = b2.velx - b1.velx;
	deltay = b2.vely - b1.vely;
	var ang1 = b1.angvel;
	if(ang1 < 0) ang1 = -ang1;
	var ang2 = b2.angvel;
	if(ang2 < 0) ang2 = -ang2;
	var angBias = s1.sweepCoef * ang1 + s2.sweepCoef * ang2;
	if(!userAPI && !toi.kinematic && deltax * deltax + deltay * deltay < nape.Config.dynamicSweepLinearThreshold * nape.Config.dynamicSweepLinearThreshold && angBias < nape.Config.dynamicSweepAngularThreshold) {
		toi.toi = -1;
		toi.failed = true;
		return;
	}
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		b1.sweepIntegrate(curTOI * timeStep);
		b1.sweepValidate(s1);
		b2.sweepIntegrate(curTOI * timeStep);
		b2.sweepValidate(s2);
		var sep = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep < nape.Config.distanceThresholdCCD) {
			if(userAPI) break;
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var d2x = 0.0;
			var d2y = 0.0;
			d2x = c2.x - b2.posx;
			d2y = c2.y - b2.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y) + b2.sweep_angvel * (axis.y * d2x - axis.x * d2y);
			if(proj > 0) toi.slipped = true;
			if(proj <= 0 || sep < nape.Config.distanceThresholdCCD * 0.5) break;
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta = sep / denom;
		if(delta < 1e-6) delta = 1e-6;
		curTOI += delta;
		if(curTOI >= 1) {
			curTOI = 1;
			b1.sweepIntegrate(curTOI * timeStep);
			b1.sweepValidate(s1);
			b2.sweepIntegrate(curTOI * timeStep);
			b2.sweepValidate(s2);
			var sep1 = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep1 < nape.Config.distanceThresholdCCD) {
				if(userAPI) break;
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var d2x1 = 0.0;
				var d2y1 = 0.0;
				d2x1 = c2.x - b2.posx;
				d2y1 = c2.y - b2.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1) + b2.sweep_angvel * (axis.y * d2x1 - axis.x * d2y1);
				if(proj1 > 0) toi.slipped = true;
				if(proj1 <= 0 || sep1 < nape.Config.distanceThresholdCCD * 0.5) break;
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep > negRadius) toi.failed = true;
			break;
		}
	}
	toi.toi = curTOI;
};
zpp_nape.geom.ZPP_SweepDistance.staticSweep = function(toi,timeStep,lowerBound,negRadius) {
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = -b1.velx;
	deltay = -b1.vely;
	var ang1 = b1.sweep_angvel;
	if(ang1 < 0) ang1 = -ang1;
	var angBias = s1.sweepCoef * ang1;
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		b1.sweepIntegrate(curTOI * timeStep);
		b1.sweepValidate(s1);
		var sep = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep < nape.Config.distanceThresholdCCD) {
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y);
			if(proj > 0) toi.slipped = true;
			if(proj <= 0 || sep < nape.Config.distanceThresholdCCD * 0.5) break;
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta = sep / denom;
		if(delta < 1e-6) delta = 1e-6;
		curTOI += delta;
		if(curTOI >= 1) {
			curTOI = 1;
			b1.sweepIntegrate(curTOI * timeStep);
			b1.sweepValidate(s1);
			var sep1 = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep1 < nape.Config.distanceThresholdCCD) {
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1);
				if(proj1 > 0) toi.slipped = true;
				if(proj1 <= 0 || sep1 < nape.Config.distanceThresholdCCD * 0.5) break;
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep > negRadius) toi.failed = true;
			break;
		}
	}
	toi.toi = curTOI;
};
zpp_nape.geom.ZPP_SweepDistance.distanceBody = function(b1,b2,w1,w2) {
	var t1;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) t1 = new zpp_nape.geom.ZPP_Vec2(); else {
		t1 = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = t1.next;
		t1.next = null;
	}
	t1.weak = false;
	var t2;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) t2 = new zpp_nape.geom.ZPP_Vec2(); else {
		t2 = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = t2.next;
		t2.next = null;
	}
	t2.weak = false;
	var ax;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) ax = new zpp_nape.geom.ZPP_Vec2(); else {
		ax = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = ax.next;
		ax.next = null;
	}
	ax.weak = false;
	var min = 1e100;
	var cx_ite = b1.shapes.head;
	while(cx_ite != null) {
		var s1 = cx_ite.elt;
		var cx_ite1 = b2.shapes.head;
		while(cx_ite1 != null) {
			var s2 = cx_ite1.elt;
			var dist = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,t1,t2,ax,min);
			if(dist < min) {
				min = dist;
				w1.x = t1.x;
				w1.y = t1.y;
				w2.x = t2.x;
				w2.y = t2.y;
			}
			cx_ite1 = cx_ite1.next;
		}
		cx_ite = cx_ite.next;
	}
	var o = t1;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	var o1 = t2;
	if(o1.outer != null) {
		o1.outer.zpp_inner = null;
		o1.outer = null;
	}
	o1._isimmutable = null;
	o1._validate = null;
	o1._invalidate = null;
	o1.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o1;
	var o2 = ax;
	if(o2.outer != null) {
		o2.outer.zpp_inner = null;
		o2.outer = null;
	}
	o2._isimmutable = null;
	o2._validate = null;
	o2._invalidate = null;
	o2.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o2;
	return min;
};
zpp_nape.geom.ZPP_SweepDistance.distance = function(s1,s2,w1,w2,axis,upperBound) {
	if(upperBound == null) upperBound = 1e100;
	if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE && s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var dist;
		var nx = 0.0;
		var ny = 0.0;
		nx = c2.worldCOMx - c1.worldCOMx;
		ny = c2.worldCOMy - c1.worldCOMy;
		var len = Math.sqrt(nx * nx + ny * ny);
		dist = len - (c1.radius + c2.radius);
		if(dist < upperBound) {
			if(len == 0) {
				nx = 1;
				ny = 0;
			} else {
				var t = 1.0 / len;
				nx *= t;
				ny *= t;
			}
			var t1 = c1.radius;
			w1.x = c1.worldCOMx + nx * t1;
			w1.y = c1.worldCOMy + ny * t1;
			var t2 = -c2.radius;
			w2.x = c2.worldCOMx + nx * t2;
			w2.y = c2.worldCOMy + ny * t2;
			axis.x = nx;
			axis.y = ny;
		}
		return dist;
	} else {
		var swapped = false;
		if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE && s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
			var tmp = s1;
			s1 = s2;
			s2 = tmp;
			var tmp2 = w1;
			w1 = w2;
			w2 = tmp2;
			swapped = true;
		}
		if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON && s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			var poly = s1.polygon;
			var circle = s2.circle;
			var best = -1e+100;
			var a0 = null;
			var cx_ite = poly.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist1 = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
				if(dist1 > upperBound) {
					best = dist1;
					break;
				}
				if(dist1 > 0) {
					if(dist1 > best) {
						best = dist1;
						a0 = a;
					}
				} else if(best < 0 && dist1 > best) {
					best = dist1;
					a0 = a;
				}
				cx_ite = cx_ite.next;
			}
			if(best < upperBound) {
				var v0 = a0.gp0;
				var v1 = a0.gp1;
				var dt = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var nx1 = 0.0;
					var ny1 = 0.0;
					nx1 = circle.worldCOMx - v0.x;
					ny1 = circle.worldCOMy - v0.y;
					var len1 = Math.sqrt(nx1 * nx1 + ny1 * ny1);
					best = len1 - circle.radius;
					if(best < upperBound) {
						if(len1 == 0) {
							nx1 = 1;
							ny1 = 0;
						} else {
							var t3 = 1.0 / len1;
							nx1 *= t3;
							ny1 *= t3;
						}
						var t4 = 0;
						w1.x = v0.x + nx1 * t4;
						w1.y = v0.y + ny1 * t4;
						var t5 = -circle.radius;
						w2.x = circle.worldCOMx + nx1 * t5;
						w2.y = circle.worldCOMy + ny1 * t5;
						axis.x = nx1;
						axis.y = ny1;
					}
				} else if(dt >= v1.y * a0.gnormx - v1.x * a0.gnormy) {
					var nx2 = 0.0;
					var ny2 = 0.0;
					nx2 = circle.worldCOMx - v1.x;
					ny2 = circle.worldCOMy - v1.y;
					var len2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);
					best = len2 - circle.radius;
					if(best < upperBound) {
						if(len2 == 0) {
							nx2 = 1;
							ny2 = 0;
						} else {
							var t6 = 1.0 / len2;
							nx2 *= t6;
							ny2 *= t6;
						}
						var t7 = 0;
						w1.x = v1.x + nx2 * t7;
						w1.y = v1.y + ny2 * t7;
						var t8 = -circle.radius;
						w2.x = circle.worldCOMx + nx2 * t8;
						w2.y = circle.worldCOMy + ny2 * t8;
						axis.x = nx2;
						axis.y = ny2;
					}
				} else {
					var t9 = -circle.radius;
					w2.x = circle.worldCOMx + a0.gnormx * t9;
					w2.y = circle.worldCOMy + a0.gnormy * t9;
					var t10 = -best;
					w1.x = w2.x + a0.gnormx * t10;
					w1.y = w2.y + a0.gnormy * t10;
					axis.x = a0.gnormx;
					axis.y = a0.gnormy;
				}
			}
			if(swapped) {
				axis.x = -axis.x;
				axis.y = -axis.y;
			}
			return best;
		} else {
			var p1 = s1.polygon;
			var p2 = s2.polygon;
			var best1 = -1e+100;
			var a1 = null;
			var a2 = null;
			var besti = 0;
			var cx_ite1 = p1.edges.head;
			while(cx_ite1 != null) {
				var a3 = cx_ite1.elt;
				var min = 1e100;
				var cx_ite2 = p2.gverts.next;
				while(cx_ite2 != null) {
					var v = cx_ite2;
					var k = a3.gnormx * v.x + a3.gnormy * v.y;
					if(k < min) min = k;
					cx_ite2 = cx_ite2.next;
				}
				min -= a3.gprojection;
				if(min > upperBound) {
					best1 = min;
					break;
				}
				if(min > 0) {
					if(min > best1) {
						best1 = min;
						a1 = a3;
						besti = 1;
					}
				} else if(best1 < 0 && min > best1) {
					best1 = min;
					a1 = a3;
					besti = 1;
				}
				cx_ite1 = cx_ite1.next;
			}
			if(best1 < upperBound) {
				var cx_ite3 = p2.edges.head;
				while(cx_ite3 != null) {
					var a4 = cx_ite3.elt;
					var min1 = 1e100;
					var cx_ite4 = p1.gverts.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var k1 = a4.gnormx * v2.x + a4.gnormy * v2.y;
						if(k1 < min1) min1 = k1;
						cx_ite4 = cx_ite4.next;
					}
					min1 -= a4.gprojection;
					if(min1 > upperBound) {
						best1 = min1;
						break;
					}
					if(min1 > 0) {
						if(min1 > best1) {
							best1 = min1;
							a2 = a4;
							besti = 2;
						}
					} else if(best1 < 0 && min1 > best1) {
						best1 = min1;
						a2 = a4;
						besti = 2;
					}
					cx_ite3 = cx_ite3.next;
				}
				if(best1 < upperBound) {
					var q1;
					var q2;
					var ax;
					if(besti == 1) {
						q1 = p1;
						q2 = p2;
						ax = a1;
					} else {
						q1 = p2;
						q2 = p1;
						ax = a2;
						var tmp1 = w1;
						w1 = w2;
						w2 = tmp1;
						swapped = !swapped;
					}
					var ay = null;
					var min2 = 1e100;
					var cx_ite5 = q2.edges.head;
					while(cx_ite5 != null) {
						var a5 = cx_ite5.elt;
						var k2 = ax.gnormx * a5.gnormx + ax.gnormy * a5.gnormy;
						if(k2 < min2) {
							min2 = k2;
							ay = a5;
						}
						cx_ite5 = cx_ite5.next;
					}
					if(swapped) {
						axis.x = -ax.gnormx;
						axis.y = -ax.gnormy;
					} else {
						axis.x = ax.gnormx;
						axis.y = ax.gnormy;
					}
					if(best1 >= 0) {
						var v01 = ax.gp0;
						var v11 = ax.gp1;
						var q0 = ay.gp0;
						var q11 = ay.gp1;
						var vx = 0.0;
						var vy = 0.0;
						var qx = 0.0;
						var qy = 0.0;
						vx = v11.x - v01.x;
						vy = v11.y - v01.y;
						qx = q11.x - q0.x;
						qy = q11.y - q0.y;
						var vdot = 1 / (vx * vx + vy * vy);
						var qdot = 1 / (qx * qx + qy * qy);
						var t11 = -(vx * (v01.x - q0.x) + vy * (v01.y - q0.y)) * vdot;
						var t21 = -(vx * (v01.x - q11.x) + vy * (v01.y - q11.y)) * vdot;
						var s11 = -(qx * (q0.x - v01.x) + qy * (q0.y - v01.y)) * qdot;
						var s21 = -(qx * (q0.x - v11.x) + qy * (q0.y - v11.y)) * qdot;
						if(t11 < 0) t11 = 0; else if(t11 > 1) t11 = 1;
						if(t21 < 0) t21 = 0; else if(t21 > 1) t21 = 1;
						if(s11 < 0) s11 = 0; else if(s11 > 1) s11 = 1;
						if(s21 < 0) s21 = 0; else if(s21 > 1) s21 = 1;
						var f1x = 0.0;
						var f1y = 0.0;
						var t12 = t11;
						f1x = v01.x + vx * t12;
						f1y = v01.y + vy * t12;
						var f2x = 0.0;
						var f2y = 0.0;
						var t13 = t21;
						f2x = v01.x + vx * t13;
						f2y = v01.y + vy * t13;
						var g1x = 0.0;
						var g1y = 0.0;
						var t14 = s11;
						g1x = q0.x + qx * t14;
						g1y = q0.y + qy * t14;
						var g2x = 0.0;
						var g2y = 0.0;
						var t15 = s21;
						g2x = q0.x + qx * t15;
						g2y = q0.y + qy * t15;
						var d1 = zpp_nape.geom.ZPP_VecMath.vec_dsq(f1x,f1y,q0.x,q0.y);
						var d2 = zpp_nape.geom.ZPP_VecMath.vec_dsq(f2x,f2y,q11.x,q11.y);
						var e1 = zpp_nape.geom.ZPP_VecMath.vec_dsq(g1x,g1y,v01.x,v01.y);
						var e2 = zpp_nape.geom.ZPP_VecMath.vec_dsq(g2x,g2y,v11.x,v11.y);
						var minfx = 0.0;
						var minfy = 0.0;
						var minq = null;
						if(d1 < d2) {
							minfx = f1x;
							minfy = f1y;
							minq = q0;
						} else {
							minfx = f2x;
							minfy = f2y;
							minq = q11;
							d1 = d2;
						}
						var mingx = 0.0;
						var mingy = 0.0;
						var minv = null;
						if(e1 < e2) {
							mingx = g1x;
							mingy = g1y;
							minv = v01;
						} else {
							mingx = g2x;
							mingy = g2y;
							minv = v11;
							e1 = e2;
						}
						if(d1 < e1) {
							w1.x = minfx;
							w1.y = minfy;
							w2.x = minq.x;
							w2.y = minq.y;
							best1 = Math.sqrt(d1);
						} else {
							w2.x = mingx;
							w2.y = mingy;
							w1.x = minv.x;
							w1.y = minv.y;
							best1 = Math.sqrt(e1);
						}
						if(best1 != 0) {
							axis.x = w2.x - w1.x;
							axis.y = w2.y - w1.y;
							var t16 = 1.0 / best1;
							axis.x *= t16;
							axis.y *= t16;
							if(swapped) {
								axis.x = -axis.x;
								axis.y = -axis.y;
							}
						}
						return best1;
					} else {
						var c0x = 0.0;
						var c0y = 0.0;
						c0x = ay.gp0.x;
						c0y = ay.gp0.y;
						var c1x = 0.0;
						var c1y = 0.0;
						c1x = ay.gp1.x;
						c1y = ay.gp1.y;
						var dvx = 0.0;
						var dvy = 0.0;
						dvx = c1x - c0x;
						dvy = c1y - c0y;
						var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
						var d11 = ax.gnormy * c1x - ax.gnormx * c1y;
						var den = 1 / (d11 - d0);
						var t17 = (-ax.tp1 - d0) * den;
						if(t17 > nape.Config.epsilon) {
							var t18 = t17;
							c0x += dvx * t18;
							c0y += dvy * t18;
						}
						var t19 = (-ax.tp0 - d11) * den;
						if(t19 < -nape.Config.epsilon) {
							var t20 = t19;
							c1x += dvx * t20;
							c1y += dvy * t20;
						}
						var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
						var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
						if(c0d < c1d) {
							w2.x = c0x;
							w2.y = c0y;
							var t22 = -c0d;
							w1.x = w2.x + ax.gnormx * t22;
							w1.y = w2.y + ax.gnormy * t22;
							return c0d;
						} else {
							w2.x = c1x;
							w2.y = c1y;
							var t23 = -c1d;
							w1.x = w2.x + ax.gnormx * t23;
							w1.y = w2.y + ax.gnormy * t23;
							return c1d;
						}
					}
				} else return upperBound;
			} else return upperBound;
		}
	}
};
zpp_nape.geom.ZPP_PartitionPair = function() {
	this.node = null;
	this.di = 0;
	this.id = 0;
	this.b = null;
	this.a = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
};
$hxClasses["zpp_nape.geom.ZPP_PartitionPair"] = zpp_nape.geom.ZPP_PartitionPair;
zpp_nape.geom.ZPP_PartitionPair.__name__ = ["zpp_nape","geom","ZPP_PartitionPair"];
zpp_nape.geom.ZPP_PartitionPair.get = function(a,b) {
	var ret;
	if(zpp_nape.geom.ZPP_PartitionPair.zpp_pool == null) ret = new zpp_nape.geom.ZPP_PartitionPair(); else {
		ret = zpp_nape.geom.ZPP_PartitionPair.zpp_pool;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.a = a;
	ret.b = b;
	if(a.id < b.id) {
		ret.id = a.id;
		ret.di = b.id;
	} else {
		ret.id = b.id;
		ret.di = a.id;
	}
	return ret;
};
zpp_nape.geom.ZPP_PartitionPair.edge_swap = function(a,b) {
	var t = a.node;
	a.node = b.node;
	b.node = t;
};
zpp_nape.geom.ZPP_PartitionPair.edge_lt = function(a,b) {
	return a.id < b.id || a.id == b.id && a.di < b.di;
};
zpp_nape.geom.ZPP_PartitionPair.prototype = {
	elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,free: function() {
		this.a = this.b = null;
		this.node = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_PartitionPair
};
zpp_nape.geom.ZPP_Triangular = function() { };
$hxClasses["zpp_nape.geom.ZPP_Triangular"] = zpp_nape.geom.ZPP_Triangular;
zpp_nape.geom.ZPP_Triangular.__name__ = ["zpp_nape","geom","ZPP_Triangular"];
zpp_nape.geom.ZPP_Triangular.lt = function(p,q) {
	return p.y < q.y || p.y == q.y && p.x < q.x;
};
zpp_nape.geom.ZPP_Triangular.right_turn = function(a,b,c) {
	var ux = 0.0;
	var uy = 0.0;
	ux = c.x - b.x;
	uy = c.y - b.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = b.x - a.x;
	vy = b.y - a.y;
	return vy * ux - vx * uy;
};
zpp_nape.geom.ZPP_Triangular.delaunay = function(A,B,C,D) {
	var ux = 0.0;
	var uy = 0.0;
	var vx = 0.0;
	var vy = 0.0;
	if((function($this) {
		var $r;
		{
			ux = C.x - B.x;
			uy = C.y - B.y;
		}
		{
			vx = B.x - A.x;
			vy = B.y - A.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = D.x - C.x;
			uy = D.y - C.y;
		}
		{
			vx = C.x - B.x;
			vy = C.y - B.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = A.x - D.x;
			uy = A.y - D.y;
		}
		{
			vx = D.x - C.x;
			vy = D.y - C.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = B.x - A.x;
			uy = B.y - A.y;
		}
		{
			vx = A.x - D.x;
			vy = A.y - D.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this))) return true;
	return B.x * (C.y * D.mag - C.mag * D.y) - C.x * (B.y * D.mag - B.mag * D.y) + D.x * (B.y * C.mag - B.mag * C.y) - (A.x * (C.y * D.mag - C.mag * D.y) - C.x * (A.y * D.mag - A.mag * D.y) + D.x * (A.y * C.mag - A.mag * C.y)) + (A.x * (B.y * D.mag - B.mag * D.y) - B.x * (A.y * D.mag - A.mag * D.y) + D.x * (A.y * B.mag - A.mag * B.y)) - (A.x * (B.y * C.mag - B.mag * C.y) - B.x * (A.y * C.mag - A.mag * C.y) + C.x * (A.y * B.mag - A.mag * B.y)) > 0;
	return B.x * (C.y * D.mag - C.mag * D.y) + B.y * (C.mag * D.x - C.x * D.mag) + B.mag * (C.x * D.y - C.y * D.x) + A.x * (C.mag * D.y - C.y * D.mag + B.mag * (C.y - D.y) + B.y * (D.mag - C.mag)) + A.y * (C.x * D.mag - C.mag * D.x + B.mag * (D.x - C.x) + B.x * (C.mag - D.mag)) + A.mag * (C.y * D.x - C.x * D.y + B.x * (D.y - C.y) + B.y * (C.x - D.x)) > 0;
};
zpp_nape.geom.ZPP_Triangular.optimise = function(P) {
	var F = P.vertices;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			p.sort();
			p.mag = p.x * p.x + p.y * p.y;
			nite = nite.next;
		} while(nite != L);
	}
	if(zpp_nape.geom.ZPP_Triangular.edgeSet == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) zpp_nape.geom.ZPP_Triangular.edgeSet = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
			zpp_nape.geom.ZPP_Triangular.edgeSet = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = zpp_nape.geom.ZPP_Triangular.edgeSet.next;
			zpp_nape.geom.ZPP_Triangular.edgeSet.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Triangular.edgeSet.lt = zpp_nape.geom.ZPP_PartitionPair.edge_lt;
		zpp_nape.geom.ZPP_Triangular.edgeSet.swapped = zpp_nape.geom.ZPP_PartitionPair.edge_swap;
	}
	var edgeStack;
	if(zpp_nape.geom.ZPP_PartitionPair.zpp_pool == null) edgeStack = new zpp_nape.geom.ZPP_PartitionPair(); else {
		edgeStack = zpp_nape.geom.ZPP_PartitionPair.zpp_pool;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool = edgeStack.next;
		edgeStack.next = null;
	}
	null;
	var F1 = P.vertices;
	var L1 = P.vertices;
	if(F1 != null) {
		var nite1 = F1;
		do {
			var p1 = nite1;
			var q0 = p1.next;
			p1.diagonals.reverse();
			var cx_ite = p1.diagonals.head;
			while(cx_ite != null) {
				var q = cx_ite.elt;
				if(q.id < p1.id) {
					q0 = q;
					cx_ite = cx_ite.next;
					continue;
				}
				var q1;
				if(cx_ite.next == null) q1 = p1.prev; else q1 = cx_ite.next.elt;
				if(!zpp_nape.geom.ZPP_Triangular.delaunay(p1,q0,q,q1)) {
					var edge = zpp_nape.geom.ZPP_PartitionPair.get(p1,q);
					edgeStack.add(edge);
					edge.node = zpp_nape.geom.ZPP_Triangular.edgeSet.insert(edge);
				}
				q0 = q;
				cx_ite = cx_ite.next;
			}
			nite1 = nite1.next;
		} while(nite1 != L1);
	}
	while(!(edgeStack.next == null)) {
		var edge1 = edgeStack.pop_unsafe();
		var A = edge1.a;
		var C = edge1.b;
		var B = A.next;
		var D = null;
		var cx_ite1 = A.diagonals.head;
		while(cx_ite1 != null) {
			var p2 = cx_ite1.elt;
			if(p2 == C) {
				cx_ite1 = cx_ite1.next;
				if(cx_ite1 == null) D = A.prev; else D = cx_ite1.elt;
				break;
			}
			B = p2;
			cx_ite1 = cx_ite1.next;
		}
		A.diagonals.remove(C);
		C.diagonals.remove(A);
		if(C == B.next) B.diagonals.add(D); else {
			var cx_ite2 = B.diagonals.head;
			while(cx_ite2 != null) {
				var p3 = cx_ite2.elt;
				if(p3 == C) {
					B.diagonals.insert(cx_ite2,D);
					break;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
		if(A == D.next) D.diagonals.add(B); else {
			var cx_ite3 = D.diagonals.head;
			while(cx_ite3 != null) {
				var p4 = cx_ite3.elt;
				if(p4 == A) {
					D.diagonals.insert(cx_ite3,B);
					break;
				}
				cx_ite3 = cx_ite3.next;
			}
		}
		zpp_nape.geom.ZPP_Triangular.edgeSet.remove_node(edge1.node);
		var o = edge1;
		o.a = o.b = null;
		o.node = null;
		o.next = zpp_nape.geom.ZPP_PartitionPair.zpp_pool;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool = o;
	}
	var o1 = edgeStack;
	o1.a = o1.b = null;
	o1.node = null;
	o1.next = zpp_nape.geom.ZPP_PartitionPair.zpp_pool;
	zpp_nape.geom.ZPP_PartitionPair.zpp_pool = o1;
};
zpp_nape.geom.ZPP_Triangular.triangulate = function(P) {
	var min = P.vertices;
	var max = P.vertices;
	var F = P.vertices.next;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			if(p.y < min.y || p.y == min.y && p.x < min.x) min = p;
			if(max.y < p.y || max.y == p.y && max.x < p.x) max = p;
			nite = nite.next;
		} while(nite != L);
	}
	if(zpp_nape.geom.ZPP_Triangular.queue == null) zpp_nape.geom.ZPP_Triangular.queue = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
	var rp = max.prev;
	var lp = max.next;
	zpp_nape.geom.ZPP_Triangular.queue.add(max);
	while(rp != min || lp != min) if(rp == min || lp != min && (rp.y < lp.y || rp.y == lp.y && rp.x < lp.x)) {
		zpp_nape.geom.ZPP_Triangular.queue.add(lp);
		lp.rightchain = false;
		lp = lp.next;
	} else {
		zpp_nape.geom.ZPP_Triangular.queue.add(rp);
		rp.rightchain = true;
		rp = rp.prev;
	}
	zpp_nape.geom.ZPP_Triangular.queue.add(min);
	if(zpp_nape.geom.ZPP_Triangular.stack == null) zpp_nape.geom.ZPP_Triangular.stack = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
	zpp_nape.geom.ZPP_Triangular.stack.add(zpp_nape.geom.ZPP_Triangular.queue.pop_unsafe());
	var pre = zpp_nape.geom.ZPP_Triangular.queue.pop_unsafe();
	zpp_nape.geom.ZPP_Triangular.stack.add(pre);
	while(true) {
		var p1 = zpp_nape.geom.ZPP_Triangular.queue.pop_unsafe();
		if(zpp_nape.geom.ZPP_Triangular.queue.head == null) break;
		if(p1.rightchain != zpp_nape.geom.ZPP_Triangular.stack.head.elt.rightchain) {
			while(true) {
				var s = zpp_nape.geom.ZPP_Triangular.stack.pop_unsafe();
				if(zpp_nape.geom.ZPP_Triangular.stack.head == null) break;
				P.add_diagonal(s,p1);
			}
			zpp_nape.geom.ZPP_Triangular.stack.add(pre);
		} else {
			var q = zpp_nape.geom.ZPP_Triangular.stack.pop_unsafe();
			while(!(zpp_nape.geom.ZPP_Triangular.stack.head == null)) {
				var s1 = zpp_nape.geom.ZPP_Triangular.stack.head.elt;
				var right = zpp_nape.geom.ZPP_Triangular.right_turn(s1,q,p1);
				if(p1.rightchain && right >= 0 || !p1.rightchain && right <= 0) break;
				P.add_diagonal(s1,p1);
				q = s1;
				zpp_nape.geom.ZPP_Triangular.stack.pop();
			}
			zpp_nape.geom.ZPP_Triangular.stack.add(q);
		}
		zpp_nape.geom.ZPP_Triangular.stack.add(p1);
		pre = p1;
	}
	if(!(zpp_nape.geom.ZPP_Triangular.stack.head == null)) {
		zpp_nape.geom.ZPP_Triangular.stack.pop();
		while(!(zpp_nape.geom.ZPP_Triangular.stack.head == null)) {
			var s2 = zpp_nape.geom.ZPP_Triangular.stack.pop_unsafe();
			if(zpp_nape.geom.ZPP_Triangular.stack.head == null) break;
			P.add_diagonal(max,s2);
		}
	}
	return P;
};
zpp_nape.geom.ZPP_Vec2 = function() {
	this.y = 0.0;
	this.x = 0.0;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.weak = false;
	this.outer = null;
	this._isimmutable = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
$hxClasses["zpp_nape.geom.ZPP_Vec2"] = zpp_nape.geom.ZPP_Vec2;
zpp_nape.geom.ZPP_Vec2.__name__ = ["zpp_nape","geom","ZPP_Vec2"];
zpp_nape.geom.ZPP_Vec2.get = function(x,y,immutable) {
	if(immutable == null) immutable = false;
	var ret;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) ret = new zpp_nape.geom.ZPP_Vec2(); else {
		ret = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = immutable;
	ret.x = x;
	ret.y = y;
	return ret;
};
zpp_nape.geom.ZPP_Vec2.prototype = {
	validate: function() {
		if(this._validate != null) this._validate();
	}
	,invalidate: function() {
		if(this._invalidate != null) this._invalidate(this);
	}
	,immutable: function() {
	}
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.geom.Vec2();
			var o = this.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
			zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,free: function() {
		if(this.outer != null) {
			this.outer.zpp_inner = null;
			this.outer = null;
		}
		this._isimmutable = null;
		this._validate = null;
		this._invalidate = null;
	}
	,alloc: function() {
		this.weak = false;
	}
	,elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,copy: function() {
		return zpp_nape.geom.ZPP_Vec2.get(this.x,this.y,null);
	}
	,toString: function() {
		return "{ x: " + this.x + " y: " + this.y + " }";
	}
	,__class__: zpp_nape.geom.ZPP_Vec2
};
zpp_nape.geom.ZPP_Vec3 = function() {
	this._validate = null;
	this.immutable = false;
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.outer = null;
	this.immutable = false;
	this._validate = null;
};
$hxClasses["zpp_nape.geom.ZPP_Vec3"] = zpp_nape.geom.ZPP_Vec3;
zpp_nape.geom.ZPP_Vec3.__name__ = ["zpp_nape","geom","ZPP_Vec3"];
zpp_nape.geom.ZPP_Vec3.prototype = {
	validate: function() {
		if(this._validate != null) this._validate();
	}
	,__class__: zpp_nape.geom.ZPP_Vec3
};
zpp_nape.geom.ZPP_VecMath = function() { };
$hxClasses["zpp_nape.geom.ZPP_VecMath"] = zpp_nape.geom.ZPP_VecMath;
zpp_nape.geom.ZPP_VecMath.__name__ = ["zpp_nape","geom","ZPP_VecMath"];
zpp_nape.geom.ZPP_VecMath.vec_dsq = function(ax,ay,bx,by) {
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	return dx * dx + dy * dy;
};
zpp_nape.geom.ZPP_VecMath.vec_distance = function(ax,ay,bx,by) {
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	return Math.sqrt(dx * dx + dy * dy);
};
zpp_nape.phys = {};
zpp_nape.phys.ZPP_Interactor = function() {
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.group = null;
	this.cbsets = null;
	this.icompound = null;
	this.ibody = null;
	this.ishape = null;
	this.userData = null;
	this.id = 0;
	this.outer_i = null;
	this.id = zpp_nape.ZPP_ID.Interactor();
	this.cbsets = new zpp_nape.util.ZNPList_ZPP_CallbackSet();
	this.cbTypes = new zpp_nape.util.ZNPList_ZPP_CbType();
};
$hxClasses["zpp_nape.phys.ZPP_Interactor"] = zpp_nape.phys.ZPP_Interactor;
zpp_nape.phys.ZPP_Interactor.__name__ = ["zpp_nape","phys","ZPP_Interactor"];
zpp_nape.phys.ZPP_Interactor.get = function(i1,i2) {
	var id;
	if(i1.id < i2.id) id = i1.id; else id = i2.id;
	var di;
	if(i1.id < i2.id) di = i2.id; else di = i1.id;
	var xs;
	if(i1.cbsets.length < i2.cbsets.length) xs = i1.cbsets; else xs = i2.cbsets;
	var ret = null;
	var cx_ite = xs.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x.id == id && x.di == di) {
			ret = x;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.phys.ZPP_Interactor.int_callback = function(set,x,cb) {
	var o1 = set.int1;
	var o2 = set.int2;
	if(x.options1.compatible(o1.cbTypes) && x.options2.compatible(o2.cbTypes)) {
		cb.int1 = o1;
		cb.int2 = o2;
	} else {
		cb.int1 = o2;
		cb.int2 = o1;
	}
};
zpp_nape.phys.ZPP_Interactor.prototype = {
	isShape: function() {
		return this.ishape != null;
	}
	,isBody: function() {
		return this.ibody != null;
	}
	,isCompound: function() {
		return this.icompound != null;
	}
	,__iaddedToSpace: function() {
		if(this.group != null) this.group.interactors.add(this);
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.interactors.add(this);
			cx_ite = cx_ite.next;
		}
		this.alloc_cbSet();
	}
	,__iremovedFromSpace: function() {
		if(this.group != null) this.group.interactors.remove(this);
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.interactors.remove(this);
			cx_ite = cx_ite.next;
		}
		this.dealloc_cbSet();
	}
	,wake: function() {
		if(this.ishape != null) {
			var body = this.ishape.body;
			if(body != null && body.space != null) body.space.non_inlined_wake(body);
			true;
		} else if(this.ibody != null) {
			if(this.ibody.space != null) this.ibody.space.non_inlined_wake(this.ibody); else false;
		} else {
			if(this.icompound.space != null) this.icompound.space.wakeCompound(this.icompound);
			true;
		}
	}
	,getSpace: function() {
		if(this.ishape != null) {
			if(this.ishape.body == null) return null; else return this.ishape.body.space;
		} else if(this.ibody != null) return this.ibody.space; else return this.icompound.space;
	}
	,setupcbTypes: function() {
		this.wrap_cbTypes = zpp_nape.util.ZPP_CbTypeList.get(this.cbTypes);
		this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
		this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
		this.wrap_cbTypes.zpp_inner.dontremove = true;
	}
	,wrap_cbTypes_subber: function(pcb) {
		var cb = pcb.zpp_inner;
		if(this.cbTypes.has(cb)) {
			var space;
			if(this.ishape != null) {
				if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
			} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
			if(space != null) {
				this.dealloc_cbSet();
				cb.interactors.remove(this);
			}
			this.cbTypes.remove(cb);
			if(space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,wrap_cbTypes_adder: function(cb) {
		this.insert_cbtype(cb.zpp_inner);
		return false;
	}
	,insert_cbtype: function(cb) {
		if(!this.cbTypes.has(cb)) {
			var space;
			if(this.ishape != null) {
				if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
			} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
			if(space != null) {
				this.dealloc_cbSet();
				cb.interactors.add(this);
			}
			var pre = null;
			var cx_ite = this.cbTypes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(cb.id < j.id) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			this.cbTypes.inlined_insert(pre,cb);
			if(space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,alloc_cbSet: function() {
		var space;
		if(this.ishape != null) {
			if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
		} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
		if((this.cbSet = space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.count++;
			this.cbSet.interactors.add(this);
			this.cbSet.validate();
			space.freshInteractorType(this);
		}
	}
	,dealloc_cbSet: function() {
		var space;
		if(this.ishape != null) {
			if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
		} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
		if(this.cbSet != null) {
			this.cbSet.interactors.remove(this);
			space.nullInteractorType(this);
			if(--this.cbSet.count == 0) {
				space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.free();
				o.next = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
				zpp_nape.callbacks.ZPP_CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,setGroup: function(group) {
		if(this.group != group) {
			var inspace;
			inspace = (this.ishape != null?this.ishape.body == null?null:this.ishape.body.space:this.ibody != null?this.ibody.space:this.icompound.space) != null;
			if(inspace && this.group != null) this.group.interactors.remove(this);
			this.group = group;
			if(inspace && group != null) group.interactors.add(this);
			if(inspace) {
				if(this.ishape != null) this.ishape.body.wake(); else if(this.ibody != null) this.ibody.wake(); else this.icompound.wake();
			}
		}
	}
	,immutable_midstep: function(n) {
		if(this.ibody != null) null; else if(this.ishape != null) this.ishape.__immutable_midstep(n); else this.icompound.__imutable_midstep(n);
	}
	,lookup_group: function() {
		var cur = this;
		while(cur != null && cur.group == null) if(cur.ishape != null) cur = cur.ishape.body; else if(cur.icompound != null) cur = cur.icompound.compound; else cur = cur.ibody.compound;
		if(cur == null) return null; else return cur.group;
	}
	,copyto: function(ret) {
		ret.zpp_inner_i.group = this.group;
		var _g = this.outer_i.get_cbTypes().iterator();
		while(_g.hasNext()) {
			var cb;
			_g.zpp_critical = false;
			cb = _g.zpp_inner.at(_g.zpp_i++);
			((function($this) {
				var $r;
				if(ret.zpp_inner_i.wrap_cbTypes == null) ret.zpp_inner_i.setupcbTypes();
				$r = ret.zpp_inner_i.wrap_cbTypes;
				return $r;
			}(this))).add(cb);
		}
		if(this.userData != null) ret.zpp_inner_i.userData = Reflect.copy(this.userData);
	}
	,__class__: zpp_nape.phys.ZPP_Interactor
};
zpp_nape.phys.ZPP_Body = function() {
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_aabb = false;
	this.aabb = null;
	this.norotate = false;
	this.sinertia = 0.0;
	this.iinertia = 0.0;
	this.cinertia = 0.0;
	this.zip_inertia = false;
	this.inertia = 0.0;
	this.inertiaMode = 0;
	this.zip_gravMassScale = false;
	this.gravMassScale = 0.0;
	this.gravMassMode = 0;
	this.zip_gravMass = false;
	this.gravMass = 0.0;
	this.nomove = false;
	this.cmass = 0.0;
	this.smass = 0.0;
	this.imass = 0.0;
	this.massMode = 0;
	this.zip_mass = false;
	this.mass = 0.0;
	this.zip_axis = false;
	this.axisy = 0.0;
	this.axisx = 0.0;
	this.rot = 0.0;
	this.pre_rot = 0.0;
	this.kinangvel = 0.0;
	this.torque = 0.0;
	this.angvel = 0.0;
	this.wrapcvel = null;
	this.wrap_svel = null;
	this.svely = 0.0;
	this.svelx = 0.0;
	this.wrap_kinvel = null;
	this.kinvely = 0.0;
	this.kinvelx = 0.0;
	this.wrap_force = null;
	this.forcey = 0.0;
	this.forcex = 0.0;
	this.wrap_vel = null;
	this.vely = 0.0;
	this.velx = 0.0;
	this.wrap_pos = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.pre_posy = 0.0;
	this.pre_posx = 0.0;
	this.disableCCD = false;
	this.bulletEnabled = false;
	this.bullet = false;
	this.sweepRadius = 0.0;
	this.sweepFrozen = false;
	this.sweep_angvel = 0.0;
	this.sweepTime = 0.0;
	this.graph_depth = 0;
	this.component = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_arbiters = null;
	this.arbiters = null;
	this.space = null;
	this.wrap_shapes = null;
	this.shapes = null;
	this.compound = null;
	this.type = 0;
	this.world = false;
	this.outer = null;
	zpp_nape.phys.ZPP_Interactor.call(this);
	this.ibody = this;
	this.world = false;
	this.bulletEnabled = false;
	this.sweepTime = 0;
	this.sweep_angvel = 0;
	this.norotate = this.nomove = false;
	this.disableCCD = false;
	this.posx = 0;
	this.posy = 0;
	this.rot = 0;
	this.axisx = 0;
	this.axisy = 1;
	this.svelx = 0;
	this.svely = 0;
	this.velx = 0;
	this.vely = 0;
	this.kinvelx = 0;
	this.kinvely = 0;
	this.forcex = 0;
	this.forcey = 0;
	this.torque = this.angvel = this.kinangvel = 0;
	this.pre_posx = Math.POSITIVE_INFINITY;
	this.pre_posy = Math.POSITIVE_INFINITY;
	this.pre_rot = Math.POSITIVE_INFINITY;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.zip_aabb = true;
	this.aabb = zpp_nape.geom.ZPP_AABB.get(0,0,0,0);
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT;
	this.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT;
	this.gravMassScale = 1.0;
	this.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT;
	this.arbiters = new zpp_nape.util.ZNPList_ZPP_Arbiter();
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get(this.shapes);
	this.wrap_shapes.zpp_inner.adder = $bind(this,this.shapes_adder);
	this.wrap_shapes.zpp_inner.subber = $bind(this,this.shapes_subber);
	this.wrap_shapes.zpp_inner._invalidate = $bind(this,this.shapes_invalidate);
	this.kinematicDelaySleep = false;
};
$hxClasses["zpp_nape.phys.ZPP_Body"] = zpp_nape.phys.ZPP_Body;
zpp_nape.phys.ZPP_Body.__name__ = ["zpp_nape","phys","ZPP_Body"];
zpp_nape.phys.ZPP_Body.bodysetlt = function(a,b) {
	return a.id < b.id;
};
zpp_nape.phys.ZPP_Body.__static = function() {
	var ret = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
		return $r;
	}(this)));
	var si = ret.zpp_inner;
	si.world = true;
	si.wrap_shapes.zpp_inner.immutable = true;
	si.smass = si.imass = si.cmass = si.mass = si.gravMass = 0.0;
	si.sinertia = si.iinertia = si.cinertia = si.inertia = 0.0;
	si.cbTypes.clear();
	return ret;
};
zpp_nape.phys.ZPP_Body.__super__ = zpp_nape.phys.ZPP_Interactor;
zpp_nape.phys.ZPP_Body.prototype = $extend(zpp_nape.phys.ZPP_Interactor.prototype,{
	isStatic: function() {
		return this.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC;
	}
	,isDynamic: function() {
		return this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC;
	}
	,isKinematic: function() {
		return this.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC;
	}
	,invalidate_type: function() {
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,invalidate_shapes: function() {
		this.zip_aabb = true;
		this.zip_localCOM = true;
		this.zip_worldCOM = true;
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,init_bodysetlist: function() {
		if(zpp_nape.phys.ZPP_Body.bodyset == null) {
			zpp_nape.phys.ZPP_Body.bodyset = new zpp_nape.util.ZPP_Set_ZPP_Body();
			zpp_nape.phys.ZPP_Body.bodyset.lt = zpp_nape.phys.ZPP_Body.bodysetlt;
			zpp_nape.phys.ZPP_Body.bodystack = new zpp_nape.util.ZNPList_ZPP_Body();
		}
	}
	,connectedBodies_cont: function(b) {
		if(zpp_nape.phys.ZPP_Body.bodyset.try_insert_bool(b.zpp_inner)) {
			zpp_nape.phys.ZPP_Body.bodystack.add(b.zpp_inner);
			b.zpp_inner.graph_depth = zpp_nape.phys.ZPP_Body.cur_graph_depth + 1;
		}
	}
	,connectedBodies: function(depth,output) {
		var _g = this;
		if(zpp_nape.phys.ZPP_Body.bodyset == null) {
			zpp_nape.phys.ZPP_Body.bodyset = new zpp_nape.util.ZPP_Set_ZPP_Body();
			zpp_nape.phys.ZPP_Body.bodyset.lt = zpp_nape.phys.ZPP_Body.bodysetlt;
			zpp_nape.phys.ZPP_Body.bodystack = new zpp_nape.util.ZNPList_ZPP_Body();
		}
		null;
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		zpp_nape.phys.ZPP_Body.bodystack.add(this);
		zpp_nape.phys.ZPP_Body.bodyset.insert(this);
		this.graph_depth = 0;
		while(!(zpp_nape.phys.ZPP_Body.bodystack.head == null)) {
			var cur = zpp_nape.phys.ZPP_Body.bodystack.pop_unsafe();
			if(cur.graph_depth == depth) continue;
			zpp_nape.phys.ZPP_Body.cur_graph_depth = cur.graph_depth;
			var cx_ite = cur.constraints.head;
			while(cx_ite != null) {
				var c = cx_ite.elt;
				c.outer.visitBodies($bind(this,this.connectedBodies_cont));
				cx_ite = cx_ite.next;
			}
		}
		zpp_nape.phys.ZPP_Body.bodyset.clear_with(function(b) {
			if(b != _g) ret.add(b.outer);
		});
		return ret;
	}
	,interactingBodies: function(arbiter_type,depth,output) {
		var _g = this;
		if(zpp_nape.phys.ZPP_Body.bodyset == null) {
			zpp_nape.phys.ZPP_Body.bodyset = new zpp_nape.util.ZPP_Set_ZPP_Body();
			zpp_nape.phys.ZPP_Body.bodyset.lt = zpp_nape.phys.ZPP_Body.bodysetlt;
			zpp_nape.phys.ZPP_Body.bodystack = new zpp_nape.util.ZNPList_ZPP_Body();
		}
		null;
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		zpp_nape.phys.ZPP_Body.bodyset.insert(this);
		zpp_nape.phys.ZPP_Body.bodystack.add(this);
		this.graph_depth = 0;
		while(!(zpp_nape.phys.ZPP_Body.bodystack.head == null)) {
			var cur = zpp_nape.phys.ZPP_Body.bodystack.pop_unsafe();
			if(cur.graph_depth == depth) continue;
			var cx_ite = cur.arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if((arb.type & arbiter_type) != 0) {
					var other;
					if(arb.b1 == cur) other = arb.b2; else other = arb.b1;
					if(zpp_nape.phys.ZPP_Body.bodyset.try_insert_bool(other)) {
						zpp_nape.phys.ZPP_Body.bodystack.add(other);
						other.graph_depth = cur.graph_depth + 1;
					}
				}
				cx_ite = cx_ite.next;
			}
		}
		zpp_nape.phys.ZPP_Body.bodyset.clear_with(function(b) {
			if(b != _g) ret.add(b.outer);
		});
		return ret;
	}
	,atRest: function(dt) {
		if(!(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) return this.component.sleeping; else {
			var linSq = nape.Config.linearSleepThreshold;
			linSq *= linSq;
			var cansleep;
			if(this.velx * this.velx + this.vely * this.vely > linSq) cansleep = false; else if(zpp_nape.geom.ZPP_VecMath.vec_dsq(this.posx,this.posy,this.pre_posx,this.pre_posy) > 0.25 * linSq * dt * dt) cansleep = false; else {
				var dx = 0.0;
				var dy = 0.0;
				dx = this.aabb.maxx - this.aabb.minx;
				dy = this.aabb.maxy - this.aabb.miny;
				var idl = dx * dx + dy * dy;
				var angSq = nape.Config.angularSleepThreshold;
				angSq *= angSq;
				if(4 * this.angvel * this.angvel * idl > angSq) cansleep = false; else {
					var dr = this.rot - this.pre_rot;
					if(dr * dr * idl > angSq * dt * dt) cansleep = false; else cansleep = true;
				}
			}
			if(!cansleep) this.component.waket = this.space.stamp;
			return this.component.waket + nape.Config.sleepDelay < this.space.stamp;
		}
	}
	,refreshArbiters: function() {
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			arb.invalidated = true;
			cx_ite = cx_ite.next;
		}
	}
	,sweepIntegrate: function(dt) {
		var delta = dt - this.sweepTime;
		if(delta != 0) {
			this.sweepTime = dt;
			var t = delta;
			this.posx += this.velx * t;
			this.posy += this.vely * t;
			if(this.angvel != 0) this.delta_rot(this.sweep_angvel * delta);
		}
	}
	,sweepValidate: function(s) {
		if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			s.worldCOMx = this.posx + (this.axisy * s.localCOMx - this.axisx * s.localCOMy);
			s.worldCOMy = this.posy + (s.localCOMx * this.axisx + s.localCOMy * this.axisy);
		} else {
			var p = s.polygon;
			var li = p.lverts.next;
			var cx_ite = p.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = this.posx + (this.axisy * l.x - this.axisx * l.y);
				g.y = this.posy + (l.x * this.axisx + l.y * this.axisy);
				cx_ite = cx_ite.next;
			}
			var ite = p.edges.head;
			var cx_ite1 = p.gverts.next;
			var u = cx_ite1;
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var e = ite.elt;
				ite = ite.next;
				e.gnormx = this.axisy * e.lnormx - this.axisx * e.lnormy;
				e.gnormy = e.lnormx * this.axisx + e.lnormy * this.axisy;
				e.gprojection = this.posx * e.gnormx + this.posy * e.gnormy + e.lprojection;
				e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
				e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
				u = v;
				cx_ite1 = cx_ite1.next;
			}
			var v1 = p.gverts.next;
			var e1 = ite.elt;
			ite = ite.next;
			e1.gnormx = this.axisy * e1.lnormx - this.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * this.axisx + e1.lnormy * this.axisy;
			e1.gprojection = this.posx * e1.gnormx + this.posy * e1.gnormy + e1.lprojection;
			e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
			e1.tp1 = v1.y * e1.gnormx - v1.x * e1.gnormy;
		}
	}
	,invalidate_pos: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
				s.polygon.invalidate_gverts();
				s.polygon.invalidate_gaxi();
			}
			s.invalidate_worldCOM();
			cx_ite = cx_ite.next;
		}
		this.zip_worldCOM = true;
	}
	,pos_invalidate: function(pos) {
		this.immutable_midstep("Body::position");
		if(!(this.posx == pos.x && this.posy == pos.y)) {
			this.posx = pos.x;
			this.posy = pos.y;
			this.invalidate_pos();
			this.wake();
		}
	}
	,pos_validate: function() {
		this.wrap_pos.zpp_inner.x = this.posx;
		this.wrap_pos.zpp_inner.y = this.posy;
	}
	,vel_invalidate: function(vel) {
		this.velx = vel.x;
		this.vely = vel.y;
		this.wake();
	}
	,vel_validate: function() {
		this.wrap_vel.zpp_inner.x = this.velx;
		this.wrap_vel.zpp_inner.y = this.vely;
	}
	,kinvel_invalidate: function(vel) {
		this.kinvelx = vel.x;
		this.kinvely = vel.y;
		this.wake();
	}
	,kinvel_validate: function() {
		this.wrap_kinvel.zpp_inner.x = this.kinvelx;
		this.wrap_kinvel.zpp_inner.y = this.kinvely;
	}
	,svel_invalidate: function(vel) {
		this.svelx = vel.x;
		this.svely = vel.y;
		this.wake();
	}
	,svel_validate: function() {
		this.wrap_svel.zpp_inner.x = this.svelx;
		this.wrap_svel.zpp_inner.y = this.svely;
	}
	,force_invalidate: function(force) {
		this.forcex = force.x;
		this.forcey = force.y;
		this.wake();
	}
	,force_validate: function() {
		this.wrap_force.zpp_inner.x = this.forcex;
		this.wrap_force.zpp_inner.y = this.forcey;
	}
	,setupPosition: function() {
		this.wrap_pos = nape.geom.Vec2.get(this.posx,this.posy,null);
		this.wrap_pos.zpp_inner._inuse = true;
		if(this.world) this.wrap_pos.zpp_inner._immutable = true; else {
			this.wrap_pos.zpp_inner._invalidate = $bind(this,this.pos_invalidate);
			this.wrap_pos.zpp_inner._validate = $bind(this,this.pos_validate);
		}
	}
	,setupVelocity: function() {
		this.wrap_vel = nape.geom.Vec2.get(this.velx,this.vely,null);
		this.wrap_vel.zpp_inner._inuse = true;
		if(this.world) this.wrap_vel.zpp_inner._immutable = true; else {
			this.wrap_vel.zpp_inner._invalidate = $bind(this,this.vel_invalidate);
			this.wrap_vel.zpp_inner._validate = $bind(this,this.vel_validate);
		}
	}
	,setupkinvel: function() {
		this.wrap_kinvel = nape.geom.Vec2.get(this.kinvelx,this.kinvely,null);
		this.wrap_kinvel.zpp_inner._inuse = true;
		if(this.world) this.wrap_kinvel.zpp_inner._immutable = true; else {
			this.wrap_kinvel.zpp_inner._invalidate = $bind(this,this.kinvel_invalidate);
			this.wrap_kinvel.zpp_inner._validate = $bind(this,this.kinvel_validate);
		}
	}
	,setupsvel: function() {
		this.wrap_svel = nape.geom.Vec2.get(this.svelx,this.svely,null);
		this.wrap_svel.zpp_inner._inuse = true;
		if(this.world) this.wrap_svel.zpp_inner._immutable = true; else {
			this.wrap_svel.zpp_inner._invalidate = $bind(this,this.svel_invalidate);
			this.wrap_svel.zpp_inner._validate = $bind(this,this.svel_validate);
		}
	}
	,setupForce: function() {
		this.wrap_force = nape.geom.Vec2.get(this.forcex,this.forcey,null);
		this.wrap_force.zpp_inner._inuse = true;
		if(this.world) this.wrap_force.zpp_inner._immutable = true; else {
			this.wrap_force.zpp_inner._invalidate = $bind(this,this.force_invalidate);
			this.wrap_force.zpp_inner._validate = $bind(this,this.force_validate);
		}
	}
	,cvel_validate: function() {
		this.wrapcvel.zpp_inner.x = this.velx + this.kinvelx;
		this.wrapcvel.zpp_inner.y = this.vely + this.kinvely;
		this.wrapcvel.zpp_inner.z = this.angvel + this.kinangvel;
	}
	,setup_cvel: function() {
		var me = this;
		this.wrapcvel = nape.geom.Vec3.get();
		this.wrapcvel.zpp_inner.immutable = true;
		this.wrapcvel.zpp_inner._validate = $bind(this,this.cvel_validate);
	}
	,invalidate_rot: function() {
		this.zip_axis = true;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
				s.polygon.invalidate_gverts();
				s.polygon.invalidate_gaxi();
			}
			s.invalidate_worldCOM();
			cx_ite = cx_ite.next;
		}
		this.zip_worldCOM = true;
	}
	,validate_axis: function() {
		if(this.zip_axis) {
			this.zip_axis = false;
			this.axisx = Math.sin(this.rot);
			this.axisy = Math.cos(this.rot);
			null;
		}
	}
	,quick_validate_axis: function() {
		this.axisx = Math.sin(this.rot);
		this.axisy = Math.cos(this.rot);
	}
	,delta_rot: function(dr) {
		this.rot += dr;
		if(dr * dr > 0.0001) {
			this.axisx = Math.sin(this.rot);
			this.axisy = Math.cos(this.rot);
			null;
		} else {
			var d2 = dr * dr;
			var p = 1 - 0.5 * d2;
			var m = 1 - d2 * d2 / 8;
			var nx = (p * this.axisx + dr * this.axisy) * m;
			this.axisy = (p * this.axisy - dr * this.axisx) * m;
			this.axisx = nx;
		}
	}
	,invalidate_mass: function() {
		this.zip_mass = true;
		this.invalidate_gravMass();
	}
	,validate_mass: function() {
		var exist = false;
		if(this.zip_mass || this.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && exist) {
			this.zip_mass = false;
			if(this.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT) {
				this.cmass = 0;
				var cx_ite = this.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cmass += s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && !this.nomove) {
				this.mass = this.cmass;
				this.imass = this.smass = 1.0 / this.mass;
			} else {
				this.mass = Math.POSITIVE_INFINITY;
				this.imass = this.smass = 0.0;
			}
			if(exist) this.invalidate_inertia();
		}
	}
	,invalidate_gravMass: function() {
		if(this.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED) this.zip_gravMass = true;
		if(this.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) this.zip_gravMassScale = true;
		this.wake();
	}
	,validate_gravMass: function() {
		if(this.zip_gravMass) {
			this.zip_gravMass = false;
			this.validate_mass();
			if(this.gravMassMode == zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT) {
				this.validate_mass();
				this.gravMass = this.cmass;
			} else if(this.gravMassMode == zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) {
				this.validate_mass();
				this.gravMass = this.cmass * this.gravMassScale;
			}
		}
	}
	,invalidate_gravMassScale: function() {
		if(this.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) this.zip_gravMassScale = true; else this.invalidate_gravMass();
	}
	,validate_gravMassScale: function() {
		if(this.zip_gravMassScale) {
			this.zip_gravMassScale = false;
			if(this.gravMassMode == zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT) this.gravMassScale = 1.0; else if(this.gravMassMode == zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED) {
				this.validate_mass();
				this.gravMassScale = this.gravMass / this.cmass;
			}
		}
	}
	,invalidate_inertia: function() {
		this.zip_inertia = true;
		this.wake();
	}
	,validate_inertia: function() {
		var exist = false;
		if(this.zip_inertia || this.inertiaMode == zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT && exist) {
			this.zip_inertia = false;
			if(this.inertiaMode == zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT) {
				this.cinertia = 0;
				var cx_ite = this.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cinertia += s.inertia * s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && !this.norotate) {
				this.inertia = this.cinertia;
				this.sinertia = this.iinertia = 1.0 / this.inertia;
			} else {
				this.inertia = Math.POSITIVE_INFINITY;
				this.sinertia = this.iinertia = 0;
			}
			if(exist) this.invalidate_inertia();
		}
	}
	,invalidate_wake: function() {
		this.wake();
	}
	,validate_aabb: function() {
		if(this.zip_aabb) {
			this.zip_aabb = false;
			this.aabb.minx = Math.POSITIVE_INFINITY;
			this.aabb.miny = Math.POSITIVE_INFINITY;
			this.aabb.maxx = Math.NEGATIVE_INFINITY;
			this.aabb.maxy = Math.NEGATIVE_INFINITY;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.zip_aabb) {
					if(s.body != null) {
						s.zip_aabb = false;
						if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
					}
				}
				this.aabb.combine(s.aabb);
				cx_ite = cx_ite.next;
			}
		}
	}
	,invalidate_aabb: function() {
		this.zip_aabb = true;
	}
	,invalidate_localCOM: function() {
		this.zip_localCOM = true;
		this.zip_worldCOM = true;
	}
	,invalidate_worldCOM: function() {
		this.zip_worldCOM = true;
	}
	,validate_localCOM: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			var tempx = 0;
			var tempy = 0;
			var msum = 0.0;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.zip_localCOM) {
					s.zip_localCOM = false;
					if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
					if(s.wrap_localCOM != null) {
						s.wrap_localCOM.zpp_inner.x = s.localCOMx;
						s.wrap_localCOM.zpp_inner.y = s.localCOMy;
					}
				}
				s.validate_area_inertia();
				var t = s.area * s.material.density;
				tempx += s.localCOMx * t;
				tempy += s.localCOMy * t;
				msum += s.area * s.material.density;
				cx_ite = cx_ite.next;
			}
			if(msum != 0) {
				var t1 = 1.0 / msum;
				this.localCOMx = tempx * t1;
				this.localCOMy = tempy * t1;
			}
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
			if(this.zip_mass && this.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT) {
				this.zip_mass = false;
				this.cmass = msum;
				if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
					this.mass = this.cmass;
					this.imass = this.smass = 1.0 / this.mass;
				} else {
					this.mass = Math.POSITIVE_INFINITY;
					this.imass = this.smass = 0.0;
				}
			}
		}
	}
	,validate_worldCOM: function() {
		if(this.zip_worldCOM) {
			this.zip_worldCOM = false;
			this.validate_localCOM();
			if(this.zip_axis) {
				this.zip_axis = false;
				this.axisx = Math.sin(this.rot);
				this.axisy = Math.cos(this.rot);
				null;
			}
			this.worldCOMx = this.posx + (this.axisy * this.localCOMx - this.axisx * this.localCOMy);
			this.worldCOMy = this.posy + (this.localCOMx * this.axisx + this.localCOMy * this.axisy);
			if(this.wrap_worldCOM != null) {
				this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
				this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
			}
		}
	}
	,getlocalCOM: function() {
		this.validate_localCOM();
	}
	,getworldCOM: function() {
		this.validate_worldCOM();
	}
	,__immutable_midstep: function(name) {
	}
	,clear: function() {
		while(!(this.shapes.head == null)) {
			var s = this.shapes.pop_unsafe();
			s.removedFromBody();
			s.body = null;
		}
		this.invalidate_shapes();
		this.pre_posx = 0;
		this.pre_posy = 0;
		this.posx = 0;
		this.posy = 0;
		this.velx = 0;
		this.vely = 0;
		this.forcex = 0;
		this.forcey = 0;
		this.kinvelx = 0;
		this.kinvely = 0;
		this.svelx = 0;
		this.svely = 0;
		this.angvel = this.torque = this.kinangvel = this.pre_rot = this.rot = 0;
		this.invalidate_pos();
		this.invalidate_rot();
		this.axisx = 0;
		this.axisy = 1;
		this.zip_axis = false;
		this.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT;
		this.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT;
		this.gravMassScale = 1.0;
		this.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT;
		this.norotate = false;
		this.nomove = false;
	}
	,aabb_validate: function() {
		this.validate_aabb();
	}
	,shapes_adder: function(s) {
		if(s.zpp_inner.body != this) {
			if(s.zpp_inner.body != null) s.zpp_inner.body.wrap_shapes.remove(s);
			s.zpp_inner.body = this;
			s.zpp_inner.addedToBody();
			if(this.space != null) this.space.added_shape(s.zpp_inner,null);
			if(s.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
				s.zpp_inner.polygon.invalidate_gaxi();
				s.zpp_inner.polygon.invalidate_gverts();
			}
			return true;
		} else return false;
	}
	,shapes_subber: function(s) {
		if(this.space != null) this.space.removed_shape(s.zpp_inner);
		s.zpp_inner.body = null;
		s.zpp_inner.removedFromBody();
	}
	,shapes_invalidate: function(_) {
		this.invalidate_shapes();
	}
	,addedToSpace: function() {
		if(zpp_nape.space.ZPP_Component.zpp_pool == null) this.component = new zpp_nape.space.ZPP_Component(); else {
			this.component = zpp_nape.space.ZPP_Component.zpp_pool;
			zpp_nape.space.ZPP_Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		null;
		this.component.isBody = true;
		this.component.body = this;
		this.__iaddedToSpace();
	}
	,removedFromSpace: function() {
		while(!(this.arbiters.head == null)) {
			var arb = this.arbiters.pop_unsafe();
			arb.cleared = true;
			if(arb.b2 == this) arb.b1.arbiters.inlined_try_remove(arb);
			if(arb.b1 == this) arb.b2.arbiters.inlined_try_remove(arb);
			if(arb.pair != null) {
				arb.pair.arb = null;
				arb.pair = null;
			}
			arb.active = false;
			this.space.f_arbiters.modified = true;
		}
		var o = this.component;
		o.body = null;
		o.constraint = null;
		null;
		o.next = zpp_nape.space.ZPP_Component.zpp_pool;
		zpp_nape.space.ZPP_Component.zpp_pool = o;
		this.component = null;
		this.__iremovedFromSpace();
	}
	,copy: function() {
		var ret = new nape.phys.Body().zpp_inner;
		ret.type = this.type;
		ret.bulletEnabled = this.bulletEnabled;
		ret.disableCCD = this.disableCCD;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			ret.outer.zpp_inner.wrap_shapes.add(s.outer.copy());
			cx_ite = cx_ite.next;
		}
		ret.posx = this.posx;
		ret.posy = this.posy;
		ret.velx = this.velx;
		ret.vely = this.vely;
		ret.forcex = this.forcex;
		ret.forcey = this.forcey;
		ret.rot = this.rot;
		ret.angvel = this.angvel;
		ret.torque = this.torque;
		ret.kinvelx = this.kinvelx;
		ret.kinvely = this.kinvely;
		ret.kinangvel = this.kinangvel;
		ret.svelx = this.svelx;
		ret.svely = this.svely;
		if(!this.zip_axis) {
			ret.axisx = this.axisx;
			ret.axisy = this.axisy;
		} else ret.invalidate_rot();
		ret.rot = this.rot;
		ret.massMode = this.massMode;
		ret.gravMassMode = this.gravMassMode;
		ret.inertiaMode = this.inertiaMode;
		ret.norotate = this.norotate;
		ret.nomove = this.nomove;
		ret.cmass = this.cmass;
		ret.cinertia = this.cinertia;
		if(!this.zip_mass) ret.mass = this.mass; else ret.invalidate_mass();
		if(!this.zip_gravMass) ret.gravMass = this.gravMass; else ret.invalidate_gravMass();
		if(!this.zip_gravMassScale) ret.gravMassScale = this.gravMassScale; else ret.invalidate_gravMassScale();
		if(!this.zip_inertia) ret.inertia = this.inertia; else ret.invalidate_inertia();
		if(!this.zip_aabb) {
			ret.aabb.minx = this.aabb.minx;
			ret.aabb.miny = this.aabb.miny;
			ret.aabb.maxx = this.aabb.maxx;
			ret.aabb.maxy = this.aabb.maxy;
		} else ret.zip_aabb = true;
		if(!this.zip_localCOM) {
			ret.localCOMx = this.localCOMx;
			ret.localCOMy = this.localCOMy;
		} else {
			ret.zip_localCOM = true;
			ret.zip_worldCOM = true;
		}
		if(!this.zip_worldCOM) {
			ret.worldCOMx = this.worldCOMx;
			ret.worldCOMy = this.worldCOMy;
		} else ret.zip_worldCOM = true;
		this.copyto(ret.outer);
		return ret.outer;
	}
	,__class__: zpp_nape.phys.ZPP_Body
});
zpp_nape.phys.ZPP_Compound = function() {
	this.space = null;
	this.compound = null;
	this.depth = 0;
	this.wrap_compounds = null;
	this.wrap_constraints = null;
	this.wrap_bodies = null;
	this.compounds = null;
	this.constraints = null;
	this.bodies = null;
	this.outer = null;
	zpp_nape.phys.ZPP_Interactor.call(this);
	this.icompound = this;
	this.depth = 1;
	var me = this;
	this.bodies = new zpp_nape.util.ZNPList_ZPP_Body();
	this.wrap_bodies = zpp_nape.util.ZPP_BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.compounds = new zpp_nape.util.ZNPList_ZPP_Compound();
	this.wrap_compounds = zpp_nape.util.ZPP_CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
};
$hxClasses["zpp_nape.phys.ZPP_Compound"] = zpp_nape.phys.ZPP_Compound;
zpp_nape.phys.ZPP_Compound.__name__ = ["zpp_nape","phys","ZPP_Compound"];
zpp_nape.phys.ZPP_Compound.__super__ = zpp_nape.phys.ZPP_Interactor;
zpp_nape.phys.ZPP_Compound.prototype = $extend(zpp_nape.phys.ZPP_Interactor.prototype,{
	__imutable_midstep: function(name) {
	}
	,addedToSpace: function() {
		this.__iaddedToSpace();
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
	}
	,breakApart: function() {
		if(this.space != null) {
			this.__iremovedFromSpace();
			this.space.nullInteractorType(this);
		}
		if(this.compound != null) this.compound.compounds.remove(this); else if(this.space != null) this.space.compounds.remove(this);
		while(!(this.bodies.head == null)) {
			var b = this.bodies.pop_unsafe();
			if((b.compound = this.compound) != null) this.compound.bodies.add(b); else if(this.space != null) this.space.bodies.add(b);
			if(this.space != null) this.space.freshInteractorType(b);
		}
		while(!(this.constraints.head == null)) {
			var c = this.constraints.pop_unsafe();
			if((c.compound = this.compound) != null) this.compound.constraints.add(c); else if(this.space != null) this.space.constraints.add(c);
		}
		while(!(this.compounds.head == null)) {
			var c1 = this.compounds.pop_unsafe();
			if((c1.compound = this.compound) != null) this.compound.compounds.add(c1); else if(this.space != null) this.space.compounds.add(c1);
			if(this.space != null) this.space.freshInteractorType(c1);
		}
		this.compound = null;
		this.space = null;
	}
	,bodies_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_bodies.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_bodies.remove(x);
			x.zpp_inner.compound = this;
			if(this.space != null) this.space.addBody(x.zpp_inner);
			return true;
		} else return false;
	}
	,bodies_subber: function(x) {
		x.zpp_inner.compound = null;
		if(this.space != null) this.space.remBody(x.zpp_inner);
	}
	,constraints_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_constraints.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_constraints.remove(x);
			x.zpp_inner.compound = this;
			if(this.space != null) this.space.addConstraint(x.zpp_inner);
			return true;
		} else return false;
	}
	,constraints_subber: function(x) {
		x.zpp_inner.compound = null;
		if(this.space != null) this.space.remConstraint(x.zpp_inner);
	}
	,compounds_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_compounds.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_compounds.remove(x);
			x.zpp_inner.compound = this;
			x.zpp_inner.depth = this.depth + 1;
			if(this.space != null) this.space.addCompound(x.zpp_inner);
			return true;
		} else return false;
	}
	,compounds_subber: function(x) {
		x.zpp_inner.compound = null;
		x.zpp_inner.depth = 1;
		if(this.space != null) this.space.remCompound(x.zpp_inner);
	}
	,copy: function(dict,todo) {
		var root = dict == null;
		if(dict == null) dict = new Array();
		if(todo == null) todo = new Array();
		var ret = new nape.phys.Compound();
		var cx_ite = this.compounds.head;
		while(cx_ite != null) {
			var c = cx_ite.elt;
			var cc = c.copy(dict,todo);
			cc.zpp_inner.immutable_midstep("Compound::compound");
			if((cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer) != ret) {
				if((cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer) != null) (cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer).zpp_inner.wrap_compounds.remove(cc);
				if(ret != null) ret.zpp_inner.wrap_compounds.add(cc);
			}
			if(cc.zpp_inner.compound == null) null; else cc.zpp_inner.compound.outer;
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.bodies.head;
		while(cx_ite1 != null) {
			var b = cx_ite1.elt;
			var bc = b.outer.copy();
			dict.push(zpp_nape.constraint.ZPP_CopyHelper.dict(b.id,bc));
			if((bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer) != ret) {
				if((bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer) != null) (bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer).zpp_inner.wrap_bodies.remove(bc);
				if(ret != null) ret.zpp_inner.wrap_bodies.add(bc);
			}
			if(bc.zpp_inner.compound == null) null; else bc.zpp_inner.compound.outer;
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = this.constraints.head;
		while(cx_ite2 != null) {
			var c1 = cx_ite2.elt;
			var cc1 = c1.copy(dict,todo);
			if((cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer) != ret) {
				if((cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer) != null) (cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer).zpp_inner.wrap_constraints.remove(cc1);
				if(ret != null) ret.zpp_inner.wrap_constraints.add(cc1);
			}
			if(cc1.zpp_inner.compound == null) null; else cc1.zpp_inner.compound.outer;
			cx_ite2 = cx_ite2.next;
		}
		if(root) while(todo.length > 0) {
			var xcb = todo.pop();
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == xcb.id) {
					xcb.cb(idc.bc);
					break;
				}
			}
		}
		this.copyto(ret);
		return ret;
	}
	,__class__: zpp_nape.phys.ZPP_Compound
});
zpp_nape.phys.ZPP_FluidProperties = function() {
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.density = 0.0;
	this.viscosity = 0.0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.density = this.viscosity = 1;
	this.wrap_gravity = null;
	this.gravityx = 0;
	this.gravityy = 0;
};
$hxClasses["zpp_nape.phys.ZPP_FluidProperties"] = zpp_nape.phys.ZPP_FluidProperties;
zpp_nape.phys.ZPP_FluidProperties.__name__ = ["zpp_nape","phys","ZPP_FluidProperties"];
zpp_nape.phys.ZPP_FluidProperties.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.phys.FluidProperties();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_nape.phys.ZPP_FluidProperties.zpp_pool;
			zpp_nape.phys.ZPP_FluidProperties.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,free: function() {
		this.outer = null;
	}
	,alloc: function() {
	}
	,feature_cons: function() {
		this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,copy: function() {
		var ret;
		if(zpp_nape.phys.ZPP_FluidProperties.zpp_pool == null) ret = new zpp_nape.phys.ZPP_FluidProperties(); else {
			ret = zpp_nape.phys.ZPP_FluidProperties.zpp_pool;
			zpp_nape.phys.ZPP_FluidProperties.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.viscosity = this.viscosity;
		ret.density = this.density;
		return ret;
	}
	,gravity_invalidate: function(x) {
		this.gravityx = x.x;
		this.gravityy = x.y;
		this.invalidate();
	}
	,gravity_validate: function() {
		this.wrap_gravity.zpp_inner.x = this.gravityx;
		this.wrap_gravity.zpp_inner.y = this.gravityy;
	}
	,getgravity: function() {
		this.wrap_gravity = nape.geom.Vec2.get(this.gravityx,this.gravityy,null);
		this.wrap_gravity.zpp_inner._inuse = true;
		this.wrap_gravity.zpp_inner._invalidate = $bind(this,this.gravity_invalidate);
		this.wrap_gravity.zpp_inner._validate = $bind(this,this.gravity_validate);
	}
	,invalidate: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			shape.invalidate_fluidprops();
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_nape.phys.ZPP_FluidProperties
};
zpp_nape.phys.ZPP_Material = function() {
	this.rollingFriction = 0.0;
	this.elasticity = 0.0;
	this.density = 0.0;
	this.staticFriction = 0.0;
	this.dynamicFriction = 0.0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.elasticity = 0;
	this.dynamicFriction = 1;
	this.staticFriction = 2;
	this.density = 0.001;
	this.rollingFriction = 0.01;
};
$hxClasses["zpp_nape.phys.ZPP_Material"] = zpp_nape.phys.ZPP_Material;
zpp_nape.phys.ZPP_Material.__name__ = ["zpp_nape","phys","ZPP_Material"];
zpp_nape.phys.ZPP_Material.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.phys.Material();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_nape.phys.ZPP_Material.zpp_pool;
			zpp_nape.phys.ZPP_Material.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,free: function() {
		this.outer = null;
	}
	,alloc: function() {
	}
	,feature_cons: function() {
		this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,copy: function() {
		var ret = new zpp_nape.phys.ZPP_Material();
		ret.dynamicFriction = this.dynamicFriction;
		ret.staticFriction = this.staticFriction;
		ret.density = this.density;
		ret.elasticity = this.elasticity;
		ret.rollingFriction = this.rollingFriction;
		return ret;
	}
	,set: function(x) {
		this.dynamicFriction = x.dynamicFriction;
		this.staticFriction = x.staticFriction;
		this.density = x.density;
		this.elasticity = x.elasticity;
		this.rollingFriction = x.rollingFriction;
	}
	,invalidate: function(x) {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.invalidate_material(x);
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_nape.phys.ZPP_Material
};
zpp_nape.shape = {};
zpp_nape.shape.ZPP_Shape = function(type) {
	this.zip_aabb = false;
	this.aabb = null;
	this.pairs = null;
	this.node = null;
	this.sweep = null;
	this.sensorEnabled = false;
	this.fluidEnabled = false;
	this.fluidProperties = null;
	this.filter = null;
	this.material = null;
	this.refmaterial = null;
	this.polygon = null;
	this.circle = null;
	this.sweepCoef = 0.0;
	this.zip_sweepRadius = false;
	this.sweepRadius = 0.0;
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_angDrag = false;
	this.angDrag = 0.0;
	this.inertia = 0.0;
	this.zip_area_inertia = false;
	this.area = 0.0;
	this.type = 0;
	this.body = null;
	this.outer = null;
	zpp_nape.phys.ZPP_Interactor.call(this);
	this.pairs = new zpp_nape.util.ZNPList_ZPP_AABBPair();
	this.ishape = this;
	this.type = type;
	this.aabb = zpp_nape.geom.ZPP_AABB.get(0,0,0,0);
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.zip_area_inertia = this.zip_angDrag = this.zip_localCOM = this.zip_sweepRadius = true;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.fluidEnabled = false;
	this.sensorEnabled = false;
	this.fluidProperties = null;
	this.body = null;
	this.refmaterial = new zpp_nape.phys.ZPP_Material();
	this.sweepRadius = this.sweepCoef = 0;
};
$hxClasses["zpp_nape.shape.ZPP_Shape"] = zpp_nape.shape.ZPP_Shape;
zpp_nape.shape.ZPP_Shape.__name__ = ["zpp_nape","shape","ZPP_Shape"];
zpp_nape.shape.ZPP_Shape.__super__ = zpp_nape.phys.ZPP_Interactor;
zpp_nape.shape.ZPP_Shape.prototype = $extend(zpp_nape.phys.ZPP_Interactor.prototype,{
	isCircle: function() {
		return this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE;
	}
	,isPolygon: function() {
		return this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON;
	}
	,invalidate_sweepRadius: function() {
		this.zip_sweepRadius = true;
	}
	,validate_sweepRadius: function() {
		if(this.zip_sweepRadius) {
			this.zip_sweepRadius = false;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_sweepRadius(); else this.polygon.__validate_sweepRadius();
		}
	}
	,clear: function() {
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__clear(); else this.polygon.__clear();
	}
	,validate_aabb: function() {
		if(this.zip_aabb) {
			if(this.body != null) {
				this.zip_aabb = false;
				if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_aabb(); else this.polygon.__validate_aabb();
			}
		}
	}
	,force_validate_aabb: function() {
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle._force_validate_aabb(); else this.polygon._force_validate_aabb();
	}
	,invalidate_aabb: function() {
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
	,validate_area_inertia: function() {
		if(this.zip_area_inertia) {
			this.zip_area_inertia = false;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_area_inertia(); else this.polygon.__validate_area_inertia();
		}
	}
	,validate_angDrag: function() {
		if(this.zip_angDrag || this.refmaterial.dynamicFriction != this.material.dynamicFriction) {
			this.zip_angDrag = false;
			this.refmaterial.dynamicFriction = this.material.dynamicFriction;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_angDrag(); else this.polygon.__validate_angDrag();
		}
	}
	,validate_localCOM: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
	}
	,validate_worldCOM: function() {
		if(this.zip_worldCOM) {
			if(this.body != null) {
				this.zip_worldCOM = false;
				if(this.zip_localCOM) {
					this.zip_localCOM = false;
					if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
					if(this.wrap_localCOM != null) {
						this.wrap_localCOM.zpp_inner.x = this.localCOMx;
						this.wrap_localCOM.zpp_inner.y = this.localCOMy;
					}
				}
				this.body.validate_axis();
				this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
				this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			}
		}
	}
	,getworldCOM: function() {
		if(this.zip_worldCOM) {
			if(this.body != null) {
				this.zip_worldCOM = false;
				if(this.zip_localCOM) {
					this.zip_localCOM = false;
					if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
					if(this.wrap_localCOM != null) {
						this.wrap_localCOM.zpp_inner.x = this.localCOMx;
						this.wrap_localCOM.zpp_inner.y = this.localCOMy;
					}
				}
				this.body.validate_axis();
				this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
				this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			}
		}
		this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
		this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
	}
	,invalidate_area_inertia: function() {
		this.zip_area_inertia = true;
		if(this.body != null) {
			this.body.invalidate_localCOM();
			this.body.invalidate_mass();
			this.body.invalidate_inertia();
		}
	}
	,invalidate_angDrag: function() {
		this.zip_angDrag = true;
	}
	,invalidate_localCOM: function() {
		this.zip_localCOM = true;
		this.invalidate_area_inertia();
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zip_sweepRadius = true;
		this.invalidate_angDrag();
		this.invalidate_worldCOM();
		if(this.body != null) this.body.invalidate_localCOM();
	}
	,invalidate_worldCOM: function() {
		this.zip_worldCOM = true;
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
	,invalidate_material: function(flags) {
		if((flags & zpp_nape.phys.ZPP_Material.WAKE) != 0) this.wake();
		if((flags & zpp_nape.phys.ZPP_Material.ARBITERS) != 0) {
			if(this.body != null) this.body.refreshArbiters();
		}
		if((flags & zpp_nape.phys.ZPP_Material.PROPS) != 0) {
			if(this.body != null) {
				this.body.invalidate_localCOM();
				this.body.invalidate_mass();
				this.body.invalidate_inertia();
			}
		}
		if((flags & zpp_nape.phys.ZPP_Material.ANGDRAG) != 0) this.invalidate_angDrag();
		this.refmaterial.set(this.material);
	}
	,invalidate_filter: function() {
		this.wake();
	}
	,invalidate_fluidprops: function() {
		if(this.fluidEnabled) this.wake();
	}
	,aabb_validate: function() {
		if(this.zip_aabb) {
			if(this.body != null) {
				this.zip_aabb = false;
				if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_aabb(); else this.polygon.__validate_aabb();
			}
		}
	}
	,setMaterial: function(material) {
		if(this.material != material) {
			if(this.body != null && this.body.space != null) {
				if(this.material != null) this.material.shapes.remove(this);
			}
			this.material = material;
			if(this.body != null && this.body.space != null) material.shapes.add(this);
			this.wake();
			if(this.body != null) this.body.refreshArbiters();
		}
	}
	,setFilter: function(filter) {
		if(this.filter != filter) {
			if(this.body != null && this.body.space != null) {
				if(this.filter != null) this.filter.shapes.remove(this);
			}
			this.filter = filter;
			if(this.body != null && this.body.space != null) filter.shapes.add(this);
			this.wake();
		}
	}
	,setFluid: function(fluid) {
		if(this.fluidProperties != fluid) {
			if(this.body != null && this.body.space != null) {
				if(this.fluidProperties != null) this.fluidProperties.shapes.remove(this);
			}
			this.fluidProperties = fluid;
			if(this.body != null && this.body.space != null) fluid.shapes.add(this);
			if(this.fluidEnabled) this.wake();
		}
	}
	,__immutable_midstep: function(name) {
	}
	,addedToBody: function() {
		this.invalidate_worldCOM();
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
	,removedFromBody: function() {
	}
	,addedToSpace: function() {
		this.__iaddedToSpace();
		this.material.shapes.add(this);
		this.filter.shapes.add(this);
		if(this.fluidProperties != null) this.fluidProperties.shapes.add(this);
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
		this.material.shapes.remove(this);
		this.filter.shapes.remove(this);
		if(this.fluidProperties != null) this.fluidProperties.shapes.remove(this);
	}
	,copy: function() {
		var ret = null;
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ret = this.circle.__copy(); else ret = this.polygon.__copy();
		if(!this.zip_area_inertia) {
			ret.area = this.area;
			ret.inertia = this.inertia;
		} else ret.invalidate_area_inertia();
		if(!this.zip_sweepRadius) {
			ret.sweepRadius = this.sweepRadius;
			ret.sweepCoef = this.sweepCoef;
		} else ret.zip_sweepRadius = true;
		if(!this.zip_angDrag) ret.angDrag = this.angDrag; else ret.invalidate_angDrag();
		if(!this.zip_aabb) {
			ret.aabb.minx = this.aabb.minx;
			ret.aabb.miny = this.aabb.miny;
			ret.aabb.maxx = this.aabb.maxx;
			ret.aabb.maxy = this.aabb.maxy;
		} else {
			ret.zip_aabb = true;
			if(ret.body != null) ret.body.zip_aabb = true;
		}
		var o = ret.material;
		o.outer = null;
		o.next = zpp_nape.phys.ZPP_Material.zpp_pool;
		zpp_nape.phys.ZPP_Material.zpp_pool = o;
		var o1 = ret.filter;
		o1.outer = null;
		o1.next = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = o1;
		ret.material = this.material;
		ret.filter = this.filter;
		if(this.fluidProperties != null) ret.fluidProperties = this.fluidProperties;
		ret.fluidEnabled = this.fluidEnabled;
		ret.sensorEnabled = this.sensorEnabled;
		if(this.userData != null) ret.userData = Reflect.copy(this.userData);
		this.copyto(ret.outer);
		return ret.outer;
	}
	,__class__: zpp_nape.shape.ZPP_Shape
});
zpp_nape.shape.ZPP_Circle = function() {
	this.radius = 0.0;
	this.outer_zn = null;
	zpp_nape.shape.ZPP_Shape.call(this,zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE);
	this.circle = this;
	this.zip_localCOM = false;
};
$hxClasses["zpp_nape.shape.ZPP_Circle"] = zpp_nape.shape.ZPP_Circle;
zpp_nape.shape.ZPP_Circle.__name__ = ["zpp_nape","shape","ZPP_Circle"];
zpp_nape.shape.ZPP_Circle.__super__ = zpp_nape.shape.ZPP_Shape;
zpp_nape.shape.ZPP_Circle.prototype = $extend(zpp_nape.shape.ZPP_Shape.prototype,{
	__clear: function() {
	}
	,invalidate_radius: function() {
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
		if(this.body != null) this.body.wake();
	}
	,localCOM_validate: function() {
		this.wrap_localCOM.zpp_inner.x = this.localCOMx;
		this.wrap_localCOM.zpp_inner.y = this.localCOMy;
	}
	,localCOM_invalidate: function(x) {
		this.localCOMx = x.x;
		this.localCOMy = x.y;
		this.invalidate_localCOM();
		if(this.body != null) this.body.wake();
	}
	,setupLocalCOM: function() {
		var me = this;
		this.wrap_localCOM = nape.geom.Vec2.get(this.localCOMx,this.localCOMy,null);
		this.wrap_localCOM.zpp_inner._inuse = true;
		this.wrap_localCOM.zpp_inner._validate = $bind(this,this.localCOM_validate);
		this.wrap_localCOM.zpp_inner._invalidate = $bind(this,this.localCOM_invalidate);
	}
	,__validate_aabb: function() {
		if(this.zip_worldCOM) {
			if(this.body != null) {
				this.zip_worldCOM = false;
				if(this.zip_localCOM) {
					this.zip_localCOM = false;
					if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
					if(this.wrap_localCOM != null) {
						this.wrap_localCOM.zpp_inner.x = this.localCOMx;
						this.wrap_localCOM.zpp_inner.y = this.localCOMy;
					}
				}
				this.body.validate_axis();
				this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
				this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			}
		}
		var rx = this.radius;
		var ry = this.radius;
		this.aabb.minx = this.worldCOMx - rx;
		this.aabb.miny = this.worldCOMy - ry;
		this.aabb.maxx = this.worldCOMx + rx;
		this.aabb.maxy = this.worldCOMy + ry;
	}
	,_force_validate_aabb: function() {
		this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
		this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
		this.aabb.minx = this.worldCOMx - this.radius;
		this.aabb.miny = this.worldCOMy - this.radius;
		this.aabb.maxx = this.worldCOMx + this.radius;
		this.aabb.maxy = this.worldCOMy + this.radius;
	}
	,__validate_sweepRadius: function() {
		this.sweepCoef = Math.sqrt(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
		this.sweepRadius = this.sweepCoef + this.radius;
	}
	,__validate_area_inertia: function() {
		var r2 = this.radius * this.radius;
		this.area = r2 * Math.PI;
		this.inertia = r2 * 0.5 + (this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
	}
	,__validate_angDrag: function() {
		var lc = this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy;
		var r2 = this.radius * this.radius;
		var skin = this.material.dynamicFriction * nape.Config.fluidAngularDragFriction;
		this.angDrag = (lc + 2 * r2) * skin + 0.5 * nape.Config.fluidAngularDrag * (1 + nape.Config.fluidVacuumDrag) * lc;
		this.angDrag /= 2 * (lc + 0.5 * r2);
	}
	,__scale: function(sx,sy) {
		var factor;
		factor = ((sx < 0?-sx:sx) + (sy < 0?-sy:sy)) / 2;
		if(factor < 0) this.radius *= -factor; else this.radius *= factor;
		this.invalidate_radius();
		if(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy > 0) {
			this.localCOMx *= sx;
			this.localCOMy *= sy;
			this.invalidate_localCOM();
		}
	}
	,__translate: function(x,y) {
		var t = 1.0;
		this.localCOMx += x * t;
		this.localCOMy += y * t;
		this.invalidate_localCOM();
	}
	,__rotate: function(x,y) {
		if(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy > 0) {
			var tx = 0.0;
			var ty = 0.0;
			tx = y * this.localCOMx - x * this.localCOMy;
			ty = this.localCOMx * x + this.localCOMy * y;
			this.localCOMx = tx;
			this.localCOMy = ty;
			this.invalidate_localCOM();
		}
	}
	,__transform: function(m) {
		var det = m.zpp_inner.a * m.zpp_inner.d - m.zpp_inner.b * m.zpp_inner.c;
		if(det < 0) det = -det;
		this.radius *= Math.sqrt(det);
		var t = m.zpp_inner.a * this.localCOMx + m.zpp_inner.b * this.localCOMy + m.zpp_inner.tx;
		this.localCOMy = m.zpp_inner.c * this.localCOMx + m.zpp_inner.d * this.localCOMy + m.zpp_inner.ty;
		this.localCOMx = t;
		this.invalidate_radius();
		this.invalidate_localCOM();
	}
	,__copy: function() {
		var ret = new nape.shape.Circle(this.radius).zpp_inner_zn;
		ret.localCOMx = this.localCOMx;
		ret.localCOMy = this.localCOMy;
		ret.zip_localCOM = false;
		return ret;
	}
	,__class__: zpp_nape.shape.ZPP_Circle
});
zpp_nape.shape.ZPP_Edge = function() {
	this.tp1 = 0.0;
	this.tp0 = 0.0;
	this.gp1 = null;
	this.lp1 = null;
	this.gp0 = null;
	this.lp0 = null;
	this.gprojection = 0.0;
	this.lprojection = 0.0;
	this.length = 0.0;
	this.wrap_gnorm = null;
	this.gnormy = 0.0;
	this.gnormx = 0.0;
	this.wrap_lnorm = null;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.outer = null;
	this.polygon = null;
	this.next = null;
	this.lnormx = 0;
	this.lnormy = 0;
	this.gnormx = 0;
	this.gnormy = 0;
	this.length = 0;
	this.lprojection = 0;
	this.gprojection = 0;
};
$hxClasses["zpp_nape.shape.ZPP_Edge"] = zpp_nape.shape.ZPP_Edge;
zpp_nape.shape.ZPP_Edge.__name__ = ["zpp_nape","shape","ZPP_Edge"];
zpp_nape.shape.ZPP_Edge.prototype = {
	free: function() {
		this.polygon = null;
	}
	,alloc: function() {
	}
	,wrapper: function() {
		if(this.outer == null) {
			zpp_nape.shape.ZPP_Edge.internal = true;
			this.outer = new nape.shape.Edge();
			zpp_nape.shape.ZPP_Edge.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,lnorm_validate: function() {
		this.polygon.validate_laxi();
		this.wrap_lnorm.zpp_inner.x = this.lnormx;
		this.wrap_lnorm.zpp_inner.y = this.lnormy;
	}
	,gnorm_validate: function() {
		this.polygon.validate_gaxi();
		this.wrap_gnorm.zpp_inner.x = this.gnormx;
		this.wrap_gnorm.zpp_inner.y = this.gnormy;
	}
	,getlnorm: function() {
		this.wrap_lnorm = nape.geom.Vec2.get(this.lnormx,this.lnormy,null);
		this.wrap_lnorm.zpp_inner._immutable = true;
		this.wrap_lnorm.zpp_inner._validate = $bind(this,this.lnorm_validate);
	}
	,getgnorm: function() {
		this.wrap_gnorm = nape.geom.Vec2.get(this.gnormx,this.gnormy,null);
		this.wrap_gnorm.zpp_inner._immutable = true;
		this.wrap_gnorm.zpp_inner._validate = $bind(this,this.gnorm_validate);
	}
	,__class__: zpp_nape.shape.ZPP_Edge
};
zpp_nape.shape.ZPP_Polygon = function() {
	this.zip_sanitation = false;
	this.zip_valid = false;
	this.zip_gaxi = false;
	this.zip_gverts = false;
	this.zip_laxi = false;
	this.zip_lverts = false;
	this.reverse_flag = false;
	this.edgeCnt = 0;
	this.wrap_edges = null;
	this.edges = null;
	this.wrap_gverts = null;
	this.gverts = null;
	this.wrap_lverts = null;
	this.lverts = null;
	this.outer_zn = null;
	zpp_nape.shape.ZPP_Shape.call(this,zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON);
	this.polygon = this;
	this.lverts = new zpp_nape.geom.ZPP_Vec2();
	this.gverts = new zpp_nape.geom.ZPP_Vec2();
	this.edges = new zpp_nape.util.ZNPList_ZPP_Edge();
	this.edgeCnt = 0;
};
$hxClasses["zpp_nape.shape.ZPP_Polygon"] = zpp_nape.shape.ZPP_Polygon;
zpp_nape.shape.ZPP_Polygon.__name__ = ["zpp_nape","shape","ZPP_Polygon"];
zpp_nape.shape.ZPP_Polygon.__super__ = zpp_nape.shape.ZPP_Shape;
zpp_nape.shape.ZPP_Polygon.prototype = $extend(zpp_nape.shape.ZPP_Shape.prototype,{
	__clear: function() {
	}
	,lverts_pa_invalidate: function(x) {
		this.invalidate_lverts();
	}
	,gverts_pa_validate: function() {
		this.validate_gverts();
	}
	,lverts_post_adder: function(x) {
		x.zpp_inner._invalidate = $bind(this,this.lverts_pa_invalidate);
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i == x.zpp_inner) break; else {
				if(ite == null) ite = this.gverts.next; else ite = ite.next;
				if(ite2 == null) ite2 = this.edges.head; else ite2 = ite2.next;
			}
			cx_ite = cx_ite.next;
		}
		var vec = zpp_nape.geom.ZPP_Vec2.get(0,0,true);
		this.gverts.insert(ite,vec);
		if(this.lverts.next.next != null) {
			if(this.lverts.next.next.next == null) {
				var ed;
				if(zpp_nape.shape.ZPP_Edge.zpp_pool == null) ed = new zpp_nape.shape.ZPP_Edge(); else {
					ed = zpp_nape.shape.ZPP_Edge.zpp_pool;
					zpp_nape.shape.ZPP_Edge.zpp_pool = ed.next;
					ed.next = null;
				}
				null;
				ed.polygon = this;
				this.edges.add(ed);
				var ed1;
				if(zpp_nape.shape.ZPP_Edge.zpp_pool == null) ed1 = new zpp_nape.shape.ZPP_Edge(); else {
					ed1 = zpp_nape.shape.ZPP_Edge.zpp_pool;
					zpp_nape.shape.ZPP_Edge.zpp_pool = ed1.next;
					ed1.next = null;
				}
				null;
				ed1.polygon = this;
				this.edges.add(ed1);
				this.edgeCnt += 2;
			} else {
				var ed2;
				if(zpp_nape.shape.ZPP_Edge.zpp_pool == null) ed2 = new zpp_nape.shape.ZPP_Edge(); else {
					ed2 = zpp_nape.shape.ZPP_Edge.zpp_pool;
					zpp_nape.shape.ZPP_Edge.zpp_pool = ed2.next;
					ed2.next = null;
				}
				null;
				ed2.polygon = this;
				this.edges.insert(ite2,ed2);
				this.edgeCnt++;
			}
		}
		vec._validate = $bind(this,this.gverts_pa_validate);
	}
	,lverts_subber: function(x) {
		this.cleanup_lvert(x.zpp_inner);
	}
	,lverts_invalidate: function(_) {
		this.invalidate_lverts();
	}
	,lverts_validate: function() {
		this.validate_lverts();
	}
	,gverts_validate: function() {
		this.validate_gverts();
	}
	,edges_validate: function() {
		this.validate_lverts();
	}
	,getlverts: function() {
		var me = this;
		this.wrap_lverts = zpp_nape.util.ZPP_MixVec2List.get(this.lverts);
		this.wrap_lverts.zpp_inner.post_adder = $bind(this,this.lverts_post_adder);
		this.wrap_lverts.zpp_inner.subber = $bind(this,this.lverts_subber);
		this.wrap_lverts.zpp_inner._invalidate = $bind(this,this.lverts_invalidate);
		this.wrap_lverts.zpp_inner._validate = $bind(this,this.lverts_validate);
		this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
	}
	,getgverts: function() {
		var me = this;
		this.wrap_gverts = zpp_nape.util.ZPP_MixVec2List.get(this.gverts,true);
		this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
		this.wrap_gverts.zpp_inner._validate = $bind(this,this.gverts_validate);
	}
	,getedges: function() {
		var me = this;
		this.wrap_edges = zpp_nape.util.ZPP_EdgeList.get(this.edges,true);
		this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
		this.wrap_edges.zpp_inner._validate = $bind(this,this.edges_validate);
	}
	,invalidate_lverts: function() {
		this.invalidate_laxi();
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.invalidate_localCOM();
		this.invalidate_gverts();
		this.zip_lverts = true;
		this.zip_valid = true;
		this.zip_sanitation = true;
		if(this.body != null) this.body.wake();
	}
	,invalidate_laxi: function() {
		this.invalidate_gaxi();
		this.zip_sweepRadius = true;
		this.zip_laxi = true;
	}
	,invalidate_gverts: function() {
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
		this.zip_gverts = true;
	}
	,invalidate_gaxi: function() {
		this.zip_gaxi = true;
	}
	,valid: function() {
		if(this.zip_valid) {
			this.zip_valid = false;
			if(this.zip_sanitation) {
				this.zip_sanitation = false;
				this.splice_collinear_real();
			}
			if(this.lverts.length < 3) return (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = $this.validation = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
				return $r;
			}(this)); else {
				this.validate_lverts();
				this.validate_area_inertia();
				if(this.area < nape.Config.epsilon) return (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = $this.validation = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
					return $r;
				}(this)); else {
					var neg = false;
					var pos = false;
					var cx_cont = true;
					var cx_ite = this.lverts.next;
					var u = cx_ite;
					cx_ite = cx_ite.next;
					var v = cx_ite;
					cx_ite = cx_ite.next;
					while(cx_ite != null) {
						var w = cx_ite;
						var ax = 0.0;
						var ay = 0.0;
						ax = w.x - v.x;
						ay = w.y - v.y;
						var bx = 0.0;
						var by = 0.0;
						bx = v.x - u.x;
						by = v.y - u.y;
						var dot = by * ax - bx * ay;
						if(dot > nape.Config.epsilon) pos = true; else if(dot < -nape.Config.epsilon) neg = true;
						if(pos && neg) {
							cx_cont = false;
							break;
						}
						u = v;
						v = w;
						cx_ite = cx_ite.next;
					}
					if(cx_cont) {
						cx_ite = this.lverts.next;
						var w1 = cx_ite;
						do {
							var ax1 = 0.0;
							var ay1 = 0.0;
							ax1 = w1.x - v.x;
							ay1 = w1.y - v.y;
							var bx1 = 0.0;
							var by1 = 0.0;
							bx1 = v.x - u.x;
							by1 = v.y - u.y;
							var dot1 = by1 * ax1 - bx1 * ay1;
							if(dot1 > nape.Config.epsilon) pos = true; else if(dot1 < -nape.Config.epsilon) neg = true;
							if(pos && neg) {
								cx_cont = false;
								break;
							}
						} while(false);
						if(cx_cont) {
							u = v;
							v = w1;
							cx_ite = cx_ite.next;
							var w2 = cx_ite;
							do {
								var ax2 = 0.0;
								var ay2 = 0.0;
								ax2 = w2.x - v.x;
								ay2 = w2.y - v.y;
								var bx2 = 0.0;
								var by2 = 0.0;
								bx2 = v.x - u.x;
								by2 = v.y - u.y;
								var dot2 = by2 * ax2 - bx2 * ay2;
								if(dot2 > nape.Config.epsilon) pos = true; else if(dot2 < -nape.Config.epsilon) neg = true;
								if(pos && neg) break;
							} while(false);
						}
					}
					if(pos && neg) return (function($this) {
						var $r;
						if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
							zpp_nape.util.ZPP_Flags.internal = true;
							zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
							zpp_nape.util.ZPP_Flags.internal = false;
						}
						$r = $this.validation = zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
						return $r;
					}(this)); else {
						var cont = true;
						var cx_cont1 = true;
						var cx_ite1 = this.lverts.next;
						var u1 = cx_ite1;
						cx_ite1 = cx_ite1.next;
						while(cx_ite1 != null) {
							var v1 = cx_ite1;
							if(!cont) {
								cx_cont1 = false;
								break;
							}
							var cx_cont2 = true;
							var cx_ite2 = this.lverts.next;
							var a = cx_ite2;
							cx_ite2 = cx_ite2.next;
							while(cx_ite2 != null) {
								var b = cx_ite2;
								if(u1 == a || u1 == b || v1 == a || v1 == b) {
									a = b;
									cx_ite2 = cx_ite2.next;
									continue;
								}
								var sx = 0.0;
								var sy = 0.0;
								sx = u1.x - a.x;
								sy = u1.y - a.y;
								var vx = 0.0;
								var vy = 0.0;
								vx = v1.x - u1.x;
								vy = v1.y - u1.y;
								var qx = 0.0;
								var qy = 0.0;
								qx = b.x - a.x;
								qy = b.y - a.y;
								var den = vy * qx - vx * qy;
								if(den * den > nape.Config.epsilon) {
									den = 1 / den;
									var t = (qy * sx - qx * sy) * den;
									if(t > nape.Config.epsilon && t < 1 - nape.Config.epsilon) {
										var s = (vy * sx - vx * sy) * den;
										if(s > nape.Config.epsilon && s < 1 - nape.Config.epsilon) {
											cont = false;
											cx_cont2 = false;
											break;
										}
									}
								}
								a = b;
								cx_ite2 = cx_ite2.next;
							}
							if(cx_cont2) do {
								var b1 = this.lverts.next;
								if(u1 == a || u1 == b1 || v1 == a || v1 == b1) break;
								var sx1 = 0.0;
								var sy1 = 0.0;
								sx1 = u1.x - a.x;
								sy1 = u1.y - a.y;
								var vx1 = 0.0;
								var vy1 = 0.0;
								vx1 = v1.x - u1.x;
								vy1 = v1.y - u1.y;
								var qx1 = 0.0;
								var qy1 = 0.0;
								qx1 = b1.x - a.x;
								qy1 = b1.y - a.y;
								var den1 = vy1 * qx1 - vx1 * qy1;
								if(den1 * den1 > nape.Config.epsilon) {
									den1 = 1 / den1;
									var t1 = (qy1 * sx1 - qx1 * sy1) * den1;
									if(t1 > nape.Config.epsilon && t1 < 1 - nape.Config.epsilon) {
										var s1 = (vy1 * sx1 - vx1 * sy1) * den1;
										if(s1 > nape.Config.epsilon && s1 < 1 - nape.Config.epsilon) {
											cont = false;
											break;
										}
									}
								}
							} while(false);
							u1 = v1;
							cx_ite1 = cx_ite1.next;
						}
						if(cx_cont1) do {
							var v2 = this.lverts.next;
							if(!cont) break;
							var cx_cont3 = true;
							var cx_ite3 = this.lverts.next;
							var a1 = cx_ite3;
							cx_ite3 = cx_ite3.next;
							while(cx_ite3 != null) {
								var b2 = cx_ite3;
								if(u1 == a1 || u1 == b2 || v2 == a1 || v2 == b2) {
									a1 = b2;
									cx_ite3 = cx_ite3.next;
									continue;
								}
								var sx2 = 0.0;
								var sy2 = 0.0;
								sx2 = u1.x - a1.x;
								sy2 = u1.y - a1.y;
								var vx2 = 0.0;
								var vy2 = 0.0;
								vx2 = v2.x - u1.x;
								vy2 = v2.y - u1.y;
								var qx2 = 0.0;
								var qy2 = 0.0;
								qx2 = b2.x - a1.x;
								qy2 = b2.y - a1.y;
								var den2 = vy2 * qx2 - vx2 * qy2;
								if(den2 * den2 > nape.Config.epsilon) {
									den2 = 1 / den2;
									var t2 = (qy2 * sx2 - qx2 * sy2) * den2;
									if(t2 > nape.Config.epsilon && t2 < 1 - nape.Config.epsilon) {
										var s2 = (vy2 * sx2 - vx2 * sy2) * den2;
										if(s2 > nape.Config.epsilon && s2 < 1 - nape.Config.epsilon) {
											cont = false;
											cx_cont3 = false;
											break;
										}
									}
								}
								a1 = b2;
								cx_ite3 = cx_ite3.next;
							}
							if(cx_cont3) do {
								var b3 = this.lverts.next;
								if(u1 == a1 || u1 == b3 || v2 == a1 || v2 == b3) break;
								var sx3 = 0.0;
								var sy3 = 0.0;
								sx3 = u1.x - a1.x;
								sy3 = u1.y - a1.y;
								var vx3 = 0.0;
								var vy3 = 0.0;
								vx3 = v2.x - u1.x;
								vy3 = v2.y - u1.y;
								var qx3 = 0.0;
								var qy3 = 0.0;
								qx3 = b3.x - a1.x;
								qy3 = b3.y - a1.y;
								var den3 = vy3 * qx3 - vx3 * qy3;
								if(den3 * den3 > nape.Config.epsilon) {
									den3 = 1 / den3;
									var t3 = (qy3 * sx3 - qx3 * sy3) * den3;
									if(t3 > nape.Config.epsilon && t3 < 1 - nape.Config.epsilon) {
										var s3 = (vy3 * sx3 - vx3 * sy3) * den3;
										if(s3 > nape.Config.epsilon && s3 < 1 - nape.Config.epsilon) {
											cont = false;
											break;
										}
									}
								}
							} while(false);
						} while(false);
						if(!cont) return (function($this) {
							var $r;
							if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
								zpp_nape.util.ZPP_Flags.internal = true;
								zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
								zpp_nape.util.ZPP_Flags.internal = false;
							}
							$r = $this.validation = zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
							return $r;
						}(this)); else return (function($this) {
							var $r;
							if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
								zpp_nape.util.ZPP_Flags.internal = true;
								zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
								zpp_nape.util.ZPP_Flags.internal = false;
							}
							$r = $this.validation = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
							return $r;
						}(this));
					}
				}
			}
		} else return this.validation;
	}
	,validate_lverts: function() {
		if(this.zip_lverts) {
			this.zip_lverts = false;
			if(this.lverts.length > 2) {
				this.validate_area_inertia();
				if(this.area < 0) {
					this.reverse_vertices();
					this.area = -this.area;
				}
			}
		}
	}
	,cleanup_lvert: function(x) {
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i == x) break; else {
				if(ite == null) ite = this.gverts.next; else ite = ite.next;
				if(ite2 == null) ite2 = this.edges.head; else ite2 = ite2.next;
			}
			cx_ite = cx_ite.next;
		}
		var rem;
		if(ite == null) rem = this.gverts.next; else rem = ite.next;
		this.gverts.erase(ite);
		var o = rem;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		if(this.edgeCnt == 2) {
			var rem1 = this.edges.pop_unsafe();
			var o1 = rem1;
			o1.polygon = null;
			o1.next = zpp_nape.shape.ZPP_Edge.zpp_pool;
			zpp_nape.shape.ZPP_Edge.zpp_pool = o1;
			rem1 = this.edges.pop_unsafe();
			var o2 = rem1;
			o2.polygon = null;
			o2.next = zpp_nape.shape.ZPP_Edge.zpp_pool;
			zpp_nape.shape.ZPP_Edge.zpp_pool = o2;
			this.edgeCnt = 0;
		} else if(this.edgeCnt != 0) {
			var rem2;
			if(ite2 == null) rem2 = this.edges.head.elt; else rem2 = ite2.next.elt;
			this.edges.erase(ite2);
			var o3 = rem2;
			o3.polygon = null;
			o3.next = zpp_nape.shape.ZPP_Edge.zpp_pool;
			zpp_nape.shape.ZPP_Edge.zpp_pool = o3;
			this.edgeCnt--;
		}
	}
	,splice_collinear: function() {
		if(this.zip_sanitation) {
			this.zip_sanitation = false;
			this.splice_collinear_real();
		}
	}
	,splice_collinear_real: function() {
		if(this.lverts.next == null) return;
		if(this.lverts.next.next == null) return;
		if(this.lverts.next.next.next == null) return;
		var pre = null;
		var cur = this.lverts.next;
		while(cur != null) {
			var nxt;
			if(cur.next == null) nxt = this.lverts.next; else nxt = cur.next;
			var u = cur;
			var v = nxt;
			if(zpp_nape.geom.ZPP_VecMath.vec_dsq(u.x,u.y,v.x,v.y) < nape.Config.epsilon * nape.Config.epsilon) {
				this.cleanup_lvert(cur);
				cur = this.lverts.erase(pre);
			} else {
				pre = cur;
				cur = cur.next;
			}
		}
		if(this.lverts.next == null) return;
		var removed;
		do {
			removed = false;
			var pre1 = this.lverts.next;
			while(pre1 != null) {
				var cur1;
				if(pre1.next == null) cur1 = this.lverts.next; else cur1 = pre1.next;
				var nxt1;
				if(cur1.next == null) nxt1 = this.lverts.next; else nxt1 = cur1.next;
				var u1 = pre1;
				var v1 = cur1;
				var w = nxt1;
				var ax = 0.0;
				var ay = 0.0;
				ax = v1.x - u1.x;
				ay = v1.y - u1.y;
				var bx = 0.0;
				var by = 0.0;
				bx = w.x - v1.x;
				by = w.y - v1.y;
				var crs = by * ax - bx * ay;
				if(crs * crs >= nape.Config.epsilon * nape.Config.epsilon) pre1 = pre1.next; else {
					this.cleanup_lvert(cur1);
					this.lverts.erase(pre1.next == null?null:pre1);
					removed = true;
					pre1 = pre1.next;
				}
			}
		} while(removed);
	}
	,reverse_vertices: function() {
		this.lverts.reverse();
		this.gverts.reverse();
		this.edges.reverse();
		var ite = this.edges.iterator_at(this.edgeCnt - 1);
		var elem = this.edges.pop_unsafe();
		this.edges.insert(ite,elem);
		this.reverse_flag = !this.reverse_flag;
		if(this.wrap_lverts != null) this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
		if(this.wrap_gverts != null) this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
		if(this.wrap_edges != null) this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
	}
	,validate_laxi: function() {
		if(this.zip_laxi) {
			this.zip_laxi = false;
			this.validate_lverts();
			var ite = this.edges.head;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var v = cx_ite;
				var edge = ite.elt;
				ite = ite.next;
				edge.lp0 = u;
				edge.lp1 = v;
				var dx = 0.0;
				var dy = 0.0;
				dx = u.x - v.x;
				dy = u.y - v.y;
				var l = Math.sqrt(dx * dx + dy * dy);
				edge.length = l;
				var t = 1.0 / l;
				dx *= t;
				dy *= t;
				var t1 = dx;
				dx = -dy;
				dy = t1;
				edge.lprojection = dx * u.x + dy * u.y;
				edge.lnormx = dx;
				edge.lnormy = dy;
				if(edge.wrap_lnorm != null) {
					edge.wrap_lnorm.zpp_inner.x = dx;
					edge.wrap_lnorm.zpp_inner.y = dy;
				}
				u = v;
				cx_ite = cx_ite.next;
			}
			var v1 = this.lverts.next;
			var edge1 = ite.elt;
			ite = ite.next;
			edge1.lp0 = u;
			edge1.lp1 = v1;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = u.x - v1.x;
			dy1 = u.y - v1.y;
			var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
			edge1.length = l1;
			var t2 = 1.0 / l1;
			dx1 *= t2;
			dy1 *= t2;
			var t3 = dx1;
			dx1 = -dy1;
			dy1 = t3;
			edge1.lprojection = dx1 * u.x + dy1 * u.y;
			edge1.lnormx = dx1;
			edge1.lnormy = dy1;
			if(edge1.wrap_lnorm != null) {
				edge1.wrap_lnorm.zpp_inner.x = dx1;
				edge1.wrap_lnorm.zpp_inner.y = dy1;
			}
		}
	}
	,validate_gverts: function() {
		if(this.zip_gverts) {
			if(this.body != null) {
				this.zip_gverts = false;
				this.validate_lverts();
				this.body.validate_axis();
				var li = this.lverts.next;
				var cx_ite = this.gverts.next;
				while(cx_ite != null) {
					var g = cx_ite;
					var l = li;
					li = li.next;
					g.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
					g.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
					cx_ite = cx_ite.next;
				}
			}
		}
	}
	,validate_gaxi: function() {
		if(this.zip_gaxi) {
			if(this.body != null) {
				this.zip_gaxi = false;
				this.validate_laxi();
				this.body.validate_axis();
				this.validate_gverts();
				var ite = this.edges.head;
				var cx_ite = this.gverts.next;
				var u = cx_ite;
				cx_ite = cx_ite.next;
				while(cx_ite != null) {
					var v = cx_ite;
					var e = ite.elt;
					ite = ite.next;
					e.gp0 = u;
					e.gp1 = v;
					e.gnormx = this.body.axisy * e.lnormx - this.body.axisx * e.lnormy;
					e.gnormy = e.lnormx * this.body.axisx + e.lnormy * this.body.axisy;
					e.gprojection = this.body.posx * e.gnormx + this.body.posy * e.gnormy + e.lprojection;
					if(e.wrap_gnorm != null) {
						e.wrap_gnorm.zpp_inner.x = e.gnormx;
						e.wrap_gnorm.zpp_inner.y = e.gnormy;
					}
					e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
					e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
					u = v;
					cx_ite = cx_ite.next;
				}
				var v1 = this.gverts.next;
				var e1 = ite.elt;
				ite = ite.next;
				e1.gp0 = u;
				e1.gp1 = v1;
				e1.gnormx = this.body.axisy * e1.lnormx - this.body.axisx * e1.lnormy;
				e1.gnormy = e1.lnormx * this.body.axisx + e1.lnormy * this.body.axisy;
				e1.gprojection = this.body.posx * e1.gnormx + this.body.posy * e1.gnormy + e1.lprojection;
				if(e1.wrap_gnorm != null) {
					e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
					e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
				}
				e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
				e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
			}
		}
	}
	,__validate_aabb: function() {
		this.validate_gverts();
		var p0 = this.gverts.next;
		this.aabb.minx = p0.x;
		this.aabb.miny = p0.y;
		this.aabb.maxx = p0.x;
		this.aabb.maxy = p0.y;
		var cx_ite = this.gverts.next.next;
		while(cx_ite != null) {
			var p = cx_ite;
			if(p.x < this.aabb.minx) this.aabb.minx = p.x;
			if(p.x > this.aabb.maxx) this.aabb.maxx = p.x;
			if(p.y < this.aabb.miny) this.aabb.miny = p.y;
			if(p.y > this.aabb.maxy) this.aabb.maxy = p.y;
			cx_ite = cx_ite.next;
		}
	}
	,_force_validate_aabb: function() {
		var li = this.lverts.next;
		var p0 = this.gverts.next;
		var l = li;
		li = li.next;
		p0.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
		p0.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
		this.aabb.minx = p0.x;
		this.aabb.miny = p0.y;
		this.aabb.maxx = p0.x;
		this.aabb.maxy = p0.y;
		var cx_ite = this.gverts.next.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var l1 = li;
			li = li.next;
			p.x = this.body.posx + (this.body.axisy * l1.x - this.body.axisx * l1.y);
			p.y = this.body.posy + (l1.x * this.body.axisx + l1.y * this.body.axisy);
			if(p.x < this.aabb.minx) this.aabb.minx = p.x;
			if(p.x > this.aabb.maxx) this.aabb.maxx = p.x;
			if(p.y < this.aabb.miny) this.aabb.miny = p.y;
			if(p.y > this.aabb.maxy) this.aabb.maxy = p.y;
			cx_ite = cx_ite.next;
		}
	}
	,__validate_sweepRadius: function() {
		var maxRadius = 0.0;
		var minRadius = 0.0;
		this.validate_laxi();
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var x = cx_ite;
			var r = x.x * x.x + x.y * x.y;
			if(r > maxRadius) maxRadius = r;
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.edges.head;
		while(cx_ite1 != null) {
			var e = cx_ite1.elt;
			if(e.lprojection < minRadius) {
				minRadius = e.lprojection;
				if(minRadius < 0) break;
			}
			cx_ite1 = cx_ite1.next;
		}
		if(minRadius < 0) minRadius = 0;
		this.sweepRadius = Math.sqrt(maxRadius);
		this.sweepCoef = this.sweepRadius - minRadius;
	}
	,__validate_area_inertia: function() {
		if(this.lverts.next == null || this.lverts.next.next == null || this.lverts.next.next.next == null) {
			this.area = 0;
			this.inertia = 0;
		} else {
			this.area = 0.0;
			var s1 = 0.0;
			var s2 = 0.0;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			var v = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var w = cx_ite;
				var a = v.y * u.x - v.x * u.y;
				var b = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
				s1 += a * b;
				s2 += a;
				this.area += v.x * (w.y - u.y);
				u = v;
				v = w;
				cx_ite = cx_ite.next;
			}
			cx_ite = this.lverts.next;
			var w1 = cx_ite;
			var a1 = v.y * u.x - v.x * u.y;
			var b1 = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a1 * b1;
			s2 += a1;
			this.area += v.x * (w1.y - u.y);
			u = v;
			v = w1;
			cx_ite = cx_ite.next;
			var w2 = cx_ite;
			var a2 = v.y * u.x - v.x * u.y;
			var b2 = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a2 * b2;
			s2 += a2;
			this.area += v.x * (w2.y - u.y);
			this.inertia = s1 / (6 * s2);
			this.area *= 0.5;
			if(this.area < 0) {
				this.area = -this.area;
				this.reverse_vertices();
			}
		}
	}
	,__validate_angDrag: function() {
		this.validate_area_inertia();
		this.validate_laxi();
		var accum = 0.0;
		var ei = this.edges.head;
		var perim = 0.0;
		var cx_cont = true;
		var cx_itei = this.lverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var edge = ei.elt;
			ei = ei.next;
			perim += edge.length;
			var dx = 0.0;
			var dy = 0.0;
			dx = v.x - u.x;
			dy = v.y - u.y;
			accum += edge.length * nape.Config.fluidAngularDragFriction * this.material.dynamicFriction * edge.lprojection * edge.lprojection;
			var t = -(u.y * edge.lnormx - u.x * edge.lnormy) / (dy * edge.lnormx - dx * edge.lnormy);
			if(t > 0) {
				var ta;
				if(t > 1) ta = 1; else ta = t;
				var cx = 0.0;
				var cy = 0.0;
				cx = u.x;
				cy = u.y;
				var t1 = ta;
				cx += dx * t1;
				cy += dy * t1;
				var dota = edge.lnormy * u.x - edge.lnormx * u.y;
				var dotb = edge.lnormy * cx - edge.lnormx * cy;
				var dots = (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota));
				accum += dots * ta * edge.length * nape.Config.fluidAngularDrag;
			}
			if(t < 1) {
				var tb;
				if(t < 0) tb = 0; else tb = t;
				var cx1 = 0.0;
				var cy1 = 0.0;
				cx1 = u.x;
				cy1 = u.y;
				var t2 = tb;
				cx1 += dx * t2;
				cy1 += dy * t2;
				var dota1 = edge.lnormy * cx1 - edge.lnormx * cy1;
				var dotb1 = edge.lnormy * v.x - edge.lnormx * v.y;
				var dots1 = (dotb1 * dotb1 * dotb1 - dota1 * dota1 * dota1) / (3 * (dotb1 - dota1));
				accum += dots1 * nape.Config.fluidVacuumDrag * (1 - tb) * edge.length * nape.Config.fluidAngularDrag;
			}
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) do {
			cx_itej = this.lverts.next;
			var v1 = cx_itej;
			var edge1 = ei.elt;
			ei = ei.next;
			perim += edge1.length;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = v1.x - u.x;
			dy1 = v1.y - u.y;
			accum += edge1.length * nape.Config.fluidAngularDragFriction * this.material.dynamicFriction * edge1.lprojection * edge1.lprojection;
			var t3 = -(u.y * edge1.lnormx - u.x * edge1.lnormy) / (dy1 * edge1.lnormx - dx1 * edge1.lnormy);
			if(t3 > 0) {
				var ta1;
				if(t3 > 1) ta1 = 1; else ta1 = t3;
				var cx2 = 0.0;
				var cy2 = 0.0;
				cx2 = u.x;
				cy2 = u.y;
				var t4 = ta1;
				cx2 += dx1 * t4;
				cy2 += dy1 * t4;
				var dota2 = edge1.lnormy * u.x - edge1.lnormx * u.y;
				var dotb2 = edge1.lnormy * cx2 - edge1.lnormx * cy2;
				var dots2 = (dotb2 * dotb2 * dotb2 - dota2 * dota2 * dota2) / (3 * (dotb2 - dota2));
				accum += dots2 * ta1 * edge1.length * nape.Config.fluidAngularDrag;
			}
			if(t3 < 1) {
				var tb1;
				if(t3 < 0) tb1 = 0; else tb1 = t3;
				var cx3 = 0.0;
				var cy3 = 0.0;
				cx3 = u.x;
				cy3 = u.y;
				var t5 = tb1;
				cx3 += dx1 * t5;
				cy3 += dy1 * t5;
				var dota3 = edge1.lnormy * cx3 - edge1.lnormx * cy3;
				var dotb3 = edge1.lnormy * v1.x - edge1.lnormx * v1.y;
				var dots3 = (dotb3 * dotb3 * dotb3 - dota3 * dota3 * dota3) / (3 * (dotb3 - dota3));
				accum += dots3 * nape.Config.fluidVacuumDrag * (1 - tb1) * edge1.length * nape.Config.fluidAngularDrag;
			}
		} while(false);
		this.angDrag = accum / (this.inertia * perim);
	}
	,__validate_localCOM: function() {
		if(this.lverts.next.next == null) {
			this.localCOMx = this.lverts.next.x;
			this.localCOMy = this.lverts.next.y;
		} else if(this.lverts.next.next.next == null) {
			this.localCOMx = this.lverts.next.x;
			this.localCOMy = this.lverts.next.y;
			var t = 1.0;
			this.localCOMx += this.lverts.next.next.x * t;
			this.localCOMy += this.lverts.next.next.y * t;
			var t1 = 0.5;
			this.localCOMx *= t1;
			this.localCOMy *= t1;
		} else {
			this.localCOMx = 0;
			this.localCOMy = 0;
			var area = 0.0;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			var v = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var w = cx_ite;
				area += v.x * (w.y - u.y);
				var cf = w.y * v.x - w.x * v.y;
				this.localCOMx += (v.x + w.x) * cf;
				this.localCOMy += (v.y + w.y) * cf;
				u = v;
				v = w;
				cx_ite = cx_ite.next;
			}
			cx_ite = this.lverts.next;
			var w1 = cx_ite;
			area += v.x * (w1.y - u.y);
			var cf1 = w1.y * v.x - w1.x * v.y;
			this.localCOMx += (v.x + w1.x) * cf1;
			this.localCOMy += (v.y + w1.y) * cf1;
			u = v;
			v = w1;
			cx_ite = cx_ite.next;
			var w2 = cx_ite;
			area += v.x * (w2.y - u.y);
			var cf2 = w2.y * v.x - w2.x * v.y;
			this.localCOMx += (v.x + w2.x) * cf2;
			this.localCOMy += (v.y + w2.y) * cf2;
			area = 1 / (3 * area);
			var t2 = area;
			this.localCOMx *= t2;
			this.localCOMy *= t2;
		}
	}
	,localCOM_validate: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
	}
	,localCOM_invalidate: function(x) {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
		var delx = 0;
		var dely = 0;
		delx = x.x - this.localCOMx;
		dely = x.y - this.localCOMy;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var t = 1.0;
			p.x += delx * t;
			p.y += dely * t;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,setupLocalCOM: function() {
		this.wrap_localCOM = nape.geom.Vec2.get(this.localCOMx,this.localCOMy,null);
		this.wrap_localCOM.zpp_inner._inuse = true;
		this.wrap_localCOM.zpp_inner._validate = $bind(this,this.localCOM_validate);
		this.wrap_localCOM.zpp_inner._invalidate = $bind(this,this.localCOM_invalidate);
	}
	,__translate: function(dx,dy) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var t = 1.0;
			p.x += dx * t;
			p.y += dy * t;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__scale: function(sx,sy) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			p.x *= sx;
			p.y *= sy;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__rotate: function(ax,ay) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var tempx = 0.0;
			var tempy = 0.0;
			tempx = ay * p.x - ax * p.y;
			tempy = p.x * ax + p.y * ay;
			p.x = tempx;
			p.y = tempy;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__transform: function(mat) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var t = mat.zpp_inner.a * p.x + mat.zpp_inner.b * p.y + mat.zpp_inner.tx;
			p.y = mat.zpp_inner.c * p.x + mat.zpp_inner.d * p.y + mat.zpp_inner.ty;
			p.x = t;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__copy: function() {
		var ret = new nape.shape.Polygon(this.outer_zn.get_localVerts()).zpp_inner_zn;
		return ret;
	}
	,__class__: zpp_nape.shape.ZPP_Polygon
});
zpp_nape.space = {};
zpp_nape.space.ZPP_Broadphase = function() {
	this.circShape = null;
	this.matrix = null;
	this.aabbShape = null;
	this.dynab = null;
	this.sweep = null;
	this.is_sweep = false;
	this.space = null;
};
$hxClasses["zpp_nape.space.ZPP_Broadphase"] = zpp_nape.space.ZPP_Broadphase;
zpp_nape.space.ZPP_Broadphase.__name__ = ["zpp_nape","space","ZPP_Broadphase"];
zpp_nape.space.ZPP_Broadphase.prototype = {
	insert: function(shape) {
		if(this.is_sweep) this.sweep.__insert(shape); else this.dynab.__insert(shape);
	}
	,remove: function(shape) {
		if(this.is_sweep) this.sweep.__remove(shape); else this.dynab.__remove(shape);
	}
	,sync: function(shape) {
		if(this.is_sweep) {
			if(!this.sweep.space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
			}
		} else this.dynab.__sync(shape);
	}
	,broadphase: function(space,discrete) {
	}
	,clear: function() {
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		return null;
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		return null;
	}
	,updateAABBShape: function(aabb) {
		if(this.aabbShape == null) {
			var body = new nape.phys.Body((function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
				return $r;
			}(this)));
			body.zpp_inner.wrap_shapes.add(this.aabbShape = new nape.shape.Polygon(nape.shape.Polygon.rect(aabb.minx,aabb.miny,aabb.maxx - aabb.minx,aabb.maxy - aabb.miny)));
		} else {
			var ab = this.aabbShape.zpp_inner.aabb;
			var sx = (aabb.maxx - aabb.minx) / (ab.maxx - ab.minx);
			var sy = (aabb.maxy - aabb.miny) / (ab.maxy - ab.miny);
			if(this.matrix == null) this.matrix = new nape.geom.Mat23();
			this.matrix.set_a(sx);
			this.matrix.set_b(this.matrix.set_c(0));
			this.matrix.set_d(sy);
			this.matrix.set_tx(aabb.minx - sx * ab.minx);
			this.matrix.set_ty(aabb.miny - sy * ab.miny);
			this.aabbShape.transform(this.matrix);
		}
		this.aabbShape.zpp_inner.validate_aabb();
		this.aabbShape.zpp_inner.polygon.validate_gaxi();
	}
	,shapesInAABB: function(aabb,strict,containment,filter,output) {
		return null;
	}
	,bodiesInAABB: function(aabb,strict,containment,filter,output) {
		return null;
	}
	,updateCircShape: function(x,y,r) {
		if(this.circShape == null) {
			var body = new nape.phys.Body((function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
				return $r;
			}(this)));
			body.zpp_inner.wrap_shapes.add(this.circShape = new nape.shape.Circle(r,nape.geom.Vec2.get(x,y,null)));
		} else {
			var ci = this.circShape.zpp_inner.circle;
			var ss = r / ci.radius;
			if(this.matrix == null) this.matrix = new nape.geom.Mat23();
			this.matrix.set_a(this.matrix.set_d(ss));
			this.matrix.set_b(this.matrix.set_c(0));
			this.matrix.set_tx(x - ss * ci.localCOMx);
			this.matrix.set_ty(y - ss * ci.localCOMy);
			this.circShape.transform(this.matrix);
		}
		this.circShape.zpp_inner.validate_aabb();
	}
	,shapesInCircle: function(x,y,r,containment,filter,output) {
		return null;
	}
	,bodiesInCircle: function(x,y,r,containment,filter,output) {
		return null;
	}
	,validateShape: function(s) {
		if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.validate_gaxi();
		if(s.zip_aabb) {
			if(s.body != null) {
				s.zip_aabb = false;
				if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
			}
		}
		if(s.zip_worldCOM) {
			if(s.body != null) {
				s.zip_worldCOM = false;
				if(s.zip_localCOM) {
					s.zip_localCOM = false;
					if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
					if(s.wrap_localCOM != null) {
						s.wrap_localCOM.zpp_inner.x = s.localCOMx;
						s.wrap_localCOM.zpp_inner.y = s.localCOMy;
					}
				}
				s.body.validate_axis();
				s.worldCOMx = s.body.posx + (s.body.axisy * s.localCOMx - s.body.axisx * s.localCOMy);
				s.worldCOMy = s.body.posy + (s.localCOMx * s.body.axisx + s.localCOMy * s.body.axisy);
			}
		}
	}
	,shapesInShape: function(shape,containment,filter,output) {
		return null;
	}
	,bodiesInShape: function(shape,containment,filter,output) {
		return null;
	}
	,rayCast: function(ray,inner,filter) {
		return null;
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		return null;
	}
	,__class__: zpp_nape.space.ZPP_Broadphase
};
zpp_nape.space.ZPP_AABBNode = function() {
	this.first_sync = false;
	this.synced = false;
	this.snext = null;
	this.moved = false;
	this.mnext = null;
	this.next = null;
	this.rayt = 0.0;
	this.height = 0;
	this.child2 = null;
	this.child1 = null;
	this.parent = null;
	this.dyn = false;
	this.shape = null;
	this.aabb = null;
	this.height = -1;
};
$hxClasses["zpp_nape.space.ZPP_AABBNode"] = zpp_nape.space.ZPP_AABBNode;
zpp_nape.space.ZPP_AABBNode.__name__ = ["zpp_nape","space","ZPP_AABBNode"];
zpp_nape.space.ZPP_AABBNode.prototype = {
	alloc: function() {
		if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) this.aabb = new zpp_nape.geom.ZPP_AABB(); else {
			this.aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = this.aabb.next;
			this.aabb.next = null;
		}
		null;
		this.moved = false;
		this.synced = false;
		this.first_sync = false;
	}
	,free: function() {
		this.height = -1;
		var o = this.aabb;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = o;
		this.child1 = this.child2 = this.parent = null;
		this.next = null;
		this.snext = null;
		this.mnext = null;
	}
	,isLeaf: function() {
		return this.child1 == null;
	}
	,__class__: zpp_nape.space.ZPP_AABBNode
};
zpp_nape.space.ZPP_AABBPair = function() {
	this.next = null;
	this.arb = null;
	this.di = 0;
	this.id = 0;
	this.sleeping = false;
	this.first = false;
	this.n2 = null;
	this.n1 = null;
};
$hxClasses["zpp_nape.space.ZPP_AABBPair"] = zpp_nape.space.ZPP_AABBPair;
zpp_nape.space.ZPP_AABBPair.__name__ = ["zpp_nape","space","ZPP_AABBPair"];
zpp_nape.space.ZPP_AABBPair.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.n1 = this.n2 = null;
		this.sleeping = false;
	}
	,__class__: zpp_nape.space.ZPP_AABBPair
};
zpp_nape.space.ZPP_AABBTree = function() {
	this.root = null;
};
$hxClasses["zpp_nape.space.ZPP_AABBTree"] = zpp_nape.space.ZPP_AABBTree;
zpp_nape.space.ZPP_AABBTree.__name__ = ["zpp_nape","space","ZPP_AABBTree"];
zpp_nape.space.ZPP_AABBTree.prototype = {
	clear: function() {
		if(this.root == null) return;
		var stack = null;
		this.root.next = stack;
		stack = this.root;
		while(stack != null) {
			var node;
			var ret = stack;
			stack = ret.next;
			ret.next = null;
			node = ret;
			if(node.child1 == null) {
				node.shape.node = null;
				node.shape.removedFromSpace();
				node.shape = null;
			} else {
				if(node.child1 != null) {
					node.child1.next = stack;
					stack = node.child1;
				}
				if(node.child2 != null) {
					node.child2.next = stack;
					stack = node.child2;
				}
			}
			var o = node;
			o.free();
			o.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
			zpp_nape.space.ZPP_AABBNode.zpp_pool = o;
		}
		this.root = null;
	}
	,insertLeaf: function(leaf) {
		this.inlined_insertLeaf(leaf);
	}
	,inlined_insertLeaf: function(leaf) {
		if(this.root == null) {
			this.root = leaf;
			this.root.parent = null;
		} else {
			var leafaabb = leaf.aabb;
			var node = this.root;
			while(!(node.child1 == null)) {
				var child1 = node.child1;
				var child2 = node.child2;
				var area = node.aabb.perimeter();
				zpp_nape.space.ZPP_AABBTree.tmpaabb.setCombine(node.aabb,leafaabb);
				var carea = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter();
				var cost = 2 * carea;
				var icost = 2 * (carea - area);
				var cost1;
				zpp_nape.space.ZPP_AABBTree.tmpaabb.setCombine(leafaabb,child1.aabb);
				if(child1.child1 == null) cost1 = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter() + icost; else {
					var oarea = child1.aabb.perimeter();
					var narea = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter();
					cost1 = narea - oarea + icost;
				}
				var cost2;
				zpp_nape.space.ZPP_AABBTree.tmpaabb.setCombine(leafaabb,child2.aabb);
				if(child2.child1 == null) cost2 = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter() + icost; else {
					var oarea1 = child2.aabb.perimeter();
					var narea1 = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter();
					cost2 = narea1 - oarea1 + icost;
				}
				if(cost < cost1 && cost < cost2) break; else if(cost1 < cost2) node = child1; else node = child2;
			}
			var sibling = node;
			var oparent = sibling.parent;
			var nparent;
			if(zpp_nape.space.ZPP_AABBNode.zpp_pool == null) nparent = new zpp_nape.space.ZPP_AABBNode(); else {
				nparent = zpp_nape.space.ZPP_AABBNode.zpp_pool;
				zpp_nape.space.ZPP_AABBNode.zpp_pool = nparent.next;
				nparent.next = null;
			}
			if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) nparent.aabb = new zpp_nape.geom.ZPP_AABB(); else {
				nparent.aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
				zpp_nape.geom.ZPP_AABB.zpp_pool = nparent.aabb.next;
				nparent.aabb.next = null;
			}
			null;
			nparent.moved = false;
			nparent.synced = false;
			nparent.first_sync = false;
			nparent.parent = oparent;
			nparent.aabb.setCombine(leafaabb,sibling.aabb);
			nparent.height = sibling.height + 1;
			if(oparent != null) {
				if(oparent.child1 == sibling) oparent.child1 = nparent; else oparent.child2 = nparent;
				nparent.child1 = sibling;
				nparent.child2 = leaf;
				sibling.parent = nparent;
				leaf.parent = nparent;
			} else {
				nparent.child1 = sibling;
				nparent.child2 = leaf;
				sibling.parent = nparent;
				leaf.parent = nparent;
				this.root = nparent;
			}
			node = leaf.parent;
			while(node != null) {
				node = this.balance(node);
				var child11 = node.child1;
				var child21 = node.child2;
				node.height = 1 + (function($this) {
					var $r;
					var x = child11.height;
					var y = child21.height;
					$r = x > y?x:y;
					return $r;
				}(this));
				node.aabb.setCombine(child11.aabb,child21.aabb);
				node = node.parent;
			}
		}
	}
	,removeLeaf: function(leaf) {
		this.inlined_removeLeaf(leaf);
	}
	,inlined_removeLeaf: function(leaf) {
		if(leaf == this.root) {
			this.root = null;
			return;
		} else {
			var parent = leaf.parent;
			var gparent = parent.parent;
			var sibling;
			if(parent.child1 == leaf) sibling = parent.child2; else sibling = parent.child1;
			if(gparent != null) {
				if(gparent.child1 == parent) gparent.child1 = sibling; else gparent.child2 = sibling;
				sibling.parent = gparent;
				var o = parent;
				o.free();
				o.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
				zpp_nape.space.ZPP_AABBNode.zpp_pool = o;
				var node = gparent;
				while(node != null) {
					node = this.balance(node);
					var child1 = node.child1;
					var child2 = node.child2;
					node.aabb.setCombine(child1.aabb,child2.aabb);
					node.height = 1 + (function($this) {
						var $r;
						var x = child1.height;
						var y = child2.height;
						$r = x > y?x:y;
						return $r;
					}(this));
					node = node.parent;
				}
			} else {
				this.root = sibling;
				sibling.parent = null;
				var o1 = parent;
				o1.free();
				o1.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
				zpp_nape.space.ZPP_AABBNode.zpp_pool = o1;
			}
		}
	}
	,balance: function(a) {
		if(a.child1 == null || a.height < 2) return a; else {
			var b = a.child1;
			var c = a.child2;
			var balance = c.height - b.height;
			if(balance > 1) {
				var f = c.child1;
				var g = c.child2;
				c.child1 = a;
				c.parent = a.parent;
				a.parent = c;
				if(c.parent != null) {
					if(c.parent.child1 == a) c.parent.child1 = c; else c.parent.child2 = c;
				} else this.root = c;
				if(f.height > g.height) {
					c.child2 = f;
					a.child2 = g;
					g.parent = a;
					a.aabb.setCombine(b.aabb,g.aabb);
					c.aabb.setCombine(a.aabb,f.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x = b.height;
						var y = g.height;
						$r = x > y?x:y;
						return $r;
					}(this));
					c.height = 1 + (function($this) {
						var $r;
						var x1 = a.height;
						var y1 = f.height;
						$r = x1 > y1?x1:y1;
						return $r;
					}(this));
				} else {
					c.child2 = g;
					a.child2 = f;
					f.parent = a;
					a.aabb.setCombine(b.aabb,f.aabb);
					c.aabb.setCombine(a.aabb,g.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x2 = b.height;
						var y2 = f.height;
						$r = x2 > y2?x2:y2;
						return $r;
					}(this));
					c.height = 1 + (function($this) {
						var $r;
						var x3 = a.height;
						var y3 = g.height;
						$r = x3 > y3?x3:y3;
						return $r;
					}(this));
				}
				return c;
			} else if(balance < -1) {
				var f1 = b.child1;
				var g1 = b.child2;
				b.child1 = a;
				b.parent = a.parent;
				a.parent = b;
				if(b.parent != null) {
					if(b.parent.child1 == a) b.parent.child1 = b; else b.parent.child2 = b;
				} else this.root = b;
				if(f1.height > g1.height) {
					b.child2 = f1;
					a.child1 = g1;
					g1.parent = a;
					a.aabb.setCombine(c.aabb,g1.aabb);
					b.aabb.setCombine(a.aabb,f1.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x4 = c.height;
						var y4 = g1.height;
						$r = x4 > y4?x4:y4;
						return $r;
					}(this));
					b.height = 1 + (function($this) {
						var $r;
						var x5 = a.height;
						var y5 = f1.height;
						$r = x5 > y5?x5:y5;
						return $r;
					}(this));
				} else {
					b.child2 = g1;
					a.child1 = f1;
					f1.parent = a;
					a.aabb.setCombine(c.aabb,f1.aabb);
					b.aabb.setCombine(a.aabb,g1.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x6 = c.height;
						var y6 = f1.height;
						$r = x6 > y6?x6:y6;
						return $r;
					}(this));
					b.height = 1 + (function($this) {
						var $r;
						var x7 = a.height;
						var y7 = g1.height;
						$r = x7 > y7?x7:y7;
						return $r;
					}(this));
				}
				return b;
			} else return a;
		}
	}
	,__class__: zpp_nape.space.ZPP_AABBTree
};
zpp_nape.space.ZPP_DynAABBPhase = function(space) {
	this.openlist = null;
	this.failed = null;
	this.treeStack2 = null;
	this.treeStack = null;
	this.moves = null;
	this.syncs = null;
	this.pairs = null;
	this.dtree = null;
	this.stree = null;
	zpp_nape.space.ZPP_Broadphase.call(this);
	this.space = space;
	this.is_sweep = false;
	this.dynab = this;
	this.stree = new zpp_nape.space.ZPP_AABBTree();
	this.dtree = new zpp_nape.space.ZPP_AABBTree();
};
$hxClasses["zpp_nape.space.ZPP_DynAABBPhase"] = zpp_nape.space.ZPP_DynAABBPhase;
zpp_nape.space.ZPP_DynAABBPhase.__name__ = ["zpp_nape","space","ZPP_DynAABBPhase"];
zpp_nape.space.ZPP_DynAABBPhase.__super__ = zpp_nape.space.ZPP_Broadphase;
zpp_nape.space.ZPP_DynAABBPhase.prototype = $extend(zpp_nape.space.ZPP_Broadphase.prototype,{
	dyn: function(shape) {
		if(shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) return false; else return !shape.body.component.sleeping;
	}
	,__insert: function(shape) {
		var node;
		if(zpp_nape.space.ZPP_AABBNode.zpp_pool == null) node = new zpp_nape.space.ZPP_AABBNode(); else {
			node = zpp_nape.space.ZPP_AABBNode.zpp_pool;
			zpp_nape.space.ZPP_AABBNode.zpp_pool = node.next;
			node.next = null;
		}
		if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) node.aabb = new zpp_nape.geom.ZPP_AABB(); else {
			node.aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = node.aabb.next;
			node.aabb.next = null;
		}
		null;
		node.moved = false;
		node.synced = false;
		node.first_sync = false;
		node.shape = shape;
		shape.node = node;
		node.synced = true;
		node.first_sync = true;
		node.snext = this.syncs;
		this.syncs = node;
	}
	,__remove: function(shape) {
		var node = shape.node;
		if(!node.first_sync) {
			if(node.dyn) this.dtree.removeLeaf(node); else this.stree.removeLeaf(node);
		}
		shape.node = null;
		if(node.synced) {
			var pre = null;
			var cur = this.syncs;
			while(cur != null) {
				if(cur == node) break;
				pre = cur;
				cur = cur.snext;
			}
			if(pre == null) this.syncs = cur.snext; else pre.snext = cur.snext;
			cur.snext = null;
			node.synced = false;
		}
		if(node.moved) {
			var pre1 = null;
			var cur1 = this.moves;
			while(cur1 != null) {
				if(cur1 == node) break;
				pre1 = cur1;
				cur1 = cur1.mnext;
			}
			if(pre1 == null) this.moves = cur1.mnext; else pre1.mnext = cur1.mnext;
			cur1.mnext = null;
			node.moved = false;
		}
		var pre2 = null;
		var cur2 = this.pairs;
		while(cur2 != null) {
			var nxt = cur2.next;
			if(cur2.n1 == node || cur2.n2 == node) {
				if(pre2 == null) this.pairs = nxt; else pre2.next = nxt;
				if(cur2.arb != null) cur2.arb.pair = null;
				cur2.arb = null;
				cur2.n1.shape.pairs.remove(cur2);
				cur2.n2.shape.pairs.remove(cur2);
				var o = cur2;
				o.n1 = o.n2 = null;
				o.sleeping = false;
				o.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
				zpp_nape.space.ZPP_AABBPair.zpp_pool = o;
				cur2 = nxt;
				continue;
			}
			pre2 = cur2;
			cur2 = nxt;
		}
		while(!(shape.pairs.head == null)) {
			var cur3 = shape.pairs.pop_unsafe();
			if(cur3.n1 == node) cur3.n2.shape.pairs.remove(cur3); else cur3.n1.shape.pairs.remove(cur3);
			if(cur3.arb != null) cur3.arb.pair = null;
			cur3.arb = null;
			var o1 = cur3;
			o1.n1 = o1.n2 = null;
			o1.sleeping = false;
			o1.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
			zpp_nape.space.ZPP_AABBPair.zpp_pool = o1;
		}
		var o2 = node;
		o2.free();
		o2.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
		zpp_nape.space.ZPP_AABBNode.zpp_pool = o2;
	}
	,__sync: function(shape) {
		var node = shape.node;
		if(!node.synced) {
			if(!this.space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
			}
			var sync;
			sync = node.dyn != (shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?false:!shape.body.component.sleeping) || !node.aabb.contains(shape.aabb);
			if(sync) {
				node.synced = true;
				node.snext = this.syncs;
				this.syncs = node;
			}
		}
	}
	,sync_broadphase: function() {
		this.space.validation();
		if(this.syncs != null) {
			if(this.moves == null) {
				var node = this.syncs;
				while(node != null) {
					var shape = node.shape;
					if(!node.first_sync) {
						var tree;
						if(node.dyn) tree = this.dtree; else tree = this.stree;
						tree.inlined_removeLeaf(node);
					} else node.first_sync = false;
					var aabb = node.aabb;
					if(!this.space.continuous) {
						if(shape.zip_aabb) {
							if(shape.body != null) {
								shape.zip_aabb = false;
								if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
							}
						}
					}
					aabb.setExpand(shape.aabb,3.0);
					var tree1;
					if(shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?node.dyn = false:node.dyn = !shape.body.component.sleeping) tree1 = this.dtree; else tree1 = this.stree;
					tree1.inlined_insertLeaf(node);
					node.synced = false;
					node.moved = true;
					node.mnext = node.snext;
					node.snext = null;
					node = node.mnext;
				}
				var t = this.syncs;
				this.syncs = this.moves;
				this.moves = t;
			} else while(this.syncs != null) {
				var node1;
				var ret = this.syncs;
				this.syncs = ret.snext;
				ret.snext = null;
				node1 = ret;
				var shape1 = node1.shape;
				if(!node1.first_sync) {
					var tree2;
					if(node1.dyn) tree2 = this.dtree; else tree2 = this.stree;
					tree2.inlined_removeLeaf(node1);
				} else node1.first_sync = false;
				var aabb1 = node1.aabb;
				if(!this.space.continuous) {
					if(shape1.zip_aabb) {
						if(shape1.body != null) {
							shape1.zip_aabb = false;
							if(shape1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape1.circle.__validate_aabb(); else shape1.polygon.__validate_aabb();
						}
					}
				}
				aabb1.setExpand(shape1.aabb,3.0);
				var tree3;
				if(shape1.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?node1.dyn = false:node1.dyn = !shape1.body.component.sleeping) tree3 = this.dtree; else tree3 = this.stree;
				tree3.inlined_insertLeaf(node1);
				node1.synced = false;
				if(!node1.moved) {
					node1.moved = true;
					node1.mnext = this.moves;
					this.moves = node1;
				}
			}
		}
	}
	,broadphase: function(space,discrete) {
		var node = this.syncs;
		while(node != null) {
			var shape = node.shape;
			if(!node.first_sync) {
				var tree;
				if(node.dyn) tree = this.dtree; else tree = this.stree;
				tree.inlined_removeLeaf(node);
			} else node.first_sync = false;
			var aabb = node.aabb;
			if(!space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
			}
			aabb.setExpand(shape.aabb,3.0);
			var tree1;
			if(shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?node.dyn = false:node.dyn = !shape.body.component.sleeping) tree1 = this.dtree; else tree1 = this.stree;
			tree1.inlined_insertLeaf(node);
			node.synced = false;
			node = node.snext;
		}
		while(this.syncs != null) {
			var leaf;
			var ret = this.syncs;
			this.syncs = ret.snext;
			ret.snext = null;
			leaf = ret;
			if(leaf.moved) continue;
			leaf.moved = false;
			var lshape = leaf.shape;
			var lbody = lshape.body;
			if(lbody.component.sleeping) continue;
			var ab = leaf.aabb;
			var stack = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack;
				stack = this.dtree.root;
			}
			while(stack != null) {
				var node1;
				var ret1 = stack;
				stack = ret1.next;
				ret1.next = null;
				node1 = ret1;
				if(node1 == leaf) continue;
				if(node1.child1 == null) {
					var shape1 = node1.shape;
					if(shape1.body != lshape.body && !(shape1.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && lshape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
						if(ab.intersect(node1.aabb)) {
							var id;
							var di;
							if(lshape.id < shape1.id) {
								id = lshape.id;
								di = shape1.id;
							} else {
								id = shape1.id;
								di = lshape.id;
							}
							var s;
							if(lshape.pairs.length < shape1.pairs.length) s = lshape; else s = shape1;
							var p = null;
							var cx_ite = s.pairs.head;
							while(cx_ite != null) {
								var px = cx_ite.elt;
								if(px.id == id && px.di == di) {
									p = px;
									break;
								}
								cx_ite = cx_ite.next;
							}
							if(p != null) {
								if(p.sleeping) {
									p.sleeping = false;
									p.next = this.pairs;
									this.pairs = p;
									p.first = true;
								}
								continue;
							}
							if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) p = new zpp_nape.space.ZPP_AABBPair(); else {
								p = zpp_nape.space.ZPP_AABBPair.zpp_pool;
								zpp_nape.space.ZPP_AABBPair.zpp_pool = p.next;
								p.next = null;
							}
							null;
							p.n1 = leaf;
							p.n2 = node1;
							p.id = id;
							p.di = di;
							p.next = this.pairs;
							this.pairs = p;
							p.first = true;
							lshape.pairs.inlined_add(p);
							shape1.pairs.inlined_add(p);
						}
					}
				} else if(ab.intersect(node1.aabb)) {
					if(node1.child1 != null) {
						node1.child1.next = stack;
						stack = node1.child1;
					}
					if(node1.child2 != null) {
						node1.child2.next = stack;
						stack = node1.child2;
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack;
				stack = this.stree.root;
			}
			while(stack != null) {
				var node2;
				var ret2 = stack;
				stack = ret2.next;
				ret2.next = null;
				node2 = ret2;
				if(node2 == leaf) continue;
				if(node2.child1 == null) {
					var shape2 = node2.shape;
					if(shape2.body != lshape.body && !(shape2.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && lshape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
						if(ab.intersect(node2.aabb)) {
							var id1;
							var di1;
							if(lshape.id < shape2.id) {
								id1 = lshape.id;
								di1 = shape2.id;
							} else {
								id1 = shape2.id;
								di1 = lshape.id;
							}
							var s1;
							if(lshape.pairs.length < shape2.pairs.length) s1 = lshape; else s1 = shape2;
							var p1 = null;
							var cx_ite1 = s1.pairs.head;
							while(cx_ite1 != null) {
								var px1 = cx_ite1.elt;
								if(px1.id == id1 && px1.di == di1) {
									p1 = px1;
									break;
								}
								cx_ite1 = cx_ite1.next;
							}
							if(p1 != null) {
								if(p1.sleeping) {
									p1.sleeping = false;
									p1.next = this.pairs;
									this.pairs = p1;
									p1.first = true;
								}
								continue;
							}
							if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) p1 = new zpp_nape.space.ZPP_AABBPair(); else {
								p1 = zpp_nape.space.ZPP_AABBPair.zpp_pool;
								zpp_nape.space.ZPP_AABBPair.zpp_pool = p1.next;
								p1.next = null;
							}
							null;
							p1.n1 = leaf;
							p1.n2 = node2;
							p1.id = id1;
							p1.di = di1;
							p1.next = this.pairs;
							this.pairs = p1;
							p1.first = true;
							lshape.pairs.inlined_add(p1);
							shape2.pairs.inlined_add(p1);
						}
					}
				} else if(ab.intersect(node2.aabb)) {
					if(node2.child1 != null) {
						node2.child1.next = stack;
						stack = node2.child1;
					}
					if(node2.child2 != null) {
						node2.child2.next = stack;
						stack = node2.child2;
					}
				}
			}
		}
		while(this.moves != null) {
			var leaf1;
			var ret3 = this.moves;
			this.moves = ret3.mnext;
			ret3.mnext = null;
			leaf1 = ret3;
			leaf1.moved = false;
			var lshape1 = leaf1.shape;
			var lbody1 = lshape1.body;
			if(lbody1.component.sleeping) continue;
			var ab1 = leaf1.aabb;
			var stack1 = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack1;
				stack1 = this.dtree.root;
			}
			while(stack1 != null) {
				var node3;
				var ret4 = stack1;
				stack1 = ret4.next;
				ret4.next = null;
				node3 = ret4;
				if(node3 == leaf1) continue;
				if(node3.child1 == null) {
					var shape3 = node3.shape;
					if(shape3.body != lshape1.body && !(shape3.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && lshape1.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
						if(ab1.intersect(node3.aabb)) {
							var id2;
							var di2;
							if(lshape1.id < shape3.id) {
								id2 = lshape1.id;
								di2 = shape3.id;
							} else {
								id2 = shape3.id;
								di2 = lshape1.id;
							}
							var s2;
							if(lshape1.pairs.length < shape3.pairs.length) s2 = lshape1; else s2 = shape3;
							var p2 = null;
							var cx_ite2 = s2.pairs.head;
							while(cx_ite2 != null) {
								var px2 = cx_ite2.elt;
								if(px2.id == id2 && px2.di == di2) {
									p2 = px2;
									break;
								}
								cx_ite2 = cx_ite2.next;
							}
							if(p2 != null) {
								if(p2.sleeping) {
									p2.sleeping = false;
									p2.next = this.pairs;
									this.pairs = p2;
									p2.first = true;
								}
								continue;
							}
							if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) p2 = new zpp_nape.space.ZPP_AABBPair(); else {
								p2 = zpp_nape.space.ZPP_AABBPair.zpp_pool;
								zpp_nape.space.ZPP_AABBPair.zpp_pool = p2.next;
								p2.next = null;
							}
							null;
							p2.n1 = leaf1;
							p2.n2 = node3;
							p2.id = id2;
							p2.di = di2;
							p2.next = this.pairs;
							this.pairs = p2;
							p2.first = true;
							lshape1.pairs.inlined_add(p2);
							shape3.pairs.inlined_add(p2);
						}
					}
				} else if(ab1.intersect(node3.aabb)) {
					if(node3.child1 != null) {
						node3.child1.next = stack1;
						stack1 = node3.child1;
					}
					if(node3.child2 != null) {
						node3.child2.next = stack1;
						stack1 = node3.child2;
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack1;
				stack1 = this.stree.root;
			}
			while(stack1 != null) {
				var node4;
				var ret5 = stack1;
				stack1 = ret5.next;
				ret5.next = null;
				node4 = ret5;
				if(node4 == leaf1) continue;
				if(node4.child1 == null) {
					var shape4 = node4.shape;
					if(shape4.body != lshape1.body && !(shape4.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && lshape1.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
						if(ab1.intersect(node4.aabb)) {
							var id3;
							var di3;
							if(lshape1.id < shape4.id) {
								id3 = lshape1.id;
								di3 = shape4.id;
							} else {
								id3 = shape4.id;
								di3 = lshape1.id;
							}
							var s3;
							if(lshape1.pairs.length < shape4.pairs.length) s3 = lshape1; else s3 = shape4;
							var p3 = null;
							var cx_ite3 = s3.pairs.head;
							while(cx_ite3 != null) {
								var px3 = cx_ite3.elt;
								if(px3.id == id3 && px3.di == di3) {
									p3 = px3;
									break;
								}
								cx_ite3 = cx_ite3.next;
							}
							if(p3 != null) {
								if(p3.sleeping) {
									p3.sleeping = false;
									p3.next = this.pairs;
									this.pairs = p3;
									p3.first = true;
								}
								continue;
							}
							if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) p3 = new zpp_nape.space.ZPP_AABBPair(); else {
								p3 = zpp_nape.space.ZPP_AABBPair.zpp_pool;
								zpp_nape.space.ZPP_AABBPair.zpp_pool = p3.next;
								p3.next = null;
							}
							null;
							p3.n1 = leaf1;
							p3.n2 = node4;
							p3.id = id3;
							p3.di = di3;
							p3.next = this.pairs;
							this.pairs = p3;
							p3.first = true;
							lshape1.pairs.inlined_add(p3);
							shape4.pairs.inlined_add(p3);
						}
					}
				} else if(ab1.intersect(node4.aabb)) {
					if(node4.child1 != null) {
						node4.child1.next = stack1;
						stack1 = node4.child1;
					}
					if(node4.child2 != null) {
						node4.child2.next = stack1;
						stack1 = node4.child2;
					}
				}
			}
		}
		var pre = null;
		var cur = this.pairs;
		while(cur != null) {
			if(!cur.first && !cur.n1.aabb.intersect(cur.n2.aabb)) {
				if(pre == null) this.pairs = cur.next; else pre.next = cur.next;
				cur.n1.shape.pairs.inlined_try_remove(cur);
				cur.n2.shape.pairs.inlined_try_remove(cur);
				var nxt = cur.next;
				if(cur.arb != null) cur.arb.pair = null;
				cur.arb = null;
				var o = cur;
				o.n1 = o.n2 = null;
				o.sleeping = false;
				o.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
				zpp_nape.space.ZPP_AABBPair.zpp_pool = o;
				cur = nxt;
				continue;
			}
			var s11 = cur.n1.shape;
			var b1 = s11.body;
			var s21 = cur.n2.shape;
			var b2 = s21.body;
			if(!cur.first) {
				if((b1.component.sleeping || b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) && (b2.component.sleeping || b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
					cur.sleeping = true;
					if(pre == null) this.pairs = cur.next; else pre.next = cur.next;
					cur = cur.next;
					continue;
				}
			}
			cur.first = false;
			if(s11.aabb.intersect(s21.aabb)) {
				var oarb = cur.arb;
				if(discrete) cur.arb = space.narrowPhase(s11,s21,!(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC),cur.arb,false); else cur.arb = space.continuousEvent(s11,s21,!(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC),cur.arb,false);
				if(cur.arb == null) {
					if(oarb != null) oarb.pair = null;
				} else cur.arb.pair = cur;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.syncs != null) {
			var next = this.syncs.snext;
			this.syncs.snext = null;
			if(this.syncs.first_sync) {
				this.syncs.shape.node = null;
				this.syncs.shape.removedFromSpace();
				this.syncs.shape = null;
			}
			this.syncs = next;
		}
		while(this.moves != null) {
			var next1 = this.moves.mnext;
			this.moves.mnext = null;
			if(this.moves.first_sync) {
				this.moves.shape.node = null;
				this.moves.shape.removedFromSpace();
				this.moves.shape = null;
			}
			this.moves = next1;
		}
		while(this.pairs != null) {
			var nxt = this.pairs.next;
			if(this.pairs.arb != null) this.pairs.arb.pair = null;
			this.pairs.arb = null;
			this.pairs.n1.shape.pairs.inlined_try_remove(this.pairs);
			this.pairs.n2.shape.pairs.inlined_try_remove(this.pairs);
			var o = this.pairs;
			o.n1 = o.n2 = null;
			o.sleeping = false;
			o.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
			zpp_nape.space.ZPP_AABBPair.zpp_pool = o;
			this.pairs = nxt;
		}
		this.dtree.clear();
		this.stree.clear();
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.containsPoint(v)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(node.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
								if(zpp_nape.geom.ZPP_Collide.circleContains(node.shape.circle,v)) ret.push(node.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.polyContains(node.shape.polygon,v)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.containsPoint(v)) {
					if(node1.child1 == null) {
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(node1.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
								if(zpp_nape.geom.ZPP_Collide.circleContains(node1.shape.circle,v)) ret.push(node1.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.polyContains(node1.shape.polygon,v)) ret.push(node1.shape.outer);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		return ret;
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.containsPoint(v)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(!ret.has(body)) {
							if(filter == null || node.shape.filter.shouldCollide(filter)) {
								if(node.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
									if(zpp_nape.geom.ZPP_Collide.circleContains(node.shape.circle,v)) ret.push(body);
								} else if(zpp_nape.geom.ZPP_Collide.polyContains(node.shape.polygon,v)) ret.push(body);
							}
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.containsPoint(v)) {
					if(node1.child1 == null) {
						var body1 = node1.shape.body.outer;
						if(!ret.has(body1)) {
							if(filter == null || node1.shape.filter.shouldCollide(filter)) {
								if(node1.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
									if(zpp_nape.geom.ZPP_Collide.circleContains(node1.shape.circle,v)) ret.push(body1);
								} else if(zpp_nape.geom.ZPP_Collide.polyContains(node1.shape.polygon,v)) ret.push(body1);
							}
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		return ret;
	}
	,shapesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(ab.contains(node.aabb)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) ret.push(node.shape.outer);
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
						this.treeStack2.add(node);
						while(!(this.treeStack2.head == null)) {
							var node1 = this.treeStack2.pop_unsafe();
							if(node1.child1 == null) {
								if(filter == null || node1.shape.filter.shouldCollide(filter)) ret.push(node1.shape.outer);
							} else {
								if(node1.child1 != null) this.treeStack2.add(node1.child1);
								if(node1.child2 != null) this.treeStack2.add(node1.child2);
							}
						}
					}
				} else if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
								} else if(ab.contains(node.shape.aabb)) ret.push(node.shape.outer); else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(node.shape.outer);
							} else if(!containment || ab.contains(node.shape.aabb)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node2 = this.treeStack.pop_unsafe();
				if(ab.contains(node2.aabb)) {
					if(node2.child1 == null) {
						if(filter == null || node2.shape.filter.shouldCollide(filter)) ret.push(node2.shape.outer);
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
						this.treeStack2.add(node2);
						while(!(this.treeStack2.head == null)) {
							var node3 = this.treeStack2.pop_unsafe();
							if(node3.child1 == null) {
								if(filter == null || node3.shape.filter.shouldCollide(filter)) ret.push(node3.shape.outer);
							} else {
								if(node3.child1 != null) this.treeStack2.add(node3.child1);
								if(node3.child2 != null) this.treeStack2.add(node3.child2);
							}
						}
					}
				} else if(node2.aabb.intersect(ab)) {
					if(node2.child1 == null) {
						if(filter == null || node2.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node2.shape)) ret.push(node2.shape.outer);
								} else if(ab.contains(node2.shape.aabb)) ret.push(node2.shape.outer); else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node2.shape,this.aabbShape.zpp_inner)) ret.push(node2.shape.outer);
							} else if(!containment || ab.contains(node2.shape.aabb)) ret.push(node2.shape.outer);
						}
					} else {
						if(node2.child1 != null) this.treeStack.add(node2.child1);
						if(node2.child2 != null) this.treeStack.add(node2.child2);
					}
				}
			}
		}
		return ret;
	}
	,bodiesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(ab.contains(node.aabb)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							var body = node.shape.body.outer;
							if(!ret.has(body)) ret.push(body);
						}
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
						this.treeStack2.add(node);
						while(!(this.treeStack2.head == null)) {
							var node1 = this.treeStack2.pop_unsafe();
							if(node1.child1 == null) {
								if(filter == null || node1.shape.filter.shouldCollide(filter)) {
									var body1 = node1.shape.body.outer;
									if(!ret.has(body1)) ret.push(body1);
								}
							} else {
								if(node1.child1 != null) this.treeStack2.add(node1.child1);
								if(node1.child2 != null) this.treeStack2.add(node1.child2);
							}
						}
					}
				} else if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body2 = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(!this.failed.has(body2)) {
										var col = zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape);
										if(!ret.has(body2) && col) ret.push(body2); else if(!col) {
											ret.remove(body2);
											this.failed.push(body2);
										}
									}
								} else if(!ret.has(body2) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(body2);
							} else if(containment) {
								if(!this.failed.has(body2)) {
									var col1 = ab.contains(node.shape.aabb);
									if(!ret.has(body2) && col1) ret.push(body2); else if(!col1) {
										ret.remove(body2);
										this.failed.push(body2);
									}
								}
							} else if(!ret.has(body2) && ab.contains(node.shape.aabb)) ret.push(body2);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node2 = this.treeStack.pop_unsafe();
				if(ab.contains(node2.aabb)) {
					if(node2.child1 == null) {
						if(filter == null || node2.shape.filter.shouldCollide(filter)) {
							var body3 = node2.shape.body.outer;
							if(!ret.has(body3)) ret.push(body3);
						}
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
						this.treeStack2.add(node2);
						while(!(this.treeStack2.head == null)) {
							var node3 = this.treeStack2.pop_unsafe();
							if(node3.child1 == null) {
								if(filter == null || node3.shape.filter.shouldCollide(filter)) {
									var body4 = node3.shape.body.outer;
									if(!ret.has(body4)) ret.push(body4);
								}
							} else {
								if(node3.child1 != null) this.treeStack2.add(node3.child1);
								if(node3.child2 != null) this.treeStack2.add(node3.child2);
							}
						}
					}
				} else if(node2.aabb.intersect(ab)) {
					if(node2.child1 == null) {
						var body5 = node2.shape.body.outer;
						if(filter == null || node2.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(!this.failed.has(body5)) {
										var col2 = zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node2.shape);
										if(!ret.has(body5) && col2) ret.push(body5); else if(!col2) {
											ret.remove(body5);
											this.failed.push(body5);
										}
									}
								} else if(!ret.has(body5) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node2.shape,this.aabbShape.zpp_inner)) ret.push(body5);
							} else if(containment) {
								if(!this.failed.has(body5)) {
									var col3 = ab.contains(node2.shape.aabb);
									if(!ret.has(body5) && col3) ret.push(body5); else if(!col3) {
										ret.remove(body5);
										this.failed.push(body5);
									}
								}
							} else if(!ret.has(body5) && ab.contains(node2.shape.aabb)) ret.push(body5);
						}
					} else {
						if(node2.child1 != null) this.treeStack.add(node2.child1);
						if(node2.child2 != null) this.treeStack.add(node2.child2);
					}
				}
			}
		}
		this.failed.clear();
		return ret;
	}
	,shapesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.intersect(ab)) {
					if(node1.child1 == null) {
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node1.shape)) ret.push(node1.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node1.shape,this.circShape.zpp_inner)) ret.push(node1.shape.outer);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		return ret;
	}
	,bodiesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body)) {
									var col = zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape);
									if(!ret.has(body) && col) ret.push(body); else if(!col) {
										ret.remove(body);
										this.failed.push(body);
									}
								}
							} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(body);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.intersect(ab)) {
					if(node1.child1 == null) {
						var body1 = node1.shape.body.outer;
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body1)) {
									var col1 = zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node1.shape);
									if(!ret.has(body1) && col1) ret.push(body1); else if(!col1) {
										ret.remove(body1);
										this.failed.push(body1);
									}
								}
							} else if(!ret.has(body1) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node1.shape,this.circShape.zpp_inner)) ret.push(body1);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		this.failed.clear();
		return ret;
	}
	,shapesInShape: function(shp,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shp);
		var ab = shp.aabb;
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(shp,node.shape)) ret.push(node.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,shp)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.intersect(ab)) {
					if(node1.child1 == null) {
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(shp,node1.shape)) ret.push(node1.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node1.shape,shp)) ret.push(node1.shape.outer);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		return ret;
	}
	,bodiesInShape: function(shp,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shp);
		var ab = shp.aabb;
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body)) {
									var col = zpp_nape.geom.ZPP_Collide.containTest(shp,node.shape);
									if(!ret.has(body) && col) ret.push(body); else if(!col) {
										ret.remove(body);
										this.failed.push(body);
									}
								}
							} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,shp)) ret.push(body);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.intersect(ab)) {
					if(node1.child1 == null) {
						var body1 = node1.shape.body.outer;
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body1)) {
									var col1 = zpp_nape.geom.ZPP_Collide.containTest(shp,node1.shape);
									if(!ret.has(body1) && col1) ret.push(body1); else if(!col1) {
										ret.remove(body1);
										this.failed.push(body1);
									}
								}
							} else if(!ret.has(body1) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node1.shape,shp)) ret.push(body1);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		this.failed.clear();
		return ret;
	}
	,rayCast: function(ray,inner,filter) {
		if(this.openlist == null) this.openlist = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.sync_broadphase();
		ray.validate_dir();
		var mint = ray.maxdist;
		if(this.dtree.root != null) {
			if(ray.aabbtest(this.dtree.root.aabb)) {
				var t = ray.aabbsect(this.dtree.root.aabb);
				if(t >= 0 && t < mint) {
					this.dtree.root.rayt = t;
					var pre = null;
					var cx_ite = this.openlist.head;
					while(cx_ite != null) {
						var j = cx_ite.elt;
						if(this.dtree.root.rayt < j.rayt) break;
						pre = cx_ite;
						cx_ite = cx_ite.next;
					}
					this.openlist.inlined_insert(pre,this.dtree.root);
				}
			}
		}
		if(this.stree.root != null) {
			if(ray.aabbtest(this.stree.root.aabb)) {
				var t1 = ray.aabbsect(this.stree.root.aabb);
				if(t1 >= 0 && t1 < mint) {
					this.stree.root.rayt = t1;
					var pre1 = null;
					var cx_ite1 = this.openlist.head;
					while(cx_ite1 != null) {
						var j1 = cx_ite1.elt;
						if(this.stree.root.rayt < j1.rayt) break;
						pre1 = cx_ite1;
						cx_ite1 = cx_ite1.next;
					}
					this.openlist.inlined_insert(pre1,this.stree.root);
				}
			}
		}
		var minres = null;
		while(!(this.openlist.head == null)) {
			var cnode = this.openlist.pop_unsafe();
			if(cnode.rayt >= mint) break;
			if(cnode.child1 == null) {
				var shape = cnode.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					var result;
					if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) result = ray.circlesect(shape.circle,inner,mint); else if(ray.aabbtest(shape.aabb)) result = ray.polysect(shape.polygon,inner,mint); else result = null;
					if(result != null) {
						mint = result.zpp_inner.toiDistance;
						if(minres != null) minres.zpp_inner.free();
						minres = result;
					}
				}
			} else {
				if(cnode.child1 != null) {
					if(ray.aabbtest(cnode.child1.aabb)) {
						var t2 = ray.aabbsect(cnode.child1.aabb);
						if(t2 >= 0 && t2 < mint) {
							cnode.child1.rayt = t2;
							var pre2 = null;
							var cx_ite2 = this.openlist.head;
							while(cx_ite2 != null) {
								var j2 = cx_ite2.elt;
								if(cnode.child1.rayt < j2.rayt) break;
								pre2 = cx_ite2;
								cx_ite2 = cx_ite2.next;
							}
							this.openlist.inlined_insert(pre2,cnode.child1);
						}
					}
				}
				if(cnode.child2 != null) {
					if(ray.aabbtest(cnode.child2.aabb)) {
						var t3 = ray.aabbsect(cnode.child2.aabb);
						if(t3 >= 0 && t3 < mint) {
							cnode.child2.rayt = t3;
							var pre3 = null;
							var cx_ite3 = this.openlist.head;
							while(cx_ite3 != null) {
								var j3 = cx_ite3.elt;
								if(cnode.child2.rayt < j3.rayt) break;
								pre3 = cx_ite3;
								cx_ite3 = cx_ite3.next;
							}
							this.openlist.inlined_insert(pre3,cnode.child2);
						}
					}
				}
			}
		}
		this.openlist.clear();
		return minres;
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		if(this.openlist == null) this.openlist = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.sync_broadphase();
		ray.validate_dir();
		var inf = ray.maxdist >= Math.POSITIVE_INFINITY;
		var ret;
		if(output == null) ret = new nape.geom.RayResultList(); else ret = output;
		if(this.dtree.root != null) {
			if(ray.aabbtest(this.dtree.root.aabb)) {
				if(inf) this.openlist.add(this.dtree.root); else {
					var t = ray.aabbsect(this.dtree.root.aabb);
					if(t >= 0 && t < ray.maxdist) this.openlist.add(this.dtree.root);
				}
			}
		}
		if(this.stree.root != null) {
			if(ray.aabbtest(this.stree.root.aabb)) {
				if(inf) this.openlist.add(this.stree.root); else {
					var t1 = ray.aabbsect(this.stree.root.aabb);
					if(t1 >= 0 && t1 < ray.maxdist) this.openlist.add(this.stree.root);
				}
			}
		}
		while(!(this.openlist.head == null)) {
			var cnode = this.openlist.pop_unsafe();
			if(cnode.child1 == null) {
				var shape = cnode.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ray.circlesect2(shape.circle,inner,ret); else if(ray.aabbtest(shape.aabb)) ray.polysect2(shape.polygon,inner,ret);
				}
			} else {
				if(cnode.child1 != null) {
					if(ray.aabbtest(cnode.child1.aabb)) {
						if(inf) this.openlist.add(cnode.child1); else {
							var t2 = ray.aabbsect(cnode.child1.aabb);
							if(t2 >= 0 && t2 < ray.maxdist) this.openlist.add(cnode.child1);
						}
					}
				}
				if(cnode.child2 != null) {
					if(ray.aabbtest(cnode.child2.aabb)) {
						if(inf) this.openlist.add(cnode.child2); else {
							var t3 = ray.aabbsect(cnode.child2.aabb);
							if(t3 >= 0 && t3 < ray.maxdist) this.openlist.add(cnode.child2);
						}
					}
				}
			}
		}
		this.openlist.clear();
		return ret;
	}
	,__class__: zpp_nape.space.ZPP_DynAABBPhase
});
zpp_nape.space.ZPP_Island = function() {
	this.waket = 0;
	this.sleep = false;
	this.comps = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.comps = new zpp_nape.util.ZNPList_ZPP_Component();
};
$hxClasses["zpp_nape.space.ZPP_Island"] = zpp_nape.space.ZPP_Island;
zpp_nape.space.ZPP_Island.__name__ = ["zpp_nape","space","ZPP_Island"];
zpp_nape.space.ZPP_Island.prototype = {
	elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,free: function() {
	}
	,alloc: function() {
		this.waket = 0;
	}
	,__class__: zpp_nape.space.ZPP_Island
};
zpp_nape.space.ZPP_Component = function() {
	this.woken = false;
	this.waket = 0;
	this.sleeping = false;
	this.island = null;
	this.constraint = null;
	this.body = null;
	this.isBody = false;
	this.rank = 0;
	this.parent = null;
	this.next = null;
	this.sleeping = false;
	this.island = null;
	this.parent = this;
	this.rank = 0;
	this.woken = false;
};
$hxClasses["zpp_nape.space.ZPP_Component"] = zpp_nape.space.ZPP_Component;
zpp_nape.space.ZPP_Component.__name__ = ["zpp_nape","space","ZPP_Component"];
zpp_nape.space.ZPP_Component.prototype = {
	free: function() {
		this.body = null;
		this.constraint = null;
	}
	,alloc: function() {
	}
	,reset: function() {
		this.sleeping = false;
		this.island = null;
		this.parent = this;
		this.rank = 0;
	}
	,__class__: zpp_nape.space.ZPP_Component
};
zpp_nape.space.ZPP_CallbackSet = function() {
	this.lazydel = false;
	this.freed = false;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.int2 = null;
	this.int1 = null;
	this.di = 0;
	this.id = 0;
	this.arbiters = new zpp_nape.util.ZNPList_ZPP_Arbiter();
};
$hxClasses["zpp_nape.space.ZPP_CallbackSet"] = zpp_nape.space.ZPP_CallbackSet;
zpp_nape.space.ZPP_CallbackSet.__name__ = ["zpp_nape","space","ZPP_CallbackSet"];
zpp_nape.space.ZPP_CallbackSet.get = function(i1,i2) {
	var ret;
	if(zpp_nape.space.ZPP_CallbackSet.zpp_pool == null) ret = new zpp_nape.space.ZPP_CallbackSet(); else {
		ret = zpp_nape.space.ZPP_CallbackSet.zpp_pool;
		zpp_nape.space.ZPP_CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.freed = false;
	ret.lazydel = false;
	ret.COLLISIONstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
	ret.COLLISIONstamp = 0;
	ret.SENSORstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
	ret.SENSORstamp = 0;
	ret.FLUIDstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
	ret.FLUIDstamp = 0;
	if(i1.id < i2.id) {
		ret.int1 = i1;
		ret.int2 = i2;
	} else {
		ret.int1 = i2;
		ret.int2 = i1;
	}
	ret.id = ret.int1.id;
	ret.di = ret.int2.id;
	return ret;
};
zpp_nape.space.ZPP_CallbackSet.prototype = {
	elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,free: function() {
		this.int1 = this.int2 = null;
		this.id = this.di = -1;
		this.freed = true;
	}
	,alloc: function() {
		this.freed = false;
		this.lazydel = false;
		this.COLLISIONstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
		this.COLLISIONstamp = 0;
		this.SENSORstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
		this.SENSORstamp = 0;
		this.FLUIDstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
		this.FLUIDstamp = 0;
	}
	,add_arb: function(x) {
		if(!this.arbiters.inlined_has(x)) {
			this.arbiters.inlined_add(x);
			return true;
		} else return false;
	}
	,try_remove_arb: function(x) {
		return this.arbiters.inlined_try_remove(x);
	}
	,remove_arb: function(x) {
		this.arbiters.inlined_try_remove(x);
	}
	,empty_arb: function(type) {
		var retvar;
		retvar = true;
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if((x.type & type) == 0) {
				cx_ite = cx_ite.next;
				continue;
			} else {
				retvar = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return retvar;
	}
	,really_empty: function() {
		return this.arbiters.head == null;
	}
	,sleeping: function() {
		var ret;
		ret = true;
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x.sleeping) {
				cx_ite = cx_ite.next;
				continue;
			} else {
				ret = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,__class__: zpp_nape.space.ZPP_CallbackSet
};
zpp_nape.space.ZPP_CbSetManager = function(space) {
	this.space = null;
	this.cbsets = null;
	if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) this.cbsets = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
		this.cbsets = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = this.cbsets.next;
		this.cbsets.next = null;
	}
	null;
	this.cbsets.lt = zpp_nape.callbacks.ZPP_CbSet.setlt;
	this.space = space;
};
$hxClasses["zpp_nape.space.ZPP_CbSetManager"] = zpp_nape.space.ZPP_CbSetManager;
zpp_nape.space.ZPP_CbSetManager.__name__ = ["zpp_nape","space","ZPP_CbSetManager"];
zpp_nape.space.ZPP_CbSetManager.prototype = {
	get: function(cbTypes) {
		if(cbTypes.head == null) return null;
		var fake;
		if(zpp_nape.callbacks.ZPP_CbSet.zpp_pool == null) fake = new zpp_nape.callbacks.ZPP_CbSet(); else {
			fake = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
			zpp_nape.callbacks.ZPP_CbSet.zpp_pool = fake.next;
			fake.next = null;
		}
		null;
		var faketypes = fake.cbTypes;
		fake.cbTypes = cbTypes;
		var res = this.cbsets.find_weak(fake);
		var ret;
		if(res != null) ret = res.data; else {
			var set = zpp_nape.callbacks.ZPP_CbSet.get(cbTypes);
			this.cbsets.insert(set);
			set.manager = this;
			ret = set;
		}
		fake.cbTypes = faketypes;
		var o = fake;
		o.free();
		o.next = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
		zpp_nape.callbacks.ZPP_CbSet.zpp_pool = o;
		return ret;
	}
	,remove: function(set) {
		this.cbsets.remove(set);
		while(!(set.cbpairs.head == null)) {
			var pair = set.cbpairs.pop_unsafe();
			if(pair.a != pair.b) {
				if(set == pair.a) pair.b.cbpairs.remove(pair); else pair.a.cbpairs.remove(pair);
			}
			var o = pair;
			o.a = o.b = null;
			o.listeners.clear();
			o.next = zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool;
			zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = o;
		}
		set.manager = null;
	}
	,clear: function() {
	}
	,validate: function() {
		if(!this.cbsets.empty()) {
			var set_ite = this.cbsets.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var cb = set_ite.data;
				cb.validate();
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
	}
	,pair: function(a,b) {
		var ret = null;
		var pairs;
		if(a.cbpairs.length < b.cbpairs.length) pairs = a.cbpairs; else pairs = b.cbpairs;
		var cx_ite = pairs.head;
		while(cx_ite != null) {
			var p = cx_ite.elt;
			if(p.a == a && p.b == b || p.a == b && p.b == a) {
				ret = p;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret == null) {
			ret = zpp_nape.callbacks.ZPP_CbSetPair.get(a,b);
			a.cbpairs.add(ret);
			if(b != a) b.cbpairs.add(ret);
		}
		if(ret.zip_listeners) {
			ret.zip_listeners = false;
			ret.__validate();
		}
		return ret;
	}
	,valid_listener: function(i) {
		return i.space == this.space;
	}
	,__class__: zpp_nape.space.ZPP_CbSetManager
};
zpp_nape.space.ZPP_Space = function(gravity,broadphase) {
	this.prelisteners = null;
	this.precb = null;
	this.continuous = false;
	this.toiEvents = null;
	this.pre_dt = 0.0;
	this.convexShapeList = null;
	this.cbsets = null;
	this.callbackset_list = null;
	this.callbacks = null;
	this.wrap_listeners = null;
	this.listeners = null;
	this.islands = null;
	this.staticsleep = null;
	this.wrap_livecon = null;
	this.live_constraints = null;
	this.wrap_live = null;
	this.live = null;
	this.wrap_arbiters = null;
	this.s_arbiters = null;
	this.f_arbiters = null;
	this.c_arbiters_false = null;
	this.c_arbiters_true = null;
	this.sortcontacts = false;
	this.time = 0.0;
	this.midstep = false;
	this.stamp = 0;
	this.global_ang_drag = 0.0;
	this.global_lin_drag = 0.0;
	this.__static = null;
	this.bphase = null;
	this.kinematics = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_compounds = null;
	this.compounds = null;
	this.wrap_bodies = null;
	this.bodies = null;
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.userData = null;
	this.outer = null;
	this.toiEvents = new zpp_nape.util.ZNPList_ZPP_ToiEvent();
	this.global_lin_drag = 0.015;
	this.global_ang_drag = 0.015;
	this.precb = new nape.callbacks.PreCallback();
	this.precb.zpp_inner = new zpp_nape.callbacks.ZPP_Callback();
	this.sortcontacts = true;
	this.pre_dt = 0.0;
	if(broadphase == null || broadphase == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
		return $r;
	}(this))) this.bphase = new zpp_nape.space.ZPP_DynAABBPhase(this); else if(broadphase == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
		return $r;
	}(this))) this.bphase = new zpp_nape.space.ZPP_SweepPhase(this);
	this.time = 0.0;
	var me = this;
	if(gravity != null) {
		this.gravityx = gravity.x;
		this.gravityy = gravity.y;
	} else {
		this.gravityx = 0;
		this.gravityy = 0;
	}
	this.bodies = new zpp_nape.util.ZNPList_ZPP_Body();
	this.wrap_bodies = zpp_nape.util.ZPP_BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.compounds = new zpp_nape.util.ZNPList_ZPP_Compound();
	this.wrap_compounds = zpp_nape.util.ZPP_CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.kinematics = new zpp_nape.util.ZNPList_ZPP_Body();
	this.c_arbiters_true = new zpp_nape.util.ZNPList_ZPP_ColArbiter();
	this.c_arbiters_false = new zpp_nape.util.ZNPList_ZPP_ColArbiter();
	this.f_arbiters = new zpp_nape.util.ZNPList_ZPP_FluidArbiter();
	this.s_arbiters = new zpp_nape.util.ZNPList_ZPP_SensorArbiter();
	this.islands = new zpp_nape.space.ZPP_Island();
	this.live = new zpp_nape.util.ZNPList_ZPP_Body();
	this.wrap_live = zpp_nape.util.ZPP_BodyList.get(this.live,true);
	this.staticsleep = new zpp_nape.util.ZNPList_ZPP_Body();
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.live_constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.wrap_livecon = zpp_nape.util.ZPP_ConstraintList.get(this.live_constraints,true);
	this.__static = zpp_nape.phys.ZPP_Body.__static();
	this.__static.zpp_inner.space = this;
	this.callbacks = new zpp_nape.callbacks.ZPP_Callback();
	this.midstep = false;
	this.listeners = new zpp_nape.util.ZNPList_ZPP_Listener();
	this.wrap_listeners = zpp_nape.util.ZPP_ListenerList.get(this.listeners);
	this.wrap_listeners.zpp_inner.adder = $bind(this,this.listeners_adder);
	this.wrap_listeners.zpp_inner.subber = $bind(this,this.listeners_subber);
	this.callbackset_list = new zpp_nape.space.ZPP_CallbackSet();
	this.mrca1 = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this.mrca2 = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this.prelisteners = new zpp_nape.util.ZNPList_ZPP_InteractionListener();
	this.cbsets = new zpp_nape.space.ZPP_CbSetManager(this);
};
$hxClasses["zpp_nape.space.ZPP_Space"] = zpp_nape.space.ZPP_Space;
zpp_nape.space.ZPP_Space.__name__ = ["zpp_nape","space","ZPP_Space"];
zpp_nape.space.ZPP_Space.prototype = {
	getgravity: function() {
		this.wrap_gravity = nape.geom.Vec2.get(this.gravityx,this.gravityy,null);
		this.wrap_gravity.zpp_inner._inuse = true;
		this.wrap_gravity.zpp_inner._invalidate = $bind(this,this.gravity_invalidate);
		this.wrap_gravity.zpp_inner._validate = $bind(this,this.gravity_validate);
	}
	,gravity_invalidate: function(x) {
		this.gravityx = x.x;
		this.gravityy = x.y;
		var stack = new zpp_nape.util.ZNPList_ZPP_Compound();
		var cx_ite = this.bodies.head;
		while(cx_ite != null) {
			var x1 = cx_ite.elt;
			var o = x1;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,false);
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.compounds.head;
		while(cx_ite1 != null) {
			var i = cx_ite1.elt;
			stack.add(i);
			cx_ite1 = cx_ite1.next;
		}
		while(!(stack.head == null)) {
			var s = stack.pop_unsafe();
			var cx_ite2 = s.bodies.head;
			while(cx_ite2 != null) {
				var x2 = cx_ite2.elt;
				var o1 = x2;
				if(!o1.world) {
					o1.component.waket = this.stamp + (this.midstep?0:1);
					if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
					if(o1.component.sleeping) this.really_wake(o1,false);
				}
				cx_ite2 = cx_ite2.next;
			}
			var cx_ite3 = s.compounds.head;
			while(cx_ite3 != null) {
				var i1 = cx_ite3.elt;
				stack.add(i1);
				cx_ite3 = cx_ite3.next;
			}
		}
	}
	,gravity_validate: function() {
		this.wrap_gravity.zpp_inner.x = this.gravityx;
		this.wrap_gravity.zpp_inner.y = this.gravityy;
	}
	,clear: function() {
		while(!(this.listeners.head == null)) {
			var c = this.listeners.pop_unsafe();
			this.remListener(c);
		}
		while(!(this.callbackset_list.next == null)) {
			var c1 = this.callbackset_list.pop_unsafe();
			c1.arbiters.clear();
			var o = c1;
			o.int1 = o.int2 = null;
			o.id = o.di = -1;
			o.freed = true;
			null;
			o.next = zpp_nape.space.ZPP_CallbackSet.zpp_pool;
			zpp_nape.space.ZPP_CallbackSet.zpp_pool = o;
		}
		while(!(this.c_arbiters_true.head == null)) {
			var arb = this.c_arbiters_true.pop_unsafe();
			arb.retire();
		}
		while(!(this.c_arbiters_false.head == null)) {
			var arb1 = this.c_arbiters_false.pop_unsafe();
			arb1.retire();
		}
		while(!(this.s_arbiters.head == null)) {
			var arb2 = this.s_arbiters.pop_unsafe();
			arb2.retire();
		}
		while(!(this.f_arbiters.head == null)) {
			var arb3 = this.f_arbiters.pop_unsafe();
			arb3.retire();
		}
		this.bphase.clear();
		while(!(this.bodies.head == null)) {
			var b = this.bodies.pop_unsafe();
			if(b.component != null) {
				var i = b.component.island;
				if(i != null) {
					while(!(i.comps.head == null)) {
						var c2 = i.comps.pop_unsafe();
						c2.sleeping = false;
						c2.island = null;
						c2.parent = c2;
						c2.rank = 0;
					}
					var o1 = i;
					o1.next = zpp_nape.space.ZPP_Island.zpp_pool;
					zpp_nape.space.ZPP_Island.zpp_pool = o1;
				}
			}
			b.removedFromSpace();
			b.space = null;
		}
		while(!(this.constraints.head == null)) {
			var c3 = this.constraints.pop_unsafe();
			if(c3.component != null) {
				var i1 = c3.component.island;
				if(i1 != null) {
					while(!(i1.comps.head == null)) {
						var c4 = i1.comps.pop_unsafe();
						c4.sleeping = false;
						c4.island = null;
						c4.parent = c4;
						c4.rank = 0;
					}
					var o2 = i1;
					o2.next = zpp_nape.space.ZPP_Island.zpp_pool;
					zpp_nape.space.ZPP_Island.zpp_pool = o2;
				}
			}
			c3.removedFromSpace();
			c3.space = null;
		}
		this.kinematics.clear();
		var stack = new zpp_nape.util.ZNPList_ZPP_Compound();
		while(!(this.compounds.head == null)) {
			var c5 = this.compounds.pop_unsafe();
			stack.add(c5);
		}
		while(!(stack.head == null)) {
			var comp = stack.pop_unsafe();
			comp.removedFromSpace();
			comp.space = null;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var b1 = cx_ite.elt;
				if(b1.component != null) {
					var i2 = b1.component.island;
					if(i2 != null) {
						while(!(i2.comps.head == null)) {
							var c6 = i2.comps.pop_unsafe();
							c6.sleeping = false;
							c6.island = null;
							c6.parent = c6;
							c6.rank = 0;
						}
						var o3 = i2;
						o3.next = zpp_nape.space.ZPP_Island.zpp_pool;
						zpp_nape.space.ZPP_Island.zpp_pool = o3;
					}
				}
				b1.removedFromSpace();
				b1.space = null;
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.constraints.head;
			while(cx_ite1 != null) {
				var c7 = cx_ite1.elt;
				if(c7.component != null) {
					var i3 = c7.component.island;
					if(i3 != null) {
						while(!(i3.comps.head == null)) {
							var c8 = i3.comps.pop_unsafe();
							c8.sleeping = false;
							c8.island = null;
							c8.parent = c8;
							c8.rank = 0;
						}
						var o4 = i3;
						o4.next = zpp_nape.space.ZPP_Island.zpp_pool;
						zpp_nape.space.ZPP_Island.zpp_pool = o4;
					}
				}
				c7.removedFromSpace();
				c7.space = null;
				cx_ite1 = cx_ite1.next;
			}
			var cx_ite2 = comp.compounds.head;
			while(cx_ite2 != null) {
				var i4 = cx_ite2.elt;
				stack.add(i4);
				cx_ite2 = cx_ite2.next;
			}
		}
		this.staticsleep.clear();
		this.live.clear();
		this.live_constraints.clear();
		this.stamp = 0;
		this.time = 0.0;
		this.mrca1.clear();
		this.mrca2.clear();
		this.prelisteners.clear();
		this.cbsets.clear();
	}
	,bodies_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_bodies.remove(x);
			this.addBody(x.zpp_inner);
			return true;
		} else return false;
	}
	,bodies_subber: function(x) {
		this.remBody(x.zpp_inner);
	}
	,compounds_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_compounds.remove(x);
			this.addCompound(x.zpp_inner);
			return true;
		} else return false;
	}
	,compounds_subber: function(x) {
		this.remCompound(x.zpp_inner);
	}
	,constraints_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(x);
			this.addConstraint(x.zpp_inner);
			return true;
		} else return false;
	}
	,constraints_subber: function(x) {
		this.remConstraint(x.zpp_inner);
	}
	,listeners_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(x);
			this.addListener(x.zpp_inner);
			return true;
		} else return false;
	}
	,listeners_subber: function(x) {
		this.remListener(x.zpp_inner);
	}
	,revoke_listener: function(x) {
	}
	,unrevoke_listener: function(x) {
	}
	,addListener: function(x) {
		x.space = this;
		x.addedToSpace();
		if(x.interaction != null) null;
	}
	,remListener: function(x) {
		if(x.interaction != null) null;
		x.removedFromSpace();
		x.space = null;
	}
	,add_callbackset: function(cb) {
		cb.int1.cbsets.inlined_add(cb);
		cb.int2.cbsets.inlined_add(cb);
		this.callbackset_list.inlined_add(cb);
	}
	,remove_callbackset: function(cb) {
		cb.lazydel = true;
		cb.int1.cbsets.inlined_try_remove(cb);
		cb.int2.cbsets.inlined_try_remove(cb);
	}
	,transmitType: function(p,new_type) {
		var o = p;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep?0:1);
			if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
			if(o.component.sleeping) this.really_wake(o,false);
		}
		if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.live.remove(p); else if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) {
			this.kinematics.remove(p);
			this.staticsleep.remove(p);
		} else if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) this.staticsleep.remove(p);
		p.type = new_type;
		if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) this.kinematics.add(p);
		if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) this.static_validation(p);
		p.component.sleeping = true;
		var o1 = p;
		if(!o1.world) {
			o1.component.waket = this.stamp + (this.midstep?0:1);
			if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
			if(o1.component.sleeping) this.really_wake(o1,true);
		}
	}
	,added_shape: function(s,dontwake) {
		if(dontwake == null) dontwake = false;
		if(!dontwake) {
			var o = s.body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,false);
			}
		}
		this.bphase.insert(s);
		s.addedToSpace();
	}
	,removed_shape: function(s,deleting) {
		if(deleting == null) deleting = false;
		var _g = this;
		var body = s.body;
		if(!deleting) body.wake();
		var pre = null;
		var cx_ite = body.arbiters.head;
		while(cx_ite != null) {
			var xarb = [cx_ite.elt];
			var rem = xarb[0].ws1 == s || xarb[0].ws2 == s;
			if(rem) {
				if(xarb[0].present != 0) {
					this.MRCA_chains(xarb[0].ws1,xarb[0].ws2);
					var cx_ite1 = this.mrca1.head;
					while(cx_ite1 != null) {
						var i1 = cx_ite1.elt;
						var cx_ite2 = this.mrca2.head;
						while(cx_ite2 != null) {
							var i2 = cx_ite2.elt;
							var cb1 = i1.cbSet;
							var cb2 = i2.cbSet;
							cb1.validate();
							cb2.validate();
							if(cb1.manager.pair(cb1,cb2).empty_intersection()) {
								cx_ite2 = cx_ite2.next;
								continue;
							}
							var callbackset = [zpp_nape.phys.ZPP_Interactor.get(i1,i2)];
							callbackset[0].remove_arb(xarb[0]);
							xarb[0].present--;
							cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_END,(function(callbackset,xarb) {
								return function(listener) {
									if((listener.itype & xarb[0].type) != 0 && callbackset[0].empty_arb(listener.itype)) {
										var cb = _g.push_callback(listener);
										cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_END;
										zpp_nape.phys.ZPP_Interactor.int_callback(callbackset[0],listener,cb);
										cb.set = callbackset[0];
									}
								};
							})(callbackset,xarb));
							if(callbackset[0].arbiters.head == null) this.remove_callbackset(callbackset[0]);
							cx_ite2 = cx_ite2.next;
						}
						cx_ite1 = cx_ite1.next;
					}
				}
				if(xarb[0].b1 != body && xarb[0].b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
					var o = xarb[0].b1;
					if(!o.world) {
						o.component.waket = this.stamp + (this.midstep?0:1);
						if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
						if(o.component.sleeping) this.really_wake(o,false);
					}
				}
				if(xarb[0].b2 != body && xarb[0].b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
					var o1 = xarb[0].b2;
					if(!o1.world) {
						o1.component.waket = this.stamp + (this.midstep?0:1);
						if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
						if(o1.component.sleeping) this.really_wake(o1,false);
					}
				}
				xarb[0].cleared = true;
				if(body == null || xarb[0].b2 == body) xarb[0].b1.arbiters.inlined_try_remove(xarb[0]);
				if(body == null || xarb[0].b1 == body) xarb[0].b2.arbiters.inlined_try_remove(xarb[0]);
				if(xarb[0].pair != null) {
					xarb[0].pair.arb = null;
					xarb[0].pair = null;
				}
				xarb[0].active = false;
				this.f_arbiters.modified = true;
				cx_ite = body.arbiters.erase(pre);
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.bphase.remove(s);
		s.removedFromSpace();
	}
	,addConstraint: function(con) {
		con.space = this;
		con.addedToSpace();
		if(con.active) {
			con.component.sleeping = true;
			this.wake_constraint(con,true);
		}
	}
	,remConstraint: function(con) {
		if(con.active) {
			this.wake_constraint(con,true);
			this.live_constraints.remove(con);
		}
		con.removedFromSpace();
		con.space = null;
	}
	,addCompound: function(x) {
		x.space = this;
		x.addedToSpace();
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.addBody(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			var i1 = cx_ite1.elt;
			this.addConstraint(i1);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			var i2 = cx_ite2.elt;
			this.addCompound(i2);
			cx_ite2 = cx_ite2.next;
		}
	}
	,remCompound: function(x) {
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.remBody(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			var i1 = cx_ite1.elt;
			this.remConstraint(i1);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			var i2 = cx_ite2.elt;
			this.remCompound(i2);
			cx_ite2 = cx_ite2.next;
		}
		x.removedFromSpace();
		x.space = null;
	}
	,addBody: function(body,flag) {
		if(flag == null) flag = -1;
		body.space = this;
		body.addedToSpace();
		body.component.sleeping = true;
		var o = body;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep?0:1);
			if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
			if(o.component.sleeping) this.really_wake(o,true);
		}
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			this.added_shape(shape,true);
			cx_ite = cx_ite.next;
		}
		if(body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) {
			this.static_validation(body);
		} else if(body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		} else {
			if(flag != zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) this.kinematics.add(body);
		}
	}
	,remBody: function(body,flag) {
		if(flag == null) flag = -1;
		if(body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) {
			var o = body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,true);
			}
			this.staticsleep.remove(body);
		} else if(body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var o1 = body;
			if(!o1.world) {
				o1.component.waket = this.stamp + (this.midstep?0:1);
				if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
				if(o1.component.sleeping) this.really_wake(o1,true);
			}
			this.live.remove(body);
		} else {
			if(flag != zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) this.kinematics.remove(body);
			var o2 = body;
			if(!o2.world) {
				o2.component.waket = this.stamp + (this.midstep?0:1);
				if(o2.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o2.kinematicDelaySleep = true;
				if(o2.component.sleeping) this.really_wake(o2,true);
			}
			this.staticsleep.remove(body);
		}
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			this.removed_shape(shape,true);
			cx_ite = cx_ite.next;
		}
		body.removedFromSpace();
		body.space = null;
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		return this.bphase.shapesUnderPoint(x,y,filter,output);
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		return this.bphase.bodiesUnderPoint(x,y,filter,output);
	}
	,shapesInAABB: function(aabb,strict,cont,filter,output) {
		return this.bphase.shapesInAABB(aabb.zpp_inner,strict,cont,filter,output);
	}
	,bodiesInAABB: function(aabb,strict,cont,filter,output) {
		return this.bphase.bodiesInAABB(aabb.zpp_inner,strict,cont,filter,output);
	}
	,shapesInCircle: function(pos,rad,cont,filter,output) {
		return this.bphase.shapesInCircle((function($this) {
			var $r;
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this)),rad,cont,filter,output);
	}
	,bodiesInCircle: function(pos,rad,cont,filter,output) {
		return this.bphase.bodiesInCircle((function($this) {
			var $r;
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this)),rad,cont,filter,output);
	}
	,shapesInShape: function(shape,cont,filter,output) {
		return this.bphase.shapesInShape(shape,cont,filter,output);
	}
	,bodiesInShape: function(shape,cont,filter,output) {
		return this.bphase.bodiesInShape(shape,cont,filter,output);
	}
	,rayCast: function(ray,inner,filter) {
		return this.bphase.rayCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner);
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		return this.bphase.rayMultiCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner,output);
	}
	,convexCast: function(shape,deltaTime,filter,dynamics) {
		var toi;
		if(zpp_nape.geom.ZPP_ToiEvent.zpp_pool == null) toi = new zpp_nape.geom.ZPP_ToiEvent(); else {
			toi = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
			zpp_nape.geom.ZPP_ToiEvent.zpp_pool = toi.next;
			toi.next = null;
		}
		toi.failed = false;
		toi.s1 = toi.s2 = null;
		toi.arbiter = null;
		if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.validate_worldCOM(); else shape.polygon.validate_gaxi();
		var body = shape.body;
		var prex = body.posx;
		var prey = body.posy;
		body.sweepTime = 0;
		body.sweep_angvel = body.angvel;
		body.sweepIntegrate(deltaTime);
		var postx = body.posx;
		var posty = body.posy;
		shape.validate_sweepRadius();
		var rad = shape.sweepRadius;
		var aabb;
		if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) aabb = new zpp_nape.geom.ZPP_AABB(); else {
			aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = aabb.next;
			aabb.next = null;
		}
		null;
		aabb.minx = (function($this) {
			var $r;
			var x = prex;
			var y = postx;
			$r = x < y?x:y;
			return $r;
		}(this)) - rad;
		aabb.maxx = (function($this) {
			var $r;
			var x1 = prex;
			var y1 = postx;
			$r = x1 > y1?x1:y1;
			return $r;
		}(this)) + rad;
		aabb.miny = (function($this) {
			var $r;
			var x2 = prey;
			var y2 = posty;
			$r = x2 < y2?x2:y2;
			return $r;
		}(this)) - rad;
		aabb.maxy = (function($this) {
			var $r;
			var x3 = prey;
			var y3 = posty;
			$r = x3 > y3?x3:y3;
			return $r;
		}(this)) + rad;
		var list = this.convexShapeList = this.bphase.shapesInAABB(aabb,false,false,filter == null?null:filter.zpp_inner,this.convexShapeList);
		var o = aabb;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = o;
		var minAxisx = 0.0;
		var minAxisy = 0.0;
		minAxisx = 0;
		minAxisy = 0;
		var minPosx = 0.0;
		var minPosy = 0.0;
		minPosx = 0;
		minPosy = 0;
		var mins = null;
		var mint = deltaTime + 1;
		var _g;
		list.zpp_inner.valmod();
		_g = nape.shape.ShapeIterator.get(list);
		while(_g.hasNext()) {
			var s;
			_g.zpp_critical = false;
			s = _g.zpp_inner.at(_g.zpp_i++);
			if(s != shape.outer && (s.zpp_inner.body != null?s.zpp_inner.body.outer:null) != body.outer) {
				toi.s1 = shape;
				toi.s2 = s.zpp_inner;
				if(dynamics) {
					s.zpp_inner.validate_sweepRadius();
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweep_angvel = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.angvel;
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepTime = 0;
					zpp_nape.geom.ZPP_SweepDistance.dynamicSweep(toi,deltaTime,0,0,true);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepIntegrate(0);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepValidate(s.zpp_inner);
				} else zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,deltaTime,0,0);
				toi.toi *= deltaTime;
				if(toi.toi > 0 && toi.toi < mint) {
					mint = toi.toi;
					minAxisx = toi.axis.x;
					minAxisy = toi.axis.y;
					minPosx = toi.c2.x;
					minPosy = toi.c2.y;
					mins = s;
				}
			}
		}
		list.clear();
		var o1 = toi;
		o1.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
		zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o1;
		body.sweepIntegrate(0);
		body.sweepValidate(shape);
		if(mint <= deltaTime) return zpp_nape.geom.ZPP_ConvexRayResult.getConvex(nape.geom.Vec2.get(-minAxisx,-minAxisy,null),nape.geom.Vec2.get(minPosx,minPosy,null),mint,mins); else return null;
	}
	,prepareCast: function(s) {
		if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle.validate_worldCOM(); else s.polygon.validate_gaxi();
	}
	,convexMultiCast: function(shape,deltaTime,filter,dynamics,output) {
		var toi;
		if(zpp_nape.geom.ZPP_ToiEvent.zpp_pool == null) toi = new zpp_nape.geom.ZPP_ToiEvent(); else {
			toi = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
			zpp_nape.geom.ZPP_ToiEvent.zpp_pool = toi.next;
			toi.next = null;
		}
		toi.failed = false;
		toi.s1 = toi.s2 = null;
		toi.arbiter = null;
		if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.validate_worldCOM(); else shape.polygon.validate_gaxi();
		var body = shape.body;
		var prex = body.posx;
		var prey = body.posy;
		body.sweepTime = 0;
		body.sweep_angvel = body.angvel;
		body.sweepIntegrate(deltaTime);
		var postx = body.posx;
		var posty = body.posy;
		shape.validate_sweepRadius();
		var rad = shape.sweepRadius;
		var aabb;
		if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) aabb = new zpp_nape.geom.ZPP_AABB(); else {
			aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = aabb.next;
			aabb.next = null;
		}
		null;
		aabb.minx = (function($this) {
			var $r;
			var x = prex;
			var y = postx;
			$r = x < y?x:y;
			return $r;
		}(this)) - rad;
		aabb.maxx = (function($this) {
			var $r;
			var x1 = prex;
			var y1 = postx;
			$r = x1 > y1?x1:y1;
			return $r;
		}(this)) + rad;
		aabb.miny = (function($this) {
			var $r;
			var x2 = prey;
			var y2 = posty;
			$r = x2 < y2?x2:y2;
			return $r;
		}(this)) - rad;
		aabb.maxy = (function($this) {
			var $r;
			var x3 = prey;
			var y3 = posty;
			$r = x3 > y3?x3:y3;
			return $r;
		}(this)) + rad;
		var list = this.convexShapeList = this.bphase.shapesInAABB(aabb,false,false,filter == null?null:filter.zpp_inner,this.convexShapeList);
		var o = aabb;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = o;
		var ret;
		if(output == null) ret = new nape.geom.ConvexResultList(); else ret = output;
		var _g;
		list.zpp_inner.valmod();
		_g = nape.shape.ShapeIterator.get(list);
		while(_g.hasNext()) {
			var s;
			_g.zpp_critical = false;
			s = _g.zpp_inner.at(_g.zpp_i++);
			if(s != shape.outer && (s.zpp_inner.body != null?s.zpp_inner.body.outer:null) != body.outer) {
				toi.s1 = shape;
				toi.s2 = s.zpp_inner;
				if(dynamics) {
					s.zpp_inner.validate_sweepRadius();
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweep_angvel = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.angvel;
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepTime = 0;
					zpp_nape.geom.ZPP_SweepDistance.dynamicSweep(toi,deltaTime,0,0,true);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepIntegrate(0);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepValidate(s.zpp_inner);
				} else zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,deltaTime,0,0);
				toi.toi *= deltaTime;
				if(toi.toi > 0) {
					var res = zpp_nape.geom.ZPP_ConvexRayResult.getConvex(nape.geom.Vec2.get(-toi.axis.x,-toi.axis.y,null),nape.geom.Vec2.get(toi.c2.x,toi.c2.y,null),toi.toi,s);
					var pre = null;
					var cx_ite = ret.zpp_inner.inner.head;
					while(cx_ite != null) {
						var j = cx_ite.elt;
						if(res.zpp_inner.toiDistance < j.zpp_inner.toiDistance) break;
						pre = cx_ite;
						cx_ite = cx_ite.next;
					}
					ret.zpp_inner.inner.inlined_insert(pre,res);
				}
			}
		}
		list.clear();
		var o1 = toi;
		o1.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
		zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o1;
		body.sweepIntegrate(0);
		body.sweepValidate(shape);
		return ret;
	}
	,push_callback: function(i) {
		var cb;
		if(zpp_nape.callbacks.ZPP_Callback.zpp_pool == null) cb = new zpp_nape.callbacks.ZPP_Callback(); else {
			cb = zpp_nape.callbacks.ZPP_Callback.zpp_pool;
			zpp_nape.callbacks.ZPP_Callback.zpp_pool = cb.next;
			cb.next = null;
		}
		null;
		this.callbacks.push(cb);
		cb.listener = i;
		return cb;
	}
	,step: function(deltaTime,velocityIterations,positionIterations) {
		var _g = this;
		this.time += deltaTime;
		this.pre_dt = deltaTime;
		this.midstep = true;
		this.stamp++;
		this.validation();
		this.bphase.broadphase(this,true);
		this.prestep(deltaTime);
		if(this.sortcontacts) {
			var xxlist = this.c_arbiters_false;
			if(!(xxlist.head == null) && xxlist.head.next != null) {
				var head = xxlist.head;
				var tail = null;
				var left = null;
				var right = null;
				var nxt = null;
				var listSize = 1;
				var numMerges;
				var leftSize;
				var rightSize;
				do {
					numMerges = 0;
					left = head;
					tail = head = null;
					while(left != null) {
						numMerges++;
						right = left;
						leftSize = 0;
						rightSize = listSize;
						while(right != null && leftSize < listSize) {
							leftSize++;
							right = right.next;
						}
						while(leftSize > 0 || rightSize > 0 && right != null) {
							if(leftSize == 0) {
								nxt = right;
								right = right.next;
								rightSize--;
							} else if(rightSize == 0 || right == null) {
								nxt = left;
								left = left.next;
								leftSize--;
							} else if(left.elt.active && right.elt.active?left.elt.oc1.dist < right.elt.oc1.dist:true) {
								nxt = left;
								left = left.next;
								leftSize--;
							} else {
								nxt = right;
								right = right.next;
								rightSize--;
							}
							if(tail != null) tail.next = nxt; else head = nxt;
							tail = nxt;
						}
						left = right;
					}
					tail.next = null;
					listSize <<= 1;
				} while(numMerges > 1);
				xxlist.head = head;
				xxlist.modified = true;
				xxlist.pushmod = true;
			}
		}
		this.updateVel(deltaTime);
		this.warmStart();
		this.iterateVel(velocityIterations);
		var cx_ite = this.kinematics.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.live.head;
		while(cx_ite1 != null) {
			var cur1 = cx_ite1.elt;
			cur1.pre_posx = cur1.posx;
			cur1.pre_posy = cur1.posy;
			cur1.pre_rot = cur1.rot;
			cx_ite1 = cx_ite1.next;
		}
		this.updatePos(deltaTime);
		this.continuous = true;
		this.continuousCollisions(deltaTime);
		this.continuous = false;
		this.iteratePos(positionIterations);
		var cx_ite2 = this.kinematics.head;
		while(cx_ite2 != null) {
			var cur2 = cx_ite2.elt;
			var upos = !(cur2.posx == cur2.pre_posx && cur2.posy == cur2.pre_posy);
			var urot = cur2.pre_rot != cur2.rot;
			if(upos) cur2.invalidate_pos();
			if(urot) cur2.invalidate_rot();
			cx_ite2 = cx_ite2.next;
		}
		var cx_ite3 = this.live.head;
		while(cx_ite3 != null) {
			var cur3 = cx_ite3.elt;
			var upos1 = !(cur3.posx == cur3.pre_posx && cur3.posy == cur3.pre_posy);
			var urot1 = cur3.pre_rot != cur3.rot;
			if(upos1) cur3.invalidate_pos();
			if(urot1) cur3.invalidate_rot();
			cx_ite3 = cx_ite3.next;
		}
		var pre = null;
		var cx_ite4 = this.staticsleep.head;
		while(cx_ite4 != null) {
			var b = cx_ite4.elt;
			if(!(b.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) || b.velx == 0 && b.vely == 0 && b.angvel == 0) {
				if(b.kinematicDelaySleep) {
					b.kinematicDelaySleep = false;
					cx_ite4 = cx_ite4.next;
					continue;
				}
				b.component.sleeping = true;
				cx_ite4 = this.staticsleep.inlined_erase(pre);
				continue;
			}
			pre = cx_ite4;
			cx_ite4 = cx_ite4.next;
		}
		this.doForests(deltaTime);
		this.sleepArbiters();
		this.midstep = false;
		var pre1 = null;
		var cx_ite5 = this.callbackset_list.next;
		while(cx_ite5 != null) {
			var set = [cx_ite5];
			if(set[0].arbiters.head == null) {
				cx_ite5 = this.callbackset_list.inlined_erase(pre1);
				var o = set[0];
				o.int1 = o.int2 = null;
				o.id = o.di = -1;
				o.freed = true;
				null;
				o.next = zpp_nape.space.ZPP_CallbackSet.zpp_pool;
				zpp_nape.space.ZPP_CallbackSet.zpp_pool = o;
				continue;
			}
			var sleeping = [set[0].sleeping()];
			zpp_nape.callbacks.ZPP_CbSet.find_all(set[0].int1.cbSet,set[0].int2.cbSet,zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING,(function(sleeping,set) {
				return function(x) {
					if((!sleeping[0] || x.allowSleepingCallbacks) && !set[0].empty_arb(x.itype)) {
						var cb = _g.push_callback(x);
						cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING;
						zpp_nape.phys.ZPP_Interactor.int_callback(set[0],x,cb);
						cb.set = set[0];
					}
				};
			})(sleeping,set));
			pre1 = cx_ite5;
			cx_ite5 = cx_ite5.next;
		}
		while(!this.callbacks.empty()) {
			var cb1 = this.callbacks.pop();
			if(cb1.listener.type == zpp_nape.util.ZPP_Flags.id_ListenerType_BODY) {
				var o1 = cb1.listener.body;
				o1.handler(cb1.wrapper_body());
			} else if(cb1.listener.type == zpp_nape.util.ZPP_Flags.id_ListenerType_CONSTRAINT) {
				var o2 = cb1.listener.constraint;
				o2.handler(cb1.wrapper_con());
			} else if(cb1.listener.type == zpp_nape.util.ZPP_Flags.id_ListenerType_INTERACTION) {
				var o3 = cb1.listener.interaction;
				o3.handleri(cb1.wrapper_int());
			}
			var o4 = cb1;
			o4.int1 = o4.int2 = null;
			o4.body = null;
			o4.constraint = null;
			o4.listener = null;
			if(o4.wrap_arbiters != null) o4.wrap_arbiters.zpp_inner.inner = null;
			o4.set = null;
			o4.next = zpp_nape.callbacks.ZPP_Callback.zpp_pool;
			zpp_nape.callbacks.ZPP_Callback.zpp_pool = o4;
		}
	}
	,continuousCollisions: function(deltaTime) {
		var MAX_VEL = 2 * Math.PI / deltaTime;
		this.bphase.broadphase(this,false);
		var curTimeAlpha = 0.0;
		while(curTimeAlpha < 1 && !(this.toiEvents.head == null)) {
			var minTOI = null;
			var minTime = 2.0;
			var minKinematic = false;
			var preMin = null;
			var pre = null;
			var cx_ite = this.toiEvents.head;
			while(cx_ite != null) {
				var toi = cx_ite.elt;
				var b1 = toi.s1.body;
				var b2 = toi.s2.body;
				if(b1.sweepFrozen && b2.sweepFrozen) {
					if(toi.toi != 0 && zpp_nape.geom.ZPP_Collide.testCollide_safe(toi.s1,toi.s2)) toi.toi = 0; else {
						cx_ite = this.toiEvents.erase(pre);
						var o = toi;
						o.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
						zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o;
						continue;
					}
				}
				if(toi.frozen1 != b1.sweepFrozen || toi.frozen2 != b2.sweepFrozen) {
					if(!toi.kinematic) {
						toi.frozen1 = b1.sweepFrozen;
						toi.frozen2 = b2.sweepFrozen;
						if(toi.frozen1) {
							var tmp = toi.s1;
							toi.s1 = toi.s2;
							toi.s2 = tmp;
							toi.frozen1 = false;
							toi.frozen2 = true;
						}
						zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,deltaTime,0,nape.Config.collisionSlopCCD);
						if(toi.toi < 0) {
							cx_ite = this.toiEvents.erase(pre);
							var o1 = toi;
							o1.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
							zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o1;
							continue;
						}
					} else {
						cx_ite = this.toiEvents.erase(pre);
						var o2 = toi;
						o2.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
						zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o2;
						continue;
					}
				}
				if(toi.toi >= 0 && (toi.toi < minTime || !minKinematic && toi.kinematic)) {
					minTOI = toi;
					minTime = toi.toi;
					minKinematic = toi.kinematic;
					preMin = pre;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			if(minTOI == null) break;
			this.toiEvents.erase(preMin);
			curTimeAlpha = minTOI.toi;
			var b11 = minTOI.s1.body;
			var b21 = minTOI.s2.body;
			if(!b11.sweepFrozen) {
				b11.sweepIntegrate(curTimeAlpha * deltaTime);
				b11.sweepValidate(minTOI.s1);
			}
			if(!b21.sweepFrozen) {
				b21.sweepIntegrate(curTimeAlpha * deltaTime);
				b21.sweepValidate(minTOI.s2);
			}
			var wasnull = minTOI.arbiter == null;
			var arb = this.narrowPhase(minTOI.s1,minTOI.s2,true,minTOI.arbiter,true);
			if(arb == null) {
				if(minTOI.arbiter != null && minTOI.arbiter.pair != null) {
					minTOI.arbiter.pair.arb = null;
					minTOI.arbiter.pair = null;
				}
			} else if(!this.presteparb(arb,deltaTime,true)) {
				if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL && (arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0)) {
					arb.colarb.warmStart();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					b11.sweep_angvel = b11.angvel % MAX_VEL;
					b21.sweep_angvel = b21.angvel % MAX_VEL;
				}
			}
			if(arb != null && (arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) && arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL) {
				if(!b11.sweepFrozen && !(b11.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC)) {
					b11.sweepFrozen = true;
					if(minTOI.failed) b11.angvel = b11.sweep_angvel = 0; else if(minTOI.slipped) b11.angvel = b11.sweep_angvel *= nape.Config.angularCCDSlipScale; else b11.angvel = b11.sweep_angvel;
				}
				if(!b21.sweepFrozen && !(b21.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC)) {
					b21.sweepFrozen = true;
					if(minTOI.failed) b21.angvel = b21.sweep_angvel = 0; else if(minTOI.slipped) b21.angvel = b21.sweep_angvel *= nape.Config.angularCCDSlipScale; else b21.angvel = b21.sweep_angvel;
				}
			}
			var o3 = minTOI;
			o3.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
			zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o3;
		}
		while(!(this.toiEvents.head == null)) {
			var toi1 = this.toiEvents.pop_unsafe();
			var o4 = toi1;
			o4.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
			zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o4;
		}
		var cx_ite1 = this.kinematics.head;
		while(cx_ite1 != null) {
			var cur = cx_ite1.elt;
			cur.sweepIntegrate(deltaTime);
			cur.sweepTime = 0;
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = this.live.head;
		while(cx_ite2 != null) {
			var cur1 = cx_ite2.elt;
			if(!cur1.sweepFrozen) cur1.sweepIntegrate(deltaTime);
			cur1.sweepTime = 0;
			cx_ite2 = cx_ite2.next;
		}
	}
	,continuousEvent: function(s1,s2,stat,in_arb,_) {
		if(s1.body.sweepFrozen && s2.body.sweepFrozen) return in_arb;
		if(s1.body.disableCCD || s2.body.disableCCD) return in_arb;
		if(in_arb != null && in_arb.colarb == null || this.interactionType(s1,s2,s1.body,s2.body) <= 0) return in_arb;
		var b1 = s1.body;
		var b2 = s2.body;
		if(stat || b1.bullet || b2.bullet) {
			var toi;
			if(zpp_nape.geom.ZPP_ToiEvent.zpp_pool == null) toi = new zpp_nape.geom.ZPP_ToiEvent(); else {
				toi = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
				zpp_nape.geom.ZPP_ToiEvent.zpp_pool = toi.next;
				toi.next = null;
			}
			toi.failed = false;
			toi.s1 = toi.s2 = null;
			toi.arbiter = null;
			var kin = b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC || b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC;
			if(stat && !kin) {
				if(!(s1.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) {
					toi.s2 = s1;
					toi.s1 = s2;
				} else {
					toi.s1 = s1;
					toi.s2 = s2;
				}
				toi.kinematic = false;
				zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,this.pre_dt,0,nape.Config.collisionSlopCCD);
			} else {
				toi.s1 = s1;
				toi.s2 = s2;
				toi.kinematic = kin;
				if(toi.s1.body.sweepFrozen || toi.s2.body.sweepFrozen) {
					if(toi.s1.body.sweepFrozen) {
						var tmp = toi.s1;
						toi.s1 = toi.s2;
						toi.s2 = tmp;
						toi.frozen1 = false;
						toi.frozen2 = true;
					}
					zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,this.pre_dt,0,nape.Config.collisionSlopCCD);
				} else zpp_nape.geom.ZPP_SweepDistance.dynamicSweep(toi,this.pre_dt,0,nape.Config.collisionSlopCCD);
			}
			if(stat && toi.toi < 0 || toi.failed) {
				var o = toi;
				o.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
				zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o;
			} else {
				this.toiEvents.add(toi);
				toi.frozen1 = toi.s1.body.sweepFrozen;
				toi.frozen2 = toi.s2.body.sweepFrozen;
				if(in_arb != null) toi.arbiter = in_arb.colarb; else toi.arbiter = null;
			}
		}
		return in_arb;
	}
	,bodyCbWake: function(b) {
		if(b.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && b.cbSet != null) {
			if(this.midstep) {
				var cx_ite = b.cbSet.bodylisteners.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE;
					cb.body = b;
					cx_ite = cx_ite.next;
				}
			} else b.component.woken = true;
		}
	}
	,bodyCbSleep: function(b) {
		if(b.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && b.cbSet != null) {
			var cx_ite = b.cbSet.bodylisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP;
				cb.body = b;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbWake: function(con) {
		if(con.cbSet != null) {
			if(this.midstep) {
				var cx_ite = con.cbSet.conlisteners.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE;
					cb.constraint = con;
					cx_ite = cx_ite.next;
				}
			} else con.component.woken = true;
		}
	}
	,constraintCbSleep: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbBreak: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,nullListenerType: function(cb1,cb2) {
		var stack = new zpp_nape.util.ZNPList_ZPP_Interactor();
		var cx_ite = cb1.interactors.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			stack.add(i);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite1 = cb2.interactors.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				stack.add(i1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!(stack.head == null)) {
			var intx = stack.pop_unsafe();
			if(intx.icompound != null) {
				var comp = intx.icompound;
				var cx_ite2 = comp.bodies.head;
				while(cx_ite2 != null) {
					var i2 = cx_ite2.elt;
					stack.add(i2);
					cx_ite2 = cx_ite2.next;
				}
				var cx_ite3 = comp.compounds.head;
				while(cx_ite3 != null) {
					var i3 = cx_ite3.elt;
					stack.add(i3);
					cx_ite3 = cx_ite3.next;
				}
			} else {
				var xbody;
				if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
				var xshp;
				if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
				var cx_ite4 = xbody.arbiters.head;
				while(cx_ite4 != null) {
					var xarb = cx_ite4.elt;
					if(xarb.present == 0) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite5 = this.mrca1.head;
					while(cx_ite5 != null) {
						var i11 = cx_ite5.elt;
						if(i11.cbSet != cb1 && i11.cbSet != cb2) {
							cx_ite5 = cx_ite5.next;
							continue;
						}
						var cx_ite6 = this.mrca2.head;
						while(cx_ite6 != null) {
							var i21 = cx_ite6.elt;
							if(i11.cbSet == cb1 && i21.cbSet != cb2 || i11.cbSet == cb2 && i21.cbSet != cb1) {
								cx_ite6 = cx_ite6.next;
								continue;
							}
							var callbackset = zpp_nape.phys.ZPP_Interactor.get(i11,i21);
							if(callbackset != null) {
								while(!(callbackset.arbiters.head == null)) {
									var arb = callbackset.arbiters.pop_unsafe();
									arb.present--;
								}
								this.remove_callbackset(callbackset);
							}
							cx_ite6 = cx_ite6.next;
						}
						cx_ite5 = cx_ite5.next;
					}
					cx_ite4 = cx_ite4.next;
				}
			}
		}
	}
	,nullInteractorType: function(intx,me) {
		if(me == null) me = intx;
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var body = cx_ite.elt;
				this.nullInteractorType(body,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.compounds.head;
			while(cx_ite1 != null) {
				var comp1 = cx_ite1.elt;
				this.nullInteractorType(comp1,me);
				cx_ite1 = cx_ite1.next;
			}
		} else {
			var xbody;
			if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
			var xshp;
			if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
			var cx_ite2 = xbody.arbiters.head;
			while(cx_ite2 != null) {
				var xarb = cx_ite2.elt;
				if(xarb.present == 0) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite3 = this.mrca1.head;
				while(cx_ite3 != null) {
					var i1 = cx_ite3.elt;
					var cx_ite4 = this.mrca2.head;
					while(cx_ite4 != null) {
						var i2 = cx_ite4.elt;
						if(i1 != me && i2 != me) {
							cx_ite4 = cx_ite4.next;
							continue;
						}
						var callbackset = zpp_nape.phys.ZPP_Interactor.get(i1,i2);
						if(callbackset != null) {
							xarb.present--;
							callbackset.remove_arb(xarb);
							if(callbackset.arbiters.head == null) this.remove_callbackset(callbackset);
						}
						cx_ite4 = cx_ite4.next;
					}
					cx_ite3 = cx_ite3.next;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,freshListenerType: function(cb1,cb2) {
		var stack = new zpp_nape.util.ZNPList_ZPP_Interactor();
		var cx_ite = cb1.interactors.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			stack.add(i);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite1 = cb2.interactors.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				stack.add(i1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!(stack.head == null)) {
			var intx = stack.pop_unsafe();
			if(intx.icompound != null) {
				var comp = intx.icompound;
				var cx_ite2 = comp.bodies.head;
				while(cx_ite2 != null) {
					var i2 = cx_ite2.elt;
					stack.add(i2);
					cx_ite2 = cx_ite2.next;
				}
				var cx_ite3 = comp.compounds.head;
				while(cx_ite3 != null) {
					var i3 = cx_ite3.elt;
					stack.add(i3);
					cx_ite3 = cx_ite3.next;
				}
			} else {
				var xbody;
				if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
				var xshp;
				if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
				var cx_ite4 = xbody.arbiters.head;
				while(cx_ite4 != null) {
					var xarb = cx_ite4.elt;
					if(!xarb.presentable) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite5 = this.mrca1.head;
					while(cx_ite5 != null) {
						var i11 = cx_ite5.elt;
						if(i11.cbSet != cb1 && i11.cbSet != cb2) {
							cx_ite5 = cx_ite5.next;
							continue;
						}
						var cx_ite6 = this.mrca2.head;
						while(cx_ite6 != null) {
							var i21 = cx_ite6.elt;
							if(i11.cbSet == cb1 && i21.cbSet != cb2 || i11.cbSet == cb2 && i21.cbSet != cb1) {
								cx_ite6 = cx_ite6.next;
								continue;
							}
							var callbackset = zpp_nape.phys.ZPP_Interactor.get(i11,i21);
							if(callbackset == null) {
								callbackset = zpp_nape.space.ZPP_CallbackSet.get(i11,i21);
								this.add_callbackset(callbackset);
							}
							if(!callbackset.arbiters.inlined_has(xarb)?(function($this) {
								var $r;
								callbackset.arbiters.inlined_add(xarb);
								$r = true;
								return $r;
							}(this)):false) xarb.present++;
							cx_ite6 = cx_ite6.next;
						}
						cx_ite5 = cx_ite5.next;
					}
					cx_ite4 = cx_ite4.next;
				}
			}
		}
	}
	,freshInteractorType: function(intx,me) {
		if(me == null) me = intx;
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var body = cx_ite.elt;
				this.freshInteractorType(body,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.compounds.head;
			while(cx_ite1 != null) {
				var comp1 = cx_ite1.elt;
				this.freshInteractorType(comp1,me);
				cx_ite1 = cx_ite1.next;
			}
		} else {
			var xbody;
			if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
			var xshp;
			if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
			var cx_ite2 = xbody.arbiters.head;
			while(cx_ite2 != null) {
				var xarb = cx_ite2.elt;
				if(!xarb.presentable) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite3 = this.mrca1.head;
				while(cx_ite3 != null) {
					var i1 = cx_ite3.elt;
					var cx_ite4 = this.mrca2.head;
					while(cx_ite4 != null) {
						var i2 = cx_ite4.elt;
						if(i1 != me && i2 != me) {
							cx_ite4 = cx_ite4.next;
							continue;
						}
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						cb1.validate();
						cb2.validate();
						if(!cb1.manager.pair(cb1,cb2).empty_intersection()) {
							var callbackset = zpp_nape.phys.ZPP_Interactor.get(i1,i2);
							if(callbackset == null) {
								callbackset = zpp_nape.space.ZPP_CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset);
							}
							if(!callbackset.arbiters.inlined_has(xarb)?(function($this) {
								var $r;
								callbackset.arbiters.inlined_add(xarb);
								$r = true;
								return $r;
							}(this)):false) xarb.present++;
						}
						cx_ite4 = cx_ite4.next;
					}
					cx_ite3 = cx_ite3.next;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,wakeCompound: function(x) {
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var y = cx_ite.elt;
			var o = y;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,false);
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			var i = cx_ite1.elt;
			this.wake_constraint(i);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			var i1 = cx_ite2.elt;
			this.wakeCompound(i1);
			cx_ite2 = cx_ite2.next;
		}
	}
	,wakeIsland: function(i) {
		while(!(i.comps.head == null)) {
			var c = i.comps.pop_unsafe();
			c.waket = this.stamp + (this.midstep?0:1);
			if(c.isBody) {
				var b = c.body;
				this.live.add(b);
				var cx_ite = b.arbiters.head;
				while(cx_ite != null) {
					var arb = cx_ite.elt;
					if(arb.sleeping) {
						arb.sleeping = false;
						arb.up_stamp += this.stamp - arb.sleep_stamp;
						if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL) {
							var carb = arb.colarb;
							if(carb.stat) this.c_arbiters_true.inlined_add(carb); else this.c_arbiters_false.inlined_add(carb);
						} else if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) this.f_arbiters.inlined_add(arb.fluidarb); else this.s_arbiters.inlined_add(arb.sensorarb);
					}
					cx_ite = cx_ite.next;
				}
				this.bodyCbWake(b);
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
				if(!(b.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
					var cx_ite1 = b.shapes.head;
					while(cx_ite1 != null) {
						var shape = cx_ite1.elt;
						if(shape.node != null) this.bphase.sync(shape);
						cx_ite1 = cx_ite1.next;
					}
				}
			} else {
				var con = c.constraint;
				this.live_constraints.inlined_add(con);
				this.constraintCbWake(con);
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
			}
		}
		var o = i;
		o.next = zpp_nape.space.ZPP_Island.zpp_pool;
		zpp_nape.space.ZPP_Island.zpp_pool = o;
	}
	,non_inlined_wake: function(o,fst) {
		if(fst == null) fst = false;
		var o1 = o;
		if(!o1.world) {
			o1.component.waket = this.stamp + (this.midstep?0:1);
			if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
			if(o1.component.sleeping) this.really_wake(o1,fst);
		}
	}
	,really_wake: function(o,fst) {
		if(fst == null) fst = false;
		if(o.component.island == null) {
			o.component.sleeping = false;
			if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC || o.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) this.staticsleep.inlined_add(o); else this.live.inlined_add(o);
			var cx_ite = o.constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(con.space == this) this.wake_constraint(con);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = o.arbiters.head;
			while(cx_ite1 != null) {
				var arb = cx_ite1.elt;
				if(arb.sleeping) {
					arb.sleeping = false;
					arb.up_stamp += this.stamp + (this.midstep?0:1) - arb.sleep_stamp;
					if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL) {
						var carb = arb.colarb;
						if(carb.stat) this.c_arbiters_true.inlined_add(carb); else this.c_arbiters_false.inlined_add(carb);
					} else if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) this.f_arbiters.inlined_add(arb.fluidarb); else this.s_arbiters.inlined_add(arb.sensorarb);
				}
				if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.SENSOR && !arb.cleared && arb.up_stamp >= this.stamp && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
					if(arb.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb.b1.component.sleeping) {
						var o1 = arb.b1;
						if(!o1.world) {
							o1.component.waket = this.stamp + (this.midstep?0:1);
							if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
							if(o1.component.sleeping) this.really_wake(o1,false);
						}
					}
					if(arb.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb.b2.component.sleeping) {
						var o2 = arb.b2;
						if(!o2.world) {
							o2.component.waket = this.stamp + (this.midstep?0:1);
							if(o2.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o2.kinematicDelaySleep = true;
							if(o2.component.sleeping) this.really_wake(o2,false);
						}
					}
				}
				cx_ite1 = cx_ite1.next;
			}
			if(!fst && o.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.bodyCbWake(o);
			if(!fst && !this.bphase.is_sweep && !(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
				var cx_ite2 = o.shapes.head;
				while(cx_ite2 != null) {
					var shape = cx_ite2.elt;
					if(shape.node != null) this.bphase.sync(shape);
					cx_ite2 = cx_ite2.next;
				}
			}
		} else this.wakeIsland(o.component.island);
	}
	,wake_constraint: function(con,fst) {
		if(fst == null) fst = false;
		if(con.active) {
			con.component.waket = this.stamp + (this.midstep?0:1);
			if(con.component.sleeping) {
				if(con.component.island == null) {
					con.component.sleeping = false;
					this.live_constraints.inlined_add(con);
					con.wake_connected();
					if(!fst) this.constraintCbWake(con);
				} else this.wakeIsland(con.component.island);
				return true;
			} else return false;
		} else return false;
	}
	,doForests: function(dt) {
		var cx_ite = this.c_arbiters_false.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(!arb.cleared && arb.up_stamp == this.stamp && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
				if(arb.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
					var xr;
					if(arb.b1.component == arb.b1.component.parent) xr = arb.b1.component; else {
						var obj = arb.b1.component;
						var stack = null;
						while(obj != obj.parent) {
							var nxt = obj.parent;
							obj.parent = stack;
							stack = obj;
							obj = nxt;
						}
						while(stack != null) {
							var nxt1 = stack.parent;
							stack.parent = obj;
							stack = nxt1;
						}
						xr = obj;
					}
					var yr;
					if(arb.b2.component == arb.b2.component.parent) yr = arb.b2.component; else {
						var obj1 = arb.b2.component;
						var stack1 = null;
						while(obj1 != obj1.parent) {
							var nxt2 = obj1.parent;
							obj1.parent = stack1;
							stack1 = obj1;
							obj1 = nxt2;
						}
						while(stack1 != null) {
							var nxt3 = stack1.parent;
							stack1.parent = obj1;
							stack1 = nxt3;
						}
						yr = obj1;
					}
					if(xr != yr) {
						if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
							yr.parent = xr;
							xr.rank++;
						}
					}
				}
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.f_arbiters.head;
		while(cx_ite1 != null) {
			var arb1 = cx_ite1.elt;
			if(!arb1.cleared && arb1.up_stamp == this.stamp && (arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
				if(arb1.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb1.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
					var xr1;
					if(arb1.b1.component == arb1.b1.component.parent) xr1 = arb1.b1.component; else {
						var obj2 = arb1.b1.component;
						var stack2 = null;
						while(obj2 != obj2.parent) {
							var nxt4 = obj2.parent;
							obj2.parent = stack2;
							stack2 = obj2;
							obj2 = nxt4;
						}
						while(stack2 != null) {
							var nxt5 = stack2.parent;
							stack2.parent = obj2;
							stack2 = nxt5;
						}
						xr1 = obj2;
					}
					var yr1;
					if(arb1.b2.component == arb1.b2.component.parent) yr1 = arb1.b2.component; else {
						var obj3 = arb1.b2.component;
						var stack3 = null;
						while(obj3 != obj3.parent) {
							var nxt6 = obj3.parent;
							obj3.parent = stack3;
							stack3 = obj3;
							obj3 = nxt6;
						}
						while(stack3 != null) {
							var nxt7 = stack3.parent;
							stack3.parent = obj3;
							stack3 = nxt7;
						}
						yr1 = obj3;
					}
					if(xr1 != yr1) {
						if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
							yr1.parent = xr1;
							xr1.rank++;
						}
					}
				}
			}
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = this.live_constraints.head;
		while(cx_ite2 != null) {
			var con = cx_ite2.elt;
			con.forest();
			cx_ite2 = cx_ite2.next;
		}
		while(!(this.live.head == null)) {
			var o = this.live.inlined_pop_unsafe();
			var oc = o.component;
			var root;
			if(oc == oc.parent) root = oc; else {
				var obj4 = oc;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				root = obj4;
			}
			if(root.island == null) {
				if(zpp_nape.space.ZPP_Island.zpp_pool == null) root.island = new zpp_nape.space.ZPP_Island(); else {
					root.island = zpp_nape.space.ZPP_Island.zpp_pool;
					zpp_nape.space.ZPP_Island.zpp_pool = root.island.next;
					root.island.next = null;
				}
				root.island.waket = 0;
				this.islands.inlined_add(root.island);
				root.island.sleep = true;
			}
			oc.island = root.island;
			oc.island.comps.inlined_add(oc);
			var rest = o.atRest(dt);
			oc.island.sleep = oc.island.sleep && rest;
			if(oc.waket > oc.island.waket) oc.island.waket = oc.waket;
		}
		while(!(this.live_constraints.head == null)) {
			var o1 = this.live_constraints.inlined_pop_unsafe();
			var oc1 = o1.component;
			var root1;
			if(oc1 == oc1.parent) root1 = oc1; else {
				var obj5 = oc1;
				var stack5 = null;
				while(obj5 != obj5.parent) {
					var nxt10 = obj5.parent;
					obj5.parent = stack5;
					stack5 = obj5;
					obj5 = nxt10;
				}
				while(stack5 != null) {
					var nxt11 = stack5.parent;
					stack5.parent = obj5;
					stack5 = nxt11;
				}
				root1 = obj5;
			}
			oc1.island = root1.island;
			oc1.island.comps.inlined_add(oc1);
			if(oc1.waket > oc1.island.waket) oc1.island.waket = oc1.waket;
		}
		while(!(this.islands.next == null)) {
			var i = this.islands.inlined_pop_unsafe();
			if(i.sleep) {
				var cx_ite3 = i.comps.head;
				while(cx_ite3 != null) {
					var c = cx_ite3.elt;
					if(c.isBody) {
						var b = c.body;
						b.velx = 0;
						b.vely = 0;
						b.angvel = 0;
						c.sleeping = true;
						var cx_ite4 = b.shapes.head;
						while(cx_ite4 != null) {
							var shape = cx_ite4.elt;
							this.bphase.sync(shape);
							cx_ite4 = cx_ite4.next;
						}
						this.bodyCbSleep(b);
					} else {
						var con1 = c.constraint;
						this.constraintCbSleep(con1);
						c.sleeping = true;
					}
					cx_ite3 = cx_ite3.next;
				}
			} else {
				while(!(i.comps.head == null)) {
					var c1 = i.comps.inlined_pop_unsafe();
					c1.waket = i.waket;
					if(c1.isBody) this.live.inlined_add(c1.body); else this.live_constraints.inlined_add(c1.constraint);
					c1.sleeping = false;
					c1.island = null;
					c1.parent = c1;
					c1.rank = 0;
				}
				var o2 = i;
				o2.next = zpp_nape.space.ZPP_Island.zpp_pool;
				zpp_nape.space.ZPP_Island.zpp_pool = o2;
			}
		}
	}
	,sleepArbiters: function() {
		var pre = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.head;
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(arb.b1.component.sleeping && arb.b2.component.sleeping) {
				arb.sleep_stamp = this.stamp;
				arb.sleeping = true;
				arbite = arbs.inlined_erase(pre);
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.head;
					arbs = this.c_arbiters_false;
					pre = null;
				}
				continue;
			}
			pre = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre = null;
			}
		}
		var pre1 = null;
		var arbs1 = this.f_arbiters;
		var arbite1 = arbs1.head;
		var fst1 = false;
		if(fst1 && arbite1 == null) {
			fst1 = false;
			arbs1 = null;
			pre1 = null;
		}
		while(arbite1 != null) {
			var arb1 = arbite1.elt;
			if(arb1.b1.component.sleeping && arb1.b2.component.sleeping) {
				arb1.sleep_stamp = this.stamp;
				arb1.sleeping = true;
				arbite1 = arbs1.inlined_erase(pre1);
				if(fst1 && arbite1 == null) {
					fst1 = false;
					arbs1 = null;
					pre1 = null;
				}
				continue;
			}
			pre1 = arbite1;
			arbite1 = arbite1.next;
			if(fst1 && arbite1 == null) {
				fst1 = false;
				arbs1 = null;
				pre1 = null;
			}
		}
		var pre2 = null;
		var arbs2 = this.s_arbiters;
		var arbite2 = arbs2.head;
		var fst2 = false;
		if(fst2 && arbite2 == null) {
			fst2 = false;
			arbs2 = null;
			pre2 = null;
		}
		while(arbite2 != null) {
			var arb2 = arbite2.elt;
			if(arb2.b1.component.sleeping && arb2.b2.component.sleeping) {
				arb2.sleep_stamp = this.stamp;
				arb2.sleeping = true;
				arbite2 = arbs2.inlined_erase(pre2);
				if(fst2 && arbite2 == null) {
					fst2 = false;
					arbs2 = null;
					pre2 = null;
				}
				continue;
			}
			pre2 = arbite2;
			arbite2 = arbite2.next;
			if(fst2 && arbite2 == null) {
				fst2 = false;
				arbs2 = null;
				pre2 = null;
			}
		}
	}
	,static_validation: function(body) {
		if(!(body.shapes.head == null)) body.validate_aabb();
		body.validate_mass();
		body.validate_inertia();
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
				s.polygon.splice_collinear();
				s.polygon.validate_gaxi();
			}
			cx_ite = cx_ite.next;
		}
		body.sweepFrozen = true;
	}
	,validation: function() {
		this.cbsets.validate();
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.sweepRadius = 0;
			var cx_ite1 = cur.shapes.head;
			while(cx_ite1 != null) {
				var s = cx_ite1.elt;
				if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
					s.polygon.splice_collinear();
					s.polygon.validate_gaxi();
				}
				s.validate_sweepRadius();
				if(s.sweepRadius > cur.sweepRadius) cur.sweepRadius = s.sweepRadius;
				cx_ite1 = cx_ite1.next;
			}
			cur.validate_mass();
			cur.validate_inertia();
			if(!(cur.shapes.head == null)) {
				cur.validate_aabb();
				cur.validate_worldCOM();
			}
			cur.validate_gravMass();
			if(cur.zip_axis) {
				cur.zip_axis = false;
				cur.axisx = Math.sin(cur.rot);
				cur.axisy = Math.cos(cur.rot);
				null;
			}
			if(cur.component.woken && cur.cbSet != null) {
				var cx_ite2 = cur.cbSet.bodylisteners.head;
				while(cx_ite2 != null) {
					var i = cx_ite2.elt;
					if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE) {
						cx_ite2 = cx_ite2.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE;
					cb.body = cur;
					cx_ite2 = cx_ite2.next;
				}
			}
			cur.component.woken = false;
			var cx_ite3 = cur.shapes.head;
			while(cx_ite3 != null) {
				var shape = cx_ite3.elt;
				this.bphase.sync(shape);
				cx_ite3 = cx_ite3.next;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite4 = this.kinematics.head;
		while(cx_ite4 != null) {
			var cur1 = cx_ite4.elt;
			cur1.sweepRadius = 0;
			var cx_ite5 = cur1.shapes.head;
			while(cx_ite5 != null) {
				var s1 = cx_ite5.elt;
				if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
					s1.polygon.splice_collinear();
					s1.polygon.validate_gaxi();
				}
				s1.validate_sweepRadius();
				if(s1.sweepRadius > cur1.sweepRadius) cur1.sweepRadius = s1.sweepRadius;
				cx_ite5 = cx_ite5.next;
			}
			cur1.validate_mass();
			cur1.validate_inertia();
			if(!(cur1.shapes.head == null)) {
				cur1.validate_aabb();
				cur1.validate_worldCOM();
			}
			cur1.validate_gravMass();
			if(cur1.zip_axis) {
				cur1.zip_axis = false;
				cur1.axisx = Math.sin(cur1.rot);
				cur1.axisy = Math.cos(cur1.rot);
				null;
			}
			var cx_ite6 = cur1.shapes.head;
			while(cx_ite6 != null) {
				var shape1 = cx_ite6.elt;
				this.bphase.sync(shape1);
				cx_ite6 = cx_ite6.next;
			}
			cx_ite4 = cx_ite4.next;
		}
		var cx_ite7 = this.live_constraints.head;
		while(cx_ite7 != null) {
			var con = cx_ite7.elt;
			if(con.active) {
				if(con.component.woken && con.cbSet != null) {
					var cx_ite8 = con.cbSet.conlisteners.head;
					while(cx_ite8 != null) {
						var i1 = cx_ite8.elt;
						if(i1.event != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE) {
							cx_ite8 = cx_ite8.next;
							continue;
						}
						var cb1 = this.push_callback(i1);
						cb1.event = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE;
						cb1.constraint = con;
						cx_ite8 = cx_ite8.next;
					}
				}
				con.component.woken = false;
			}
			cx_ite7 = cx_ite7.next;
		}
	}
	,updateVel: function(dt) {
		var pre = null;
		var linDrag = 1 - dt * this.global_lin_drag;
		var angDrag = 1 - dt * this.global_ang_drag;
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			if(cur.smass != 0.0) {
				var time = dt * cur.imass;
				cur.velx = linDrag * cur.velx + (cur.forcex + this.gravityx * cur.gravMass) * time;
				cur.vely = linDrag * cur.vely + (cur.forcey + this.gravityy * cur.gravMass) * time;
			}
			if(cur.sinertia != 0.0) {
				var dpx = 0.0;
				var dpy = 0.0;
				dpx = cur.worldCOMx - cur.posx;
				dpy = cur.worldCOMy - cur.posy;
				var torque = cur.torque + (this.gravityy * dpx - this.gravityx * dpy) * cur.gravMass;
				cur.angvel = angDrag * cur.angvel + torque * dt * cur.iinertia;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
	}
	,updatePos: function(dt) {
		var MAX_VEL = 2 * Math.PI / dt;
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cur.sweepTime = 0;
			cur.sweep_angvel = cur.angvel % MAX_VEL;
			cur.sweepIntegrate(dt);
			if(!cur.disableCCD) {
				var linThreshold = nape.Config.staticCCDLinearThreshold * cur.sweepRadius;
				var angThreshold = nape.Config.staticCCDAngularThreshold;
				if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold * linThreshold || cur.angvel * cur.angvel * dt * dt > angThreshold * angThreshold || cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) {
					var angvel = cur.sweep_angvel;
					if(angvel < 0) angvel = -angvel;
					var iangvel = 1 / angvel;
					var cx_ite1 = cur.shapes.head;
					while(cx_ite1 != null) {
						var s = cx_ite1.elt;
						var aabb = s.aabb;
						var minx = aabb.minx;
						var miny = aabb.miny;
						var maxx = aabb.maxx;
						var maxy = aabb.maxy;
						var count = angvel * dt * s.sweepCoef * 0.0083333333333333332 | 0;
						if(count > 8) count = 8;
						var anginc = angvel * dt / count;
						cur.sweepIntegrate(dt);
						if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle._force_validate_aabb(); else s.polygon._force_validate_aabb();
						if(minx < aabb.minx) aabb.minx = minx; else minx = aabb.minx;
						if(miny < aabb.miny) aabb.miny = miny; else miny = aabb.miny;
						if(maxx > aabb.maxx) aabb.maxx = maxx; else maxx = aabb.maxx;
						if(maxy > aabb.maxy) aabb.maxy = maxy; else maxy = aabb.maxy;
						var _g = 1;
						while(_g < count) {
							var i = _g++;
							cur.sweepIntegrate(anginc * i * iangvel);
							if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle._force_validate_aabb(); else s.polygon._force_validate_aabb();
							if(minx < aabb.minx) aabb.minx = minx; else minx = aabb.minx;
							if(miny < aabb.miny) aabb.miny = miny; else miny = aabb.miny;
							if(maxx > aabb.maxx) aabb.maxx = maxx; else maxx = aabb.maxx;
							if(maxy > aabb.maxy) aabb.maxy = maxy; else maxy = aabb.maxy;
						}
						this.bphase.sync(s);
						cx_ite1 = cx_ite1.next;
					}
					cur.sweepFrozen = false;
					if(cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur.bulletEnabled) {
						var linThreshold2 = nape.Config.bulletCCDLinearThreshold * cur.sweepRadius;
						var angThreshold2 = nape.Config.bulletCCDAngularThreshold;
						if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold2 * linThreshold2 || cur.angvel * cur.angvel * dt * dt > angThreshold2 * angThreshold2) cur.bullet = true;
					}
				} else {
					cur.sweepFrozen = true;
					cur.bullet = false;
				}
			} else {
				cur.sweepFrozen = true;
				cur.bullet = false;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite2 = this.kinematics.head;
		while(cx_ite2 != null) {
			var cur1 = cx_ite2.elt;
			cur1.pre_posx = cur1.posx;
			cur1.pre_posy = cur1.posy;
			cur1.pre_rot = cur1.rot;
			cur1.sweepTime = 0;
			cur1.sweep_angvel = cur1.angvel % MAX_VEL;
			cur1.sweepIntegrate(dt);
			if(!cur1.disableCCD) {
				var linThreshold1 = nape.Config.staticCCDLinearThreshold * cur1.sweepRadius;
				var angThreshold1 = nape.Config.staticCCDAngularThreshold;
				if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold1 * linThreshold1 || cur1.angvel * cur1.angvel * dt * dt > angThreshold1 * angThreshold1 || cur1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) {
					var angvel1 = cur1.sweep_angvel;
					if(angvel1 < 0) angvel1 = -angvel1;
					var iangvel1 = 1 / angvel1;
					var cx_ite3 = cur1.shapes.head;
					while(cx_ite3 != null) {
						var s1 = cx_ite3.elt;
						var aabb1 = s1.aabb;
						var minx1 = aabb1.minx;
						var miny1 = aabb1.miny;
						var maxx1 = aabb1.maxx;
						var maxy1 = aabb1.maxy;
						var count1 = angvel1 * dt * s1.sweepCoef * 0.0083333333333333332 | 0;
						if(count1 > 8) count1 = 8;
						var anginc1 = angvel1 * dt / count1;
						cur1.sweepIntegrate(dt);
						if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s1.circle._force_validate_aabb(); else s1.polygon._force_validate_aabb();
						if(minx1 < aabb1.minx) aabb1.minx = minx1; else minx1 = aabb1.minx;
						if(miny1 < aabb1.miny) aabb1.miny = miny1; else miny1 = aabb1.miny;
						if(maxx1 > aabb1.maxx) aabb1.maxx = maxx1; else maxx1 = aabb1.maxx;
						if(maxy1 > aabb1.maxy) aabb1.maxy = maxy1; else maxy1 = aabb1.maxy;
						var _g1 = 1;
						while(_g1 < count1) {
							var i1 = _g1++;
							cur1.sweepIntegrate(anginc1 * i1 * iangvel1);
							if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s1.circle._force_validate_aabb(); else s1.polygon._force_validate_aabb();
							if(minx1 < aabb1.minx) aabb1.minx = minx1; else minx1 = aabb1.minx;
							if(miny1 < aabb1.miny) aabb1.miny = miny1; else miny1 = aabb1.miny;
							if(maxx1 > aabb1.maxx) aabb1.maxx = maxx1; else maxx1 = aabb1.maxx;
							if(maxy1 > aabb1.maxy) aabb1.maxy = maxy1; else maxy1 = aabb1.maxy;
						}
						this.bphase.sync(s1);
						cx_ite3 = cx_ite3.next;
					}
					cur1.sweepFrozen = false;
					if(cur1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur1.bulletEnabled) {
						var linThreshold21 = nape.Config.bulletCCDLinearThreshold * cur1.sweepRadius;
						var angThreshold21 = nape.Config.bulletCCDAngularThreshold;
						if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold21 * linThreshold21 || cur1.angvel * cur1.angvel * dt * dt > angThreshold21 * angThreshold21) cur1.bullet = true;
					}
				} else {
					cur1.sweepFrozen = true;
					cur1.bullet = false;
				}
			} else {
				cur1.sweepFrozen = true;
				cur1.bullet = false;
			}
			cx_ite2 = cx_ite2.next;
		}
	}
	,presteparb: function(arb,dt,cont) {
		if(cont == null) cont = false;
		var _g = this;
		if(!arb.cleared && (arb.b1.component.sleeping && arb.b2.component.sleeping)) {
			arb.sleep_stamp = this.stamp;
			arb.sleeping = true;
			return true;
		}
		if(!arb.cleared || arb.present != 0 || arb.intchange) {
			var endcb = !cont && arb.up_stamp == this.stamp - 1 && !arb.cleared && !arb.intchange;
			var begcb = arb.fresh && !arb.cleared && !arb.intchange;
			if(endcb) arb.endGenerated = this.stamp;
			if(begcb || endcb || arb.cleared || arb.intchange) {
				this.inlined_MRCA_chains(arb.ws1,arb.ws2);
				var cx_ite = this.mrca1.head;
				while(cx_ite != null) {
					var i1 = cx_ite.elt;
					var cx_ite1 = this.mrca2.head;
					while(cx_ite1 != null) {
						var i2 = cx_ite1.elt;
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						if(cb1.manager.pair(cb1,cb2).empty_intersection()) {
							cx_ite1 = cx_ite1.next;
							continue;
						}
						var callbackset = [zpp_nape.phys.ZPP_Interactor.get(i1,i2)];
						if(begcb || arb.intchange) {
							if(callbackset[0] == null) {
								callbackset[0] = zpp_nape.space.ZPP_CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset[0]);
							}
							cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN,(function(callbackset) {
								return function(listener) {
									if((listener.itype & arb.type) != 0 && callbackset[0].empty_arb(listener.itype)) {
										var cb = _g.push_callback(listener);
										cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN;
										zpp_nape.phys.ZPP_Interactor.int_callback(callbackset[0],listener,cb);
										cb.set = callbackset[0];
									}
								};
							})(callbackset));
							if(!callbackset[0].arbiters.inlined_has(arb)?(function($this) {
								var $r;
								callbackset[0].arbiters.inlined_add(arb);
								$r = true;
								return $r;
							}(this)):false) arb.present++;
						} else {
							arb.present--;
							callbackset[0].remove_arb(arb);
							cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_END,(function(callbackset) {
								return function(listener1) {
									if((listener1.itype & arb.type) != 0 && callbackset[0].empty_arb(listener1.itype)) {
										var cb3 = _g.push_callback(listener1);
										cb3.event = zpp_nape.util.ZPP_Flags.id_CbEvent_END;
										zpp_nape.phys.ZPP_Interactor.int_callback(callbackset[0],listener1,cb3);
										cb3.set = callbackset[0];
									}
								};
							})(callbackset));
							if(callbackset[0].arbiters.head == null) this.remove_callbackset(callbackset[0]);
						}
						cx_ite1 = cx_ite1.next;
					}
					cx_ite = cx_ite.next;
				}
			}
			arb.fresh = false;
			arb.intchange = false;
		}
		if(arb.cleared || arb.up_stamp + (arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL?nape.Config.arbiterExpirationDelay:0) < this.stamp) {
			if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.SENSOR) arb.sensorarb.retire(); else if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) arb.fluidarb.retire(); else arb.colarb.retire();
			return true;
		}
		var pact = arb.active;
		arb.active = arb.presentable = arb.up_stamp == this.stamp;
		if((arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
			if(arb.active && arb.type != zpp_nape.dynamics.ZPP_Arbiter.SENSOR) {
				if(arb.colarb != null) {
					if(arb.colarb.preStep(dt)) arb.active = false;
				} else arb.fluidarb.preStep(this,dt);
			}
		} else if(arb.colarb != null) {
			if(arb.colarb.cleanupContacts()) arb.active = false;
		}
		if(pact != arb.active) {
			arb.b1.arbiters.modified = true;
			arb.b2.arbiters.modified = true;
			this.c_arbiters_true.modified = this.c_arbiters_false.modified = true;
			this.s_arbiters.modified = this.f_arbiters.modified = true;
		}
		return false;
	}
	,prestep: function(dt) {
		var pre = null;
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.preStep(dt)) {
				cx_ite = this.live_constraints.erase(pre);
				con.broken();
				this.constraintCbBreak(con);
				if(con.removeOnBreak) {
					con.component.sleeping = true;
					this.midstep = false;
					if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
					this.midstep = true;
				} else con.active = false;
				con.clearcache();
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		var pre1 = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.head;
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre1 = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(this.presteparb(arb,dt)) {
				arbite = arbs.inlined_erase(pre1);
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.head;
					arbs = this.c_arbiters_false;
					pre1 = null;
				}
				continue;
			}
			pre1 = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre1 = null;
			}
		}
		var pre2 = null;
		var arbs1 = this.f_arbiters;
		var arbite1 = arbs1.head;
		var fst1 = false;
		if(fst1 && arbite1 == null) {
			fst1 = false;
			arbs1 = null;
			pre2 = null;
		}
		while(arbite1 != null) {
			var arb1 = arbite1.elt;
			if(this.presteparb(arb1,dt)) {
				arbite1 = arbs1.inlined_erase(pre2);
				if(fst1 && arbite1 == null) {
					fst1 = false;
					arbs1 = null;
					pre2 = null;
				}
				continue;
			}
			pre2 = arbite1;
			arbite1 = arbite1.next;
			if(fst1 && arbite1 == null) {
				fst1 = false;
				arbs1 = null;
				pre2 = null;
			}
		}
		var pre3 = null;
		var arbs2 = this.s_arbiters;
		var arbite2 = arbs2.head;
		var fst2 = false;
		if(fst2 && arbite2 == null) {
			fst2 = false;
			arbs2 = null;
			pre3 = null;
		}
		while(arbite2 != null) {
			var arb2 = arbite2.elt;
			if(this.presteparb(arb2,dt)) {
				arbite2 = arbs2.inlined_erase(pre3);
				if(fst2 && arbite2 == null) {
					fst2 = false;
					arbs2 = null;
					pre3 = null;
				}
				continue;
			}
			pre3 = arbite2;
			arbite2 = arbite2.next;
			if(fst2 && arbite2 == null) {
				fst2 = false;
				arbs2 = null;
				pre3 = null;
			}
		}
	}
	,warmStart: function() {
		var cx_ite = this.f_arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb.warmStart();
			cx_ite = cx_ite.next;
		}
		var arbi = this.c_arbiters_false.head;
		var fst = true;
		if(arbi == null) {
			arbi = this.c_arbiters_true.head;
			fst = false;
		}
		while(arbi != null) {
			var arb1 = arbi.elt;
			if(arb1.active && (arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb1.warmStart();
			arbi = arbi.next;
			if(fst && arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
		}
		var cx_ite1 = this.live_constraints.head;
		while(cx_ite1 != null) {
			var con = cx_ite1.elt;
			con.warmStart();
			cx_ite1 = cx_ite1.next;
		}
	}
	,iterateVel: function(times) {
		var _g = 0;
		while(_g < times) {
			var i = _g++;
			var cx_ite = this.f_arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if(arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb.applyImpulseVel();
				cx_ite = cx_ite.next;
			}
			var pre = null;
			var cx_ite1 = this.live_constraints.head;
			while(cx_ite1 != null) {
				var con = cx_ite1.elt;
				if(con.applyImpulseVel()) {
					cx_ite1 = this.live_constraints.erase(pre);
					con.broken();
					this.constraintCbBreak(con);
					if(con.removeOnBreak) {
						con.component.sleeping = true;
						this.midstep = false;
						if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
						this.midstep = true;
					} else con.active = false;
					con.clearcache();
					continue;
				}
				pre = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var arbi = this.c_arbiters_false.head;
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
			while(arbi != null) {
				var arb1 = arbi.elt;
				if(arb1.active && (arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb1.applyImpulseVel();
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.head;
					fst = false;
				}
			}
		}
	}
	,iteratePos: function(times) {
		var _g = 0;
		while(_g < times) {
			var i = _g++;
			var pre = null;
			var cx_ite = this.live_constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(!con.__velocity && con.stiff) {
					if(con.applyImpulsePos()) {
						cx_ite = this.live_constraints.erase(pre);
						con.broken();
						this.constraintCbBreak(con);
						if(con.removeOnBreak) {
							con.component.sleeping = true;
							this.midstep = false;
							if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
							this.midstep = true;
						} else con.active = false;
						con.clearcache();
						continue;
					}
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var arbi = this.c_arbiters_false.head;
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
			while(arbi != null) {
				var arb = arbi.elt;
				if(arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb.applyImpulsePos();
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.head;
					fst = false;
				}
			}
		}
	}
	,group_ignore: function(s1,s2) {
		var g1 = s1.lookup_group();
		if(g1 == null) return false; else {
			var g2 = s2.lookup_group();
			if(g2 == null) return false; else {
				var ret = false;
				while(g1 != null && g2 != null) {
					if(g1 == g2) {
						ret = g1.ignore;
						break;
					}
					if(g1.depth < g2.depth) g2 = g2.group; else g1 = g1.group;
				}
				return ret;
			}
		}
	}
	,interactionType: function(s1,s2,b1,b2) {
		var con_ignore;
		con_ignore = false;
		var cx_ite = b1.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.ignore && con.pair_exists(b1.id,b2.id)) {
				con_ignore = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(!con_ignore && !this.group_ignore(s1,s2)) {
			if((s1.sensorEnabled || s2.sensorEnabled) && s1.filter.shouldSense(s2.filter)) return 2; else if((s1.fluidEnabled || s2.fluidEnabled) && s1.filter.shouldFlow(s2.filter) && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0)) return 0; else if(s1.filter.shouldCollide(s2.filter) && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0)) return 1; else return -1;
		} else return -1;
	}
	,narrowPhase: function(s1,s2,stat,in_arb,continuous) {
		var _g = this;
		var ret = null;
		var b1 = s1.body;
		var b2 = s2.body;
		var itype = this.interactionType(s1,s2,b1,b2);
		if(itype != -1) {
			var sa;
			var sb;
			if(s1.type > s2.type) {
				sa = s2;
				sb = s1;
			} else if(s1.type == s2.type) {
				if(s1.id < s2.id) {
					sa = s1;
					sb = s2;
				} else {
					sb = s1;
					sa = s2;
				}
			} else {
				sa = s1;
				sb = s2;
			}
			var reverse = sa == s2;
			if(itype == 0) {
				var xarb;
				if(in_arb == null) {
					var ret1 = null;
					var b;
					if(b1.arbiters.length < b2.arbiters.length) b = b1; else b = b2;
					var cx_ite = b.arbiters.head;
					while(cx_ite != null) {
						var arb = cx_ite.elt;
						if(arb.id == sa.id && arb.di == sb.id) {
							ret1 = arb;
							break;
						}
						cx_ite = cx_ite.next;
					}
					xarb = ret1;
				} else xarb = in_arb;
				var first = xarb == null;
				var arb1;
				var swapped = false;
				if(first) {
					if(zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool == null) arb1 = new zpp_nape.dynamics.ZPP_FluidArbiter(); else {
						arb1 = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = arb1.next;
						arb1.next = null;
					}
					null;
				} else if(xarb.fluidarb == null) {
					xarb.cleared = true;
					xarb.b1.arbiters.inlined_try_remove(xarb);
					xarb.b2.arbiters.inlined_try_remove(xarb);
					if(xarb.pair != null) {
						xarb.pair.arb = null;
						xarb.pair = null;
					}
					xarb.active = false;
					this.f_arbiters.modified = true;
					if(zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool == null) arb1 = new zpp_nape.dynamics.ZPP_FluidArbiter(); else {
						arb1 = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = arb1.next;
						arb1.next = null;
					}
					null;
					arb1.intchange = true;
					first = true;
					swapped = true;
				} else arb1 = xarb.fluidarb;
				var inttype = zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID;
				if(first || arb1.stamp != this.stamp || continuous) {
					arb1.stamp = this.stamp;
					if(zpp_nape.geom.ZPP_Collide.flowCollide(sa,sb,arb1)) {
						if(first) {
							arb1.b1 = s1.body;
							arb1.ws1 = s1;
							arb1.b2 = s2.body;
							arb1.ws2 = s2;
							arb1.id = sa.id;
							arb1.di = sb.id;
							arb1.b1.arbiters.inlined_add(arb1);
							arb1.b2.arbiters.inlined_add(arb1);
							arb1.active = true;
							arb1.present = 0;
							arb1.cleared = false;
							arb1.sleeping = false;
							arb1.fresh = false;
							arb1.presentable = false;
							arb1.nx = 0;
							arb1.ny = 1;
							arb1.dampx = 0;
							arb1.dampy = 0;
							arb1.adamp = 0.0;
							this.f_arbiters.inlined_add(arb1);
							arb1.fresh = !swapped;
						} else arb1.fresh = arb1.up_stamp < this.stamp - 1 || arb1.endGenerated == this.stamp && continuous;
						arb1.up_stamp = arb1.stamp;
						if(arb1.fresh || (arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
							arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
							var anyimpure = false;
							var arbs1;
							if(arb1.ws1.id > arb1.ws2.id) arbs1 = arb1.ws2; else arbs1 = arb1.ws1;
							var arbs2;
							if(arb1.ws1.id > arb1.ws2.id) arbs2 = arb1.ws1; else arbs2 = arb1.ws2;
							this.inlined_MRCA_chains(arbs1,arbs2);
							var cx_ite1 = this.mrca1.head;
							while(cx_ite1 != null) {
								var i1 = cx_ite1.elt;
								var cx_ite2 = this.mrca2.head;
								while(cx_ite2 != null) {
									var i2 = cx_ite2.elt;
									var cb1 = i1.cbSet;
									var cb2 = i2.cbSet;
									if(cb1.manager.pair(cb1,cb2).empty_intersection()) {
										cx_ite2 = cx_ite2.next;
										continue;
									}
									var callbackset = null;
									var ncallbackset = null;
									this.prelisteners.inlined_clear();
									var lite = [null];
									cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_PRE,(function(lite) {
										return function(listener) {
											if((listener.itype & inttype) != 0) {
												lite[0] = _g.prelisteners.inlined_insert(lite[0],listener);
												anyimpure = anyimpure || !listener.pure;
											}
										};
									})(lite));
									if(this.prelisteners.head == null) {
										cx_ite2 = cx_ite2.next;
										continue;
									}
									callbackset = zpp_nape.phys.ZPP_Interactor.get(i1,i2);
									if(callbackset == null) {
										ncallbackset = zpp_nape.space.ZPP_CallbackSet.get(i1,i2);
										this.add_callbackset(ncallbackset);
									}
									if(callbackset == null || (callbackset.FLUIDstamp != this.stamp || continuous) && (callbackset.FLUIDstate & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
										if(ncallbackset != null) callbackset = ncallbackset;
										if(callbackset != null) {
											var cx_ite3 = this.prelisteners.head;
											while(cx_ite3 != null) {
												var listener1 = cx_ite3.elt;
												if(listener1.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
													callbackset.COLLISIONstamp = this.stamp;
													callbackset.SENSORstamp = this.stamp;
													callbackset.FLUIDstamp = this.stamp;
												} else callbackset.FLUIDstamp = this.stamp;
												cx_ite3 = cx_ite3.next;
											}
										}
										var pact = arb1.active;
										arb1.active = true;
										var emptycontacts = false;
										this.precb.zpp_inner.pre_arbiter = arb1;
										this.precb.zpp_inner.set = callbackset;
										var cx_ite4 = this.prelisteners.head;
										while(cx_ite4 != null) {
											var listener2 = cx_ite4.elt;
											this.precb.zpp_inner.listener = listener2;
											zpp_nape.phys.ZPP_Interactor.int_callback(callbackset,listener2,this.precb.zpp_inner);
											this.precb.zpp_inner.pre_swapped = i1 != this.precb.zpp_inner.int1;
											var ret2 = listener2.handlerp(this.precb);
											if(ret2 != null) if(ret2 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
												return $r;
											}(this))) arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else if(ret2 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
												return $r;
											}(this))) arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT; else if(ret2 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
												return $r;
											}(this))) arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE;
											cx_ite4 = cx_ite4.next;
										}
										arb1.active = pact;
										if(callbackset != null) {
											var cx_ite5 = this.prelisteners.head;
											while(cx_ite5 != null) {
												var listener3 = cx_ite5.elt;
												if(listener3.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
													callbackset.COLLISIONstate = arb1.immState;
													callbackset.SENSORstate = arb1.immState;
													callbackset.FLUIDstate = arb1.immState;
												} else callbackset.FLUIDstate = arb1.immState;
												cx_ite5 = cx_ite5.next;
											}
										}
									} else if(callbackset == null) {
										if((arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
									} else arb1.immState = callbackset.FLUIDstate;
									cx_ite2 = cx_ite2.next;
								}
								cx_ite1 = cx_ite1.next;
							}
							if(anyimpure && (arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
								if(arb1.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
									var o = arb1.b1;
									if(!o.world) {
										o.component.waket = this.stamp + (this.midstep?0:1);
										if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
										if(o.component.sleeping) this.really_wake(o,false);
									}
								}
								if(arb1.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
									var o1 = arb1.b2;
									if(!o1.world) {
										o1.component.waket = this.stamp + (this.midstep?0:1);
										if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
										if(o1.component.sleeping) this.really_wake(o1,false);
									}
								}
							}
						}
						if((arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
							if(arb1.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb1.b1.component.sleeping) {
								var o2 = arb1.b1;
								if(!o2.world) {
									o2.component.waket = this.stamp + (this.midstep?0:1);
									if(o2.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o2.kinematicDelaySleep = true;
									if(o2.component.sleeping) this.really_wake(o2,false);
								}
							}
							if(arb1.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb1.b2.component.sleeping) {
								var o3 = arb1.b2;
								if(!o3.world) {
									o3.component.waket = this.stamp + (this.midstep?0:1);
									if(o3.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o3.kinematicDelaySleep = true;
									if(o3.component.sleeping) this.really_wake(o3,false);
								}
							}
						}
						if(arb1.sleeping) {
							arb1.sleeping = false;
							this.f_arbiters.inlined_add(arb1);
						}
						ret = arb1;
					} else if(first) {
						var o4 = arb1;
						o4.next = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = o4;
						ret = null;
					} else ret = arb1;
				} else ret = arb1;
			} else if(itype == 1) {
				var carbs;
				if(stat) carbs = this.c_arbiters_true; else carbs = this.c_arbiters_false;
				var xarb1;
				if(in_arb == null) {
					var ret3 = null;
					var b3;
					if(b1.arbiters.length < b2.arbiters.length) b3 = b1; else b3 = b2;
					var cx_ite6 = b3.arbiters.head;
					while(cx_ite6 != null) {
						var arb2 = cx_ite6.elt;
						if(arb2.id == sa.id && arb2.di == sb.id) {
							ret3 = arb2;
							break;
						}
						cx_ite6 = cx_ite6.next;
					}
					xarb1 = ret3;
				} else xarb1 = in_arb;
				var first1 = xarb1 == null;
				var arb3;
				var swapped1 = false;
				if(first1) {
					if(zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool == null) arb3 = new zpp_nape.dynamics.ZPP_ColArbiter(); else {
						arb3 = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = arb3.next;
						arb3.next = null;
					}
					null;
					arb3.stat = stat;
				} else if(xarb1.colarb == null) {
					xarb1.cleared = true;
					xarb1.b1.arbiters.inlined_try_remove(xarb1);
					xarb1.b2.arbiters.inlined_try_remove(xarb1);
					if(xarb1.pair != null) {
						xarb1.pair.arb = null;
						xarb1.pair = null;
					}
					xarb1.active = false;
					this.f_arbiters.modified = true;
					if(zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool == null) arb3 = new zpp_nape.dynamics.ZPP_ColArbiter(); else {
						arb3 = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = arb3.next;
						arb3.next = null;
					}
					null;
					arb3.intchange = true;
					arb3.stat = stat;
					first1 = true;
					swapped1 = true;
				} else {
					arb3 = xarb1.colarb;
					reverse = sa != arb3.s1;
					if(arb3.stat != stat) {
						arb3.stat = stat;
						if(!arb3.sleeping) {
							(stat?this.c_arbiters_false:this.c_arbiters_true).remove(arb3);
							carbs.add(arb3);
						}
					}
				}
				var inttype1 = zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION;
				if(first1 || arb3.stamp != this.stamp || continuous) {
					arb3.stamp = this.stamp;
					if(zpp_nape.geom.ZPP_Collide.contactCollide(sa,sb,arb3,reverse)) {
						if(first1) {
							arb3.b1 = s1.body;
							arb3.ws1 = s1;
							arb3.b2 = s2.body;
							arb3.ws2 = s2;
							arb3.id = sa.id;
							arb3.di = sb.id;
							arb3.b1.arbiters.inlined_add(arb3);
							arb3.b2.arbiters.inlined_add(arb3);
							arb3.active = true;
							arb3.present = 0;
							arb3.cleared = false;
							arb3.sleeping = false;
							arb3.fresh = false;
							arb3.presentable = false;
							arb3.s1 = s1;
							arb3.s2 = s2;
							if(!arb3.userdef_restitution) {
								if(arb3.s1.material.elasticity <= Math.NEGATIVE_INFINITY || arb3.s2.material.elasticity <= Math.NEGATIVE_INFINITY) arb3.restitution = 0; else if(arb3.s1.material.elasticity >= Math.POSITIVE_INFINITY || arb3.s2.material.elasticity >= Math.POSITIVE_INFINITY) arb3.restitution = 1; else arb3.restitution = (arb3.s1.material.elasticity + arb3.s2.material.elasticity) / 2;
								if(arb3.restitution < 0) arb3.restitution = 0;
								if(arb3.restitution > 1) arb3.restitution = 1;
							}
							if(!arb3.userdef_dyn_fric) arb3.dyn_fric = Math.sqrt(arb3.s1.material.dynamicFriction * arb3.s2.material.dynamicFriction);
							if(!arb3.userdef_stat_fric) arb3.stat_fric = Math.sqrt(arb3.s1.material.staticFriction * arb3.s2.material.staticFriction);
							if(!arb3.userdef_rfric) arb3.rfric = Math.sqrt(arb3.s1.material.rollingFriction * arb3.s2.material.rollingFriction);
							carbs.inlined_add(arb3);
							arb3.fresh = !swapped1;
						} else arb3.fresh = arb3.up_stamp < this.stamp - 1 || arb3.endGenerated == this.stamp && continuous;
						arb3.up_stamp = arb3.stamp;
						if(arb3.fresh || (arb3.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
							arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
							var anyimpure1 = false;
							var arbs11;
							if(arb3.ws1.id > arb3.ws2.id) arbs11 = arb3.ws2; else arbs11 = arb3.ws1;
							var arbs21;
							if(arb3.ws1.id > arb3.ws2.id) arbs21 = arb3.ws1; else arbs21 = arb3.ws2;
							this.inlined_MRCA_chains(arbs11,arbs21);
							var cx_ite7 = this.mrca1.head;
							while(cx_ite7 != null) {
								var i11 = cx_ite7.elt;
								var cx_ite8 = this.mrca2.head;
								while(cx_ite8 != null) {
									var i21 = cx_ite8.elt;
									var cb11 = i11.cbSet;
									var cb21 = i21.cbSet;
									if(cb11.manager.pair(cb11,cb21).empty_intersection()) {
										cx_ite8 = cx_ite8.next;
										continue;
									}
									var callbackset1 = null;
									var ncallbackset1 = null;
									this.prelisteners.inlined_clear();
									var lite1 = [null];
									cb11.manager.pair(cb11,cb21).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_PRE,(function(lite1) {
										return function(listener4) {
											if((listener4.itype & inttype1) != 0) {
												lite1[0] = _g.prelisteners.inlined_insert(lite1[0],listener4);
												anyimpure1 = anyimpure1 || !listener4.pure;
											}
										};
									})(lite1));
									if(this.prelisteners.head == null) {
										cx_ite8 = cx_ite8.next;
										continue;
									}
									callbackset1 = zpp_nape.phys.ZPP_Interactor.get(i11,i21);
									if(callbackset1 == null) {
										ncallbackset1 = zpp_nape.space.ZPP_CallbackSet.get(i11,i21);
										this.add_callbackset(ncallbackset1);
									}
									if(callbackset1 == null || (callbackset1.COLLISIONstamp != this.stamp || continuous) && (callbackset1.COLLISIONstate & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
										if(ncallbackset1 != null) callbackset1 = ncallbackset1;
										if(callbackset1 != null) {
											var cx_ite9 = this.prelisteners.head;
											while(cx_ite9 != null) {
												var listener5 = cx_ite9.elt;
												if(listener5.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
													callbackset1.COLLISIONstamp = this.stamp;
													callbackset1.SENSORstamp = this.stamp;
													callbackset1.FLUIDstamp = this.stamp;
												} else callbackset1.COLLISIONstamp = this.stamp;
												cx_ite9 = cx_ite9.next;
											}
										}
										var pact1 = arb3.active;
										arb3.active = true;
										var emptycontacts1 = false;
										arb3.cleanupContacts();
										this.precb.zpp_inner.pre_arbiter = arb3;
										this.precb.zpp_inner.set = callbackset1;
										var cx_ite10 = this.prelisteners.head;
										while(cx_ite10 != null) {
											var listener6 = cx_ite10.elt;
											this.precb.zpp_inner.listener = listener6;
											zpp_nape.phys.ZPP_Interactor.int_callback(callbackset1,listener6,this.precb.zpp_inner);
											this.precb.zpp_inner.pre_swapped = i11 != this.precb.zpp_inner.int1;
											var ret4 = listener6.handlerp(this.precb);
											if(ret4 != null) if(ret4 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
												return $r;
											}(this))) arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else if(ret4 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
												return $r;
											}(this))) arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT; else if(ret4 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
												return $r;
											}(this))) arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE;
											cx_ite10 = cx_ite10.next;
										}
										arb3.active = pact1;
										if(callbackset1 != null) {
											var cx_ite11 = this.prelisteners.head;
											while(cx_ite11 != null) {
												var listener7 = cx_ite11.elt;
												if(listener7.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
													callbackset1.COLLISIONstate = arb3.immState;
													callbackset1.SENSORstate = arb3.immState;
													callbackset1.FLUIDstate = arb3.immState;
												} else callbackset1.COLLISIONstate = arb3.immState;
												cx_ite11 = cx_ite11.next;
											}
										}
									} else if(callbackset1 == null) {
										if((arb3.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
									} else arb3.immState = callbackset1.COLLISIONstate;
									cx_ite8 = cx_ite8.next;
								}
								cx_ite7 = cx_ite7.next;
							}
							if(anyimpure1 && (arb3.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
								if(arb3.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
									var o5 = arb3.b1;
									if(!o5.world) {
										o5.component.waket = this.stamp + (this.midstep?0:1);
										if(o5.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o5.kinematicDelaySleep = true;
										if(o5.component.sleeping) this.really_wake(o5,false);
									}
								}
								if(arb3.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
									var o6 = arb3.b2;
									if(!o6.world) {
										o6.component.waket = this.stamp + (this.midstep?0:1);
										if(o6.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o6.kinematicDelaySleep = true;
										if(o6.component.sleeping) this.really_wake(o6,false);
									}
								}
							}
						}
						if((arb3.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
							if(arb3.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb3.b1.component.sleeping) {
								var o7 = arb3.b1;
								if(!o7.world) {
									o7.component.waket = this.stamp + (this.midstep?0:1);
									if(o7.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o7.kinematicDelaySleep = true;
									if(o7.component.sleeping) this.really_wake(o7,false);
								}
							}
							if(arb3.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb3.b2.component.sleeping) {
								var o8 = arb3.b2;
								if(!o8.world) {
									o8.component.waket = this.stamp + (this.midstep?0:1);
									if(o8.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o8.kinematicDelaySleep = true;
									if(o8.component.sleeping) this.really_wake(o8,false);
								}
							}
						}
						if(arb3.sleeping) {
							arb3.sleeping = false;
							carbs.inlined_add(arb3);
						}
						ret = arb3;
					} else if(first1) {
						var o9 = arb3;
						o9.userdef_dyn_fric = false;
						o9.userdef_stat_fric = false;
						o9.userdef_restitution = false;
						o9.userdef_rfric = false;
						o9.__ref_edge1 = o9.__ref_edge2 = null;
						o9.next = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = o9;
						ret = null;
					} else ret = arb3;
				} else ret = arb3;
			} else {
				var xarb2;
				if(in_arb == null) {
					var ret5 = null;
					var b4;
					if(b1.arbiters.length < b2.arbiters.length) b4 = b1; else b4 = b2;
					var cx_ite12 = b4.arbiters.head;
					while(cx_ite12 != null) {
						var arb4 = cx_ite12.elt;
						if(arb4.id == sa.id && arb4.di == sb.id) {
							ret5 = arb4;
							break;
						}
						cx_ite12 = cx_ite12.next;
					}
					xarb2 = ret5;
				} else xarb2 = in_arb;
				var first2 = xarb2 == null;
				var arb5;
				var swapped2 = false;
				if(first2) {
					if(zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool == null) arb5 = new zpp_nape.dynamics.ZPP_SensorArbiter(); else {
						arb5 = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = arb5.next;
						arb5.next = null;
					}
					null;
				} else if(xarb2.sensorarb == null) {
					xarb2.cleared = true;
					xarb2.b1.arbiters.inlined_try_remove(xarb2);
					xarb2.b2.arbiters.inlined_try_remove(xarb2);
					if(xarb2.pair != null) {
						xarb2.pair.arb = null;
						xarb2.pair = null;
					}
					xarb2.active = false;
					this.f_arbiters.modified = true;
					if(zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool == null) arb5 = new zpp_nape.dynamics.ZPP_SensorArbiter(); else {
						arb5 = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = arb5.next;
						arb5.next = null;
					}
					null;
					arb5.intchange = true;
					first2 = true;
					swapped2 = true;
				} else arb5 = xarb2.sensorarb;
				var inttype2 = zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR;
				if(first2 || arb5.stamp != this.stamp || continuous) {
					arb5.stamp = this.stamp;
					if(zpp_nape.geom.ZPP_Collide.testCollide(sa,sb)) {
						if(first2) {
							arb5.b1 = s1.body;
							arb5.ws1 = s1;
							arb5.b2 = s2.body;
							arb5.ws2 = s2;
							arb5.id = sa.id;
							arb5.di = sb.id;
							arb5.b1.arbiters.inlined_add(arb5);
							arb5.b2.arbiters.inlined_add(arb5);
							arb5.active = true;
							arb5.present = 0;
							arb5.cleared = false;
							arb5.sleeping = false;
							arb5.fresh = false;
							arb5.presentable = false;
							this.s_arbiters.inlined_add(arb5);
							arb5.fresh = !swapped2;
						} else arb5.fresh = arb5.up_stamp < this.stamp - 1 || arb5.endGenerated == this.stamp && continuous;
						arb5.up_stamp = arb5.stamp;
						if(arb5.fresh || (arb5.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
							arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
							var anyimpure2 = false;
							var arbs12;
							if(arb5.ws1.id > arb5.ws2.id) arbs12 = arb5.ws2; else arbs12 = arb5.ws1;
							var arbs22;
							if(arb5.ws1.id > arb5.ws2.id) arbs22 = arb5.ws1; else arbs22 = arb5.ws2;
							this.inlined_MRCA_chains(arbs12,arbs22);
							var cx_ite13 = this.mrca1.head;
							while(cx_ite13 != null) {
								var i12 = cx_ite13.elt;
								var cx_ite14 = this.mrca2.head;
								while(cx_ite14 != null) {
									var i22 = cx_ite14.elt;
									var cb12 = i12.cbSet;
									var cb22 = i22.cbSet;
									if(cb12.manager.pair(cb12,cb22).empty_intersection()) {
										cx_ite14 = cx_ite14.next;
										continue;
									}
									var callbackset2 = null;
									var ncallbackset2 = null;
									this.prelisteners.inlined_clear();
									var lite2 = [null];
									cb12.manager.pair(cb12,cb22).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_PRE,(function(lite2) {
										return function(listener8) {
											if((listener8.itype & inttype2) != 0) {
												lite2[0] = _g.prelisteners.inlined_insert(lite2[0],listener8);
												anyimpure2 = anyimpure2 || !listener8.pure;
											}
										};
									})(lite2));
									if(this.prelisteners.head == null) {
										cx_ite14 = cx_ite14.next;
										continue;
									}
									callbackset2 = zpp_nape.phys.ZPP_Interactor.get(i12,i22);
									if(callbackset2 == null) {
										ncallbackset2 = zpp_nape.space.ZPP_CallbackSet.get(i12,i22);
										this.add_callbackset(ncallbackset2);
									}
									if(callbackset2 == null || (callbackset2.SENSORstamp != this.stamp || continuous) && (callbackset2.SENSORstate & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
										if(ncallbackset2 != null) callbackset2 = ncallbackset2;
										if(callbackset2 != null) {
											var cx_ite15 = this.prelisteners.head;
											while(cx_ite15 != null) {
												var listener9 = cx_ite15.elt;
												if(listener9.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
													callbackset2.COLLISIONstamp = this.stamp;
													callbackset2.SENSORstamp = this.stamp;
													callbackset2.FLUIDstamp = this.stamp;
												} else callbackset2.SENSORstamp = this.stamp;
												cx_ite15 = cx_ite15.next;
											}
										}
										var pact2 = arb5.active;
										arb5.active = true;
										var emptycontacts2 = false;
										this.precb.zpp_inner.pre_arbiter = arb5;
										this.precb.zpp_inner.set = callbackset2;
										var cx_ite16 = this.prelisteners.head;
										while(cx_ite16 != null) {
											var listener10 = cx_ite16.elt;
											this.precb.zpp_inner.listener = listener10;
											zpp_nape.phys.ZPP_Interactor.int_callback(callbackset2,listener10,this.precb.zpp_inner);
											this.precb.zpp_inner.pre_swapped = i12 != this.precb.zpp_inner.int1;
											var ret6 = listener10.handlerp(this.precb);
											if(ret6 != null) if(ret6 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
												return $r;
											}(this))) arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else if(ret6 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
												return $r;
											}(this))) arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT; else if(ret6 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
												return $r;
											}(this))) arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE;
											cx_ite16 = cx_ite16.next;
										}
										arb5.active = pact2;
										if(callbackset2 != null) {
											var cx_ite17 = this.prelisteners.head;
											while(cx_ite17 != null) {
												var listener11 = cx_ite17.elt;
												if(listener11.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
													callbackset2.COLLISIONstate = arb5.immState;
													callbackset2.SENSORstate = arb5.immState;
													callbackset2.FLUIDstate = arb5.immState;
												} else callbackset2.SENSORstate = arb5.immState;
												cx_ite17 = cx_ite17.next;
											}
										}
									} else if(callbackset2 == null) {
										if((arb5.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
									} else arb5.immState = callbackset2.SENSORstate;
									cx_ite14 = cx_ite14.next;
								}
								cx_ite13 = cx_ite13.next;
							}
							if(anyimpure2 && (arb5.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
								if(!(arb5.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
									var o10 = arb5.b1;
									if(!o10.world) {
										o10.component.waket = this.stamp + (this.midstep?0:1);
										if(o10.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o10.kinematicDelaySleep = true;
										if(o10.component.sleeping) this.really_wake(o10,false);
									}
								}
								if(!(arb5.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
									var o11 = arb5.b2;
									if(!o11.world) {
										o11.component.waket = this.stamp + (this.midstep?0:1);
										if(o11.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o11.kinematicDelaySleep = true;
										if(o11.component.sleeping) this.really_wake(o11,false);
									}
								}
							}
						}
						if(arb5.sleeping) {
							arb5.sleeping = false;
							this.s_arbiters.inlined_add(arb5);
						}
						ret = arb5;
					} else if(first2) {
						var o12 = arb5;
						o12.next = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = o12;
						ret = null;
					} else ret = arb5;
				} else ret = arb5;
			}
		}
		return ret;
	}
	,MRCA_chains: function(s1,s2) {
		this.inlined_MRCA_chains(s1,s2);
	}
	,inlined_MRCA_chains: function(s1,s2) {
		this.mrca1.inlined_clear();
		this.mrca2.inlined_clear();
		if(s1.cbSet != null) this.mrca1.inlined_add(s1);
		if(s1.body.cbSet != null) this.mrca1.inlined_add(s1.body);
		if(s2.cbSet != null) this.mrca2.inlined_add(s2);
		if(s2.body.cbSet != null) this.mrca2.inlined_add(s2.body);
		var c1 = s1.body.compound;
		var c2 = s2.body.compound;
		while(c1 != c2) {
			var d1;
			if(c1 == null) d1 = 0; else d1 = c1.depth;
			var d2;
			if(c2 == null) d2 = 0; else d2 = c2.depth;
			if(d1 < d2) {
				if(c2.cbSet != null) this.mrca2.inlined_add(c2);
				c2 = c2.compound;
			} else {
				if(c1.cbSet != null) this.mrca1.inlined_add(c1);
				c1 = c1.compound;
			}
		}
	}
	,__class__: zpp_nape.space.ZPP_Space
};
zpp_nape.space.ZPP_SweepData = function() {
	this.aabb = null;
	this.shape = null;
	this.prev = null;
	this.next = null;
};
$hxClasses["zpp_nape.space.ZPP_SweepData"] = zpp_nape.space.ZPP_SweepData;
zpp_nape.space.ZPP_SweepData.__name__ = ["zpp_nape","space","ZPP_SweepData"];
zpp_nape.space.ZPP_SweepData.prototype = {
	free: function() {
		this.prev = null;
		this.shape = null;
		this.aabb = null;
	}
	,alloc: function() {
	}
	,gt: function(x) {
		return this.aabb.minx > x.aabb.minx;
	}
	,__class__: zpp_nape.space.ZPP_SweepData
};
zpp_nape.space.ZPP_SweepPhase = function(space) {
	this.failed = null;
	this.list = null;
	zpp_nape.space.ZPP_Broadphase.call(this);
	this.space = space;
	this.is_sweep = true;
	this.sweep = this;
};
$hxClasses["zpp_nape.space.ZPP_SweepPhase"] = zpp_nape.space.ZPP_SweepPhase;
zpp_nape.space.ZPP_SweepPhase.__name__ = ["zpp_nape","space","ZPP_SweepPhase"];
zpp_nape.space.ZPP_SweepPhase.__super__ = zpp_nape.space.ZPP_Broadphase;
zpp_nape.space.ZPP_SweepPhase.prototype = $extend(zpp_nape.space.ZPP_Broadphase.prototype,{
	__insert: function(shape) {
		var dat;
		if(zpp_nape.space.ZPP_SweepData.zpp_pool == null) dat = new zpp_nape.space.ZPP_SweepData(); else {
			dat = zpp_nape.space.ZPP_SweepData.zpp_pool;
			zpp_nape.space.ZPP_SweepData.zpp_pool = dat.next;
			dat.next = null;
		}
		null;
		shape.sweep = dat;
		dat.shape = shape;
		dat.aabb = shape.aabb;
		dat.next = this.list;
		if(this.list != null) this.list.prev = dat;
		this.list = dat;
	}
	,__remove: function(shape) {
		var dat = shape.sweep;
		if(dat.prev == null) this.list = dat.next; else dat.prev.next = dat.next;
		if(dat.next != null) dat.next.prev = dat.prev;
		shape.sweep = null;
		var o = dat;
		o.prev = null;
		o.shape = null;
		o.aabb = null;
		o.next = zpp_nape.space.ZPP_SweepData.zpp_pool;
		zpp_nape.space.ZPP_SweepData.zpp_pool = o;
	}
	,__sync: function(shape) {
		if(!this.space.continuous) {
			if(shape.zip_aabb) {
				if(shape.body != null) {
					shape.zip_aabb = false;
					if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
				}
			}
		}
	}
	,sync_broadphase: function() {
		this.space.validation();
		if(this.list != null) this.sync_broadphase_fast();
	}
	,sync_broadphase_fast: function() {
		var a = this.list.next;
		while(a != null) {
			var n = a.next;
			var b = a.prev;
			if(a.aabb.minx > b.aabb.minx) {
				a = n;
				continue;
			}
			while(b.prev != null && b.prev.aabb.minx > a.aabb.minx) b = b.prev;
			var prev = a.prev;
			prev.next = a.next;
			if(a.next != null) a.next.prev = prev;
			if(b.prev == null) {
				a.prev = null;
				this.list = a;
				a.next = b;
				b.prev = a;
			} else {
				a.prev = b.prev;
				b.prev = a;
				a.prev.next = a;
				a.next = b;
			}
			a = n;
		}
	}
	,broadphase: function(space,discrete) {
		if(this.list != null) {
			this.sync_broadphase_fast();
			var d1 = this.list;
			while(d1 != null) {
				var d2 = d1.next;
				var s1 = d1.shape;
				var b1 = s1.body;
				var bottom = d1.aabb.maxx;
				while(d2 != null) {
					if(d2.aabb.minx > bottom) break;
					var s2 = d2.shape;
					var b2 = s2.body;
					if(b2 == b1) {
						d2 = d2.next;
						continue;
					}
					if(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) {
						d2 = d2.next;
						continue;
					}
					if(b1.component.sleeping && b2.component.sleeping) {
						d2 = d2.next;
						continue;
					}
					if(s1.aabb.intersectY(s2.aabb)) {
						if(discrete) space.narrowPhase(s1,s2,!(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC),null,false); else space.continuousEvent(s1,s2,!(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC),null,false);
					}
					d2 = d2.next;
				}
				d1 = d1.next;
			}
		}
	}
	,clear: function() {
		while(this.list != null) {
			this.list.shape.removedFromSpace();
			this.__remove(this.list.shape);
		}
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.minx > x) a = a.next;
		while(a != null && a.aabb.minx <= x) {
			if(a.aabb.maxx >= x && a.aabb.miny <= y && a.aabb.maxy >= y) {
				var shape = a.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
						if(zpp_nape.geom.ZPP_Collide.circleContains(shape.circle,v)) ret.push(shape.outer);
					} else if(zpp_nape.geom.ZPP_Collide.polyContains(shape.polygon,v)) ret.push(shape.outer);
				}
			}
			a = a.next;
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		return ret;
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.minx > x) a = a.next;
		while(a != null && a.aabb.minx <= x) {
			if(a.aabb.maxx >= x && a.aabb.miny <= y && a.aabb.maxy >= y) {
				var shape = a.shape;
				var body = shape.body.outer;
				if(!ret.has(body)) {
					if(filter == null || shape.filter.shouldCollide(filter)) {
						if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
							if(zpp_nape.geom.ZPP_Collide.circleContains(shape.circle,v)) ret.push(body);
						} else if(zpp_nape.geom.ZPP_Collide.polyContains(shape.polygon,v)) ret.push(body);
					}
				}
			}
			a = a.next;
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		return ret;
	}
	,shapesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			var shape = a.shape;
			if(filter == null || shape.filter.shouldCollide(filter)) {
				if(strict) {
					if(containment) {
						if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,shape)) ret.push(shape.outer);
					} else if(ab.contains(a.aabb)) ret.push(shape.outer); else if(a.aabb.intersect(ab)) {
						if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.aabbShape.zpp_inner)) ret.push(shape.outer);
					}
				} else if(containment?ab.contains(a.aabb):a.aabb.intersect(ab)) ret.push(shape.outer);
			}
			a = a.next;
		}
		return ret;
	}
	,bodiesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			var shape = a.shape;
			var body = shape.body.outer;
			if(a.aabb.intersect(ab)) {
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(strict) {
						if(containment) {
							if(!this.failed.has(body)) {
								var col = zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,shape);
								if(!ret.has(body) && col) ret.push(body); else if(!col) {
									ret.remove(body);
									this.failed.push(body);
								}
							}
						} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.aabbShape.zpp_inner)) ret.push(body);
					} else if(containment) {
						if(!this.failed.has(body)) {
							var col1 = ab.contains(shape.aabb);
							if(!ret.has(body) && col1) ret.push(body); else if(!col1) {
								ret.remove(body);
								this.failed.push(body);
							}
						}
					} else if(!ret.has(body) && ab.contains(shape.aabb)) ret.push(body);
				}
			}
			a = a.next;
		}
		this.failed.clear();
		return ret;
	}
	,shapesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape = a.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(containment) {
						if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,shape)) ret.push(shape.outer);
					} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.circShape.zpp_inner)) ret.push(shape.outer);
				}
			}
			a = a.next;
		}
		return ret;
	}
	,bodiesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape = a.shape;
				var body = shape.body.outer;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(containment) {
						if(!this.failed.has(body)) {
							var col = zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,shape);
							if(!ret.has(body) && col) ret.push(body); else if(!col) {
								ret.remove(body);
								this.failed.push(body);
							}
						}
					} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.circShape.zpp_inner)) ret.push(body);
				}
			}
			a = a.next;
		}
		this.failed.clear();
		return ret;
	}
	,shapesInShape: function(shape,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shape);
		var ab = shape.aabb;
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape2 = a.shape;
				if(filter == null || shape2.filter.shouldCollide(filter)) {
					if(containment) {
						if(zpp_nape.geom.ZPP_Collide.containTest(shape,shape2)) ret.push(shape2.outer);
					} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape2,shape)) ret.push(shape2.outer);
				}
			}
			a = a.next;
		}
		return ret;
	}
	,bodiesInShape: function(shape,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shape);
		var ab = shape.aabb;
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape2 = a.shape;
				var body = shape2.body.outer;
				if(filter == null || shape2.filter.shouldCollide(filter)) {
					if(containment) {
						if(!this.failed.has(body)) {
							var col = zpp_nape.geom.ZPP_Collide.containTest(shape,shape2);
							if(!ret.has(body) && col) ret.push(body); else if(!col) {
								ret.remove(body);
								this.failed.push(body);
							}
						}
					} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,shape2)) ret.push(body);
				}
			}
			a = a.next;
		}
		this.failed.clear();
		return ret;
	}
	,rayCast: function(ray,inner,filter) {
		this.sync_broadphase();
		ray.validate_dir();
		var rayab = ray.rayAABB();
		var mint = ray.maxdist;
		var minres = null;
		if(ray.dirx == 0) {
			var a = this.list;
			while(a != null && a.aabb.minx <= rayab.minx) {
				if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
					var t = ray.aabbsect(a.aabb);
					if(t >= 0 && t < mint) {
						var result;
						if(a.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) result = ray.circlesect(a.shape.circle,inner,mint); else result = ray.polysect(a.shape.polygon,inner,mint);
						if(result != null) {
							mint = result.zpp_inner.toiDistance;
							if(minres != null) minres.zpp_inner.free();
							minres = result;
						}
					}
				}
				a = a.next;
			}
		} else if(ray.dirx < 0) {
			var a1 = this.list;
			var b = null;
			while(a1 != null && a1.aabb.minx <= rayab.maxx) {
				b = a1;
				a1 = a1.next;
			}
			a1 = b;
			while(a1 != null) {
				if(a1.aabb.intersect(rayab) && (filter == null || a1.shape.filter.shouldCollide(filter))) {
					var t1 = ray.aabbsect(a1.aabb);
					if(t1 >= 0 && t1 < mint) {
						var result1;
						if(a1.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) result1 = ray.circlesect(a1.shape.circle,inner,mint); else result1 = ray.polysect(a1.shape.polygon,inner,mint);
						if(result1 != null) {
							mint = result1.zpp_inner.toiDistance;
							if(minres != null) minres.zpp_inner.free();
							minres = result1;
						}
					}
				}
				a1 = a1.prev;
			}
		} else {
			var a2 = this.list;
			while(a2 != null && a2.aabb.minx <= rayab.maxx && a2.aabb.minx < ray.originx + ray.dirx * mint) {
				if(a2.aabb.intersect(rayab) && (filter == null || a2.shape.filter.shouldCollide(filter))) {
					var t2 = ray.aabbsect(a2.aabb);
					if(t2 >= 0 && t2 < mint) {
						var result2;
						if(a2.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) result2 = ray.circlesect(a2.shape.circle,inner,mint); else result2 = ray.polysect(a2.shape.polygon,inner,mint);
						if(result2 != null) {
							mint = result2.zpp_inner.toiDistance;
							if(minres != null) minres.zpp_inner.free();
							minres = result2;
						}
					}
				}
				a2 = a2.next;
			}
		}
		var o = rayab;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = o;
		return minres;
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		this.sync_broadphase();
		ray.validate_dir();
		var rayab = ray.rayAABB();
		var ret;
		if(output == null) ret = new nape.geom.RayResultList(); else ret = output;
		if(ray.dirx == 0) {
			var a = this.list;
			while(a != null && a.aabb.minx <= rayab.minx) {
				if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
					var t = ray.aabbsect(a.aabb);
					if(t >= 0) {
						if(a.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ray.circlesect2(a.shape.circle,inner,ret); else ray.polysect2(a.shape.polygon,inner,ret);
					}
				}
				a = a.next;
			}
		} else if(ray.dirx < 0) {
			var a1 = this.list;
			var b = null;
			while(a1 != null && a1.aabb.minx <= rayab.maxx) {
				b = a1;
				a1 = a1.next;
			}
			a1 = b;
			while(a1 != null) {
				if(a1.aabb.intersect(rayab) && (filter == null || a1.shape.filter.shouldCollide(filter))) {
					var t1 = ray.aabbsect(a1.aabb);
					if(t1 >= 0) {
						if(a1.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ray.circlesect2(a1.shape.circle,inner,ret); else ray.polysect2(a1.shape.polygon,inner,ret);
					}
				}
				a1 = a1.prev;
			}
		} else {
			var a2 = this.list;
			while(a2 != null && a2.aabb.minx <= rayab.maxx) {
				if(a2.aabb.intersect(rayab) && (filter == null || a2.shape.filter.shouldCollide(filter))) {
					var t2 = ray.aabbsect(a2.aabb);
					if(t2 >= 0) {
						if(a2.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ray.circlesect2(a2.shape.circle,inner,ret); else ray.polysect2(a2.shape.polygon,inner,ret);
					}
				}
				a2 = a2.next;
			}
		}
		var o = rayab;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = o;
		return ret;
	}
	,__class__: zpp_nape.space.ZPP_SweepPhase
});
zpp_nape.util.ZNPArray2_Float = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = new Array();
};
$hxClasses["zpp_nape.util.ZNPArray2_Float"] = zpp_nape.util.ZNPArray2_Float;
zpp_nape.util.ZNPArray2_Float.__name__ = ["zpp_nape","util","ZNPArray2_Float"];
zpp_nape.util.ZNPArray2_Float.prototype = {
	resize: function(width,height,def) {
		this.width = width;
		var _g1 = 0;
		var _g = width * height;
		while(_g1 < _g) {
			var i = _g1++;
			this.list[i] = def;
		}
	}
	,get: function(x,y) {
		return this.list[y * this.width + x];
	}
	,set: function(x,y,obj) {
		return this.list[y * this.width + x] = obj;
	}
	,__class__: zpp_nape.util.ZNPArray2_Float
};
zpp_nape.util.ZNPArray2_ZPP_GeomVert = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = new Array();
};
$hxClasses["zpp_nape.util.ZNPArray2_ZPP_GeomVert"] = zpp_nape.util.ZNPArray2_ZPP_GeomVert;
zpp_nape.util.ZNPArray2_ZPP_GeomVert.__name__ = ["zpp_nape","util","ZNPArray2_ZPP_GeomVert"];
zpp_nape.util.ZNPArray2_ZPP_GeomVert.prototype = {
	resize: function(width,height,def) {
		this.width = width;
		var _g1 = 0;
		var _g = width * height;
		while(_g1 < _g) {
			var i = _g1++;
			this.list[i] = def;
		}
	}
	,get: function(x,y) {
		return this.list[y * this.width + x];
	}
	,set: function(x,y,obj) {
		return this.list[y * this.width + x] = obj;
	}
	,__class__: zpp_nape.util.ZNPArray2_ZPP_GeomVert
};
zpp_nape.util.ZNPArray2_ZPP_MarchPair = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = new Array();
};
$hxClasses["zpp_nape.util.ZNPArray2_ZPP_MarchPair"] = zpp_nape.util.ZNPArray2_ZPP_MarchPair;
zpp_nape.util.ZNPArray2_ZPP_MarchPair.__name__ = ["zpp_nape","util","ZNPArray2_ZPP_MarchPair"];
zpp_nape.util.ZNPArray2_ZPP_MarchPair.prototype = {
	resize: function(width,height,def) {
		this.width = width;
		var _g1 = 0;
		var _g = width * height;
		while(_g1 < _g) {
			var i = _g1++;
			this.list[i] = def;
		}
	}
	,get: function(x,y) {
		return this.list[y * this.width + x];
	}
	,set: function(x,y,obj) {
		return this.list[y * this.width + x] = obj;
	}
	,__class__: zpp_nape.util.ZNPArray2_ZPP_MarchPair
};
zpp_nape.util.ZPP_Debug = function(width,height) {
	this.tmpab = null;
	this.iport = null;
	this.viewport = null;
	this.height = 0;
	this.width = 0;
	this.xdet = 0.0;
	this.xnull = false;
	this.xform = null;
	this.bg_col = 0;
	this.bg_b = 0.0;
	this.bg_g = 0.0;
	this.bg_r = 0.0;
	this.d_shape = null;
	this.isbmp = false;
	this.outer = null;
	this.xnull = true;
	this.xdet = 1.0;
	this.width = width;
	this.height = height;
	this.viewport = zpp_nape.geom.ZPP_AABB.get(0,0,width,height);
	this.iport = zpp_nape.geom.ZPP_AABB.get(0,0,width,height);
	this.tmpab = new zpp_nape.geom.ZPP_AABB();
};
$hxClasses["zpp_nape.util.ZPP_Debug"] = zpp_nape.util.ZPP_Debug;
zpp_nape.util.ZPP_Debug.__name__ = ["zpp_nape","util","ZPP_Debug"];
zpp_nape.util.ZPP_Debug.prototype = {
	xform_invalidate: function() {
		this.xdet = zpp_nape.util.ZPP_Math.sqrt((function($this) {
			var $r;
			var x = $this.xform.outer.get_determinant();
			$r = x < 0?-x:x;
			return $r;
		}(this)));
		this.xnull = this.xform.a == 1.0 && this.xform.b == 0.0 && this.xform.c == 0.0 && this.xform.d == 1.0 && this.xform.tx == 0.0 && this.xform.ty == 0.0;
		var qmat = this.xform.outer.inverse();
		var q = nape.geom.Vec2.get(null,null,null);
		var v = qmat.transform(q);
		v.zpp_inner.validate();
		this.iport.minx = v.zpp_inner.x;
		v.zpp_inner.validate();
		this.iport.miny = v.zpp_inner.y;
		this.iport.maxx = this.iport.minx;
		this.iport.maxy = this.iport.miny;
		v.dispose();
		q.set_x(this.width);
		v = qmat.transform(q);
		this.iport.setExpandPoint((function($this) {
			var $r;
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		v.dispose();
		q.set_y(this.height);
		v = qmat.transform(q);
		this.iport.setExpandPoint((function($this) {
			var $r;
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		v.dispose();
		if((function($this) {
			var $r;
			q.zpp_inner.validate();
			$r = q.zpp_inner.x;
			return $r;
		}(this)) != 0) {
			q.zpp_inner.x = 0;
			q.zpp_inner.invalidate();
		}
		q.zpp_inner.validate();
		q.zpp_inner.x;
		v = qmat.transform(q);
		this.iport.setExpandPoint((function($this) {
			var $r;
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		v.dispose();
		q.dispose();
	}
	,setform: function() {
		this.xform = new nape.geom.Mat23().zpp_inner;
		this.xform._invalidate = $bind(this,this.xform_invalidate);
	}
	,cull: function(aabb) {
		if(this.xnull) return aabb.intersect(this.viewport); else {
			var qx = 0.0;
			var qy = 0.0;
			var vx = 0.0;
			var vy = 0.0;
			vx = aabb.minx;
			vy = aabb.miny;
			this.tmpab.minx = this.xform.a * vx + this.xform.b * vy + this.xform.tx;
			this.tmpab.miny = this.xform.c * vx + this.xform.d * vy + this.xform.ty;
			this.tmpab.maxx = this.tmpab.minx;
			this.tmpab.maxy = this.tmpab.miny;
			vx = aabb.maxx;
			qx = this.xform.a * vx + this.xform.b * vy + this.xform.tx;
			qy = this.xform.c * vx + this.xform.d * vy + this.xform.ty;
			this.tmpab.setExpandPoint(qx,qy);
			vy = aabb.maxy;
			qx = this.xform.a * vx + this.xform.b * vy + this.xform.tx;
			qy = this.xform.c * vx + this.xform.d * vy + this.xform.ty;
			this.tmpab.setExpandPoint(qx,qy);
			vx = aabb.minx;
			qx = this.xform.a * vx + this.xform.b * vy + this.xform.tx;
			qy = this.xform.c * vx + this.xform.d * vy + this.xform.ty;
			this.tmpab.setExpandPoint(qx,qy);
			return this.tmpab.intersect(this.viewport);
		}
	}
	,sup_setbg: function(bgcol) {
		this.bg_r = bgcol >> 16 & 255;
		this.bg_g = bgcol >> 8 & 255;
		this.bg_b = bgcol & 255;
		this.bg_col = bgcol;
	}
	,__class__: zpp_nape.util.ZPP_Debug
};
zpp_nape.util.ZPP_ShapeDebug = function(width,height) {
	this.bodyList = null;
	this.shapeList = null;
	this.compoundstack = null;
	this.graphics = null;
	this.shape = null;
	this.outer_zn = null;
	zpp_nape.util.ZPP_Debug.call(this,width,height);
	this.shape = new openfl.display.Shape();
	this.shape.set_scrollRect(new openfl.geom.Rectangle(0,0,width,height));
	this.graphics = this.shape.get_graphics();
	this.isbmp = false;
	this.d_shape = this;
};
$hxClasses["zpp_nape.util.ZPP_ShapeDebug"] = zpp_nape.util.ZPP_ShapeDebug;
zpp_nape.util.ZPP_ShapeDebug.__name__ = ["zpp_nape","util","ZPP_ShapeDebug"];
zpp_nape.util.ZPP_ShapeDebug.__super__ = zpp_nape.util.ZPP_Debug;
zpp_nape.util.ZPP_ShapeDebug.prototype = $extend(zpp_nape.util.ZPP_Debug.prototype,{
	setbg: function(bgColor) {
		this.sup_setbg(bgColor);
	}
	,draw_compound: function(compound,xform,xdet,xnull) {
		var cx_ite = compound.compounds.head;
		while(cx_ite != null) {
			var c = cx_ite.elt;
			this.draw_compound(c,xform,xdet,xnull);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = compound.bodies.head;
		while(cx_ite1 != null) {
			var b = cx_ite1.elt;
			if(b.outer.debugDraw) this.draw_body(b,xform,xdet,xnull);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = compound.constraints.head;
		while(cx_ite2 != null) {
			var c1 = cx_ite2.elt;
			if(c1.active && c1.outer.debugDraw) c1.draw(this.outer);
			cx_ite2 = cx_ite2.next;
		}
	}
	,draw_space: function(space,xform,xdet,xnull) {
		if(this.outer.cullingEnabled) {
			if(this.outer.drawBodies) {
				if(this.outer.drawBodyDetail) {
					var bods = this.bodyList = space.bphase.bodiesInAABB(this.iport,false,false,null,this.bodyList);
					while(!(bods.zpp_inner.inner.head == null)) {
						var b = bods.shift();
						if(b.debugDraw) this.draw_body(b.zpp_inner,xform,xdet,xnull);
					}
				} else {
					var shapes = this.shapeList = space.bphase.shapesInAABB(this.iport,false,false,null,this.shapeList);
					while(!(shapes.zpp_inner.inner.head == null)) {
						var s = shapes.shift();
						if((s.zpp_inner.body != null?s.zpp_inner.body.outer:null).debugDraw) this.draw_shape(s.zpp_inner,xform,xdet,xnull);
					}
				}
			}
		} else if(this.outer.drawBodies) {
			if(this.compoundstack == null) this.compoundstack = new zpp_nape.util.ZNPList_ZPP_Compound();
			var cx_ite = space.bodies.head;
			while(cx_ite != null) {
				var b1 = cx_ite.elt;
				if(b1.outer.debugDraw) this.draw_body(b1,xform,xdet,xnull);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = space.compounds.head;
			while(cx_ite1 != null) {
				var c = cx_ite1.elt;
				this.compoundstack.add(c);
				cx_ite1 = cx_ite1.next;
			}
			while(!(this.compoundstack.head == null)) {
				var x = this.compoundstack.pop_unsafe();
				var cx_ite2 = x.bodies.head;
				while(cx_ite2 != null) {
					var b2 = cx_ite2.elt;
					if(b2.outer.debugDraw) this.draw_body(b2,xform,xdet,xnull);
					cx_ite2 = cx_ite2.next;
				}
				var cx_ite3 = x.compounds.head;
				while(cx_ite3 != null) {
					var c1 = cx_ite3.elt;
					this.compoundstack.add(c1);
					cx_ite3 = cx_ite3.next;
				}
			}
		}
		if(this.outer.drawCollisionArbiters || this.outer.drawFluidArbiters || this.outer.drawSensorArbiters) {
			var _g = space.outer.get_arbiters().iterator();
			while(_g.hasNext()) {
				var arb;
				_g.zpp_critical = false;
				arb = _g.zpp_inner.at(_g.zpp_i++);
				this.draw_arbiter(arb.zpp_inner,xform,xdet,xnull);
			}
		}
		if(this.outer.drawConstraints) {
			if(this.compoundstack == null) this.compoundstack = new zpp_nape.util.ZNPList_ZPP_Compound();
			var cx_ite4 = space.constraints.head;
			while(cx_ite4 != null) {
				var c2 = cx_ite4.elt;
				if(c2.active && c2.outer.debugDraw) c2.draw(this.outer);
				cx_ite4 = cx_ite4.next;
			}
			var cx_ite5 = space.compounds.head;
			while(cx_ite5 != null) {
				var c3 = cx_ite5.elt;
				this.compoundstack.add(c3);
				cx_ite5 = cx_ite5.next;
			}
			while(!(this.compoundstack.head == null)) {
				var x1 = this.compoundstack.pop_unsafe();
				var cx_ite6 = x1.constraints.head;
				while(cx_ite6 != null) {
					var c4 = cx_ite6.elt;
					if(c4.active && c4.outer.debugDraw) c4.draw(this.outer);
					cx_ite6 = cx_ite6.next;
				}
				var cx_ite7 = x1.compounds.head;
				while(cx_ite7 != null) {
					var c5 = cx_ite7.elt;
					this.compoundstack.add(c5);
					cx_ite7 = cx_ite7.next;
				}
			}
		}
	}
	,draw_body: function(body,xform,xdet,xnull) {
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			this.draw_shape(s,xform,xdet,xnull);
			cx_ite = cx_ite.next;
		}
		if(this.outer.drawBodyDetail) {
			var col;
			var idc;
			if(this.outer.colour == null) idc = Std["int"](16777215 * Math.exp(-(body.id % 500) / 1500)); else idc = this.outer.colour(body.id);
			var _r = ((idc & 16711680) >> 16) * 0.7;
			var _g = ((idc & 65280) >> 8) * 0.7;
			var _b = (idc & 255) * 0.7;
			if(body.space != null && body.outer.zpp_inner.component.sleeping) {
				_r = 0.4 * _r + 0.6 * this.bg_r;
				_g = 0.4 * _g + 0.6 * this.bg_g;
				_b = 0.4 * _b + 0.6 * this.bg_b;
			}
			col = -16777216 | (_r | 0) << 16 | (_g | 0) << 8 | (_b | 0);
			this.graphics.lineStyle(this.outer_zn.thickness,(function($this) {
				var $r;
				var col1 = col;
				var ncol = 16711680;
				var f = 0.8;
				var _r1 = (col1 >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f) | 0;
				var _g1 = (col1 >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f) | 0;
				var _b1 = (col1 & 255) * f + (ncol & 255) * (1 - f) | 0;
				$r = -16777216 | _r1 << 16 | _g1 << 8 | _b1;
				return $r;
			}(this)),1);
			var px = 0.0;
			var py = 0.0;
			var qx = 0.0;
			var qy = 0.0;
			if(!(body.shapes.head == null)) {
				body.validate_worldCOM();
				if(xnull) {
					px = body.worldCOMx;
					py = body.worldCOMy;
				} else {
					px = xform.a * body.worldCOMx + xform.b * body.worldCOMy + xform.tx;
					py = xform.c * body.worldCOMx + xform.d * body.worldCOMy + xform.ty;
				}
				this.graphics.drawCircle(px,py,1);
				body.validate_aabb();
				if(xnull) this.graphics.drawRect(body.aabb.minx,body.aabb.miny,body.aabb.width(),body.aabb.height()); else {
					var ox = 0.0;
					var oy = 0.0;
					ox = xform.a * body.aabb.minx + xform.b * body.aabb.miny + xform.tx;
					oy = xform.c * body.aabb.minx + xform.d * body.aabb.miny + xform.ty;
					var wx = body.aabb.width();
					var wy = 0;
					var t = xform.a * wx + xform.b * wy;
					wy = xform.c * wx + xform.d * wy;
					wx = t;
					var hx = 0;
					var hy = body.aabb.height();
					var t1 = xform.a * hx + xform.b * hy;
					hy = xform.c * hx + xform.d * hy;
					hx = t1;
					this.graphics.moveTo(ox,oy);
					this.graphics.lineTo(ox + wx,oy + wy);
					this.graphics.lineTo(ox + wx + hx,oy + wy + hy);
					this.graphics.lineTo(ox + hx,oy + hy);
					this.graphics.lineTo(ox,oy);
				}
			}
			if(xnull) {
				qx = body.pre_posx;
				qy = body.pre_posy;
			} else {
				qx = xform.a * body.pre_posx + xform.b * body.pre_posy + xform.tx;
				qy = xform.c * body.pre_posx + xform.d * body.pre_posy + xform.ty;
			}
			if(xnull) {
				px = body.posx;
				py = body.posy;
			} else {
				px = xform.a * body.posx + xform.b * body.posy + xform.tx;
				py = xform.c * body.posx + xform.d * body.posy + xform.ty;
			}
			this.graphics.moveTo(qx,qy);
			this.graphics.lineTo(px,py);
			this.graphics.drawCircle(px,py,1);
		}
	}
	,draw_shape: function(shape,xform,xdet,xnull) {
		var col;
		var idc;
		if(this.outer.colour == null) idc = Std["int"](16777215 * Math.exp(-(shape.id % 500) / 1500)); else idc = this.outer.colour(shape.id);
		var _r = ((idc & 16711680) >> 16) * 0.7;
		var _g = ((idc & 65280) >> 8) * 0.7;
		var _b = (idc & 255) * 0.7;
		col = -16777216 | (_r | 0) << 16 | (_g | 0) << 8 | (_b | 0);
		var body = shape.body;
		if(body != null) {
			var bcol;
			var idc1;
			if(this.outer.colour == null) idc1 = Std["int"](16777215 * Math.exp(-(body.id % 500) / 1500)); else idc1 = this.outer.colour(body.id);
			var _r1 = ((idc1 & 16711680) >> 16) * 0.7;
			var _g1 = ((idc1 & 65280) >> 8) * 0.7;
			var _b1 = (idc1 & 255) * 0.7;
			if(body.space != null && body.outer.zpp_inner.component.sleeping) {
				_r1 = 0.4 * _r1 + 0.6 * this.bg_r;
				_g1 = 0.4 * _g1 + 0.6 * this.bg_g;
				_b1 = 0.4 * _b1 + 0.6 * this.bg_b;
			}
			bcol = -16777216 | (_r1 | 0) << 16 | (_g1 | 0) << 8 | (_b1 | 0);
			var col1 = col;
			var ncol = bcol;
			var f = 0.2;
			var _r2 = (col1 >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f) | 0;
			var _g2 = (col1 >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f) | 0;
			var _b2 = (col1 & 255) * f + (ncol & 255) * (1 - f) | 0;
			col = -16777216 | _r2 << 16 | _g2 << 8 | _b2;
			this.graphics.lineStyle(this.outer_zn.thickness,col,1.0);
			if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
				var circ = shape.circle;
				if(circ.zip_worldCOM) {
					if(circ.body != null) {
						circ.zip_worldCOM = false;
						if(circ.zip_localCOM) {
							circ.zip_localCOM = false;
							if(circ.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) circ.polygon.__validate_localCOM();
							if(circ.wrap_localCOM != null) {
								circ.wrap_localCOM.zpp_inner.x = circ.localCOMx;
								circ.wrap_localCOM.zpp_inner.y = circ.localCOMy;
							}
						}
						circ.body.validate_axis();
						circ.worldCOMx = circ.body.posx + (circ.body.axisy * circ.localCOMx - circ.body.axisx * circ.localCOMy);
						circ.worldCOMy = circ.body.posy + (circ.localCOMx * circ.body.axisx + circ.localCOMy * circ.body.axisy);
					}
				}
				var vx = circ.worldCOMx;
				var vy = circ.worldCOMy;
				if(!xnull) {
					var t = xform.a * vx + xform.b * vy + xform.tx;
					vy = xform.c * vx + xform.d * vy + xform.ty;
					vx = t;
				}
				this.graphics.drawCircle(vx,vy,circ.radius * xdet);
				if(this.outer.drawShapeAngleIndicators) {
					var v0x = circ.worldCOMx + 0.3 * circ.radius * body.axisy;
					var v0y = circ.worldCOMy + 0.3 * circ.radius * body.axisx;
					var v1x = circ.worldCOMx + circ.radius * body.axisy;
					var v1y = circ.worldCOMy + circ.radius * body.axisx;
					if(!xnull) {
						var t1 = xform.a * v0x + xform.b * v0y + xform.tx;
						v0y = xform.c * v0x + xform.d * v0y + xform.ty;
						v0x = t1;
					}
					if(!xnull) {
						var t2 = xform.a * v1x + xform.b * v1y + xform.tx;
						v1y = xform.c * v1x + xform.d * v1y + xform.ty;
						v1x = t2;
					}
					this.graphics.moveTo(v0x,v0y);
					this.graphics.lineTo(v1x,v1y);
				}
			} else {
				var poly = shape.polygon;
				poly.validate_gverts();
				var u = poly.gverts.next;
				var vx1 = u.x;
				var vy1 = u.y;
				if(!xnull) {
					var t3 = xform.a * vx1 + xform.b * vy1 + xform.tx;
					vy1 = xform.c * vx1 + xform.d * vy1 + xform.ty;
					vx1 = t3;
				}
				this.graphics.moveTo(vx1,vy1);
				var vox = vx1;
				var voy = vy1;
				var cx_ite = poly.gverts.next.next;
				while(cx_ite != null) {
					var u1 = cx_ite;
					vx1 = u1.x;
					vy1 = u1.y;
					if(!xnull) {
						var t4 = xform.a * vx1 + xform.b * vy1 + xform.tx;
						vy1 = xform.c * vx1 + xform.d * vy1 + xform.ty;
						vx1 = t4;
					}
					this.graphics.lineTo(vx1,vy1);
					cx_ite = cx_ite.next;
				}
				this.graphics.lineTo(vox,voy);
				if(this.outer.drawShapeAngleIndicators) {
					if(poly.zip_worldCOM) {
						if(poly.body != null) {
							poly.zip_worldCOM = false;
							if(poly.zip_localCOM) {
								poly.zip_localCOM = false;
								if(poly.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) poly.polygon.__validate_localCOM();
								if(poly.wrap_localCOM != null) {
									poly.wrap_localCOM.zpp_inner.x = poly.localCOMx;
									poly.wrap_localCOM.zpp_inner.y = poly.localCOMy;
								}
							}
							poly.body.validate_axis();
							poly.worldCOMx = poly.body.posx + (poly.body.axisy * poly.localCOMx - poly.body.axisx * poly.localCOMy);
							poly.worldCOMy = poly.body.posy + (poly.localCOMx * poly.body.axisx + poly.localCOMy * poly.body.axisy);
						}
					}
					if(xnull) {
						vx1 = poly.worldCOMx;
						vy1 = poly.worldCOMy;
					} else {
						vx1 = xform.a * poly.worldCOMx + xform.b * poly.worldCOMy + xform.tx;
						vy1 = xform.c * poly.worldCOMx + xform.d * poly.worldCOMy + xform.ty;
					}
					this.graphics.moveTo(vx1,vy1);
					this.graphics.lineTo(vox,voy);
				}
			}
			if(this.outer.drawShapeDetail) {
				if(shape.zip_worldCOM) {
					if(shape.body != null) {
						shape.zip_worldCOM = false;
						if(shape.zip_localCOM) {
							shape.zip_localCOM = false;
							if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) shape.polygon.__validate_localCOM();
							if(shape.wrap_localCOM != null) {
								shape.wrap_localCOM.zpp_inner.x = shape.localCOMx;
								shape.wrap_localCOM.zpp_inner.y = shape.localCOMy;
							}
						}
						shape.body.validate_axis();
						shape.worldCOMx = shape.body.posx + (shape.body.axisy * shape.localCOMx - shape.body.axisx * shape.localCOMy);
						shape.worldCOMy = shape.body.posy + (shape.localCOMx * shape.body.axisx + shape.localCOMy * shape.body.axisy);
					}
				}
				this.graphics.lineStyle(this.outer_zn.thickness,(function($this) {
					var $r;
					var col2 = col;
					var ncol1 = 16711680;
					var f1 = 0.8;
					var _r3 = (col2 >> 16 & 255) * f1 + (ncol1 >> 16 & 255) * (1 - f1) | 0;
					var _g3 = (col2 >> 8 & 255) * f1 + (ncol1 >> 8 & 255) * (1 - f1) | 0;
					var _b3 = (col2 & 255) * f1 + (ncol1 & 255) * (1 - f1) | 0;
					$r = -16777216 | _r3 << 16 | _g3 << 8 | _b3;
					return $r;
				}(this)),1);
				var vx2 = 0.0;
				var vy2 = 0.0;
				if(xnull) {
					vx2 = shape.worldCOMx;
					vy2 = shape.worldCOMy;
				} else {
					vx2 = xform.a * shape.worldCOMx + xform.b * shape.worldCOMy + xform.tx;
					vy2 = xform.c * shape.worldCOMx + xform.d * shape.worldCOMy + xform.ty;
				}
				this.graphics.drawCircle(vx2,vy2,1);
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
				if(xnull) this.graphics.drawRect(shape.aabb.minx,shape.aabb.miny,shape.aabb.width(),shape.aabb.height()); else {
					var ox = 0.0;
					var oy = 0.0;
					ox = xform.a * shape.aabb.minx + xform.b * shape.aabb.miny + xform.tx;
					oy = xform.c * shape.aabb.minx + xform.d * shape.aabb.miny + xform.ty;
					var wx = shape.aabb.width();
					var wy = 0;
					var t5 = xform.a * wx + xform.b * wy;
					wy = xform.c * wx + xform.d * wy;
					wx = t5;
					var hx = 0;
					var hy = shape.aabb.height();
					var t6 = xform.a * hx + xform.b * hy;
					hy = xform.c * hx + xform.d * hy;
					hx = t6;
					this.graphics.moveTo(ox,oy);
					this.graphics.lineTo(ox + wx,oy + wy);
					this.graphics.lineTo(ox + wx + hx,oy + wy + hy);
					this.graphics.lineTo(ox + hx,oy + hy);
					this.graphics.lineTo(ox,oy);
				}
			}
		}
	}
	,draw_arbiter: function(arb,xform,xdet,xnull) {
		var vx = 0.0;
		var vy = 0.0;
		if(arb.outer.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.SENSOR) {
			if(this.outer.drawSensorArbiters) {
				var sarb = arb.outer;
				this.graphics.lineStyle(this.outer_zn.thickness,(function($this) {
					var $r;
					var col = 65280;
					var ncol = ~$this.bg_col;
					var f = 0.7;
					var _r = (col >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f) | 0;
					var _g = (col >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f) | 0;
					var _b = (col & 255) * f + (ncol & 255) * (1 - f) | 0;
					$r = -16777216 | _r << 16 | _g << 8 | _b;
					return $r;
				}(this)),1);
				if(xnull) {
					vx = (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer).get_worldCOM().get_x();
					vy = (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer).get_worldCOM().get_y();
				} else {
					vx = xform.a * (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer).get_worldCOM().get_x() + xform.b * (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer).get_worldCOM().get_y() + xform.tx;
					vy = xform.c * (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer).get_worldCOM().get_x() + xform.d * (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer).get_worldCOM().get_y() + xform.ty;
				}
				this.graphics.moveTo(vx,vy);
				if(xnull) {
					vx = (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer).get_worldCOM().get_x();
					vy = (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer).get_worldCOM().get_y();
				} else {
					vx = xform.a * (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer).get_worldCOM().get_x() + xform.b * (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer).get_worldCOM().get_y() + xform.tx;
					vy = xform.c * (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer).get_worldCOM().get_x() + xform.d * (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer).get_worldCOM().get_y() + xform.ty;
				}
				this.graphics.lineTo(vx,vy);
			}
		} else if(arb.outer.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) {
			if(this.outer.drawFluidArbiters) {
				var farb = arb.outer.get_fluidArbiter();
				this.graphics.lineStyle(this.outer_zn.thickness,(function($this) {
					var $r;
					var col1 = 255;
					var ncol1 = ~$this.bg_col;
					var f1 = 0.7;
					var _r1 = (col1 >> 16 & 255) * f1 + (ncol1 >> 16 & 255) * (1 - f1) | 0;
					var _g1 = (col1 >> 8 & 255) * f1 + (ncol1 >> 8 & 255) * (1 - f1) | 0;
					var _b1 = (col1 & 255) * f1 + (ncol1 & 255) * (1 - f1) | 0;
					$r = -16777216 | _r1 << 16 | _g1 << 8 | _b1;
					return $r;
				}(this)),1);
				if(xnull) {
					vx = ((function($this) {
						var $r;
						if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
						$r = farb.zpp_inner.fluidarb.wrap_position;
						return $r;
					}(this))).get_x();
					vy = ((function($this) {
						var $r;
						if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
						$r = farb.zpp_inner.fluidarb.wrap_position;
						return $r;
					}(this))).get_y();
				} else {
					vx = xform.a * ((function($this) {
						var $r;
						if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
						$r = farb.zpp_inner.fluidarb.wrap_position;
						return $r;
					}(this))).get_x() + xform.b * ((function($this) {
						var $r;
						if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
						$r = farb.zpp_inner.fluidarb.wrap_position;
						return $r;
					}(this))).get_y() + xform.tx;
					vy = xform.c * ((function($this) {
						var $r;
						if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
						$r = farb.zpp_inner.fluidarb.wrap_position;
						return $r;
					}(this))).get_x() + xform.d * ((function($this) {
						var $r;
						if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
						$r = farb.zpp_inner.fluidarb.wrap_position;
						return $r;
					}(this))).get_y() + xform.ty;
				}
				this.graphics.drawCircle(vx,vy,0.75);
			}
		} else if(this.outer.drawCollisionArbiters) {
			var carb = arb.outer.get_collisionArbiter();
			if(!((function($this) {
				var $r;
				if(carb.zpp_inner.colarb.wrap_contacts == null) carb.zpp_inner.colarb.setupcontacts();
				$r = carb.zpp_inner.colarb.wrap_contacts;
				return $r;
			}(this))).empty()) {
				var px = 0.0;
				var py = 0.0;
				if(((function($this) {
					var $r;
					if(carb.zpp_inner.colarb.wrap_contacts == null) carb.zpp_inner.colarb.setupcontacts();
					$r = carb.zpp_inner.colarb.wrap_contacts;
					return $r;
				}(this))).get_length() == 2) {
					var c1 = ((function($this) {
						var $r;
						if(carb.zpp_inner.colarb.wrap_contacts == null) carb.zpp_inner.colarb.setupcontacts();
						$r = carb.zpp_inner.colarb.wrap_contacts;
						return $r;
					}(this))).at(0).get_position();
					var c2 = ((function($this) {
						var $r;
						if(carb.zpp_inner.colarb.wrap_contacts == null) carb.zpp_inner.colarb.setupcontacts();
						$r = carb.zpp_inner.colarb.wrap_contacts;
						return $r;
					}(this))).at(1).get_position();
					var n;
					if(carb.zpp_inner.colarb.wrap_normal == null) carb.zpp_inner.colarb.getnormal();
					n = carb.zpp_inner.colarb.wrap_normal;
					var x = 0.661437828;
					var y = 0.75;
					if((function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * (function($this) {
						var $r;
						c1.zpp_inner.validate();
						$r = c1.zpp_inner.x;
						return $r;
					}(this)) - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * (function($this) {
						var $r;
						c1.zpp_inner.validate();
						$r = c1.zpp_inner.y;
						return $r;
					}(this)) < (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * (function($this) {
						var $r;
						c2.zpp_inner.validate();
						$r = c2.zpp_inner.x;
						return $r;
					}(this)) - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * (function($this) {
						var $r;
						c2.zpp_inner.validate();
						$r = c2.zpp_inner.y;
						return $r;
					}(this))) {
						x = -x;
						y = -y;
					}
					this.graphics.lineStyle(this.outer_zn.thickness,(function($this) {
						var $r;
						var col2 = 255;
						var ncol2 = ~$this.bg_col;
						var f2 = 0.7;
						var _r2 = (col2 >> 16 & 255) * f2 + (ncol2 >> 16 & 255) * (1 - f2) | 0;
						var _g2 = (col2 >> 8 & 255) * f2 + (ncol2 >> 8 & 255) * (1 - f2) | 0;
						var _b2 = (col2 & 255) * f2 + (ncol2 & 255) * (1 - f2) | 0;
						$r = -16777216 | _r2 << 16 | _g2 << 8 | _b2;
						return $r;
					}(this)),1);
					vx = (function($this) {
						var $r;
						c1.zpp_inner.validate();
						$r = c1.zpp_inner.x;
						return $r;
					}(this)) + (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * y - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * x;
					vy = (function($this) {
						var $r;
						c1.zpp_inner.validate();
						$r = c1.zpp_inner.y;
						return $r;
					}(this)) + (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * y + (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * x;
					if(!xnull) {
						var t = xform.a * vx + xform.b * vy + xform.tx;
						vy = xform.c * vx + xform.d * vy + xform.ty;
						vx = t;
					}
					this.graphics.moveTo(vx,vy);
					vx = (function($this) {
						var $r;
						c2.zpp_inner.validate();
						$r = c2.zpp_inner.x;
						return $r;
					}(this)) + (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * y + (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * x;
					vy = (function($this) {
						var $r;
						c2.zpp_inner.validate();
						$r = c2.zpp_inner.y;
						return $r;
					}(this)) + (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * y - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * x;
					if(!xnull) {
						var t1 = xform.a * vx + xform.b * vy + xform.tx;
						vy = xform.c * vx + xform.d * vy + xform.ty;
						vx = t1;
					}
					this.graphics.lineTo(vx,vy);
					this.graphics.lineStyle(this.outer_zn.thickness,(function($this) {
						var $r;
						var col3 = 16711680;
						var ncol3 = ~$this.bg_col;
						var f3 = 0.7;
						var _r3 = (col3 >> 16 & 255) * f3 + (ncol3 >> 16 & 255) * (1 - f3) | 0;
						var _g3 = (col3 >> 8 & 255) * f3 + (ncol3 >> 8 & 255) * (1 - f3) | 0;
						var _b3 = (col3 & 255) * f3 + (ncol3 & 255) * (1 - f3) | 0;
						$r = -16777216 | _r3 << 16 | _g3 << 8 | _b3;
						return $r;
					}(this)),1);
					vx = (function($this) {
						var $r;
						c1.zpp_inner.validate();
						$r = c1.zpp_inner.x;
						return $r;
					}(this)) - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * y - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * x;
					vy = (function($this) {
						var $r;
						c1.zpp_inner.validate();
						$r = c1.zpp_inner.y;
						return $r;
					}(this)) - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * y + (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * x;
					if(!xnull) {
						var t2 = xform.a * vx + xform.b * vy + xform.tx;
						vy = xform.c * vx + xform.d * vy + xform.ty;
						vx = t2;
					}
					this.graphics.moveTo(vx,vy);
					vx = (function($this) {
						var $r;
						c2.zpp_inner.validate();
						$r = c2.zpp_inner.x;
						return $r;
					}(this)) - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * y + (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * x;
					vy = (function($this) {
						var $r;
						c2.zpp_inner.validate();
						$r = c2.zpp_inner.y;
						return $r;
					}(this)) - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * y - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * x;
					if(!xnull) {
						var t3 = xform.a * vx + xform.b * vy + xform.tx;
						vy = xform.c * vx + xform.d * vy + xform.ty;
						vx = t3;
					}
					this.graphics.lineTo(vx,vy);
					px = 0.5 * ((function($this) {
						var $r;
						c1.zpp_inner.validate();
						$r = c1.zpp_inner.x;
						return $r;
					}(this)) + (function($this) {
						var $r;
						c2.zpp_inner.validate();
						$r = c2.zpp_inner.x;
						return $r;
					}(this)));
					py = 0.5 * ((function($this) {
						var $r;
						c1.zpp_inner.validate();
						$r = c1.zpp_inner.y;
						return $r;
					}(this)) + (function($this) {
						var $r;
						c2.zpp_inner.validate();
						$r = c2.zpp_inner.y;
						return $r;
					}(this)));
					if(!xnull) {
						var t4 = xform.a * px + xform.b * py + xform.tx;
						py = xform.c * px + xform.d * py + xform.ty;
						px = t4;
					}
				} else {
					px = ((function($this) {
						var $r;
						if(carb.zpp_inner.colarb.wrap_contacts == null) carb.zpp_inner.colarb.setupcontacts();
						$r = carb.zpp_inner.colarb.wrap_contacts;
						return $r;
					}(this))).at(0).get_position().get_x();
					py = ((function($this) {
						var $r;
						if(carb.zpp_inner.colarb.wrap_contacts == null) carb.zpp_inner.colarb.setupcontacts();
						$r = carb.zpp_inner.colarb.wrap_contacts;
						return $r;
					}(this))).at(0).get_position().get_y();
					if(!xnull) {
						var t5 = xform.a * px + xform.b * py + xform.tx;
						py = xform.c * px + xform.d * py + xform.ty;
						px = t5;
					}
					this.graphics.lineStyle(this.outer_zn.thickness,(function($this) {
						var $r;
						var col4 = 16711935;
						var ncol4 = ~$this.bg_col;
						var f4 = 0.7;
						var _r4 = (col4 >> 16 & 255) * f4 + (ncol4 >> 16 & 255) * (1 - f4) | 0;
						var _g4 = (col4 >> 8 & 255) * f4 + (ncol4 >> 8 & 255) * (1 - f4) | 0;
						var _b4 = (col4 & 255) * f4 + (ncol4 & 255) * (1 - f4) | 0;
						$r = -16777216 | _r4 << 16 | _g4 << 8 | _b4;
						return $r;
					}(this)),1);
					this.graphics.drawCircle(px,py,1);
				}
				this.graphics.lineStyle(this.outer_zn.thickness,(function($this) {
					var $r;
					var col5 = ~$this.bg_col;
					var ncol5 = $this.bg_col;
					var f5 = 0.7;
					var _r5 = (col5 >> 16 & 255) * f5 + (ncol5 >> 16 & 255) * (1 - f5) | 0;
					var _g5 = (col5 >> 8 & 255) * f5 + (ncol5 >> 8 & 255) * (1 - f5) | 0;
					var _b5 = (col5 & 255) * f5 + (ncol5 & 255) * (1 - f5) | 0;
					$r = -16777216 | _r5 << 16 | _g5 << 8 | _b5;
					return $r;
				}(this)),1);
				this.graphics.moveTo(px,py);
				vx = ((function($this) {
					var $r;
					if(carb.zpp_inner.colarb.wrap_normal == null) carb.zpp_inner.colarb.getnormal();
					$r = carb.zpp_inner.colarb.wrap_normal;
					return $r;
				}(this))).get_x() * 5;
				vy = ((function($this) {
					var $r;
					if(carb.zpp_inner.colarb.wrap_normal == null) carb.zpp_inner.colarb.getnormal();
					$r = carb.zpp_inner.colarb.wrap_normal;
					return $r;
				}(this))).get_y() * 5;
				if(!xnull) {
					var t6 = xform.a * vx + xform.b * vy;
					vy = xform.c * vx + xform.d * vy;
					vx = t6;
				}
				this.graphics.lineTo(px + vx,py + vy);
			}
		}
	}
	,__class__: zpp_nape.util.ZPP_ShapeDebug
});
zpp_nape.util.Hashable2_Boolfalse = function() {
	this.di = 0;
	this.id = 0;
	this.hnext = null;
	this.next = null;
	this.value = false;
};
$hxClasses["zpp_nape.util.Hashable2_Boolfalse"] = zpp_nape.util.Hashable2_Boolfalse;
zpp_nape.util.Hashable2_Boolfalse.__name__ = ["zpp_nape","util","Hashable2_Boolfalse"];
zpp_nape.util.Hashable2_Boolfalse.get = function(id,di,val) {
	var ret = zpp_nape.util.Hashable2_Boolfalse.getpersist(id,di);
	ret.value = val;
	return ret;
};
zpp_nape.util.Hashable2_Boolfalse.getpersist = function(id,di) {
	var ret;
	if(zpp_nape.util.Hashable2_Boolfalse.zpp_pool == null) ret = new zpp_nape.util.Hashable2_Boolfalse(); else {
		ret = zpp_nape.util.Hashable2_Boolfalse.zpp_pool;
		zpp_nape.util.Hashable2_Boolfalse.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.id = id;
	ret.di = di;
	return ret;
};
zpp_nape.util.Hashable2_Boolfalse.ordered_get = function(id,di,val) {
	if(id <= di) return zpp_nape.util.Hashable2_Boolfalse.get(id,di,val); else return zpp_nape.util.Hashable2_Boolfalse.get(di,id,val);
};
zpp_nape.util.Hashable2_Boolfalse.ordered_get_persist = function(id,di) {
	if(id <= di) return zpp_nape.util.Hashable2_Boolfalse.getpersist(id,di); else return zpp_nape.util.Hashable2_Boolfalse.getpersist(di,id);
};
zpp_nape.util.Hashable2_Boolfalse.prototype = {
	free: function() {
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.Hashable2_Boolfalse
};
zpp_nape.util.FastHash2_Hashable2_Boolfalse = function() {
	this.cnt = 0;
	this.table = null;
	this.cnt = 0;
	this.table = new Array();
	var _g1 = 0;
	var _g = 1048576;
	while(_g1 < _g) {
		var i = _g1++;
		this.table.push(null);
	}
};
$hxClasses["zpp_nape.util.FastHash2_Hashable2_Boolfalse"] = zpp_nape.util.FastHash2_Hashable2_Boolfalse;
zpp_nape.util.FastHash2_Hashable2_Boolfalse.__name__ = ["zpp_nape","util","FastHash2_Hashable2_Boolfalse"];
zpp_nape.util.FastHash2_Hashable2_Boolfalse.prototype = {
	empty: function() {
		return this.cnt == 0;
	}
	,clear: function() {
		var _g1 = 0;
		var _g = this.table.length;
		while(_g1 < _g) {
			var i = _g1++;
			var n = this.table[i];
			if(n == null) continue;
			while(n != null) {
				var t = n.hnext;
				n.hnext = null;
				n;
				n = t;
			}
			this.table[i] = null;
		}
	}
	,get: function(id,di) {
		var n = this.table[id * 106039 + di & 1048575];
		if(n == null) return null; else if(n.id == id && n.di == di) return n; else {
			do n = n.hnext; while(n != null && (n.id != id || n.di != di));
			return n;
		}
	}
	,ordered_get: function(id,di) {
		if(id > di) {
			var t = id;
			id = di;
			di = t;
		}
		return this.get(id,di);
	}
	,has: function(id,di) {
		var n = this.table[id * 106039 + di & 1048575];
		if(n == null) return false; else if(n.id == id && n.di == di) return true; else {
			do n = n.hnext; while(n != null && (n.id != id || n.di != di));
			return n != null;
		}
	}
	,maybeAdd: function(arb) {
		var h = arb.id * 106039 + arb.di & 1048575;
		var n = this.table[h];
		var cont = true;
		if(n == null) {
			this.table[h] = arb;
			arb.hnext = null;
		} else if(cont) {
			arb.hnext = n.hnext;
			n.hnext = arb;
		}
		if(cont) this.cnt++;
	}
	,add: function(arb) {
		var h = arb.id * 106039 + arb.di & 1048575;
		var n = this.table[h];
		if(n == null) {
			this.table[h] = arb;
			arb.hnext = null;
		} else {
			arb.hnext = n.hnext;
			n.hnext = arb;
		}
		this.cnt++;
	}
	,remove: function(arb) {
		var h = arb.id * 106039 + arb.di & 1048575;
		var n = this.table[h];
		if(n == arb) this.table[h] = n.hnext; else if(n != null) {
			var pre;
			do {
				pre = n;
				n = n.hnext;
			} while(n != null && n != arb);
			pre.hnext = n.hnext;
		}
		arb.hnext = null;
		this.cnt--;
	}
	,hash: function(id,di) {
		return id * 106039 + di & 1048575;
	}
	,__class__: zpp_nape.util.FastHash2_Hashable2_Boolfalse
};
zpp_nape.util.ZNPList_ZPP_CallbackSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CallbackSet"] = zpp_nape.util.ZNPList_ZPP_CallbackSet;
zpp_nape.util.ZNPList_ZPP_CallbackSet.__name__ = ["zpp_nape","util","ZNPList_ZPP_CallbackSet"];
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CallbackSet(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CallbackSet(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CallbackSet
};
zpp_nape.util.ZNPList_ZPP_Shape = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Shape"] = zpp_nape.util.ZNPList_ZPP_Shape;
zpp_nape.util.ZNPList_ZPP_Shape.__name__ = ["zpp_nape","util","ZNPList_ZPP_Shape"];
zpp_nape.util.ZNPList_ZPP_Shape.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Shape(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Shape(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Shape
};
zpp_nape.util.ZNPList_ZPP_Body = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Body"] = zpp_nape.util.ZNPList_ZPP_Body;
zpp_nape.util.ZNPList_ZPP_Body.__name__ = ["zpp_nape","util","ZNPList_ZPP_Body"];
zpp_nape.util.ZNPList_ZPP_Body.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Body(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Body(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Body
};
zpp_nape.util.ZNPList_ZPP_Compound = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Compound"] = zpp_nape.util.ZNPList_ZPP_Compound;
zpp_nape.util.ZNPList_ZPP_Compound.__name__ = ["zpp_nape","util","ZNPList_ZPP_Compound"];
zpp_nape.util.ZNPList_ZPP_Compound.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Compound(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Compound(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Compound
};
zpp_nape.util.ZNPList_ZPP_Arbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Arbiter"] = zpp_nape.util.ZNPList_ZPP_Arbiter;
zpp_nape.util.ZNPList_ZPP_Arbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_Arbiter"];
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Arbiter(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Arbiter(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Arbiter
};
zpp_nape.util.ZNPList_ZPP_CbSetPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CbSetPair"] = zpp_nape.util.ZNPList_ZPP_CbSetPair;
zpp_nape.util.ZNPList_ZPP_CbSetPair.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbSetPair"];
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbSetPair(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbSetPair(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CbSetPair
};
zpp_nape.util.ZNPList_ZPP_CutInt = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CutInt"] = zpp_nape.util.ZNPList_ZPP_CutInt;
zpp_nape.util.ZNPList_ZPP_CutInt.__name__ = ["zpp_nape","util","ZNPList_ZPP_CutInt"];
zpp_nape.util.ZNPList_ZPP_CutInt.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CutInt(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CutInt(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CutInt
};
zpp_nape.util.ZNPList_ZPP_CutVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CutVert"] = zpp_nape.util.ZNPList_ZPP_CutVert;
zpp_nape.util.ZNPList_ZPP_CutVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_CutVert"];
zpp_nape.util.ZNPList_ZPP_CutVert.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CutVert(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CutVert(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CutVert
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_PartitionVertex"] = zpp_nape.util.ZNPList_ZPP_PartitionVertex;
zpp_nape.util.ZNPList_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZNPList_ZPP_PartitionVertex"];
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionVertex(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionVertex(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_PartitionVertex
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_PartitionedPoly"] = zpp_nape.util.ZNPList_ZPP_PartitionedPoly;
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.__name__ = ["zpp_nape","util","ZNPList_ZPP_PartitionedPoly"];
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionedPoly(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionedPoly(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_PartitionedPoly
};
zpp_nape.util.ZNPList_ZPP_GeomVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_GeomVert"] = zpp_nape.util.ZNPList_ZPP_GeomVert;
zpp_nape.util.ZNPList_ZPP_GeomVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_GeomVert"];
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomVert(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomVert(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_GeomVert
};
zpp_nape.util.ZNPList_ZPP_SimplifyP = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_SimplifyP"] = zpp_nape.util.ZNPList_ZPP_SimplifyP;
zpp_nape.util.ZNPList_ZPP_SimplifyP.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimplifyP"];
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimplifyP(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimplifyP(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_SimplifyP
};
zpp_nape.util.ZNPList_ZPP_SimpleVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_SimpleVert"] = zpp_nape.util.ZNPList_ZPP_SimpleVert;
zpp_nape.util.ZNPList_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimpleVert"];
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleVert(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleVert(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_SimpleVert
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_SimpleEvent"] = zpp_nape.util.ZNPList_ZPP_SimpleEvent;
zpp_nape.util.ZNPList_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimpleEvent"];
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleEvent(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleEvent(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_SimpleEvent
};
zpp_nape.util.ZNPList_ZPP_AABBPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_AABBPair"] = zpp_nape.util.ZNPList_ZPP_AABBPair;
zpp_nape.util.ZNPList_ZPP_AABBPair.__name__ = ["zpp_nape","util","ZNPList_ZPP_AABBPair"];
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBPair(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBPair(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_AABBPair
};
zpp_nape.util.ZNPList_ZPP_Edge = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Edge"] = zpp_nape.util.ZNPList_ZPP_Edge;
zpp_nape.util.ZNPList_ZPP_Edge.__name__ = ["zpp_nape","util","ZNPList_ZPP_Edge"];
zpp_nape.util.ZNPList_ZPP_Edge.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Edge(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Edge(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Edge
};
zpp_nape.util.ZNPList_ZPP_Component = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Component"] = zpp_nape.util.ZNPList_ZPP_Component;
zpp_nape.util.ZNPList_ZPP_Component.__name__ = ["zpp_nape","util","ZNPList_ZPP_Component"];
zpp_nape.util.ZNPList_ZPP_Component.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Component(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Component(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Component
};
zpp_nape.util.ZNPList_ZPP_AABBNode = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_AABBNode"] = zpp_nape.util.ZNPList_ZPP_AABBNode;
zpp_nape.util.ZNPList_ZPP_AABBNode.__name__ = ["zpp_nape","util","ZNPList_ZPP_AABBNode"];
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBNode(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBNode(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_AABBNode
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_InteractionGroup"] = zpp_nape.util.ZNPList_ZPP_InteractionGroup;
zpp_nape.util.ZNPList_ZPP_InteractionGroup.__name__ = ["zpp_nape","util","ZNPList_ZPP_InteractionGroup"];
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_InteractionGroup(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_InteractionGroup(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_InteractionGroup
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_FluidArbiter"] = zpp_nape.util.ZNPList_ZPP_FluidArbiter;
zpp_nape.util.ZNPList_ZPP_FluidArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_FluidArbiter"];
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_FluidArbiter(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_FluidArbiter(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_FluidArbiter
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_SensorArbiter"] = zpp_nape.util.ZNPList_ZPP_SensorArbiter;
zpp_nape.util.ZNPList_ZPP_SensorArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_SensorArbiter"];
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SensorArbiter(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SensorArbiter(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_SensorArbiter
};
zpp_nape.util.ZNPList_ZPP_ColArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_ColArbiter"] = zpp_nape.util.ZNPList_ZPP_ColArbiter;
zpp_nape.util.ZNPList_ZPP_ColArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_ColArbiter"];
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ColArbiter(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ColArbiter(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_ColArbiter
};
zpp_nape.util.ZNPList_ZPP_Listener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Listener"] = zpp_nape.util.ZNPList_ZPP_Listener;
zpp_nape.util.ZNPList_ZPP_Listener.__name__ = ["zpp_nape","util","ZNPList_ZPP_Listener"];
zpp_nape.util.ZNPList_ZPP_Listener.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Listener(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Listener(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Listener
};
zpp_nape.util.ZNPList_ZPP_ToiEvent = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_ToiEvent"] = zpp_nape.util.ZNPList_ZPP_ToiEvent;
zpp_nape.util.ZNPList_ZPP_ToiEvent.__name__ = ["zpp_nape","util","ZNPList_ZPP_ToiEvent"];
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ToiEvent(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ToiEvent(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_ToiEvent
};
zpp_nape.util.ZNPList_ConvexResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ConvexResult"] = zpp_nape.util.ZNPList_ConvexResult;
zpp_nape.util.ZNPList_ConvexResult.__name__ = ["zpp_nape","util","ZNPList_ConvexResult"];
zpp_nape.util.ZNPList_ConvexResult.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ConvexResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ConvexResult(); else {
			ret = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool;
			zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ConvexResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ConvexResult(); else {
			ret = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool;
			zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool;
		zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool;
		zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ConvexResult
};
zpp_nape.util.ZNPList_ZPP_GeomPoly = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_GeomPoly"] = zpp_nape.util.ZNPList_ZPP_GeomPoly;
zpp_nape.util.ZNPList_ZPP_GeomPoly.__name__ = ["zpp_nape","util","ZNPList_ZPP_GeomPoly"];
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomPoly(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomPoly(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_GeomPoly
};
zpp_nape.util.ZNPList_RayResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_RayResult"] = zpp_nape.util.ZNPList_RayResult;
zpp_nape.util.ZNPList_RayResult.__name__ = ["zpp_nape","util","ZNPList_RayResult"];
zpp_nape.util.ZNPList_RayResult.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_RayResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_RayResult(); else {
			ret = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
			zpp_nape.util.ZNPNode_RayResult.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_RayResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_RayResult(); else {
			ret = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
			zpp_nape.util.ZNPNode_RayResult.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_RayResult
};
zpp_nape.util.ZNPNode_ZPP_CbType = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CbType"] = zpp_nape.util.ZNPNode_ZPP_CbType;
zpp_nape.util.ZNPNode_ZPP_CbType.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbType"];
zpp_nape.util.ZNPNode_ZPP_CbType.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CbType
};
zpp_nape.util.ZNPNode_ZPP_CallbackSet = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CallbackSet"] = zpp_nape.util.ZNPNode_ZPP_CallbackSet;
zpp_nape.util.ZNPNode_ZPP_CallbackSet.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CallbackSet"];
zpp_nape.util.ZNPNode_ZPP_CallbackSet.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CallbackSet
};
zpp_nape.util.ZNPNode_ZPP_Shape = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Shape"] = zpp_nape.util.ZNPNode_ZPP_Shape;
zpp_nape.util.ZNPNode_ZPP_Shape.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Shape"];
zpp_nape.util.ZNPNode_ZPP_Shape.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Shape
};
zpp_nape.util.ZNPNode_ZPP_Body = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Body"] = zpp_nape.util.ZNPNode_ZPP_Body;
zpp_nape.util.ZNPNode_ZPP_Body.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Body"];
zpp_nape.util.ZNPNode_ZPP_Body.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Body
};
zpp_nape.util.ZNPNode_ZPP_Constraint = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Constraint"] = zpp_nape.util.ZNPNode_ZPP_Constraint;
zpp_nape.util.ZNPNode_ZPP_Constraint.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Constraint"];
zpp_nape.util.ZNPNode_ZPP_Constraint.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Constraint
};
zpp_nape.util.ZNPNode_ZPP_Compound = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Compound"] = zpp_nape.util.ZNPNode_ZPP_Compound;
zpp_nape.util.ZNPNode_ZPP_Compound.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Compound"];
zpp_nape.util.ZNPNode_ZPP_Compound.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Compound
};
zpp_nape.util.ZNPNode_ZPP_InteractionListener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_InteractionListener"] = zpp_nape.util.ZNPNode_ZPP_InteractionListener;
zpp_nape.util.ZNPNode_ZPP_InteractionListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_InteractionListener"];
zpp_nape.util.ZNPNode_ZPP_InteractionListener.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_InteractionListener
};
zpp_nape.util.ZNPNode_ZPP_CbSet = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CbSet"] = zpp_nape.util.ZNPNode_ZPP_CbSet;
zpp_nape.util.ZNPNode_ZPP_CbSet.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbSet"];
zpp_nape.util.ZNPNode_ZPP_CbSet.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CbSet
};
zpp_nape.util.ZNPNode_ZPP_Interactor = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Interactor"] = zpp_nape.util.ZNPNode_ZPP_Interactor;
zpp_nape.util.ZNPNode_ZPP_Interactor.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Interactor"];
zpp_nape.util.ZNPNode_ZPP_Interactor.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Interactor
};
zpp_nape.util.ZNPNode_ZPP_BodyListener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_BodyListener"] = zpp_nape.util.ZNPNode_ZPP_BodyListener;
zpp_nape.util.ZNPNode_ZPP_BodyListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_BodyListener"];
zpp_nape.util.ZNPNode_ZPP_BodyListener.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_BodyListener
};
zpp_nape.util.ZNPNode_ZPP_Arbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Arbiter"] = zpp_nape.util.ZNPNode_ZPP_Arbiter;
zpp_nape.util.ZNPNode_ZPP_Arbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Arbiter"];
zpp_nape.util.ZNPNode_ZPP_Arbiter.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Arbiter
};
zpp_nape.util.ZNPNode_ZPP_ConstraintListener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_ConstraintListener"] = zpp_nape.util.ZNPNode_ZPP_ConstraintListener;
zpp_nape.util.ZNPNode_ZPP_ConstraintListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ConstraintListener"];
zpp_nape.util.ZNPNode_ZPP_ConstraintListener.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_ConstraintListener
};
zpp_nape.util.ZNPNode_ZPP_CbSetPair = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CbSetPair"] = zpp_nape.util.ZNPNode_ZPP_CbSetPair;
zpp_nape.util.ZNPNode_ZPP_CbSetPair.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbSetPair"];
zpp_nape.util.ZNPNode_ZPP_CbSetPair.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CbSetPair
};
zpp_nape.util.ZNPNode_ZPP_CutInt = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CutInt"] = zpp_nape.util.ZNPNode_ZPP_CutInt;
zpp_nape.util.ZNPNode_ZPP_CutInt.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CutInt"];
zpp_nape.util.ZNPNode_ZPP_CutInt.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CutInt
};
zpp_nape.util.ZNPNode_ZPP_CutVert = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CutVert"] = zpp_nape.util.ZNPNode_ZPP_CutVert;
zpp_nape.util.ZNPNode_ZPP_CutVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CutVert"];
zpp_nape.util.ZNPNode_ZPP_CutVert.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CutVert
};
zpp_nape.util.ZNPNode_ZPP_PartitionVertex = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_PartitionVertex"] = zpp_nape.util.ZNPNode_ZPP_PartitionVertex;
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZNPNode_ZPP_PartitionVertex"];
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_PartitionVertex
};
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_PartitionedPoly"] = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly;
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.__name__ = ["zpp_nape","util","ZNPNode_ZPP_PartitionedPoly"];
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_PartitionedPoly
};
zpp_nape.util.ZNPNode_ZPP_GeomVert = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_GeomVert"] = zpp_nape.util.ZNPNode_ZPP_GeomVert;
zpp_nape.util.ZNPNode_ZPP_GeomVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_GeomVert"];
zpp_nape.util.ZNPNode_ZPP_GeomVert.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_GeomVert
};
zpp_nape.util.ZNPNode_ZPP_SimplifyP = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_SimplifyP"] = zpp_nape.util.ZNPNode_ZPP_SimplifyP;
zpp_nape.util.ZNPNode_ZPP_SimplifyP.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimplifyP"];
zpp_nape.util.ZNPNode_ZPP_SimplifyP.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_SimplifyP
};
zpp_nape.util.ZNPNode_ZPP_SimpleVert = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_SimpleVert"] = zpp_nape.util.ZNPNode_ZPP_SimpleVert;
zpp_nape.util.ZNPNode_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimpleVert"];
zpp_nape.util.ZNPNode_ZPP_SimpleVert.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_SimpleVert
};
zpp_nape.util.ZNPNode_ZPP_SimpleEvent = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_SimpleEvent"] = zpp_nape.util.ZNPNode_ZPP_SimpleEvent;
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimpleEvent"];
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_SimpleEvent
};
zpp_nape.util.ZNPNode_ZPP_AABBPair = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_AABBPair"] = zpp_nape.util.ZNPNode_ZPP_AABBPair;
zpp_nape.util.ZNPNode_ZPP_AABBPair.__name__ = ["zpp_nape","util","ZNPNode_ZPP_AABBPair"];
zpp_nape.util.ZNPNode_ZPP_AABBPair.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_AABBPair
};
zpp_nape.util.ZNPNode_ZPP_Edge = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Edge"] = zpp_nape.util.ZNPNode_ZPP_Edge;
zpp_nape.util.ZNPNode_ZPP_Edge.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Edge"];
zpp_nape.util.ZNPNode_ZPP_Edge.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Edge
};
zpp_nape.util.ZNPNode_ZPP_Vec2 = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Vec2"] = zpp_nape.util.ZNPNode_ZPP_Vec2;
zpp_nape.util.ZNPNode_ZPP_Vec2.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Vec2"];
zpp_nape.util.ZNPNode_ZPP_Vec2.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Vec2
};
zpp_nape.util.ZNPNode_ZPP_Component = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Component"] = zpp_nape.util.ZNPNode_ZPP_Component;
zpp_nape.util.ZNPNode_ZPP_Component.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Component"];
zpp_nape.util.ZNPNode_ZPP_Component.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Component
};
zpp_nape.util.ZNPNode_ZPP_AABBNode = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_AABBNode"] = zpp_nape.util.ZNPNode_ZPP_AABBNode;
zpp_nape.util.ZNPNode_ZPP_AABBNode.__name__ = ["zpp_nape","util","ZNPNode_ZPP_AABBNode"];
zpp_nape.util.ZNPNode_ZPP_AABBNode.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_AABBNode
};
zpp_nape.util.ZNPNode_ZPP_InteractionGroup = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_InteractionGroup"] = zpp_nape.util.ZNPNode_ZPP_InteractionGroup;
zpp_nape.util.ZNPNode_ZPP_InteractionGroup.__name__ = ["zpp_nape","util","ZNPNode_ZPP_InteractionGroup"];
zpp_nape.util.ZNPNode_ZPP_InteractionGroup.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_InteractionGroup
};
zpp_nape.util.ZNPNode_ZPP_FluidArbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_FluidArbiter"] = zpp_nape.util.ZNPNode_ZPP_FluidArbiter;
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_FluidArbiter"];
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_FluidArbiter
};
zpp_nape.util.ZNPNode_ZPP_SensorArbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_SensorArbiter"] = zpp_nape.util.ZNPNode_ZPP_SensorArbiter;
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SensorArbiter"];
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_SensorArbiter
};
zpp_nape.util.ZNPNode_ZPP_ColArbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_ColArbiter"] = zpp_nape.util.ZNPNode_ZPP_ColArbiter;
zpp_nape.util.ZNPNode_ZPP_ColArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ColArbiter"];
zpp_nape.util.ZNPNode_ZPP_ColArbiter.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_ColArbiter
};
zpp_nape.util.ZNPNode_ZPP_Listener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Listener"] = zpp_nape.util.ZNPNode_ZPP_Listener;
zpp_nape.util.ZNPNode_ZPP_Listener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Listener"];
zpp_nape.util.ZNPNode_ZPP_Listener.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Listener
};
zpp_nape.util.ZNPNode_ZPP_ToiEvent = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_ToiEvent"] = zpp_nape.util.ZNPNode_ZPP_ToiEvent;
zpp_nape.util.ZNPNode_ZPP_ToiEvent.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ToiEvent"];
zpp_nape.util.ZNPNode_ZPP_ToiEvent.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_ToiEvent
};
zpp_nape.util.ZNPNode_ConvexResult = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ConvexResult"] = zpp_nape.util.ZNPNode_ConvexResult;
zpp_nape.util.ZNPNode_ConvexResult.__name__ = ["zpp_nape","util","ZNPNode_ConvexResult"];
zpp_nape.util.ZNPNode_ConvexResult.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ConvexResult
};
zpp_nape.util.ZNPNode_ZPP_GeomPoly = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_GeomPoly"] = zpp_nape.util.ZNPNode_ZPP_GeomPoly;
zpp_nape.util.ZNPNode_ZPP_GeomPoly.__name__ = ["zpp_nape","util","ZNPNode_ZPP_GeomPoly"];
zpp_nape.util.ZNPNode_ZPP_GeomPoly.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_GeomPoly
};
zpp_nape.util.ZNPNode_RayResult = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_RayResult"] = zpp_nape.util.ZNPNode_RayResult;
zpp_nape.util.ZNPNode_RayResult.__name__ = ["zpp_nape","util","ZNPNode_RayResult"];
zpp_nape.util.ZNPNode_RayResult.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_RayResult
};
zpp_nape.util.ZPP_MixVec2List = function() {
	this.at_index = 0;
	this.at_ite = null;
	this.zip_length = false;
	this._length = 0;
	this.inner = null;
	nape.geom.Vec2List.call(this);
	this.at_ite = null;
	this.at_index = 0;
	this.zip_length = true;
	this._length = 0;
};
$hxClasses["zpp_nape.util.ZPP_MixVec2List"] = zpp_nape.util.ZPP_MixVec2List;
zpp_nape.util.ZPP_MixVec2List.__name__ = ["zpp_nape","util","ZPP_MixVec2List"];
zpp_nape.util.ZPP_MixVec2List.get = function(list,immutable) {
	if(immutable == null) immutable = false;
	var ret = new zpp_nape.util.ZPP_MixVec2List();
	ret.inner = list;
	ret.zpp_inner.immutable = immutable;
	return ret;
};
zpp_nape.util.ZPP_MixVec2List.__super__ = nape.geom.Vec2List;
zpp_nape.util.ZPP_MixVec2List.prototype = $extend(nape.geom.Vec2List.prototype,{
	zpp_gl: function() {
		this.zpp_vm();
		if(this.zip_length) {
			this._length = 0;
			var cx_ite = this.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				this._length++;
				cx_ite = cx_ite.next;
			}
			this.zip_length = false;
		}
		return this._length;
	}
	,zpp_vm: function() {
		this.zpp_inner.validate();
		if(this.inner.modified) {
			this.zip_length = true;
			this._length = 0;
			this.at_ite = null;
		}
	}
	,at: function(index) {
		this.zpp_vm();
		if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
		if(index < this.at_index || this.at_ite == null) {
			this.at_index = 0;
			this.at_ite = this.inner.next;
			while(true) {
				var x = this.at_ite;
				break;
				this.at_ite = this.at_ite.next;
			}
		}
		while(this.at_index != index) {
			this.at_index++;
			this.at_ite = this.at_ite.next;
			while(true) {
				var x1 = this.at_ite;
				break;
				this.at_ite = this.at_ite.next;
			}
		}
		return this.at_ite.wrapper();
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.inner.add(obj.zpp_inner); else {
				var ite = this.inner.iterator_at(this.zpp_gl() - 1);
				this.inner.insert(ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				var ite = this.inner.iterator_at(this.zpp_gl() - 1);
				this.inner.insert(ite,obj.zpp_inner);
			} else this.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.inner.next;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.inner.pop();
		} else {
			if(this.at_ite != null && this.at_ite.next == null) this.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.inner.next; else ret = ite.next;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.at_ite != null && this.at_ite.next == null) this.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.inner.next; else ret = ite.next;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.inner.erase(ite);
		} else {
			ret = this.inner.next;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret;
		ret = false;
		var cx_ite = this.inner.next;
		while(cx_ite != null) {
			var x = cx_ite;
			if(obj.zpp_inner == x) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
	}
	,__class__: zpp_nape.util.ZPP_MixVec2List
});
zpp_nape.util.ZPP_ConstraintList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ConstraintList"] = zpp_nape.util.ZPP_ConstraintList;
zpp_nape.util.ZPP_ConstraintList.__name__ = ["zpp_nape","util","ZPP_ConstraintList"];
zpp_nape.util.ZPP_ConstraintList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.constraint.ConstraintList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ConstraintList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_ConstraintList
};
zpp_nape.util.ZPP_BodyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Body();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_BodyList"] = zpp_nape.util.ZPP_BodyList;
zpp_nape.util.ZPP_BodyList.__name__ = ["zpp_nape","util","ZPP_BodyList"];
zpp_nape.util.ZPP_BodyList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.phys.BodyList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_BodyList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_BodyList
};
zpp_nape.util.ZPP_InteractorList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_InteractorList"] = zpp_nape.util.ZPP_InteractorList;
zpp_nape.util.ZPP_InteractorList.__name__ = ["zpp_nape","util","ZPP_InteractorList"];
zpp_nape.util.ZPP_InteractorList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.phys.InteractorList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_InteractorList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_InteractorList
};
zpp_nape.util.ZPP_CompoundList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Compound();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_CompoundList"] = zpp_nape.util.ZPP_CompoundList;
zpp_nape.util.ZPP_CompoundList.__name__ = ["zpp_nape","util","ZPP_CompoundList"];
zpp_nape.util.ZPP_CompoundList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.phys.CompoundList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_CompoundList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_CompoundList
};
zpp_nape.util.ZPP_ListenerList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Listener();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ListenerList"] = zpp_nape.util.ZPP_ListenerList;
zpp_nape.util.ZPP_ListenerList.__name__ = ["zpp_nape","util","ZPP_ListenerList"];
zpp_nape.util.ZPP_ListenerList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.callbacks.ListenerList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ListenerList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_ListenerList
};
zpp_nape.util.ZPP_CbTypeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_CbType();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_CbTypeList"] = zpp_nape.util.ZPP_CbTypeList;
zpp_nape.util.ZPP_CbTypeList.__name__ = ["zpp_nape","util","ZPP_CbTypeList"];
zpp_nape.util.ZPP_CbTypeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.callbacks.CbTypeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_CbTypeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_CbTypeList
};
zpp_nape.util.ZPP_Vec2List = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Vec2();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_Vec2List"] = zpp_nape.util.ZPP_Vec2List;
zpp_nape.util.ZPP_Vec2List.__name__ = ["zpp_nape","util","ZPP_Vec2List"];
zpp_nape.util.ZPP_Vec2List.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.Vec2List();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_Vec2List.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_Vec2List
};
zpp_nape.util.ZPP_GeomPolyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_GeomPoly();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_GeomPolyList"] = zpp_nape.util.ZPP_GeomPolyList;
zpp_nape.util.ZPP_GeomPolyList.__name__ = ["zpp_nape","util","ZPP_GeomPolyList"];
zpp_nape.util.ZPP_GeomPolyList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.GeomPolyList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_GeomPolyList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_GeomPolyList
};
zpp_nape.util.ZPP_RayResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_RayResult();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_RayResultList"] = zpp_nape.util.ZPP_RayResultList;
zpp_nape.util.ZPP_RayResultList.__name__ = ["zpp_nape","util","ZPP_RayResultList"];
zpp_nape.util.ZPP_RayResultList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.RayResultList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_RayResultList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_RayResultList
};
zpp_nape.util.ZPP_ConvexResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ConvexResult();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ConvexResultList"] = zpp_nape.util.ZPP_ConvexResultList;
zpp_nape.util.ZPP_ConvexResultList.__name__ = ["zpp_nape","util","ZPP_ConvexResultList"];
zpp_nape.util.ZPP_ConvexResultList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.ConvexResultList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ConvexResultList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_ConvexResultList
};
zpp_nape.util.ZPP_EdgeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Edge();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_EdgeList"] = zpp_nape.util.ZPP_EdgeList;
zpp_nape.util.ZPP_EdgeList.__name__ = ["zpp_nape","util","ZPP_EdgeList"];
zpp_nape.util.ZPP_EdgeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.shape.EdgeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_EdgeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_EdgeList
};
zpp_nape.util.ZPP_ShapeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Shape();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ShapeList"] = zpp_nape.util.ZPP_ShapeList;
zpp_nape.util.ZPP_ShapeList.__name__ = ["zpp_nape","util","ZPP_ShapeList"];
zpp_nape.util.ZPP_ShapeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.shape.ShapeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ShapeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_ShapeList
};
zpp_nape.util.ZPP_InteractionGroupList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_InteractionGroup();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_InteractionGroupList"] = zpp_nape.util.ZPP_InteractionGroupList;
zpp_nape.util.ZPP_InteractionGroupList.__name__ = ["zpp_nape","util","ZPP_InteractionGroupList"];
zpp_nape.util.ZPP_InteractionGroupList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.dynamics.InteractionGroupList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_InteractionGroupList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_InteractionGroupList
};
zpp_nape.util.ZPP_ArbiterList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Arbiter();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ArbiterList"] = zpp_nape.util.ZPP_ArbiterList;
zpp_nape.util.ZPP_ArbiterList.__name__ = ["zpp_nape","util","ZPP_ArbiterList"];
zpp_nape.util.ZPP_ArbiterList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.dynamics.ArbiterList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ArbiterList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_ArbiterList
};
zpp_nape.util.ZPP_ContactList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.dynamics.ZPP_Contact();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ContactList"] = zpp_nape.util.ZPP_ContactList;
zpp_nape.util.ZPP_ContactList.__name__ = ["zpp_nape","util","ZPP_ContactList"];
zpp_nape.util.ZPP_ContactList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.dynamics.ContactList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ContactList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_ContactList
};
zpp_nape.util.ZPP_Math = function() { };
$hxClasses["zpp_nape.util.ZPP_Math"] = zpp_nape.util.ZPP_Math;
zpp_nape.util.ZPP_Math.__name__ = ["zpp_nape","util","ZPP_Math"];
zpp_nape.util.ZPP_Math.sqrt = function(x) {
	return Math.sqrt(x);
};
zpp_nape.util.ZPP_Math.invsqrt = function(x) {
	return 1.0 / Math.sqrt(x);
};
zpp_nape.util.ZPP_Math.sqr = function(x) {
	return x * x;
};
zpp_nape.util.ZPP_Math.clamp2 = function(x,a) {
	return zpp_nape.util.ZPP_Math.clamp(x,-a,a);
};
zpp_nape.util.ZPP_Math.clamp = function(x,a,b) {
	if(x < a) return a; else if(x > b) return b; else return x;
};
zpp_nape.util.ZPP_PubPool = function() { };
$hxClasses["zpp_nape.util.ZPP_PubPool"] = zpp_nape.util.ZPP_PubPool;
zpp_nape.util.ZPP_PubPool.__name__ = ["zpp_nape","util","ZPP_PubPool"];
zpp_nape.util.ZPP_Set_ZPP_Body = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_Body"] = zpp_nape.util.ZPP_Set_ZPP_Body;
zpp_nape.util.ZPP_Set_ZPP_Body.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_Body"];
zpp_nape.util.ZPP_Set_ZPP_Body.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_Body
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_CbSetPair"] = zpp_nape.util.ZPP_Set_ZPP_CbSetPair;
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_CbSetPair"];
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_CbSetPair
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_PartitionVertex"] = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_PartitionVertex"];
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_PartitionVertex
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_PartitionPair"] = zpp_nape.util.ZPP_Set_ZPP_PartitionPair;
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_PartitionPair"];
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_PartitionPair
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_SimpleVert"] = zpp_nape.util.ZPP_Set_ZPP_SimpleVert;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleVert"];
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_SimpleVert
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_SimpleSeg"] = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleSeg"];
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_SimpleSeg
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_SimpleEvent"] = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleEvent"];
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_SimpleEvent
};
zpp_nape.util.ZPP_Set_ZPP_CbSet = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_CbSet"] = zpp_nape.util.ZPP_Set_ZPP_CbSet;
zpp_nape.util.ZPP_Set_ZPP_CbSet.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_CbSet"];
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_CbSet
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
Math.NaN = Number.NaN;
Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
$hxClasses.Math = Math;
Math.isFinite = function(i) {
	return isFinite(i);
};
Math.isNaN = function(i1) {
	return isNaN(i1);
};
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
Xml.Element = "element";
Xml.PCData = "pcdata";
Xml.CData = "cdata";
Xml.Comment = "comment";
Xml.DocType = "doctype";
Xml.ProcessingInstruction = "processingInstruction";
Xml.Document = "document";
haxe.Resource.content = [{ name : "__ASSET__:bitmap_SGLogoImage", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQWRZQUFBQjlDQVlBQUFBZnRrTERBQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBNEptbFVXSFJZVFV3NlkyOXRMbUZrYjJKbExuaHRjQUFBQUFBQVBEOTRjR0ZqYTJWMElHSmxaMmx1UFNMdnU3OGlJR2xrUFNKWE5VMHdUWEJEWldocFNIcHlaVk42VGxSamVtdGpPV1FpUHo0S1BIZzZlRzF3YldWMFlTQjRiV3h1Y3pwNFBTSmhaRzlpWlRwdWN6cHRaWFJoTHlJZ2VEcDRiWEIwYXowaVFXUnZZbVVnV0UxUUlFTnZjbVVnTlM0MkxXTXdOamNnTnprdU1UVTNOelEzTENBeU1ERTFMekF6THpNd0xUSXpPalF3T2pReUlDQWdJQ0FnSUNBaVBnb2dJQ0E4Y21SbU9sSkVSaUI0Yld4dWN6cHlaR1k5SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpFNU9Ua3ZNREl2TWpJdGNtUm1MWE41Ym5SaGVDMXVjeU1pUGdvZ0lDQWdJQ0E4Y21SbU9rUmxjMk55YVhCMGFXOXVJSEprWmpwaFltOTFkRDBpSWdvZ0lDQWdJQ0FnSUNBZ0lDQjRiV3h1Y3pwNGJYQTlJbWgwZEhBNkx5OXVjeTVoWkc5aVpTNWpiMjB2ZUdGd0x6RXVNQzhpQ2lBZ0lDQWdJQ0FnSUNBZ0lIaHRiRzV6T21SalBTSm9kSFJ3T2k4dmNIVnliQzV2Y21jdlpHTXZaV3hsYldWdWRITXZNUzR4THlJS0lDQWdJQ0FnSUNBZ0lDQWdlRzFzYm5NNmNHaHZkRzl6YUc5d1BTSm9kSFJ3T2k4dmJuTXVZV1J2WW1VdVkyOXRMM0JvYjNSdmMyaHZjQzh4TGpBdklnb2dJQ0FnSUNBZ0lDQWdJQ0I0Yld4dWN6cDRiWEJOVFQwaWFIUjBjRG92TDI1ekxtRmtiMkpsTG1OdmJTOTRZWEF2TVM0d0wyMXRMeUlLSUNBZ0lDQWdJQ0FnSUNBZ2VHMXNibk02YzNSRmRuUTlJbWgwZEhBNkx5OXVjeTVoWkc5aVpTNWpiMjB2ZUdGd0x6RXVNQzl6Vkhsd1pTOVNaWE52ZFhKalpVVjJaVzUwSXlJS0lDQWdJQ0FnSUNBZ0lDQWdlRzFzYm5NNmRHbG1aajBpYUhSMGNEb3ZMMjV6TG1Ga2IySmxMbU52YlM5MGFXWm1MekV1TUM4aUNpQWdJQ0FnSUNBZ0lDQWdJSGh0Ykc1ek9tVjRhV1k5SW1oMGRIQTZMeTl1Y3k1aFpHOWlaUzVqYjIwdlpYaHBaaTh4TGpBdklqNEtJQ0FnSUNBZ0lDQWdQSGh0Y0RwRGNtVmhkRzl5Vkc5dmJENUJaRzlpWlNCUWFHOTBiM05vYjNBZ1EwTWdNakF4TlNBb1YybHVaRzkzY3lrOEwzaHRjRHBEY21WaGRHOXlWRzl2YkQ0S0lDQWdJQ0FnSUNBZ1BIaHRjRHBEY21WaGRHVkVZWFJsUGpJd01UWXRNVEV0TURkVU1USTZOVEk2TURNck1ETTZNREE4TDNodGNEcERjbVZoZEdWRVlYUmxQZ29nSUNBZ0lDQWdJQ0E4ZUcxd09rMXZaR2xtZVVSaGRHVStNakF4TmkweE1TMHdOMVF4TXpvek1qb3lPQ3N3TXpvd01Ed3ZlRzF3T2sxdlpHbG1lVVJoZEdVK0NpQWdJQ0FnSUNBZ0lEeDRiWEE2VFdWMFlXUmhkR0ZFWVhSbFBqSXdNVFl0TVRFdE1EZFVNVE02TXpJNk1qZ3JNRE02TURBOEwzaHRjRHBOWlhSaFpHRjBZVVJoZEdVK0NpQWdJQ0FnSUNBZ0lEeGtZenBtYjNKdFlYUSthVzFoWjJVdmNHNW5QQzlrWXpwbWIzSnRZWFErQ2lBZ0lDQWdJQ0FnSUR4d2FHOTBiM05vYjNBNlEyOXNiM0pOYjJSbFBqTThMM0JvYjNSdmMyaHZjRHBEYjJ4dmNrMXZaR1UrQ2lBZ0lDQWdJQ0FnSUR4NGJYQk5UVHBKYm5OMFlXNWpaVWxFUG5odGNDNXBhV1E2TW1NNU4yWXdPV0V0WkRBMVlTMDVNVFF6TFRsa056Z3RORFJtTVRWbVpHWmlZbVF5UEM5NGJYQk5UVHBKYm5OMFlXNWpaVWxFUGdvZ0lDQWdJQ0FnSUNBOGVHMXdUVTA2Ukc5amRXMWxiblJKUkQ1NGJYQXVaR2xrT2pKak9UZG1NRGxoTFdRd05XRXRPVEUwTXkwNVpEYzRMVFEwWmpFMVptUm1ZbUprTWp3dmVHMXdUVTA2Ukc5amRXMWxiblJKUkQ0S0lDQWdJQ0FnSUNBZ1BIaHRjRTFOT2s5eWFXZHBibUZzUkc5amRXMWxiblJKUkQ1NGJYQXVaR2xrT2pKak9UZG1NRGxoTFdRd05XRXRPVEUwTXkwNVpEYzRMVFEwWmpFMVptUm1ZbUprTWp3dmVHMXdUVTA2VDNKcFoybHVZV3hFYjJOMWJXVnVkRWxFUGdvZ0lDQWdJQ0FnSUNBOGVHMXdUVTA2U0dsemRHOXllVDRLSUNBZ0lDQWdJQ0FnSUNBZ1BISmtaanBUWlhFK0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4eVpHWTZiR2tnY21SbU9uQmhjbk5sVkhsd1pUMGlVbVZ6YjNWeVkyVWlQZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YzNSRmRuUTZZV04wYVc5dVBtTnlaV0YwWldROEwzTjBSWFowT21GamRHbHZiajRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhOMFJYWjBPbWx1YzNSaGJtTmxTVVErZUcxd0xtbHBaRG95WXprM1pqQTVZUzFrTURWaExUa3hORE10T1dRM09DMDBOR1l4Tldaa1ptSmlaREk4TDNOMFJYWjBPbWx1YzNSaGJtTmxTVVErQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4emRFVjJkRHAzYUdWdVBqSXdNVFl0TVRFdE1EZFVNVEk2TlRJNk1ETXJNRE02TURBOEwzTjBSWFowT25kb1pXNCtDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh6ZEVWMmREcHpiMlowZDJGeVpVRm5aVzUwUGtGa2IySmxJRkJvYjNSdmMyaHZjQ0JEUXlBeU1ERTFJQ2hYYVc1a2IzZHpLVHd2YzNSRmRuUTZjMjltZEhkaGNtVkJaMlZ1ZEQ0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5eVpHWTZiR2srQ2lBZ0lDQWdJQ0FnSUNBZ0lEd3ZjbVJtT2xObGNUNEtJQ0FnSUNBZ0lDQWdQQzk0YlhCTlRUcElhWE4wYjNKNVBnb2dJQ0FnSUNBZ0lDQThkR2xtWmpwUGNtbGxiblJoZEdsdmJqNHhQQzkwYVdabU9rOXlhV1Z1ZEdGMGFXOXVQZ29nSUNBZ0lDQWdJQ0E4ZEdsbVpqcFlVbVZ6YjJ4MWRHbHZiajQzTWpBd01EQXZNVEF3TURBOEwzUnBabVk2V0ZKbGMyOXNkWFJwYjI0K0NpQWdJQ0FnSUNBZ0lEeDBhV1ptT2xsU1pYTnZiSFYwYVc5dVBqY3lNREF3TUM4eE1EQXdNRHd2ZEdsbVpqcFpVbVZ6YjJ4MWRHbHZiajRLSUNBZ0lDQWdJQ0FnUEhScFptWTZVbVZ6YjJ4MWRHbHZibFZ1YVhRK01qd3ZkR2xtWmpwU1pYTnZiSFYwYVc5dVZXNXBkRDRLSUNBZ0lDQWdJQ0FnUEdWNGFXWTZRMjlzYjNKVGNHRmpaVDQyTlRVek5Ud3ZaWGhwWmpwRGIyeHZjbE53WVdObFBnb2dJQ0FnSUNBZ0lDQThaWGhwWmpwUWFYaGxiRmhFYVcxbGJuTnBiMjQrTkRjd1BDOWxlR2xtT2xCcGVHVnNXRVJwYldWdWMybHZiajRLSUNBZ0lDQWdJQ0FnUEdWNGFXWTZVR2w0Wld4WlJHbHRaVzV6YVc5dVBqRXlOVHd2WlhocFpqcFFhWGhsYkZsRWFXMWxibk5wYjI0K0NpQWdJQ0FnSUR3dmNtUm1Pa1JsYzJOeWFYQjBhVzl1UGdvZ0lDQThMM0prWmpwU1JFWStDand2ZURwNGJYQnRaWFJoUGdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW84UDNod1lXTnJaWFFnWlc1a1BTSjNJajgreDZ6L2FBQUFBQ0JqU0ZKTkFBQjZKUUFBZ0lNQUFQbi9BQUNBNlFBQWRUQUFBT3BnQUFBNm1BQUFGMitTWDhWR0FBQ1VHa2xFUVZSNDJ1eTlkNXdjUjUzKy82N3FNSEd6dE1yWnNvSmx5VG5qbkxFTkRtUWJjeWJZY0FjY0hCd2NZT0NPZU55WGVJUWpaNHd4dHNFQjU1eHprR1RKVnJDeVZydmF2Qk83dStyM1IvZk05S1RkVmJJRnY2blhhN1Nyblk3VjFmWFU4d25QUjJpdHFkV3kzNThGWUFJZkJONEdUS0hSR3EzUkdxM1I5bXFMUmhUUDk5Z2NlbE1udHFrUnUzeUV3aDY2OW5mRkErcUs3YXVQVUd0L0xYYnZhb1NvdmFNZVkzOWQ4M2lsK3hDN2VCMjdldjZxYmJUL1QvQTNEMWdML0VvSzhTY0JwTzUvdUdwL2M0empMd1JPQjQ1dkRQOUdhN1JHYTdUOXJZbHhBcTU0VGE5a3ZHZlQ0OXhmakhNWnNTL3VSVmVmZHpLd0hYZ28rTGxMd0hvSWNCTXdvekY0RzYzUkdxM1I5a2RBcmMzdi9CK1ZrQ0RHd2ViRXVGRlIrTFMwN3ZIMHFDQXFxRHhWNFhjNUJ1anEwSG5MMWd3VjZ3Y2QvRi9yd3JWV2JEZkt2aUpzeVJYbFZ5Q2hDYmdDbUFaOENuaGhWNEQxaXcxUWJiUkdhN1JHMjE4WmFnWDBpSHFvTVJhVEZBRllqZi9zbFdaZVBRNDJLb1NvQWZHakFIQUlQT3VhbzhOZ1dJZm0xdnM3SWd6VUZkZFF1Wk1PLzFyOHoxbEFDcmg0VjRCMVNXTVFOMXFqTlZxai9SMndWREVheHhzRlVNWDRZYnlXejFTUFFnS2xFSFdYQTJWM0lNUm83bDlFemIrSnNuTVhHR3JaTllqeXYxVVJYVjBDMVVybVhCVjdKTUxYWEhaQnkycjEyMmpBYWpRR2NxTTFXcU0xMnY3T1VLdFJhWGVCTkF4Y1loUUdHajZqRHJZVjFQR0ZDb0hTSVlBTW9hOG8wZG1xMnlpQ3RhNEdXQjNBWmVsUUFtUU5vN2VvU1ZMTGo2ZDErZjFVSUsydU5CT1hkNEt4cThDcUdvTzYwUnF0MFJydDlRVFZldXkwQXFIR1lLZmo4WjNXTXZQV005T0dmYVMxZktJSWdTbzdadWowc2phSTFtS09vckI5blRzVm96RG5XdnZVV2h3Z1JQRWVhdlppR04zRCs0djZPR2syQm0rak5WcWpOZHIreUZJcnpaR2lCbDhjRFZESHgxREZ1TUcwWk40Tlg0a09NVk5DekZTR2dMcVM5VlZlckF3eDM3RmptT3NzSmdSak1QWTZmOWUxMWpEVmZUOTY3emVBdGRFYXJkRWE3ZThIVUt0OHFHT3pWQzNHaGlaUkJ0YjEvYVdWdmxKZG9HbENJRFJsekZXSEtLcldJUXR2SldFT2pxbnJZSnlvZ1pKaW5QMm5kNkduL2Yvb1duK3Nac2U2M0t1ckc4RGFhSTNXYUkzMjk5RDB1QUYxZDhDVUN0OXBUYjlweUdjYUJsTWRBc3NpT01zU1M5VVZiRlBJZXVjUzViY1hBbm9kUUtvVzlaWWJvamFKSDR1VmpoZVFkZlh6RUJYOUszUjRvYUVid05wb2pkWm9qYmIvZytyb2Z0VGRNZm5LTVV5OW9nSlF3eUNvS1BsSWk2QWFJR2xscW9xb0Fkd0Y0N0dvQXN0cUtscmN0c2JOamk2RklmYXc1M1dWT2JueXJHWFpURVhBRlExZ2JiUkdhN1JHMjcrYktKa214MlNwb3dOcVpURFNXS2JlSWpNTnFLRFdmdHhRK0RoRjBRWENBVW1pTEkybDhCMWFsTEhiK3ZteW93ZFdpZkdpNnk1elZqMDJNT3NTOEpZZmV2UnpOSUMxMFJxdDBScHRmeUNyUW9CUXRabFNHVzZNN1V1c3hSeDFqZSswVWtHNmlROXVVc3JTT1lXZno2a0N4SldBa05MZng4Zk5zbURaVW5Td0tDYUtDZ1JDU0pUV1laUkNDNEVVTWppUFJoZlliOWd4SzBBR3B1YkM5eUlFaEdWNXRVTHZBc0RXTUsxclVjMnlpNzhvUkhnUm8wVTl1M0VEV0J1dDBScXQwZllub2pxbTJiZkFHRWM1Ukwzb1hoMzZUaGFBVmlrY3owVnBnUlErdTdTbExLYlNlSjZINXlrMFBzQnBJVEFOQThmenFMN2FxdWdrcEFERE1EQ2t3UE5jSHh5MVJraHdQVVhVc2pFTkl3QjFUUzZYdzVEUzk3TUcxMnBMQzRURzhSeUtpZzlBeExLTEloR1ZRVmk3dzJqRGZTVUxERldVTHhsRUdJL0hPRjBEV0J1dDBScXQwZlliZEsyajd6T0c3S0Nzd1dRcjAyUUt1eW9nN3pnY3RmZ2czbkhXV2JpdVI5UzIyZGJUd3c5dnZKNmhrUlFhemJuSEhjKzV4eDVITnArbktSN25ucWVmNHRxYi9zcW5ydndnTXpvN3lUdHVrY1hWeWgwMURZUGJIMytjTzU1Nm5QZWNleDVITEZ4RUpwdkR0a3hlM2I2Tkg5NTRBemtuVDhTT01wSk84WTR6enVEWWd3N0c4enhzMjJKSFh4OC91UEY2WXBFSVY3M3B6YlFra25oSzRiZ2UzLzdUTmZRTkQyTmIxdDdwK1lwMG05RzU3dGdKTi9zTnNOclNRNXE2cEdPaEFWZVFkeVhxTmFqTTBHaU4xbWlOdHQrUTEvQmtMc1NvMjRsUkFGV0Vja1BESCtYa1dUYi9RRDV5eWR1S3g5dTJjeWUvdVBVVyt0MEJVSW9URHptVUQxNVlrc0dObURaLy9QV3YrT0NGRnpGejB1UngzY3R3T3MydGp6ekVKU2VmeWxsSEhWMzIzY1lkTzdqdW5ydFJXbkhRbkxuOCtKT2ZJaG1ORmIvdkdSemdaN2ZjVEhNOHdjZmYrbmFpZHFUNDNZOXYvZ3M3QnZxSldQYllhRGhXQzNXWUxtbzYxZEFLcnVVSzF2c1pzRXFoTVNWSXFVRXJOZzVHV041dHNUT2xVQnFhYk1HOERzMUJFM0pFTFlYckNWelZBTmhHYTdSRys4Y0YwN0pFanRFQ2VrUnQxYUhDdnJLQ1Nlb2d3S2lrWmlSeEE1TnVvYVd6YVZ6UEFjOERyY25sODJYZjU5dzhHQWJadkRQdSszSTlCVktTclRnV3dOZXUvQ0FQdnZnQ083WnQ0MHZ2LzBBWnFQclhrL1BOM3doUzJXd1JXQjNYUlFpQmxBWkN5dkd0VGtZRFJGRmxGeWd2ZXFOQVMwTExFbGtHdHE4N3NHckFFZ3JUMWlCTit2cHpQTFlKN3R2U3p2cmNGR1l0T0lUWTVBNlUxampaRkRlc1hvTWNYTS9GODNaeTRSSi92MnkyQWE2TjFtaU45by9iUnN0SEZUVVlhbW1PRjJYU2dlSGNVeGtTYmxCQkpGQjEybzFBSUVGSzBMcHVvZko0SkRMdWU3RXR5OCtkclhHc2VWT244WjV6enVYWk5XdDQ4d2x2cUh1di9yNmljbVZSK2xUaTQzZ2dJbVQ2MVdNdGVHUTRQVWpYRm1wNlBZRFZ4M2hOTk82QmpMQnFZNTViVjZSNGVuQTZURGlJNDg4K2s2dk9QcHRFMUNTWHpXQVlFaUVrcnBZODhmUnovUEszditIKzlZL3krVE5nUXR3aDQ4aUdjYmpSR3EzUi9vRzU2NjZ4VkJuc0doWnpLQVRieUZBQ2FqallwL0pNazlyYStmWkhQMFlxbTBXak9XclI0dXByczB4KzhiZGJtRE4xS2tNaktTYTN0M1BCQ1cvQU1uMG95VGtPZjdqckRySjVoMmpFNXBHVnk1Rm1mWmo1OUxzdUk1WEpqRWJOYTFUdUFTRms4Qm0zTEZQZHJpNFBLSzZXdE5CVnl4ZktwQnRmRjJEVlFNejB3TFo0NEJXTFB6eWRaYXUxaUprSHZZRjNuM2tpNTU1NVNvbjZwOU9NNERJME5GUU0rejdycEtNNDVmakQrZGhudnNxVk45N0NiOTRLVWVIZ2FObDRCeHV0MFJydEh3aFRCVnBvYXBVUHJaczZRN2tmTlp5c0k0THdYeDNLVTVYNDU2alZtaE1KM25ubVdhTUNPM2FFTC96c0orQzZrTTl6ME1GTE9ldW9vNHZBbXM1bStOQjN2a1YyY0JBc0M2UWtGbzM1YVRNMVdtc2lTV3NpV1JjN1JKR1ZWb29MaTNJbUhONmttSEphTC9xMzREQU45WU9xM0NaMHF1TGZpL0hVWThvbTduTmdqVVVVTzRjTXZuNmJ5U3B4S0dlKzgrMTg1UGhET0dqQjNHb1RRenhPUEI3SE5FMTZlM3NSUXREZDNVMHltZVNiWC80UC92MExKdDk2NUVhdVBrUGhwVlVqcUtuUkdxM1IvaUZhdllsYTFqWDdWcXNwNmJKQzRzRitvcHloNmdKQTFESFBqb2ZsTlRjMUlSQ2s4MW5hbXB2S2ppT0VvS081aFQ0aGlOaDI0S2NkUjM1S1BiSXFaVTAvcXZJMFNtdThBbFFxalJBeXNIYU9WZWk5aGpGWDF0NUdsd0UxeGYzRUdHYmtmVWI3dElhb3JkalVaL0RXM3d2eWk2L2c1ei8vR1IrOTRxS2FvQnB1N2UzdHhPTnhQTS9ETUF4U3FSUVJTL0t4RDEvSjQ4TUxlWDZ6Z1IxVDR4SmJiclJHYTdSRyszdHNza2EwYjRIRmhiOVQrQUUra3BLQXZTNVdtQ2tIVUZHQVhDRjJIZXQ4cEN1eVNDRmtEVllvQXIrb3Y1MlF0Yy96Mk1vVkRLVlNaWCs3OWZISDhaU3FZc20xRmdCWko0K1R6NUhPNThuazgrUmNsNXpyK2w1aVdUSVQxLzdJME0vU2RSWStQaHVXd2IzSzBuZUZheEhDOTBPUHNqalpaNHpWbEI0dUVmN3JQb3REM3ZoZXZ2V2xUKzdTL3Nsa2tuUTZqZFlhS1NYOS9RTXNuRDJadzArNmdOL2Q5eFNIeklwajRlQTJXR3VqTlZxai9RTzFXZ0ZLaFZqVkFrNlZWSTlFbWJSZ09LKzBra21XTEtVQk1GYk1uU09aTlBjLzl4eVpYQTZBZytmT1krR3NXZFc4V29SaW1PdXA0QXVLNEZXci9mVFdXMWg2d0FIODYwV1hBUERROGhmNTVuWFhjdlpSUjVVZlNsWWZRMHJKZjd6elhReW1VbGltbjhkcVNFbFhYeDkvdlA4KytvYUhpTnAyaldpbWVqU3poaWlIQ0VkM2xaeXhXaGVzQWFNN1djMTlOVENzaE9EbkQydDJ0SjdBVDNZUlZBR2FtcG9ZR0JnZ244OGpoTUR6UFBLT3d4bkhMK09iZHgvSXhxM3JtTlVwY0hQaU5SNzBHdE1BUS9ocFFuNWtsdSs5OEJTNFNqU1lkS00xV3FQdDFzUXBReWJiTUFhSVVERnVIVkpna3FJRXFBVzJXdEx0RFdRS2kwQmNBRlRsNTJ4V1RKMmJlM280LzFPZmdCMDdRR3MrL2NsUDhiVVBYRlVHemtnWlJBNFhTSjJzRHRpVk1zUWFaVkY3dUFJZCtmd3Zmc1o3eno2WFJEVEt2LzM0LytnZEdzQW9NL3NHekxDQzlScFM4c0h6MzFUVmZUMERBOXp5MU9OMERmUVJsOUZ4QUd0dG9RZmZNcUFLOXZWUXJRQmRZOS9Yc0xxTmJYaGtzMUh1V20vdzdrLyswMjdabTZXVUpCSUpjc0hxU1VwSlQwOFBSeDU2RUZNT09wRy92YlNTRDA1T0lJVDJCOHcrYmhxSVdSb013ZGFlTEU5dnN4bHdtN0F0QTlmSk15T1JZdGtVUVZ1ckNZNUgxalVhRTBXak5WcWpqV3R5Q2RlVktSZkxMekhTb2pnK2hVd1RVUVcraExZckw4VW1TdW1YV2xJcnRNY3lER1pNbXN4V3cwQnBUVXNpVVF2NWZYTXAxR1dqUmFZYW1FMXJZQy94YUpUaGpSdjUzbDl1WU1iRVRwNTY2Z21PT1BLb0dtc042WnU5eDhGV2VvZUhBSUZobFBKYmRSbXNDbXBoZk5BcEZlYzFTdEhJdXJTL0VEVksrcnhtak5XQ0Y5Wm1VQk9PNTdUamx1MzJjVnBhV2hnY0hQVDFKWVZBS1lXbk5DY2Njd1QzL0hvR2x3MTNFN01ObkgxTUViVVd4Q0l1MmJ6QlR4NTBlYWovUU5wbUxXWFdyTmxNNk9oZzArYk4zTHBtTmRtbmxuUFJ2QjdlY25pQ1dMT0xHbEhrbE5Fd1ZqZGFvelhhdUJmdzRkQ2I4cW94SmEzZnl1MEx1cmxROHFOV010YkNkNFhJbTFpRklFTm5XM3ZaY1pyaThmTDVPSkVFcFFqWFY3Tk1pMFRvT0szSlpCRlVoUlJGcmNDMnBxYXlZelhGWXBCTTh1MGJydmRaYWtzejhjcnJhVzNGTUNTbVlkRFIzRHhtMzAxc2JrVktvMVNFdlFZZnJjdy9EUzlZU2diM2dwMDlyRmtWZWlwQ2o1a0R1Mjk4cklaZzdmWUJXcVl2b2IwbHVkdUhzU3lMUkNMQjhQQXdRdmdya2E2dUxrNDU4Vmh1K05NQlBMV2xtMU1PQUVmdDI0RnVXeTU5R1p1UDNXcVJtbklHLy82VnF6anEwQ1ZsMjNrYS9uempMZnoyRDlmeGg5ODh6QldIQzk1Nm1FMU01OGptakdJQjMwWnJ0RVpydExIQjFmZW5sdHg4Zmw1cUlmQkk2MUw2VExHWVRNQnVmUXVtUkFvTk91UjNEYWl2MEFMVHNsaTNkU3QzUGYwVVNpa01RN0tsZXlldTUyRmJGaHA0WWQxYTdubjJHVHpsWVJvbWo2OWFpWkZJQmtGTFlKb1cvU1BEM1BUWW80Rm9oR1k0bmNIVEdzTXdRQWhNMDJkKzk3LzRBbG5Yd2ZNVXBtR3dkdnMyck9abUVBSlBLWktKSkVQcEZQYzgvNnd2YUNFbFhmMzlPRnFSZGh4dWZQUVJXaEp4bEtvUjdSdFV3ZG5VM1VQZWRZaEVJa2hERmpXU3dtYno0a0tFVW9FYVdSQjkwS1Z2VkxHOEQ4VkFMNEZFS0FVSXRQVEJWOVNwaWlCMG5TK3kzNSsxRHBpN093TWptbEQ4K3M0dXRoenpZejc3MFN2MmFKQ2xVaW0yYnQzcVB5ajhpZ3Vka3lmemsxOWV3K0FqMytVcnB3K1N6ZSs3ckNGYktxUnQ4UzkvalNDWHZZL3ZmZm5mUnQzZWRSMnUrY3VkL1BiMzF6Qng2R25lZmFqRFdRZTRJQlJacDVGNzIyaU4xbWdWODZXdGVINW5oRU52blV6RUJFT0VQWGoxZ3BOS0lGb0tZQXI1V291Vlg0cjVOZ0g3TFlDRVFHbUZwMEZyaFNGOTg2OXRtVVdsSTA5NUNDR0x3S3JSU05OQ0ZvNHNCRnBySE9VVnk3aHByYkZ0MDRmOEVMUDFsQWRTb0R3ZmRLVVFmaW9OSmRCWFd1TXFCV2lra0NnMHR1RUhKem1lV3p4K0dGRkY0Q3N1bUl0Tnd5aGozWlVzVlZRd2ZmLzNRQjlZVnk1dnFPR1dMWmVMUU92MTIvOXc3YnpLWjdyUFpucHBXdlQwOU83eGNXS3hHTkZvRkMvUXRUUU1nOEgrZms0Ly9YUldwYWF3Y1NCR3hQRDJ5VDBJUUNZazF6MlRaN20zaks5KzlzTmo3bU9hRnBkZDhrYis5T3NmYzlhSHZzc1AxaC9KSjI2ekdNNEtvcllhdGV4VG96VmFvLzMvbUtlS2tzWnZQVkF0c0ZRaHlwbHRBV0NLQUJkaXFKV2dXdkI5YXVHRHA5YmdLcS9JakF0cEpCcEIzbk5SUU01MTBZQVJTcmtwcHRPQW4xT3F0UzlHSVl6ZzNLR1VHd1NlNTMvdmVKNWZqN1dRc2lKTHBtTWRtR0M5NEdjaC9VVUh3S3RGOEg4cDBESUk1RUxnS2Y4N0VRUk55U0FscVFEZ1VzcWdOSjRvcGl1RjA0WVFzcGd6SzZRSXBkcjRFbytsK3cyMktSNzd0VXkzVVpySjdRbDZ0cXdsbGM2U2lFZDNINkNscEttcGlYUTZYV1N0U2lrbWR5U1plT0J4M0xacVBWZWREQXp2QTdacUtZWUhKYjk5TWNaVm43aWNaTXdlOTc2dHpRbmVmZkZabkh6c29YejVHOS9sUCs2Nm52OTNUZzVUdW5nTjFhaEdhN1JHSytkZXBla3pBTGlpckVLbzdtZzRRS21rdUNSQ3FrcmgycXNpaEtVaEJodjgwUkFTMDQ0RTRCSUMzdUNuWlpwWXdpcGpub1N1b1FEQWtVQWN2d3pJaTkvNy96ZHRpVlVLci9Vaml3dE1NM1NkMGFoUkVyY0kzV1BVanRTdUxsTllETlNrUldOdkoyb3dVY29pcS9ITnZjVS9CSUlVb2lBVVVSdFk5ODBNNzhCaHM1dFJYYyt3Y3UzbVBUNWNQQjdIdG0xVWtEeXNsQ0pxbTV4MitoazhzQ2xLSmh2RE12YStvMVVZZ2h1Zno5Q3k4RXplZXNHWnUzV01sa1NFTC96N1I5amVmZ2JmZXNUQ2lqVjhyWTNXYUkxV0d5QktPYVkrNk9nS1VDMEVNY2tRNnl5d0tTMEtETGRjSEVFanlDTnhwUDl4cGNCRjRzclN4eUg0dTVCNG9iOTd3c0FWQnE0TWYyVHA5K0E3VDVaK2huOTNndCtWS0gzbmhZN2xTQVBYa0ZYN3VvYUJaNFNQS2N2MkMyOVRPcTVaZmgyRy96Y3REYVNRWlI4Uk1PYndSNFErU0QvVnA4QjBaZGwzb1gxZVM0R0l2Q3ZwNlBBNElOckY5VGZmemxGTDUrL1I4U0tSQ0xGWXJLZ2hyTFVtbTgxeDFKSTVYRHY1Qk81ZmNRdm5IRzdnak95OWV6Q2xwbWRBOC91WEovR3YvL20ySWx2ZVpRT1AxaGhDOGQ3M3ZvY2YvOWNUOUtjSGFUVlM1THhHT2s2ak5WcWoxV0U3UXFER3dWSkZPSGlwVUlwRmxyTlBVMnBpWVExaTRVZTJGaUtFaGRCQlVtbzVzZk4vcXFDNlM1aWxTdi92UXBRTCtvdFFXSkFVZ1I1VTZmK0VtSjhRcXBxdGgvTkZ3OTVRSVNxa0NDbUxUQTZySnd0UnZqZEM0eUZ3WkkzQ0xXR1dLaVJoejZ3STVhdHF3L0FEbFFyM1dtQ3RDRVNkYVh5ZkFLdUhnSnpESllmRytkeGp0OVBWOTA5TWJrL3UwVEdibXBvWUdSa3BwdDZrMDJsbXpaeko0VWNldzk5dS94dm5MTE14cFlPcjlnSUoxMkJHRmRjOFp0QXk3d1RPT2YzRTNUNlU2N3BrY3prV3pabE04NnpEZUd6ZDdaeDdzSVowWXdKcHRFWnJ0QkkwbE1DczJ1eGFCYXFpM0x3cnFueXAvdTlEbUp3bFUzeFg3a0FneU5leWw0MnVkVkE3NHFjU0ZHc2NZcGN0YzRKZHY0Q3FzNWVYa1l0cGw3L0dwL0NsbGdOSktxOEV3T0VWaEs1L3lxTFNVbGlKU1dnZmgwYTU2SDJtdkpUTEdTeWJubVBHazJ2NXl5MTNjdFc3TDlxall5WVNDYUxSS05sc3RqalkrZ2NHZU9PcHgvRGxCdzVoOWFZbldUZzlpcHZmOCt1M1RJK2hkSlI3dHJieTRTOWR1ZnZNUFo4djV1Rk9tTkRDck1WSHMrS3g2emozMEZoakptbTBSbXUwS3VnUVpVRks0Ykp3UGh2VVJaMkhpcWpmUWltYmdyOHlTRjdWUXBCRU1SM1BEMElhRjl6cCt2OGRiL0NsM2gvNlZKUFFIazNhQ3hTakFodUFMdDhHUVVWNTh3S1o5VWxjcFNhRTFyNVFSSFVrOFQ0RzFnSk54blU1Zlo3RERYZmZ4Slh2dm1pUGZJdENDT0x4T05sc3R2ai8vdjUrbGg2OGlObExqdVZ2YTU1bjRUVEdya0E3am9kaEpDUS92eVBQNUVQTzQvVGpEOW50WXcwT0R1SjVIa0lJa3NrbTVzMmF5aXYzQ1ZBbWhsQjR1dUZ0YmJSR2E3UVNYVlZDbDBYOUVrZ1pGbnl2c2lMRkpoeG9RNmdvdU1iUDdSVEFkbUd4QlpOT1hMTGpyZ0srbDFZS3IyTXo4TTNBbTh3NGhwVElZRW1pUTlWcWRCV2tCdWlsUzBEaXM5YXdtVmlYVkp6cUlPcytEVTkxWFpOVFptWkliMytKUjU1NGJvK1AxOVRVVkt6VENuN3FUVS9QVHQ1dzNIRThQakNUL2hHRnNZZExwWWl0MmQ0dHVHUHpCQzYvN08yN2ZSekhjWW8rWVNrbHFWU0tqVnUyMHhRQmhJZHFnR3FqTlZxalZZQ1JoUEpVR3NLbTMzSWhpSERVYlVuaXNQeDNMUVFwRERLK1NOL3IxL1JyOUtsb0hqQmlXS1dxTk1XVW1ZSThvMUZNMFFsWHZ5a0VMMUdzZkJNcXJCNUt1YWxWMG02ZkE2dW5vYTNKNVBEV3JkeDA2MjE3ZkR6YnRra2tFc1djVmlFRUF3TURISHZNa1pnZDgzbDBTd1RMOUhZYldpV0FMZm5UMHhtbUxqdWI0dzVkdU52WDJ0L2ZYMlNyMFdpVXZvRWhYbjd4U1E2YTdzdUNOZEpaRzYzUkdxMFNmRVNSR3hWWWEwbjhJZmhyS0tWRkZHVUxpOGhiM01mLzNRUnlRcEpEQnNJT3I4OTl2UTZZQ2hvOEllazFJa0d1cnlndkFTZkw4M0dGTklJZ3JzclNjcUlJcUVpanF1UmNyV2J1NC80RUtUaDN2c1BubjMyRTdWMDlUSms4Y1krTzJkemN6TkRRVUFrTXBVVGxNeHg3Nm5uODdTOVA4OGFEWFF4SDcxWVJkTnZVck51c3VLdDdEdi81SCsvYzdXdk1aREpGR1VZQTI3SjQ5dVZYeVc5NWdsTXV0RkZadHpHSk5GcWpOVm9aV3hWU29DcFpxeWdYZ3lobnFZWG8zc0RyV29nS0ZxV1lZVnRDTnhZOTJzQituWURWakFtc21OaW40amhDZ0hJZ2wxSkZ1VWVCWDZzMlpkb1l3aWhQWXkwbUNRZG1YZUgzc05TbGdDWXRBdmxDVmJBbUZJcXF5K0lDQnZVNm1JSUJsS05aTmp2QjVPeHlicnp0M2owK1hqUWFKUmFMbGJGV3ozTTQ4YmdqMmFwbXNyb3JpbTN2cGhLVG9majVNd1l6RGptRHc1Y3QyZTFySEJ3Y3hIWGRZbXFRaStTYTMvK1dNMmNPMGh4TmsyK2syalJhb3pWYUpSSFJva2crdzZ5ek5xZ1dsSlpreVBRclM1cTIwZ2RxaWNBVEVrK0kxK21ld0xBRWthVEFUdXk3VDZSSllFUUNmMmpSaDZweGhhRFhpdnFNMUNoOHBQK3pUSlZKRnBXVWltYmlRcjZySVl0NXc0U1lyZ3krZTEyQU5hOGtNdUp5OXJ3ODk5My9BSTY3Wi9LRFVrcVN5V1NaWm1RKzd6QzVMY0hNWmFmdzF4Y3lFTE4yeWV5aEFkdHdXYi9UNXJHZG5melR1M2VmcldheldVWkdSakFNQTgvem1EaHhJdmMvL0FRN1Z6L0lXNWM0T0ptR2I3WFJHcTNSS21jZ2Y5NldncERRUTFETnBpQUNYNldPVkRMOUlrT2w1SXJNRlNJQ0JvWEZBQ2JXNjhSWXRRYmxnZDZIbjhMeEsyOVJvQmt3bzBWUmlJSUZvTXdzSEVnWUVpcDFKMlRZREV5NWVUand0eGJONzY4SHNBS29qT2FNWlUxNEd4L2trV2RYNy9IeGtza2t0bTBYV2F2ak9DU1RjYzQ4K1FTZTZHNWhzTi9BTnNldnhDUUJHVFA1OVRPdytOanpPT3FReGJ0OWJRTURBMFhmYXFIWTc2MjMzc3FGOC9wb1MraUduR0dqTlZxajFXeUZITlZDdGRTQ3VIeXByRm0xMkg3cGI1SmlxZk9RM2k4Q3RCUmtoUHlIMWlrWDRKdHNDNm9hd1k5K0k0S1NRVUdBQ3ZBTWY4S0JTOFdmUlorckRQbG1aUWhveGV2all5MHlTdGVndVNuTHNWTmQvbnJUTFp4ODFFRjdkRHpMc29qSDR3d09EaFpaN002ZHZSeTVkRDUvUE9CVTdseitlOTV5WEFMY3NSS0svUmFKdUx5Nkk4WlRBOVA1eGdkMnZ4cFBMcGRqWkdRRTB6UlJTakZyNWt4dXVPVXVuSTBQOHM3enBQL2dkM1VscTF4L09ZYW1kSUJ3YmNEQ2Fzc0F1UWVQczJ4Sldhc0dZVEFvcFJra3llM0NrTmVlN3dEWkc2K1B0UHdnQXVXQjUreWJzUDVkN3N2Q2tsd0Z6NmhPeG5ueHBUYnJyblRIN2tzM3VHK3hGNisvY0J2S0gyK2pNaHNCaHNXNE8xNDVqRG53cFZWN1RHbTFsOGJOS09lbzF3ZGx6N0pDb0tENExoalVsZDdaaldlcmkreklQMU5CMHJBRW9FRjFtNkxrb1N3SzcvdFRRY0hYV2lwelZzRGI3ZEltcFdReEJlVWZFVm0xcHVoZkJaQmEwMlhGY2FYcHA5dm9jZ3RCcldJMlpjOVphNFFvRnBVTERRVWQ1TGJXZjAvTTErcStkVVp4L2tFRy8vN0lYV3phL2dGbVRtbmJZOVk2UER4Y1ZHTEs1WEpNbXphVlk0OCttanV2dTVVTERzbGpTVEZtclZaVEtMQnMvdStoRkllZC9sYVd6Sit4MjlmVTM5OGYxRFkwaU1makRBd05jOE5OdDNMeG5HNWFXbVBrUnNZNVF0RG8zQ0FvRnhGdGcyZ1RJdEdKYUo1UnNxMElpYzcwd3NoMnRKT0IvQkE2MVl1d0VoQnBabHdvTGdTNFdYUisyTi9QYmtaRVd4R3RjOEN3L1dNSUNka0I5TkJtdEpPQ1RDL2F5L3ZYWlZpTXZReFcvaVJ2eFV2WHZsc3ZUdkRtcUx3UFl0SUV1eWtBZ3IzWXBBRmVmaHpIRmVEbDBQa2hmOUtMdFBqM2FNWVFOVUJOS3hmY2pMOVBiZ0E4QnhGdEJTUEMrQkt2ZytnTUlTSFdVZi82Z21jNnRrcE5uWDN0cEgrT1dzOUpTUDhhdlB3NEZnYkN2MGJEQmpNV0xBNXJqL1c2NEN0TmY5L0NzOS90U1ZmNDExenZuUkRDajlUUDlTT0VBZEYyTUd4RXl5eEVjcksvYjdDZFR2VkFxZ3VkVDBGK0dPMk1JQ0t0WUViMjdCb0RNUUtLMDNoWW1pOHNXMWd5RDFlQmFsbFp1Skswb1JDQ0RCTDNIN1VtdEFqV1E1NnVIcFpGODdpQXN0TG51cnd2eXZRUFJFa1FvcUM4UkxoY25BaHY5Zm9DYTg0MVdUZ2h3eHh6QzMrNTZTWStjdVhsZTNTOFJDSkJKQklobDhzQmZrN3I5dTFkbkhYcThkeDF5OEdzM1BvWWg4MktqQTJzRWNGTDY3TzhrRnZBOTk1eTNtNWZUemFiSlpWS0ZRT1dtcElKYnJuL1dkd045M0wrMjV2UTJSeDZ6RXd5Zi9MVTZSNWsyd0hJV1Njalo1K0duSFlVSWo0cFlBb1ZMRk01cU40MTZLMlA0VzI0RjkzN01qclRNd1pqOGVQbDlNZ09oSlhBbUhzMmN1Wkp5T25ISXljczlpZUo4QWhWQ3R3TXF2dDV2TFYvUTI5OUFtL2JFLzdMSE9zWUZjUjFwaGZqZ1BNeFQvaHNFQmUvbXo1MmFZS1h4Ym4zMDZnMTkySWNmREhXcWYrTnpnM3QzWGZVYnNKYitRZmNwNzduZzBKVlA1YWVrYkNia0ZPT1JFNVloSngyUEtKdExxSnRuZyt5bGYyUUhVQVByRWNQYjBGdGVRVGR1eHJWdHhhODNEaFpqMEpuZWpFUHV3cnpxSStocy8yMU56TnMxTlluY0IvOFhEQ3JqSk5ST1JuRWpCT3dqdjhNbU5IYXdHM0dZSGdiem4zL2poNTRGYXpFcU1jajJveDE4bGVSa3cveGdhZ1dVR3VOKytEblVWc2Y5ODliM0g4RU9mY2N6R00rNGQvRDdvNGJ2d28yN3NOZlFXMjgxNytIU2xETmo2Qnp3OGpPZzVHelQ4T1lkemFpY3hraTBodzhmMTMremprcDFJN25VTnVmUlcxNkFMVnpGYmpwUFdLdklqUjl5N0FmTlZRL1ZVdFJZcVRoNzBSMUtvNmZYK0wvelJLd1ExaWtrYStibjNYZk03ZnE5YW1CWW91VkpHZVlSZk42K1J4WTJya2dZNnpMb0ZXRS9oZEVSZWxneVZNb0lsK25QODNYOXU0TnpwZzl4Sy91dllPci91bGRRVUhjM1crRmNuS202UjhublU0elorNWNsaHgyTExldVhNbGhNMVBvVXJHaTZybGFBQjc4NFFXRHcwODhqd1BuemR3anR1cDVIb1poWUZrV3crazhOOTF3TGU5WTZoQ1A1Y2tPRzJNUWlFSzgrQURtMHZkZ0h2MEpSTWVCWTRPTk5KR1Rsc0trcFJpSFhZbTM0cmZrLzNZbElqNUtXcFBLbzdPREdMTlB3MWgyQmNiQ2k4ZG1jWFlTT2YwRTVQUVRRQ3ZjRmIvQmUveGI2UDUxRU8rb3o0NjhQQ0xlanB4NDhGNEN2aVE2cnlIYWptaWR1Mjhzd2EyemZaTXJWdlVrbkJzRzVXQXN2QVJqd1pzeDVyL0pYNGlNZGN6a1pKLzlBTWFpdHdMZ1B2eGwzR2UrSCtqWGpURXB1eGxrMDFTTXhXL3ptVlRMclBxUHEyVTIzcFBmUXFkM3duaUxSNmc4c20wK2Nzb1JvMi9Yc1FBeDZYRFU5bWNRVnJLdTJWdG4rNURUajhGWTlKYXFhYXphRjlOU0RaektSY1E3a0pNTzJUdlBOTjRlTW5PSG1JdVRCc1BHT3ZiZk1ZLzRNQ1E2Nnl4RVErOWNwQVU1ODJUa3pKUGg2SS9qM1BGaDNPVy9SRVE3OWd3WFJIVU4xVUxBa2c1K0w2b0hCV21WeFRDWmdnWmlRVmFpd0dhbHoyNWRJUVAzNHhpV0RDblJJMFBvMUZBRnk5dk4rOUtnOHFKb1hkOHJ6eklTUnlSYXkyaW0xdjc2djJyNkNTclZGT29KaE9HMXBKOGtRenkwVkp4QUJ6VmV3eHkxeUZpRGJwUzhqajdXTVBFNWJoYjgvdVZWM1AvdzQ1eDU2Z2w3YkE0T0N6R1lwc21Pcmk1T09mVTBmdlRvVGZSbnRwQzBWZDJBSWR0UXZMakY0NFg4WW43NHZuZnY5bldrVWlsR1JrYUtGZTVqc1JpM1AvZ01adGRqWEh5OHhoa1JvNDlQSWZ3VnZoQllaM3dYNDVEMzdYNGZEMjJ0YVlvc25jZFgvemVQK3crc1l6NDVMbENveFRUTWc5K0RNZnQwbkhzL2hYcmxKb2kyK0w3RHFvbFcxREVEN3M3TkJXK24yQVBtTzU3bU9SVVRpdkFYSTVsKzVMU2pzVTc0QW5MMktYdCtIak1HYmg3R3NjRFVUZ1l4WWZIWXdBZGd4WkZ6VHNkNzRWYys2eDR2cy9OeTR6TWV6RGdPdGVLMy9rS3cxbGpUTHNLTVlzd1laL0dLbWpQdVhodzNCYVlaZnFhRmQ4R0tZNTMxUTR3RHp0MU41SEFERS9LZVQ2VWxzMjRKV0l0bDRTZ0ZMWlZrREVNQVdxeHhHa3JKQ1ZTQkxDSFlJaU9raEVGQ3FWSG5JajA4aUgzVzI3Qk9QQStkejlkR3ExMENWazAwYmhPSldYdE5QOWhkOVRqNWUzN2pQMVBES0duMnFvbzFrTlowMlFrY3d5U2lGRUtxTXFPdUtJb0VoOFE0QXVzUVdoWmQ4b1ZpZlg3dDlZSkdjTmp2L2pvRHE2dWd2ZFhtcU5iTjNITG5mWHNNcktacGtrZ2s2Ty92TDdMV2ZEN1Bnbm16U0V4ZnhqM3JkM0RKSVJuY3RLeXl2UXNObUpwclY4Wllkc0libVRHbGM3Y0hUc0czV2doYU11MFl0OTkwUFcrZU40Z1VMamx0anU2Uzh2TG8zQ0RXU1YvZUkxREZ5NkZldmF2YTNGVXd1K1dIUVh1WXAzOGJjK2w3OW53aWFKcU9mZDR2eU4vMklkU3FQL3ErS1dIQVA1UzVTWUNYaFd3L3hySXJzRS85YjdDYjk4NWN2L2xCdEp0R1JKckdYUFlMYVNBbkhlb0g0WXdIL09hY2lmdjBEd096OUhpZWg0TG8rTzVMVGo4ZTJ1YkMwQmJmbjEvMW9tZWhhU3JHdkxQR2Q3ejIrYWoxdDcrR2o5UTMveUl0ckxPK3YvdWdDdWpCemFpTjkvdisvcjF3WFNJa3BGK004QzJNUXlGQzRDdktRTFVVM1ZvT3FnaUJJU0F0ak1ESE9zWlk4RnhFU3dmV01hZnROUXV0dmJlQnhyREtnTFhBV0N0OTNBSkltVFphR0FoVWNZRlN0WkVXdFMwVWdRQi93VVJRRXVvWWU3SHhtdVorS08ydlFzOWRaTFAydWZ0WnQySExIaDh6a1VnVS9acEZ5NUlKUjUxNEZyZS9Jc0NJK2dGS2xRL2JkdG5ZRitYNWtSbTgrOUxkejF0TnBWS2tVcWxpM3Vya3laTzU5ZmE3VU51ZjR1ejVMbzVqakJubm9iT0RHSFBQd1R6NjQzdld2LzNyMFgwdjEyQXBBdTFrMEU0Rzg1U3Y3eFZRTFEzeUNQWlozMFBPUGgzUzNmdDJBRW5UTjVscWRqRXllVmZQWTVVRGpwdkZQUDVxN0xOL3ROZEFWUTl0UVE5dkRZS1h4dHJZQTdzSk9lK2M4ZDlDeDBKRTA5UnhzMUN0WEVUejlQRWR1MjBlc25VTzJzdldPWmFEVEU1RlRGd3k3akcwejV1MFNnc01wZEQ1WVl3bGwySWNjTjZldlhQYm4vRkJlbTlGQnhjQmsxQWQwbEJlYXkxNVF5R0NQTTBTQUJlQlFRZ01CQ2xwamk5NFNacm9nWjJvNFdGVUpvc2FHdHF6eitBZ0twZmJxNDlTZGEzM3JVcXlaQWIzZzVmS1EwT2sxdXkwWWpqQ0NGVUVDdm1uaTM3cTBxSkVCQ2xPUlJBdXhqMkZVcGdJVW5DS3RXbGZaOFlha0RNV3pJb3grNUZWM0hqN3czemlxcmZ2MGZGaXNSaXhXSXgwT2wwc1JxNlU0dVNqbDNEWERRZngxTm9YT1hLT3dzdVVPc0FVR2hHMStlSGZISTQ4OCswY09HdlNicCsvdjcrL1dFaytIbzh6TUREQUgvNzRKeTZmMDBWVFU0UmNkdXdPRWRGV2pLV1hqUW9XdW1jNTNybzdnaWpVd055WG5Jcm9QTmhuTW9EZTlJRGZ3VWEwZW1KMjA1aUhYSUY1Nk9obDhIVFBTdHhWMTZJSE40QldpUGdrNUt5VE1PWmZNSXJwTVlGMXpvL0kvKzQwMU1pV3dOYzBQdGFxVTkzbzNwZkxBMWZxbUo5UmVjZ04rYTVQTHdmS1JlZUhhNXNXalNqQ3JoTmM0K2I4L1dyNE5ZV1ZoTnhnYWRXYTdzVTQvRXJNRXo0M3pzWE5XblQvZWtoMSswNThwU0hTNHZ0RlcyY1ZBNXZVOXFkUUErc1JkbnhjNWtiaVU1QlRqcXd4ZnJKQmVrMDVreFhOTXpIbW5JSDc0cThReWFuamV4NjdZSHFWa3c5RGJYcklOeFdHaGNpMVFraHIxMHpsdXhQWm5SMUE5YS94enovV0lrdElkTG83Y0ZVSWRINFkyWDRneGhIL1BQcXJ1ZjVPMU5iSGl1bHVJallCMFRJVE9la1FQM0llZkxZcTk5eEtVeXBvcmdPVHJ5aUpSVlNKN3BlaWdBdjVxMFVWSmhrQzFhQzR0NFZtcXhFbEpTVG1HTmNwVEFQVnV3T2R5eUt0eUg1cGU5STd0NkR6V1VRMFdVR1h5azNCaGxha0RCdGxTS1NTWlFtRTVmc0Z3VXVCeTlDWDRsVkZ5NmJRTXJDNmF6OVlLUWhnMGtqcWtkZlhIRmdkTFRISWN1R3lDRDk1OERhRzMzMFJUWEY3dDQ4bnBTUWFqWkpPcDh0WTVJd3BFMWh3eE9uYzlOUVRISGxBRkVONHhUSnRWbHp6ekN1S0Izcm5jTTNiM3J6YjV4NGVIaWFielJZWjg4UUpIZnowZHpkaWR6L0JtODZJb1YzWDcveXhnTFYxRG5MT21mVk42RTk5RisvSjc2Q0d0b0FYVEVLR1FOZ3RrT2hFdE03QlhQeDJ2STMzbDFhOUZlZVFMYk14VDdoNmRGUDlFOS9FZStaSHFMNTF2b2xGR3VEazRmbWZZTXgvRTlZWjM2NGJGQ1dTVXpHUC93ejV1ejVhMy9kV2EwN2RlQS81bTkrTGFKazU5a3BlSy85ZTJpZWh0ajVCN3BxemFqSXluZXJHV1B3MnJKTytWTHZMMTk2TWMvZS9JNXFuMW1CUE5tUjZ3VXFnTTczSUtZZGpudkRGc2VnZTNvcmZCUXVTelpBYmdOeEk2UzAyb3hCclIwU2FFQk1XWXl5NEJMWGhYdDgwUHg0VG91ZGdURDhPRVd1di9tcmRIWWptR2NqSmgxVzhHQVp5NWh2Z3hWLzVDNnV4d0VjcFJHejh3VGR5MXFudy9DK0NQRk83aWgzS0E4N2ZoZFZ4K3k2bnFxZ2R6NUcvNDE5OHRtakd4aDQ3Ymc2c0dJWDBIdEc1Qk5reXU4NkxrTUc1NzlONEsvNkFUdTBzemNTV2pZaTFJZUlURVpPUHdKaDNEbXI3aytNMno0K1BzSllDbGFvcjJRUXh3eUtjWWxOaXNXRlFsU0ZUTUVKZ0NzZ0lPYmFHdXBUb29UN0k1M1l6MS9vMUFGWW5YNHExcUdTc3dXMmJXckhUanBNMUxYOHhVV0NnV29kdHdFWFdLa1hKSWx3TWFOS1Vhd3ByUHpCTUMxWHl6OHI5QkZnQlZGcHc0bnlEbno3N0RJOC90NG96amwrMng0T3hiTEx4UElTUW5ITHNVbjc2NEN5MmQyOWhTb3ZBY3dTVzFPQVovUENSSEtlZGZTRnpaa3plN2ZNV0JDb0Frb2tFWFQzOTNIVHp6WHpvVUk5b1hKTWJHWis1VXJUTVJOakpPZ3h5QmU2alg0ZjhzQjlWV2hnNVd2dE1KcjBUTmJRWnAvdkZVdDVmNVZyWVNTTVB2Z3dSN3h3VlZOMEhyZ1lqZ21pZFdUN3duQlRlUzM5RVovdUpYUFNudW1rV2N2SGJrQy84RE4zejB2Z0ZDdHdjcEROZzd4emY5bVlNakRqa2gxRGJ0dFlFREQwOGhERjlVLzFqWkhhaXRyK0t5UGJXQkVsaHhmd3B6WXBobmZBNVArMmkza3Zldnc3bnpvK2l0ajZHZGpNSUkrS0RzeFVOYVd3b0dObU9HdG9FUFN0UXI5N3RQNW5FbEhGeEdlMW1NZWFjWHZ0ZFduY0hZdExCMWNBS2ZzcEl5eXpJOW9HVkhOUGNMQktUYTdON0tSQ3lIRHpsOU9NUVRWUDh0SnZLaGVLRWc1QWQ1WldoZExvSHN2Mkk5Z05yTHNwMjNmVGwrQXVnL1BEWXdBcStGVWVhdnIvYXNCRXRjK29mZXRWMWVNLzlGS3g0OEM0VVptOC92VTBQYlVZTmJFQnR1R3V2bWJKMW1RVzNPbGdwNlBXeXFPRXdxQ0xMemI5bHYvdWxYZGd1STNpTWpGNnlXZ2gvTWEzVmZndXNxc0JZRTYybC9xdTRJYWsxYVdIaVNLTllKRjZFc0ZBWC9hY0NMWHpXS25RcDMwWVRUcjhKdmhPbGgxVXFmUDQ2aWZEWGFqbHRFREhUbkRRenkwMDNYTGZueDh2bHlueXNVa3A2ZW5vNDdzaGx4R2NmeS8ydjVNQUNTeW9NQ3g1YmsyZTlYTUlIMy9PVzNUN24wTkFRbVV5bU9JZ3QyK2JtZXg1amV1WnBMampVeEV2cjhabFJoSUJSd3ZSMWJnanQ1WU9vVzFtK243VEFUZ1lzc2s1U3Y1ZUhwcW1ZaSt1YjNMME45K0krK1MyZlBSVkJSSmQrV2dsRTB6VFVxM2ZqUFBSZjlXL0ZzSkZ6ejlxMWlGMXArb1RIU296dkk2Ui9mR2toWXUyK29FWGxKMmFObm1OcFJCQXg2dXpiRG1iTU54Zk9lTU9vbGdUZHQ0YjhEUmZqdlhvWG1GSC9PVVNhZllZcUxUL3ZXRnIreEdzbkVkRTJYMWlqR04wOGp0ZlB5eU9hcHlOcW1ZR1ZpeDdhaE81ZVVidHJKeXhHVGxxR0hsT1pSSVQwNENydU1kT0wzdnBrdFpsWW1zZ1piNmg0MWdLZEc4UTQ4SUtBSFliYXlEYThyWS9YNjhuZE1GVVo0eDh6VmlKa3JsVysrRVBiQWFPNEo3cjhQaWx6SmZpaUxCZ1IzN1FmYXlzS3Rld1ZwaG9HenNBZ3JLV29VbFdpd285YUFOWENUMWtBdzBMTlVTRkErK2JpckRESDdtbkRSbTNmaU02bXkwMzg5UTNZNC96c3hlYm15NCtwcXFjY0U4MlFGU0VqYlF6S0Z5MEY4N29Xb1NocmJSVEZta1hRajBXWlEyUlpXVDYveG5ZNDEzZy9BVllCZURtRGN3N01zMkhGUTZ6ZHRIMjNqNVZPcDBtbFVzVlVGNlVVU2lueStUeUdZWEw2U2NmdzEzWHRQTC9lWTNPL1ptUndoRjg4RytIQ3Q3Nkw2ZE9uN3RZNWxWSU1EZzZpbENwcUFnK001TGozbG11NTRnaUYxQm55M3E1MGJmM2hMaWNkZ2pIM1RNajArZWtCOVpMQkNycVdWY0E4Z0p4MWFrbTFxZGJjL2RUM2ZFWlIxODhaaUlUSDIvRlcvaDdWVmI5b3ZUSHZuT3FrK3IrM3BoeEVwQVZqbE1XSXpvK1F2KzBxZE05TGZwRFF1Q1VFUlVnV1VvKzVyYzROSXFjZGkyaWFWb09aYjBYMXJVYnRmS20yOUo4ME1hWWU3YlBvMFJZNzJ2VWprMnN4UCszaWJiemZGeDJwUFB6TWt3TFhoQ2dDUFZZY1k5cHhOVmpHS3NqVXNVcTgxaUsyMnZQZnAzcGplTkhiRUpPV1FXcW5yNWFsZGYzbnVKZEFvOENBQ3Jtc29oZ0JYTkw4OVUyOW9yeUdhTWdIS3hGbHZsVlIyRmI2ZXNIYlpHUWM1VFMxRDZodWZ2UnREQk1SalNJaTQvblllL2YxekF3aGpOSGZOME1yZXEwWWFkUENMRVFFbHdueGwzOEtLbFlGN1NzdEpMb291bCt1SlJ6dzIwQlBlRDhKWGlvdU9wUmticXZMQWRFdWJybmxOdjcxUTd1dTBadk5adG0rZlhzeDFVV0dDdGNXVExYbm5IRUt6ejU5SHYvNTdQTTBKeUlNOUd6RDZKalBleS9mL2FDcFZDcEZKcE1wUmdKM2RrN2lWOWZleElUMENrNlluU09Yc2NadlJkRUszYmUyL3ZkV0hQdThYK0E4UEJ0djFaL1J3OXY4eHhwdEs0OTByTnZSR1l3Wng5Y2ZwRjNQb1hxV0I4bitZODN6cG0rQ2ZlVXZ5TW1IMXNiM3R2bklqb1dvM3RYak05SHRsOERxUW1JS2N0N1o5VGQ1NlZyMHRzY2hPV1h2WmI3WG1zRGNESExxMGJVWFRRUHJmSUVPNWFFSE5pTGFxMW1ZbUhFU3hIOElUcXIrOC9BY1NFenlwZm1xeGw4TSt0YWdoelpYbVlybDVNTVJ5U20rK3BWaG9aMFJaT2RTcUhFZGF1UDlpRHBpRDdMOWdOMHdCZWQ5QVl6ODBPampUR3ZmeldJblNnelR5Nkg3WGhuRk5UTUwrOEkvNHR6L0dkVEcrLzNBSjhQMkE4K2tzVThXQWlYamJ4bUZMYVhQRUZKZHFqQUhsNWVaRTZWQXFJcHRNMUtPblNnaUFFK2h1cmRoekZsYzI4Sm0ySGd2UFlYMy9NTmdqLzZPYTYwaGJrSFNRcXM5N0RkcFFDNkY3dStHYUx4c1hSWmUzMEZCR0NsZ3BFVUhxZzdaNFhSNXZGT0lmWmJ5VzBOUFI1UlVsa29hV2JydVVIamRnRlVEbUNhblRPdmpta2NmeEhuL1pWalcrSUlBUE04am04MHlPRGhZck05cTJ6YW1hV0paVmpFNnVOQysrKzF2a25iQVU1cFZxMStoTFdtVGlFVjM2N285ejZPL3Y3ODR5RzNiSnBYTzhPQmR0L0MrQXdkQUd5aXhDK3RZYWFFSFgwVnRlc0JuQURXZlVnenI1SzloSHZ4UGVDdCtoN2ZsSWZUMlozeWZYcnl6UHNDNkdVVHpMRVQ3Z3ZvQXNmVUpQeDh4TVk0OFhpSFJYaDYxN1VtS0dtQlZFM0VDSmg2RTN2RThZanpBbWg5Qzl3RjYwOWluajdkQndaUzZUd2VuUms1WVdGT2FzTUI0dkZmK0V2aldLajFXQXR3MDJzMk82eTBRUmpRd1c5ZDRmazRhMFRvWE9mMjQyczl1eTZPK3dJZWJRVzE5RktNV3NFNDlBdEUyRDkzMTdKajNYR3VXRUVZY05iUVJPYkFCS3N6UklqRVJNZmt3MU5xL0lZd1d5QTFpVEQycU9zZ3FONHphOWdSR1BYR0wzVm1BeFRvd1pwN29XM0ZHRXpreElyN09kV3BIVVVsSWExQTlLM3cyV3VmY29ua205Z1cvdzl2OENHclZ0YWd0ajZLNmwvdHBGb25PZlRQdVJBbThSR1V1YTdoa1hKbitiV0ViV2JZL0laRDFDd1lJdGhsUmxCQ2orMWlMckNWZGR3NFEwUWplbWhmSi92eXJpSmFPc1lkVmswQTBpejNWbWlqMmtUQWppRWk4Zkx4VzNKQ3RQYmJiQ1liTktLWlNsT0t0YS9SM2tJUlRpUGdOQklKTGZhdEYyWjkxVUJSZGFGR1hRTDF1d09xVE5jVkpCMFQ0M2ExUGM5ZjlqM0R1R1NlUGYvRWlKVk9uanQrVUc3ZjhUanBxMllJeFdYQStueTh5NERDZzV2TjVSa1pHeU9WeVJiWTZhOVpNZnZLcmEya2RlSXBUVDVTNDNpNEtYUnNSZEtvYmQvbHZzT3NCYStFUmR4eUllZEovWVRocDFOcGI4VjY5QS9YS3pUNGJzWnVxV0kxV0RqSStzV1kwYVhHYnZ0Vm96L0hGeDhkaHZoVkdESlhxUWcyOGlteWJXM05GSzVOVDhMejgrSjdqakpPd0wvNTZiYUdCU2lCWmR4dmVsb2NSZXlNWmZ3d3JnaHpGQjZjR05xQjJyZ3p5aFhVVjZJcTJlY2prMURIU1Z3UklBNTN1Umcrc3I1a0hxZk5EeUdsSFZ3VUNGUmliMnZva3dtcEN1eG5VeHZzeERuNTNqY2NoTVdhZmlydmplZW9LODJ2bEE0eHAxelFubzF4VTcrcHFwV3RwSVNZZkJpLzkwV2VFVmdJNStmRHEvdXBaamg3YWhLZ1hQYXQzWGU5T1Rqa0MrK0xyeC9GKzJiaVBmeFAza2EvNDdGdWFDQ3VKMnZrUzd2TGZZUjc2L3RGM24zRTh4b3pqL1lDbERmZmlyZjRUM3FZSGd3VlJmRzhPdXZJODFZSkpPQXl3c21TTkswVUdpeW9oZmxGd014VHlMSU50UENGRGRWMUUvWEdwRkdybmRrQlZGMEJRbnUvTG5Ud2o4SFBiWXpJb1lVbXdCR0p2R1hiQzErVExucU9WcnJxalFvRjNjMHcvcjBBVWoxY1NMd3hwUXhTNnN3aW1XdGZRbGRoZmdEWHZDbHJhVFk2ZDBNV05mN3QzM01CcUdBYXhXQXpIY1ZCS0VZbnN2UVJ6d3pBd0RJT2hvU0hTNlRSS3FXSTZqZXU2ZnNLMVlhQzFwcVdsbVMzYmR2QzN2OTNDSnhZUFlzV2laTk83WGxGRVJGcndYdm9UM3B3elJ2WHJGWGV4NGhpTDNvS3g2QzJvdzU3RGZmeC9VT3R2QTZSZm5hVElXSE9JNUpSUi9Lc2FuZGtaVEtqak5OTkk2Yk9FOUE1ZmZhZFdzNVBqbmlqRnhJTXdKNDZ2aktDVDZZVzF0K3dkbFp1eFpvTzJlZlcvM2Y1TVVPSEZxQVlvejhGWTlIYk13ejR3ZGg4SWlmZnlqVGgzL0V2MVBXbUZRR0pNUHFLbTcxc1BiRUIxditBSFRlVWR2TzRYTVZOZE5TTjc1Y3lUNElsdjE3OGZMNGVSbk9JcloxVUJlTTVuZWQzTGF3WmNHWjBINDFsTnZpKzQvVURFdEtPcmdYWFRBK2pzVUgyeENpTUtzVGJmcnlmSEtiUWc1UGpsR3MwSVpZRlpob1Z3QmU1algwZE9QS2l1UmFDY3djN0FXSG81eHVLMzRXMjhEKy94YitKdGVXUVhLeFNOWnI2ckFOVUNHTWlTeWJlbzNWc0l2cWtRT1BDM2xNWCtrU0hwZVMwRk93emZ4enFtK2hMYVo2eWpiUmFKajFyb3V3b0loV0JmbHRhcGZOVnM1ZElkU1RCc1JVbmtVcldFVml1c3ZlVVNwdUZnMkhDTWtpNG1Td1Q5V0tlUFh0ZXEyeG9CcnNPYmxqYXhmZVdEck4wNHZpQ21WQ3JGWnovN1djNDQ0d3plK01ZM2N0VlZWM0hQUGZmc2xXdXlMSXRFSWtGblp5ZWRuWjNZdG8zak9IaWVoMm1hUlRPemxKSllOTVp2cnJ1ZGp2N0hPSGxKRWkrN215K1hGVU1ZRnU2OW44SmJ0V3RSMG5MeW9kaHYraTNtS2YvdFI2SG1oa0tqd0F2U1UycFBRRG83NEpmQk1uWTF1R0QwRjBvMHp3NzBkdmYyU214NHoyck83c29kUmtjcGEraW1SOWRRdFpOK3Y0OFZxV3JHQXFhdWF3TmFZaEppVnUzRnB0cjJaRkZmR2lNS0kxdlJXNStvczNoWmltaWJWeXAvTnBZcHNuS01aSHJSM1MraXN3TTFyQ2dMRVIzeklaUHkwOFphcXhkYnF1c1o5SWlMR3Q1V1ovekhFZkhKZTYvMmF0VUZWRGpnMEg2VWZhWVA1MjhmOE4waDQyMW1GR1BlT1ZpWDNJaDUxRWY5TWVsbTJXdW9VV2J5RldXdm13am5WWWFDbktoZ3NZVHF1Z2FGVzlGSUJxV05xY2ZPVnRCS29YcTJsWUZMMVdVbW1oRWRrL3pVbk5lNTZSckFpb2FzWWZvaS9JS3F3dVphbEM5SU5HRkZxNHJ0Uzd3MjlGaDBEVURlVDRBVndNbEo1azRYekpWcnVQWHVoOGZjUHBmTDhiblBmWTZmL3ZTbmRIVjFzWFhyVnU2NTV4NnV2UEpLUHYzcFR6TXlNckpYcmt0S1NUS1paT2JNbVV5ZVBMbG8raTB1MkNJUk5tN3I0YjdicnVjRHg5b2djemhxTjd0VEs0ZzBvOTBzenUwZnhIbnc4MzVneHJoZlJnUHowQTlnbi84cnYxSkljWUlTbzBlRGV1NDRhMnVPY3hZdVB0U1JmU3M1K05yNEtjWllnWSt5cjdjTGs0MmJxOW1YMnNzaldtWmdURHVtTmxac3ZCZXRuYUs1VTZlNi9kSnJ0UzQzMG9TY2ZWcFFZcStPS2RoSzFNbkhWQWdwVWNOYi9VQ3B5dFl5MDJmM0hvZ2FGWXpVenBYb25hdnc3Y2o3VWFTNDF2NDdON0lkNTZiTDhKNzk4YTZOL2tnVDFpbGZ4enp1TTc0aTJGNjR0NUtaTjVqR2hRaFA1MFdtS29wS1N4WDdsdFVZTUVLaUNBSkRDRndwNlRXczBZdFhCb3IyMnNtTkdxUWxUQU5NNjNWL3BnV01VNkhBS0ZNckJxd0lnMWFVcVBhUUFkQ0ZQMlhKUUVXdzlUdS9ncXVXQmNRVy9pNUZrTm9rOTZNODFySjVSUXR3TTF4OFNKeUg3cmlCa2V6b2dTa3Z2dmdpZi8zclgybHFhZ3JlRDEwVTRQL3hqMy9NbDcvODViMStqUzB0TFV5ZlBwMUlKSUxuZVNpbGlNWGkvUG5tdTFsZ3JlUDQrUzVPeXRqekZ6MWdsKzVqM3lEL3AvTnhuL3lPcnl3ejNzWEEzTFA5dXFkaFpqRWFzNHcybHhkeTNwVnJIYTBHNi9DVzZ0cXhlMlcxOHhvSy9JKzJNTENhUnRlRzNWTldyZjNGa3B4MmJHMHpjTG9idGUxeGYydzRhWjlCZXdwdjIrUG8zR0R0UzVyNWh2b0xCaStQYUpwU0o5aE1GdTlWYmJxL3hzUW1rTzBMSUdyWHJMeWp0ajZCR3R6a3F3bldYWTNvZlZ1dHlCakYxUkZwUW1kNmNlNytHUGsvWDRTMzZzKzdGQnhuSHY4WmpNVnZDd1ZIN1JsTUZNRTBjT1NKTWgzYkVJdlMwbmZMaEZKR0VETEl3WlNsN1lOTUNTazBXV25TSldOWW8wWTErK2ZWQTczMWdkWFRpR1Fyc25VaU9wZjFyVGRqZnJ5OTg2bHhUVnBUNWphV1d1TUlrNXkwQXZBcmlXUWdLdk5VaSttckpkQU5GelFJMksxZjFrK0dRTmczeFF1OUg1U05xN2ZpY0RJV0o4MXorTmt6ei9PWDIrN2wwZ3ZySitWdjNyeVpqUnMzOHQ3M3ZwZDN2T01kZEhSMGNQLzk5L1B3d3cvenhCTlA4Sk9mL0lSRml4WngrZVdYNzlYcmpFUWlUSnMyalczYnR1RTRMdDE5UXp4OS8xKzUrckFjT0M1dTRDTGY0eGxWMm9qRUpGVDNDNzQrOEV0L1JNNDRBV1BSVzVDZHk4YlUxRFVQZVQvcWxadnhOdHp0QjBhbGU5Q3A3dHFSakViRWw3Rnpkd0ZZbFlld0U0amtsRjB3dlkxaHB2T3k0MWpqQmJKMHJ4RVQxazZxL3BXMHp2SEJzMTdrcjV2eHpiU0Y2c3RDQnM5dDNEbFlDTU5FMWpFREN5dUpmY21OWlFJRldpdUVNQkIxeG9mc1BBUTVjUW1xYjAxdEphbTZDNlZnVXRRZWFzc2p3Q2VyajkyeEFORTJ5eCtmbFh0dmY5b0hmemthKzJ0RHRNMUY5YjFTOS9xcmp0dXpBdS81bi9sallyUkZuRFJSUFN2QmpOZjIzd2JNRlN1R3QvWVcxSmFIY1ovNVBzYXNVNUdMTGtGT1dEdzJ1QjcxYjNpdjNoTW9YQ1gyRWcwTFdVWXFVbXNRNFUwcVRaWVYxVzdDUGxraHlNbHg1RTlyaGU3cjhXVk4zUnJtZWFVaEdrZllFZlRJMEtoK2NhMUJXd0lkRVhzbEswM1lNWjhwaHdCV2UrWDNZMmhGbngybjM0b2lQVlZlNGsyRVZKTjBRU0l5aUVRcUtEQkJxYXBOWWMrQ3lWaVhDVERWZmFkZmQyRDFWd0lhREkzS3A5bXljY09vMjhkaU1UNzg0US96elc5K3MranZYTHAwS1IvNXlFZjQ0UTkveUhlLysxMnV2dnBxbGk1ZHlxR0hIcnBYcjlVMFRTWlBub3h0Mi96WE4vNlhKWkUxSERQREk1YzM5NkpmdmlERzBBbktRZld1UnZlOTRnTnM1ektNUTk2SHNlRENNWmpybVhocmI0Vkl4QmVVenc3VVRhY1JUZE4ycWVhaVZuay9EYVdHWUVFQktGWC8rbkhYZVZYcjc4UjU0TE9qQTNVd3UramhMYnVrWjd0SE05c291Y1d5OHlCRTA3VHFYRWdod2JEd1Z2NE90ZjVPUUtGelE4aU9CWmhuZmdkaGpUUG9TcnVJZUNleWpoa1lLMTZWUWpYVytCUEp5YjU2MDdhbmZIZEJlSExWdXY2Q0xUdUlIdGtLUmhUZC95cHFaRHV5NGxtSkNZc3dacDJDU0pRWHM5Q0RHOUNiSDRKb0s2VDc2ak41b3lERnVRc3o3L0JXdkpYWEJIbXM4YkVaNjJnQlJscUJNUHd4Nk9WUU81NUQ5NnlBRjM2R01lY01qTU0rT0dvZFhORitBTWFjMDNDZi9URmlENEMxcUFrY1JrNUVlZkJNd1RRc1pWZ3F0OXhrS2NLK3dzQU5Md1E1RExvTjM4ODZlcENzOUZXOVVrTStrRlZHdDdzT0dDYm1LVzlHTGp3TUVZbU9DcXpSdUVra2FlMVovbSt3b25CZXZCL3YxUmNSMFVRNVl5MTdGelNPa09Ta1dWUjZMTFBlbGUyZ1EvS0U0ZnFzUlJrSXROYWwzTlVDTUd0R0RRSjczWUhWUkdNbERQNzNmZ04zOWhsODREM3ZHSFg3czg0NmkzUE84Y3RudWE3THpwMDdrVkxTMmRuSmh6NzBJVTQ3N1RRdXYveHlQdjd4ajNQVFRUY1ZUY1o3cTltMnphc2JON1A4b1p1NGV0a0lTSHNmR1NlMW54cFFtQVMxUW0xNUZHLzk3UmlIWG9sMThsZnFCdGpJU2N1UUxUUFJ1VUZVMzFyMHdIcEV4NEcxeCt2VW8zd3hlamM3ZG9VWnRHK2k3RHk0ZnVwRWJoRGR0OXBYK3huUFhhYTdVWnVmUjdSdUhZY3AyUFkvKzlvY0xJU2ZUalBLZFJnTEw4YTkvN04reWtYNFJSWFNMd2szNEM4UWRhYlBON1h2U2hLZmswSE9QNkcyWU1PZVdFU25INHUzNGpmVlJSSThGNUdjVm5jaHBaMGNJdHFDenV4RWIzb1FGcit0Z3JFdVJCL3d4aHBzOVZsVTM4dUl4R1IwWmlDb0dsUm45dDBWSzBmQjNHNG5mREFlTXc5V2pIL01HSkZBcWNwLzU3eVhyc1ZkOVdlc0UvOFQ4OGlQMUxXWXlJa0grYVowNVkwL3NybHE3UmdLT2lKay9vVXE5b25XUlROdldVbXpzRUJFZ1kwRm1PSWhTQXRqSEtYakpEcWJSdS9ZZ3BpekNQTGx3S3J6V1VRa1N1U1NLOGMwTkdrTlVWRlZwbUczbTlxNUJmZWxoOHVCdFZMT1VDdUdqUWpEZG93STJwY2ZESHNkUkJXTkNiNG9zeG1WTDFBSzN4YzJMZnBpOTROQzU3WEdraFhUUExNT3JsazduWi8rOGpPMHQ0NE9oTmxzbG11dnZaYW5ubnFLL3Y3K1lsV2I1dVptMnRyYXVQVFNTN25sbGx1NDhzb3IrZmEzdjgzblAvLzV2WDdkTDYxNmhWVGZGbWEwRlZSWXhMN3ZLV0ZBdEFWaHhmQ2UvQkdpZFE3V01aK29mZTdZQk4rOGxSc0Vad1RWOTBwZEZTRmoxc200blFlak50dzdCbXNFUEFjUmFjWlljbW45Z1Qrd0FkMjdwanp0WjZ3SjBtSVhSQUplQXgrck1IeEx3Y2oydW4xaUhQUXV2T1cvUS9ldjlVVXJ3dGNsclZMRkV5cytqZ1ZMeFhvN1A0eWNjOXBlTjN2TG1TY2kydzVBOWEvMzAwVENYVnJQUHhnRXdXQllmb20vN1U5WEFTdFdIR1B1MlZWVlh0U21CNEtGa0FURFJLZTY2NS9Eak82R2d0VSswcUl0c2hzRDRoTWhQNHh6MThjUXJiTXhEbnh6blJWM2M2Q1A3QUc3QWF5NjhuMFhWWUlSV3VoQXRwQXlJQ1VvTVZjaVhoVkZ6NE42cERscHNNT01ZWXpaendGd0I4Vk1kSzIrMGRvM0E0OTFXMXFqbzFIZmVyYW5WQ09UUXZWc1JsalJHbWJQMGpBd3RDWmwyUXlaRVN6bEJta3hJWEdOaXZHaXkrR1RZcnBOUUUxMUNHRDlydGNvclVjZGU2OXI4SklwRmZtYzVBZVBDUzUrMTNzNWFQN29wY01lZU9BQkxycm9JdTY0NHc0V0wxN01wei85YWI3MXJXL3h6Vzkray9lOTczMjB0cmJ5alc5OGd4Lzk2RWRjZmZYVmRIVjE4Y0FERCt6MTZ6N2oxRGN3WTlrWlhQdGlEV1A4YnIzRUV0eU1IN1U1V2dDRTFvRUllQlM5NGQ1UmZLT2hCeDVwUmEyN3JYNE9vVEF3RC9tQUwvczJXaENUa09qTVRveTVaeUtuSGxVZldOZjliUjlLL0wxR1RacCtOWnExdDlidmprUW41aWxmOCtlZ2RQZmVtOXpkREtKMVZySEc3bDdGaXVhWjBESzdJcTBsMElZVmRkYll4VEhoanluVnM3eTJiOW13eThhdVR2ZWlOdDBmK0hQMTZQWnFJWkROTTNZOWlHNlBsdlQ0d1Y5dWRveDNUaUhzWnArbDdIaGhIMTlWQ1V5TFUzbm9WUzR2RTFjRDdNSisxckFtb3ZCTm1hNlFaS1U1ZGpTRElkSFpqQzhTWVpqN3ozdnA1ZjAwdm9vRnArZnBDdTB6allmQURaWTVTb1BDQjBPbFFXbnRBMzZRZXVUN1ZIV3h5TGtVcFFwRFlmT3dGZ0lWa28vMHc1ZjJROFpxbUlJSFYyWG9iem1aOTcxcmRML2hEVGZjd05WWFg4MkhQL3hocnJycXFxcnZEempnQUU0NjZTUWVlK3d4dnYzdGI3TjI3Vm91dSt5eXZXNEtMcGlETDczOENyNzUyVWU1ZUhBN2JRbHc5d1JMdkJ5aWFSb0NpZHJ4bkcvaXJjbjQvUFFabmMvNjFUbnErVEZ6QS82a0lReUVIVWR0ZlF6VjlWeGRuNTJ4OENMVTVnZHhuL3l1THlZaEt5cmxDQUdwTHVURWd6R1BINldtYTI0UWI4M04rOWZMdUp2QXFyUDllR3R1d2xqNm5ycStRV1B1bVhET1QzRHUvUlI2T05EU05mYkVseVRRMlg2TXVXZjVBRmhybnU5OUdYZkZiMzNsbjFvQzRFNFc0OUQzMXhVRk1XYWZqdDd5YUZDajFmQUxEc1JiYTRyOEErakJqY1dKVEVTYTBMMnIvYkUwL2RqUlRYWmR6NktIdGxTTTQxRUFUQnF2NFFOV2ZzUnQ2eHcvdUc5d2sxK1pxS1psUVFRcGFVRHJLSnJHVGpvSXBOcERabGFvYXhZMkNSZk13bFdNdGx3cldFSW9ncmkwcjU4ZW9zbEpnMjFtREdNY3hSOVFMdVRTbERzcFg5K21VNE9vd1o3cVlMVktPVU9sNkxOamRFZWJtSlFkSHQxQUVBTFhna3lyUVB2UnhJVm9ZRTBvcHpja2J5anI4NnJYZFFaVXJ1SytMYzBjZThKSnREVFhCOENYWG5xSnozLys4M3pyVzkvaXJMUE84c2V4NDNEampUZlMzdDdPYWFlZHhwLy8vR2R1dSswMnRtelpRbk56TS9mZWV5OEFQL3ZaejNicjJvYUhoL256bi85TUxwZmowa3N2Slprc0I3bzNISDBJdnpuZ1NCN2JkamNYTEVqanF0M3NTdTJCazhGWWNESEc0cmZocnZ3OWFzTzlxTzdsL21xb1lJcnpPd3pjSE1ZQloySWU4Mi8xKzdWbk9XcG9VeW1ZUkJxNFQzOGZlOXJSZFNjMzg2UXYrYWsrei83WVA2OFI4YytyUE44ME9mbFE3QXYvNU5mM3JFZTJudnNwcXZkbGY0WC9kOTVFcEJWdjQvMTRMOStJc2FoK2VVRmo4ZHVRRTVmZ1B2OVR2TlUzUXFxNzNLeWRIdzVTcHZTNHhvTFFHam4xYUVRZG9QSFczb0p6NTFjUXpYYnRaNW5MUWNzTXpFTnFTL1hKZVdmQms5LzJjNDBObzVqYVUzY3hGTTV6TnFPb3djMm9uaFZqQSt1cnQxZWJza2RqaG1vWDAyMlU0NmNXNVliQXlvM0RzaXQ5Y3kzNEFHakdNSS85TktKNUt0NHJONkhXMzRVYVdCZGdtVkc2WGkrUDloek1JLzhGWThHYjZsOU83MnEwTXpLcWZPaVlwdWVRVEdHNGlvMFBCQ0VmYWtXQVVyaXNtUWdwTkpYSkhncUJFaEpYQ0l5eGdzUmtnYkh1MkE4U01zT0xseHprTXVVTFNoRU1uWkFwV0FYeWpVV3pPS0lDVGtWdG9BMzBzdjBBNFVBeW9wRGRKSHlOYVIxWU1RclBSTzl2V3NHRzBBeG5QRllPVGVUZlRoeGRJL2NiMy9nR2wxeHlTUkZVQzRENTMvLzkzL3pnQno5QUNNRkREejNFZGRkZFIwdExDNU1uVDZhenM1UHJyNytlTjc3eGpiejFyVyt0ZWR5WFgzNlpmRDdQekprelVVcXhhdFVxSG4vOGNWYXVYRWxQVHcvejU4L243VzkvTzdaZDIvVys2SkRqZWZqTys3amdZR0IzZGVHVkMzYXpMNWJlUGgvckRWOUVIL0ZoOU1DcnFMNVhZR2dMZW1RYnVGbEUwd3hFNXhLTU9XZU1xbE9xTnR4WE5QUDZKWjZpcVBXMyt5Q3g0S0xhNzdYZGhIWHFOekRtbllPMzVsWmZMaTgvNU12VVRUOE80NkIzakJwTW8vclg0ajcvTTMvSXZwYjVwdnVxbVRZaXIzRWYrU3B5MmpHamx0MFRFdy9DT3VNN21FZDhHRy9iRTlDM0ptUko5SkF6amgrZnZyR2JnWmFaZmpXYk91dHMxYk1TMFJKSHhDZlVNYWVrVWV2dWhIckEyamF2Sk1wZkVHMFFzbjVlYmhrcmxpQU4xUGFuWUJTTlhlM2xVSnNmS1hjSkNPbW5JTlVMN2tsTzJTVzFMam45ZUNLWFBqRCtndHlwSGVSdmZrOXdmVmxrODNUa25OTVEwVGJrdE9QUVIzNFVQYlFKdGVNRlNQZjRRV2ZLUmJUTVJFNDVFam56eFByM20rN3g3N2RlMFlaeFU5V1EvMCtVd0tJby9xRExMYnkxcFFJTGprUmRwUnhrb2htUkZqdGxGRk1yM0xvK2ZBR2U1OWRrM1krYVNnK2lobmI2QXZ6aG5ndE5OWVpXWkF5VEhaRUVwcTR1a3FkcnVnVXFWSlNLV3Z4KzlScFpNUHNHbGdHbHc5SEYrMW02alNrMWF3ZHNFaDB6T1BLd0pYVzNXNzE2TlJzM2J1UnpuL3RjK1h1WVRMSjA2VkpPUHZsa0FKWXNXY0tVS1ZPNDdMTEwrTkNIUHNUMjdkdjUvT2MvejYyMzNzcUZGMTVZczNMT1F3ODl4RC8vOHovVDFOUkVNcG1rdWJtWnpzNU9GaTFheEtjKzlTbU9QZmJZTWlIK3luYjBNY2Z5Z3h0c1BEZUNLUnhjdlJ2TE8rVkNvaE01cFNSZUxtSWRpRmpIcUNIK2RRKzM1UkhVK3R1RHZGVmRNbTNtUjNBZXVCb3g1UWhrYzMxZnRweDFDbkxXS1VFeGJtOThwaTN0NGQ3N0tmVEFxNzdneE44N3FCWmVtbGdIdW44TnpqMmZ4SDd6SDhZTUpoSnQ4ekJIMFJnZTg1VDVFWDhTbjNwNEhiUHNadFRtaDJ2bm9ZYVlqK3BaZ1U3dHFFcC9LVXdreHZ6emNMYzlEaVFDY1locGlPWlo5U2ZaMExRa0lzM29IYytoTXpzUnNkcmdyamMvZ2g3cEtqZWhHelk2dFFPZDZVTWtKbGFmSmRxMmE3NTV1d2s1VG8xcG9OeTBybHhFWW5KWlZMMUlUa0VrcDR5eXFCbmxuVnQxSGJwbmhXOU8zaU16U2VrWGY0RmFydmFERENzQWlUcXN0NEFQa2pLSHJSQklCSGtweVFwSlRMdWpNOWIwTUhxNEh3UHdtcHYzem0zdGFYTmRkR29RRVdzS0xWeXJweHRQU0hLR2hVa2dzQkZpcW1XanVaNjhZemlQT1BESmhsT0taYURTNUpmQjI4OThyRUpvdG8xRVNMWk94QnlsNXpkczJFQkhSd2R6NXN3cCsvdGxsMTNHNFljZnpzYU5HNHQrMWNXTEYzUDExYjRQc0tPamcvLzZyLy9pQXgvNEFOM2QzVXliVnUxRE91R0VFL2pTbDc2RVVvcVdsaGJtenAzTGNjY2ROMjYvN0pTSmJaakpUcllOWlppUnpPRzZjcmNtY0tQOVFFUnM0cDVqd1VnWHpuMmZDUmhJZWJGeEVXMUREMjdBdWVHdDJCZjl5UTlrR1pVU21PTWJIbDRlNTQ0UG9kYmRIb0RxUDFMendWV3R2WVg4VFpkam5mRk5QNzk0bjV4S2diU1FrdzZwT3hXcDdoY0NYKzZrK241Y2FVSitFUFhxWFhXanQ0MFpiOEFSRWxFMENkYlhmbGJEVzhyWnJCbEg5YjZDM3JrS01lTU50ZmZaOUlCZjFMd3FIYXorUklUMjl1bDZUR2Y3aS8wc2pDaHkwcks5Yzl5ZTViaVBmY08vVjdFMy9aRkJXVElaMHJIVm9ZbzFaWDVYRVFwWENza2lpdktBS0ZOb1JxUkp2MkhUNURya1IxbWNDVHVLMnJpRzNPTjNvMU9wUFZpZmFveTRqWXpiOVo5dklKMWt6RHNVMFZKL0h0UUQzZVVWbUFMRjFyQ21zUVN5MG1SbkpPNUhQMWZrckpiMWJ5aEFTWWZOd1dIVGNTRzlKa2l4S1VRRkMwQkpXYmZHclBsNlRscTJLWmpST1czVXJmTDVmTTBhcXdDTEZ5OW02OWF0L00vLy9BODdkdXdnbVV4eXl5MjNjTjU1NTZHVTRvOS8vQ01qSXlPNGJ1M1YyY0tGQzFtNGNPRnUzNEZsQ014WU00TlptTkcwbXhPM2tJalpwKzk1Ync2K1N2N1dENkMzUHdrMUoxNk5pSGVpdTE4Z2YrUGJzTTc0N3FqUnZlTmFxZTk4Q2ZlaEw2SmV1Y2svNXo5cWk3YmhyZm9qZXZCVnJGTytocXdES0x0bnVvbjY0MEM1aUZpN0g3aFVyNyszUHU3blNvNFdIQ1ZOUHlKMzgwTjFnVlcwemtGMkhvTHFmbkZzTnBIdUxkZEpGUktoUGRUV3gycjJnL2J5ZU51ZVJDc3ZBSUJ4Y2hmRExpbnFpSDFjQnNXS0kyYWZzZWVteVMyUDROejFNZC9YRzIzWmc2QzFBblNHR0tjb1NCZklrUFJlT0VvNGlISVNGVXBMWlFXN0MrQXFFVUppYXNXSVlkRm4yTXh6UmtaOUhLSzFBMi9OaTZTKytQNDlza0JwRGFwSm9scEdVVjdTdnV4aC9HTS94enkwL2x5bys3c1FJU3VJd0kvNExUT1JhNDBySlJuRENtcW5pckZIWUNEMlVQREo2ckI1V1ZUa3dGTHl2VXAwM2VDdTE3ZTZqZmFsQWtkN2paTEpKS2xVaWt3bVUvUDdhZE9tY2VXVlZ5S0VZTnUyYlh6bU01L2hnZ3N1NE13enorVFdXMjlsOXV6WnRMUzA3Tk43MkxPRmFaQnFVMWhSNzdKNUpJUDN5bC9KLy9saVgzSXVOcUgrUldrRmlVbW83dVhrLy9JTzNLZStoODcwN3ZvOTV3YnhYdndsK2VzdndYdmxacWpuN3l1Y2N4UnpzckNiOWo1VEdmT2N5VjBTK1VFWWlNUVUxSTRYeVAvbG5lUnYvNUR2aTl1VDlCQXZqeDdjaE43MnBHOWRVSTVmMUx5T2pDR0EydnpRT0hTSWZjMVl0ZU1GdEZzbnFDZlNnbkhRT3lFLzZCZGtUMDZwYjFhMW02cFgvV1ljdGJGMkdwdnVmaEhkdmJ6YXA2eVZMM2hTeDF3cTJoZjQ3b3RDV3BqMll3UDJHdjhMSzNZSjRXdjdPcnZuUTlUWmZyeW4vNWY4WHkvMTVSSWp6WHRoSXFqMUhDc3R4S0daVW9veXRscUZIcUk2eDFJSWdTTU1jc0lvMVI4ZDh5cDBNZmhwZHo5RnNLcjMwYUNsQVluUjUybWR6MVJVSGlndzFsQzNhRTNPc05ocHhURThyeGlRVkF4TUNqNEYvMmxWZjJsZDlLY1d4NkVvMzA0WDFKcEdRYTdYa2JINlNiZ2JObXpFMWRRMUJ5OWF0SWhjTHNkTEw3M0U0WWZYOWoyOTk3M3ZaV1JraE50dXU0MU5temFSVHFlNTVKSkw2TzN0SlpGSTBOeThiNkpVRlFMY05FMjdMUVlrd0lqZ1B2WU52RmYraWpIL2ZPVGt3eEROMHhGTjArdUtKdWhzSDNyZ1ZYVDNDcncxTi9rVHJ2SjhuNWNZUXd0VWEzK1N5UTNoUHZoNXZGVi93bHh5S1dMeVlZaTJlWFVsQTNXNkI5MzNNbXJiVTNocmIvV0ZBcVRsVDVTak1Rd3o0cXNyRlhNQWRSbTdVanRmcWwxZ2U0OVlZQVNkMmpIS09WOGV1MEJ6MVpKVytCR2ZiZ2ExOHZma1g3a0pZOWJKeUJrbklEb1crRUlTc1FtSVNGTTVxR3VOemcxQWRxRG9ZOVE5eTlFOUsvQTJQZWhQN2xZYzNBeXllVHFxWjBVTkVYZ0JneHZSUTV1clJCaHFqaW9yZ1I3WmpscnhlOFRVSTZ1bGFRckJaWFp6a0J1WVJXMTdxcVpZdlI3ZVhBM21aZ1RWc3dMMzRTK1hWVk1TMFZiVWhudjhpT05LUDdCaFEyNFF0ZUZ1U0V3dXZ5WmhvTHRmTEJaVkx6THYxSGJVanVmWkplV2tPcVpOUnJwS3BuS3RjTy81T0dyMWRSZ0h2QkhSc1FqUk1zczNzZGVKeHRicEh2VEFlbFQzQzNnci91QUhmNW14K2tGa3V6a2RGT3F2RmtGVGxDL2laU2pBeGsrNEhJV0toWVg3MGI0aWtiVG9OeU5ZNHhHSlFLT0craUNmcjUzYXBSU2lZeElpbmdEUHEwL0dMWW13UlAzRmJCQVJMaWRNSDMyKzdlK3FpbDdYRmQ0RmdjWVRncHdZUFlDeW9KcFVxbTh1UXJLRzJqZjNGdG1ycmdnc0RnUWtoS2lmbWwydjVsNzIrN1BXQVhQM0ZheEdESStudDlyOFpOdnhmUHVIdnlZaVhhdzYwYmRmKzlyWGVPcXBwN2poaGh0R1BlYWFOV3RZdTNZdE0yZk94RFJOcnJqaUNyNzYxYTl5MGtrbjdaTjdlT0RwVmZ6c2MrL2cxeGVPb04wY2p0NERBNENiUldjSEVHWUUwVG9IMFRJSDRoUDhsNzFRTHpVMzVNdktqV3hEOTc2Q0h0N21UK1Iya3QwT0VYQ3pRVUJKSjJMQ0lqK0lvMmxhQ2RSemd6NFlERzN5MlVodXlKZFp0T0s3TnJFVi9IUmxJWHltSHdtcVBmYStlbzRvVFpMNzRweGErVUw5K1dHRUdmTjkxb2xKdnFKUnRMWGtxM0hUZm9ScHBoYzl2QVdkN3ZXdnk0cjd1ckpoYzJraEI3WksvRlFHRWJQak5aTUswSUZFb0JtdFRtV1JCa0lydEZaQlA4akFMeThxOHBjRHBxbHJsWWxXL3IyRSsxRjdZQ2Y5OFZFMWNRc2ZnSVhoNTErSHIwa2FRYkNjcWg0MzFMaXVYVzFTQnVaR3IrejZjZExvYkQ4aU5nSFJQdDhmOTVGbVJHSkthZXlrdXRINUlmL1o5YjZNVHZjZ0ltM0IrTjg3TERWcXVTd2ZTSExNbzR1Sm14b2hReVhpUXJLRmZnR2JnbisxNGpzWjhyMFdmaGRCbXBIMHE5MTR3aUJyR0h5MSsza3U2MytWSGFNb2d1bDhGdGt5QWV1TXR5QW5UdkdyMkZRKzBXaVUvSzIveDF1N0FwRm9xbStWYkpKRW0wY3hCWHN1eEp0cCt2SnQ5WDJzeWlQemYvOUsvckcvRklPWGhBRzVZVTEyVUJVeE1lSG0yUlJ2NVVOTHoyZllqR0R1b2xoTndYd3NkQWgrUlFsSXkrWVQvK2Y2WnovMytYbjdEV04xbE1IODFoVER6Mi9raGVVcldicG9kbDFnL2ZqSFA4NmIzdlFtUHZheGovRS8vL00veFRKeGxXMysvUG5NbnorZi92NStMcm5rRXM0NDQ0eDlCcXJwZEpwSEgzMkM5a2dlYVdYSk9YdVk0RzVHZmRhalhmVFFGbFRmV244aThwelMreXQ5YVRtTUNNS01JNXFtN2dWMkYvVW5GQy9uRjgvMjhyNDVUb1hPS1MxL096dUJTRTdkeFFrbFNEYjNhcGp5SFY4UEdjUGV5NmEwQUZqeSsvQ2NRdnJtVHJ2SkYrMUlkYUdITnZuM0dtYWNRWTZva01GemE1cFNIOUNkVEoyU1pVRSs4N2dMMHV1aStJT3Z6MXVkZEtDTHh3dEF4ODNVQVNXckJvc0wvRXoxMkZyTnlTem9keThQdWNyQzRMWHVyekJ1OWtieDh5Q2xxR2hKQ0JZOVZnSmhKVUhsZlV0QjF6TSsrSWJmT2NNSXhrc0VZY1dEOFEvN092SzlGaGNxQUdmTmVzQzZzaElPUmFaYThGdWJLQVpsbkY0ak9qYmdCRUw3OXJudndwdzZvK2JkQ3NCYjlUemU4aWNnbnR4dDM3ajJQTXoyS1dDTkR2U3FiMndsS0FsNFF0QnZ4NGtxcjNZa3YxWmxyTHlLeVJaQVZJZENtd3JnV29QVjcxZW1ZS1doSlc0eVA5N0xrMDg4emhGTEZ6QTBORlRUYkJ1SlJQalJqMzdFaHo3MElTNjg4RUkrLy9uUGMvamhoMWVsd2d3TURIRGJiYmZ4L2U5L242T09Pb292ZnZHTCsrVGFoNGVIeVh1YWRTODl3Mmt6UEhBVkdtTXZUUUNHditvZnI5YnVYbWthREJzeHJvbGI3OTQ5bWNhbzV1bTlmait2NVRtRkVVelNlMWd5VEpwN1hzdTFDaFN0Y2ZTVjJFVTk0ejFvdTdvNE1JMTlQL2FsRlJTNzJCOWF5RGNxUjdPcGhDSzVLNHB3bHkwZUtvOGdJQ3NNVktsZVN4MTNnbzBlN01WYnV3STVkUVo2cUZvWFdEUTNJNXBhSVpZb1ZnamFYZXNQMFlTL2lLa0xHQ3FRY0pYbGRoTlhsNTFhQVptZ2drOVFtNmJtb3JqWVIxclVudGNxZzRNTC9sV3R5M09LOThkNnJNSTBPWEpDTDljOCtUanZ1ZlF0cEVaR2lFUWlSR29JTnMrWk00ZHJyNzJXNzM3M3UzenFVNTlpd29RSkhIYllZYlMwdEtDMVp1dldyVHo3N0xNSUlmajR4ei9PeFJkZlhGcDh1UzZlNTVVZDk5bG5uK1g2NjYvbmlpdXVZTjY4OGVjZTVuSTVVcWtVRzdiMjBMOTVCY2NkbjhKei96NGsvTVE0b0xFODYrc2ZJaU8xMGY2TzI1Nk9RUkU2eUg0L2xuZkhreVRLSTV4RWpYc1hvaVJ0YUd1UGJpdktvR2xoYW9WVEx6ZGJTRi9wS0o4ZGZZMGRqWTBPaU9OcG5vdWNNQTFoaitKZWNySjR2ZHNRWTV4TENjR1dhQXRLQ0F3OUR1bkdnaWFobG9TZHdCcnRmeFVPYWlvb1dHbjgvVWFwdi9MNlNocDZpbE1XMnZ6K3hvZTU0Wlo3dVB4dDU3TngwMmFtVFp0R05GcTlnbTV1YnVicXE2L20wa3N2NWVtbm4rYlpaNTlsKy9idGFLMlpQSGt5SC9uSVJ6ajExRk9yZ0hsa1pJUi8vZGQvSlJhTEVZbEVjQnlIbFN0WGN0QkJCKzFTWUZNbWs2R3JxNHVKRXlmeXUydSt6NUZORzVqVkFUbG56L3lEdHFHUkFuSnVVSzVJK3d0MTA5UzRMcmlxZFB5bzVhL1FjcTdZWlJlaEZSVGpjZXBZNmd6cGI1TUxySkVSUytONHdvOUxHT05jVW1oczA0OWhjSlRnNzdIWmhrWkt5RG1GY3NlRmZ0TVlFdkl1MkFhK2VieTZDQ1NlSzNDVUptcjUvWmwxeTZjNmdTWVNFTWljQTFvTGJOTi85bGxYMUFRRjIxQlZBU3g1VDZLcWpha0lJR29vTUVUWjZraTVrTi9Qbm9uR1YxK3pUVW8rMU1EMVdYZ1BUT2x2ay9mRWJvR2lKVFdHSWNnNk9yRHU3Yi9qVWxOdXhRVVFXZ1FCU2hWaS9KUlVnTXNXRCtIdGRDZ1lwK3lIUUFXZjBTMExKcXB2QjZwL1ovM0ZqUUk1WVFyQ2p2aU1jcmYxbnJXLzcyaTFFRHdYTXNObEN3a1ZoQWhVeG05NU1oQndHS1ZBU2pGanFaU240NjlzUXRGUVBuNFdncGhFbVphdzFxTXYrVjVYWUhVOFNWTVRYTEVzeGRkLysydmVjUHpSdExjMHMyWExGaVpQbmx5bHp4dG1yM1Btek9FdGIzbkx1TTdUMU5URVAvL3pQN05peFFydXV1c3VlbnA2K1BuUGZ6NHFVMDJuMDJ6YXRJbFVLc1hoaHgvTzhQQXczZDNkVEo3VXllMzNQYzdMajkzQ3B5L3dLeTNzeVVwWW9ubXhyeGxQQ1paMGpDQ1ZoelEwZ3ptTDVkdWJXZENlWmtJa2kxSytrUGJEVzF1SW15N0xKbzdnZU9OYjRwcENrOWNHMzMxdUltMFJsM2N2NlVlNWJwbFNWQ1RtOGZpbUJMOTRzWjJ2bnRpRklTVS9YTjdKK2JON21OZWVJK2ZVUDVjaE5NT3V4U3M3azB5SzU1Z1dUNWRrdi9hamljc1VHc3RRdUo3QTBiTHNQWllDMWc0bDZjK1pMRzVMRVpVT25oWVlVdkhxVUlLK3JNWGMxaHd2NzdEcFNRdWlKaVFqZ3J5cnlUcVFjU1ZMSnFTWjNlcnl3SlptT21JZWk5cEg4QnlGQ2lZRFV3cWU3R3JHMVpLRDJrZEltSGxlR1d3aTYwb1d0NCtnbFNvQ2V1RzFIWEZ0SEZXYU5LVFEyRkloS2FuR0ZPOHRBcW1zellydEp0dlQvdUt5UGVLd29EMUhXOVRkcjU2SkZPQnB3YlBkU2JZTW03Z2V0RVVjRHBtVW95M3VvajJQMnpkMDhPVDJLQjg0cEorSmtReXVrbldmclMwVmhxSEpCckVPdHFGd1JZUXZQZHpDYmFzRml6b1Yzemxya0lUaFA5ZjlFMTM5cDY2ckZReHJsam9yRStYWEZRdnRLbzFjLzNkTEszWWFVWWFsUmJPWEg0V3grcktHb3pOV2pUQnRkRHJsTDFwTWF4ZHZXSURub0FkNmtLMmo1OEdyM20zVnEvc2FlaU5LQ0xvaWliS0ZjYjB4RXlhc2hBcVpFdzVjcW1VL0NlUU85MHNmYStHaTNZemlyRU1zSHRxOGtxOTg2Ly80enBjK2laU0NycTR1V2xwYWFHOXZyeWtPc1N2Tk1BeU9QUEpJamp6eVNPYlBuOC9QZnZhem1xQzZjK2RPMXF4Wnc1TlBQc2tERHp6QTJyVnJlZC83M3NmQ2hRdnA2dXFpdGJXRjdUMERmT2Y3UCtMRFMvdVkzaW5KN1lHY3BnQnNVM0RyMmpqM3Yycnk2emNycGtZSElDWjVaRjJFZDE0ZjRYOHZNUG1uSlhrOFZ6SGsybnprYjNGT241dm5zSE9HY2NZcGlGSWdCSGV1a1V4dk5ualBNc05mQVlZRFFDT3d2bGZ3c3ljMVh6aFdZMWlTSHoxcGNsQ3o0SURKR2thSkliRk1qKzNEelh6aXpnVHZYbWJ5Z1dWcHNzNytOV2RKUUF0SmR6YU9KUndTcGxNRUdpbDhzWS9yVmlXNDcxV0wzN3pacFNtZXczTU1MRnR6MDVvNE42OHkrZDRGTm45YUhlR0pUWnE0cGRrNTdCQ1BHTFRFRERZUG1YejJPSWVaYlpJUDNtUXh0VFhHN3k5MG1SUWJKdXVZMkZLeExkZk1CMitLRW8yWS9PNWlsNVpFbnQrdlNMS3BYL1ByTitmd25HeVI3ZHVtb2o5bjg1WEhPbmxxaXdJTWhuSncySFNEYjV6U3d3UjdoS3hyRkJkT1ZsVHgzUFpXUG5sbmtoMGpnb1VURlZwck5nODNjOFhoRGg5WXNwMjh1LytZUXlPbXkrcUJkajUrUndLdFBHYTBDbDdlR2FjOXJybjZEY09jTUwrUDVkMEdmM25KNE5JbEZqS1NxZjkrQTFsbE01QXg2WWhra1dpRWFmTHI1NXU1NWdXRER4NERDOXBkSXRMZDd4WjhZNXF4YTczTVlqVDJMZXJ1WE1pOHlVa0RkenpzM1k2aWU3dlFuZzZpNlNzQzY5dzhZdGFCR0FzUFFhMWRnZXJlaXJBamlIZ1QySkg2azVHVFIyZUcwWmtSUktJRlkvWVNqT2tIam40dCtTemhxUGdDdHRXUzY4MGE0d2Q0WFF0Y3h3QXRFZVN5amtwbVh1L0I0eWlKeURoOCtqU2J5Nis5am0vLzMyUSsvOGtQc25IREJucDdlMG1uMDdTMHRORFMwckpYVERuTnpjM0Y2SzZYWDM2WlRaczJzWDc5ZWxhdlhzM0tsU3Z4UEkrRER6NllDeTY0Z0J0dXVJRUxMcmlBdnI0KzR2RTR3K2tjWC9qcS8rUHM5aGQ1NnhFR2J0cEY3MEdLVFdIVmROeTBGTDkrdHBtVlhZS3BDeFhhaWJLOE40RXRYSjdkYXZDdUJXQ2JIaTkwSlluWkJxZk8wNUF2bVAxMDBmVGpteUw5S2d3eFM1VVdxcmJDeUVwc1F4RXhTblpnVTJwTVUvc2p5L0tJbW9xWTZYK3ZsR2JoSk1tRXBBUVhJb1pDbUxxd0xDUmJ3V0FGaFdUeTJnT3U4bG9kUitCcWdVUVRNUU5UbmVHL0xWbEhJZ1hZcGdhcFFmbWgra0pxOHE3RVUzN054SWdaSEJQQUUrUmNpZEpnU0YzYUYvQWNpV0VvSHQzZXhvK2ZiK2ZUeC9henFLT2JYRFpTTG5JbU5MWHNEMEpvY2tvUWsxbis0OWdVem5FR08wWk1ydnByaExNUFZIemdxQ3lwckdaU05NL0dvU2d0RVhoMnErYkJEWkszSENvZ0R6S3F1T1ZGaXpXOWNQUXNoU0hHT0tjQlBjT0tCOVlwenA2WFlWcFRodUdNWkhxYmlTM2NJbnNUYUN3TEh0all3UWR2U1hCWVo0YXZuWm5ub0E0UFQ4RzZBWnRtSzAvZTh5ZU5hS0ZmaFA4Yzg2N0FVOEx2TXlONERwSml2K2RkZ1czb1lqOHJWNUx6U3Z5cCtGeURXU3J2Q2p6dGZ4K3RlRDRadDl4SzRDbC9rdnFQazEzT21wZG1aWS9Kdjl3YzQvUDNKN2h6VHBhRTZZL0pnaUU0WWloRWFBeTVyc0R4QkhiTTRmcVhKbkRuV290Zm5yZlo3eFZQY3VjNmk3TVBWUHpyS1RzaGxTR1hqZmltZGFNVWdPSzUwamVUYTRKekJZTlphbko1U2NRSTVUQWF1amgyRFFIU0RFd0puaURyeXRjV2FrWFZURkxHYWtXZDNTd1VmV2FFRVduUnFiTmpMTWlGdndCWHRRc2Q2SHdPWTlaODR2L3hRN3dOcS9FMnZJeDYrVG04TmN0UlhadDkzNnNWQWM4R1I2RnpmblVhMFQ0SmEvRlp5Sm1MTUdZc3dqandDR1RINkFwOHFtODdXaWxFSVNwWUJKbGdxcndmbEpEc2lDUlJvblovMU9LaFZlQmFaS1FGWXE3TEN5RVVJVmp2bno3V3dnWG1YWk5rTk04M3puTDU1NXQrd0xlYmtsejE3cmVRU1kvUTI5ZEhOcHRsYUdpSXBxWW1tcHFhcXRKdGNya2N1VndPd3pCSXA5TklLUVB4aVExMGRYVXhORFRFME5BUWc0T0RyRnExaWcwYk5uRDU1WmN6TWpLQ2Jkc2trMGtXTDE3TXhSZGZ6S3haczVneHc2OWs4dEJERC9ISUk0OXcwVVVYc3IyN2w0OS81aXNrdHR6R1p5ODFVSGtIUnhsN3JyNm1OWXZhTXFDVHZMZ0R6bGhxME4rdmVXcWJ4Vkd6TkpzSEhQcHpra2tKelJPYkJWcDVIREZsQkNRczcyM210clZ4aG5Jd28wVngwWUZEVEl6bFVFcnphRmNyTWR0Z0pPTnkwNW80NzE4MlFKT3RRaTRVajVGOG5EOHZiK0dWWG9ObFV6MTYwbmwvTWl4TW1xYnY1OEpXck43WnduV3JtOGk2Z2lVVDgxeHk0QUJhZVdVbUYxbkQ3U3ZSYUNtNWQyczdEMitPa01uRGdva2U3MXcwUUZUa0dNeEhlWFJyRXpPYWM5ejdhZ1JIVzF5NWRDZW1VRnl6dW8wWHVpd082UEE0ZWtxR3pTTXhqcHcweUlSb0ZtRWEzTEd1alljMng1QkNjOXJzRENkTkg4UlZDb1RGWDlhMjh1UTJDOXNRWExKZ21Ba0psMSs5Mk1UajYxTGMwQmJqaUtsVE9YYlNBSEhUUVJVV1I0R2ZPV0VGQ3cwRTJCNFJBelFTQThYa3hCRFltaVlad3pUalRJamxtTm82U0lHaVA3aTFpWTRta3lPaUhnOXZpWFBKa2p3Uk00M2pKWGgwazhHU3lUNFk3RXdKWnJicFVsWkUxYmlRYkJxTzBKWXcrUEpaSHJRUFFjYUFqQ0NYTW5BOFA2L1JsTEF6SGVHanQwWlkySmJsZCs4Y0JwV0d0QUFERHBta3dKWGtQWU9zc3JoN1F6UFBkVm1rSGMyaGsxMHVtaitJYWVUcHk4WllzU1BKNUhpT0J6ZkhXTmNyT1c2R3c1c09IT1NCVFFudVdKOWdRc3pqd2dVcDVqU05rSE1sa2FqaWhhNG1ibDZiSk92Q2trNkhTK1lQWU9CaUdKS0hON2R3eDZzeEVKTGpwbVU1ZTNZZnVRb0FNaVRFalR5b0VRNmFvcmp5cU1sODU0a0kzUU94RXREaEw2b2UzdGJHSTF2aXBQS0ttUzJLdHl3WXBEV2E1K211Q2Z6K2VZdXV3VHkvWGpHRitSMHVQU25KMWdHRlZwcHJucDdJaWRNR21kYWNadm1PSm01ZW15Q1ZFOHh1VTF5eVlJaTJhQXJYTlhteXU1V2tyZGc0WUxDOE44WUhsdmJ4WXErTmtDWmR3L0RRNWlnTEp6aThhL0VBcnc3Wi9HNWxNNDdTWExRZ3kyR2RRK1FjUGFZSmNsY0FWRFBlTUFwUmFSZ3VKNis2RkY1c2FrMi90RWtKWDZSK2ROcGxvZ1o2ZldacHg5QzF6RlphSXlmUFJNNllnLzJHYzFCRFE2aWQyMUdiMStLdGVBcDMxYk93Y3pWeTRreXNnMC9DT09CdzVMVDVHSlBuN3BJd2pCN1lVWlhHVlZSUktsY2RKR09ZZ1kzS3E5bFRlamRDNGlxZmhTaEVDT3Y5RkZnTHEvWnN6bURlWk0xM3prbnhrZDk4bFIzZFBmejdoOS9IN0ZrejJieGxLNWxNaGx3dXg4REFBSkZJaE9ibVptemJ4cklzbGk5Znp1Yys5emx5dVJ5VEprMGlsOHNWQVRPYnpaSk1Ka2trRW5SMGRIRHd3UWV6WmNzVzN2U21OM0hNTWNjUWo4ZHBhbXFxYVc1T0pCSklBZHQ2QnZtUEwzNkRpVHYreGpjdTlCUGRjNjZ4VnlSTmxkYTB4d1JIelJDOE9oUUZGV0hEZ0dMSGtPS3FZMDF1V2VteGRqRE9wQWtlSzd0Z1pxdG1Rbk9PZTllMjg3SGJFaXpxOUpqVG9mbk44eFkzcjI3alIyOGNaTWFFWVg3L3ZPU1pIWEVpaHNJV0x2bURGS1lSRENoVGswOUgrTWdkN1R5MkNjNVpMSGhrdmNsam13MDY0aTRqZWNHQmt4eis4dzA5ekU0NmJPeU84ZTkzdDlBU1VVeEl3dU5iRE40ODM4QVM3cGorS3ROUTdNekh1V0YxRk1mVnRDWTEvL2U0WUhWUEcxOC9iVHZack1WM0hvK1JjU3g2MDVJejUzdGtkWVF2M2hmanJuVVdwODdYUExQVjRNZFBKTEJzbTUrZmwySmloK2FuajdieXYwOUVPSDJoSnBjVmZPUzJKRjg3VFhIdWtoUy9mS0tGLzN2SzRxUzVncTFEa2cwREVrY1pyT3Z4aUJxS2g5WXBobk1HUjNiNnpLT2dvKzBIS0duVzladE15c1hJT1pKSTJtSm5XbEFJRjFLdWdRUlNqb0hXZm1BTmVRTW5yN0ZNaFZZd0lhNVlORkh6cTJkTk52VkpaazFWdkxET1p0MkF6WWVQR3VSL24ycGlJRXRkbmRIQ1g3ZWxZM1FOdXZ6azZTaHptOW81WXFwRGE4d0pWdENGYTlhOHNET0JoOEVIanNxQm15YVRNckZOZ1dFYnhiZmNKRS9YU0pUclg3S1ptTkI0R3I1MG44V213VGIrN2JndStvZWlmUFhCR0huSFlsNkhIM2oxMVFjczdsZzNrWTBETUtsWjhaZVZGczl1YStMSDV5a1NzUlQzdjlyQ3gyNUxjdXdzUVh0Qzg1LzN4ZGcyQkI4L2FZQW4xMFg1OU4xeGxrNEJLUVdQYjVhY1UwZHVKbVpwaUdxUU5sdUhEUnpYSTJxN2VOb3UrdkMxc0xqaHBRajlPWmplcXZuZDh3YlBiR25oaCtjUDhzeFd3YVoraDZnQjE3M29jZTVDZzQzOWtNcDVkQTBKYmx6aGNjUWtrN3RmYmVYanR5ZFpPa2t4ZllMbXAwOUo3bGpUeHMvUFY3UTBlOXo2YUlTL3ZDU0ptSktsVXpTbUtmbkYwNUo3TjhWWk1rblJIRlhjdXRyaXJyWHRKQ0krMDMyMVYzUDdLMGwrZXA3TG9kT0d5R2JNdlFPcnV6eTNGTFNEUi9rT1gvSXZLdzN5VW94OUNpa2hrL0tWbDZLSnVzUkFaMUtRQ1lRVklsR011UXN3NWk3QVBQSTA3SkVCYkRkTHRHMENJcllIS1lUWlZEV3dCb3kxRk96bHErRjFSNXFxRmpoNk5QTjZGV3V0Tmd1THVxc2NzZjhDYTVGNXBnVUxweWorK0U2UHo5NytZOTcrM3VWODRWTWY0WVNqRG1ITDFxMWtzMWs4enlPVlNqRXlNb0poR01SaU1lYk5tOGQ1NTUzSEF3ODh3TGUrOVMwR0JnWklKcFBNbkZtN2dzdTZkZXRZdUhBaFU2ZU9MckNRaU1mNTg4MTM4ZHMvM3NESlRjL3o3MitWb0QyeWp0eHJPdUd1SjdEamltT25aYmhtWll5aFFZdm5ka2FaMWFLNGNNRXdmMzdlWk1VT2t5VVQ0MnhMUi9tblE5S2tNd20rOFVpQ3haMHV2MzFUTDJZa3c0cUQyamovZDgxODg3RUUzN2trUlRycjhuSzN4N2ZlNlBGUGgvWGdwR0VnSTBoYS9vVCsxN1hOM0x0ZThyOXZ6SEwrd1QyUXQvak1QUlA0MmVPQmlkWlFMR29lQWxQeStObzJYdWtWM0hWNW1wbFRkNUxmR1VWcGpUZU8vSUM4WjVDVVdiNTdlaFlqNFVEYzVoZjN0ZkhGZTB3K2VyanRCOXprRk5zR0ZYOThhNXFsMC92NTQzT2QzUHh5bEsrZm1lYkNnN3Z4TWhFK2VrYzdEMjcwaUJtYTdtN2J2OCt6UnpqNytHNXdMYjV5WXdjL2ZiYUpOOHhVM0wzZTVzQ0pnbStjM3dOT211eElsS2psY3RWUk1mNzNpUmpmT25lSXhSTzNrOHZZNUR4WnhMZWtEVjFERGw5OHFJVjRwQjFYYVd3cFdkZWRJV2E0R0hMc0dYRm5HdEk1eFJ0bXdYVXJOQTlzanZIdW1RNjNyWkZNaUd1V1RQVDFoYTB4d2dZOEQ1SlJnK05uS2U1YmIvRHRyblptdENpK2Z1b2doMDBlSnBzdjVEcHFWdStVdE1maGdIWVBjaExiRmp5OXZZbnJWdG9rSXpDenhlT3l4UU5NVDZUNHhma2pFSGZBVFBEcHY3VHkrMmZoNDBjSWhOQU1aaFNMSmlwK2ZsNHZtSnEzWE5QT1RhdHMvbkJKaWhNWDlYSGpzKzE4OG80bW50eHFjZEpzeVJmdlQzTGVRbzh2WGRRTmhzT3hVenI0eEYwdFhMZ2d5OE5iNGtSdGd4K2VOd2hXTDVuQkJObWNyR0hOMUR5eDFTYnJOdlBDZG92dlBXYnd6cVY1Mmx0U1pGeGYvY3ZUQXVFNWZQMlVYaUpORGtRbGYzbW1reS9jWS9QbzVqaFhIcnVEb2Z3MDdsc251T1ZkM2FEQjlVelc5bmN5dmRuanV4ZjEwZDBGSDc5OUVpZk95dk85YzN1UnNUeVB6Mm5ubmRjbitkV0xMWHoweEVIUWltMkRnbDlkbk9hOEF3ZEJlR3dhc0ZHZXg3Zk9HbWJXaEdHK2Z2OGt2djZBeVZmUHlQR2hVM3BadnluQktiOXU1ZDROTm9mT3NEQlFlSHZFV25kL1h6MHFBQlFZcTZMSGpwT1MxdGdpRWRKRUQvZWpjeG1FN0JpWDlVM25zcjRBaUJBK01DZGJNT0tUOTVqSHEvNnV3Q1JkUDNoSkI4RlpXY01zUnMxWHBnN1dDemtTZS9ueDdGZkFxb0ZNUnRJZXlmS2ppNko4NzRINytkSi9yT0drODk3SnBXKzdtS2xUT3hnYUdzUnhIRnpYUld0TktwVkNhODNSUngvTkk0ODh3dVRKazBjRnpHdzJpOWFhVjE5OWxjV0xGOWNIUE5jbDBkTEIxcGV1NS9PbmVaeTdWT0dsWGZLZXNWZUxieWdFQ0plbEU3TjhxU2ZPSzkwZUwzYmJUR3ZLMGR6U1Q4enFaTTFPajdXOXNIMUljUGJzWVZidE1IbHFDOXo2amlITWlFTnV4R2JKeEJGT25CMWxkWThCVGhTdFlmRkVsMzg2dUErZDljZ3BxeVRZb3VDK0RSYkh6RlNjZjJBS2IwaGd0TGdjTldtSTc3aXR4VkQwckNlSkdwb2xFN0lrclNqdnY4SG0vVWRQNHFMNXcyamw0bmhpWEM5YjNOYXNHMHp5cXdjdHVnWk51aktTU1VsRm54Tmpjc1QzWDd6bFlGZzZhUkE4eWEyckZaUGlPUzQ4Y0JCMzJNQ01LazZkNC9MQUJodU5ZSGxmRTNIVDVXOHZTKzVlMDQ2MEJCdDNLcDdicHVoUHU1eS9JTTkvM0JubDR6ZTBjZGxoY1E3dEdBRU4rYURFVk5ZVjRGWjdOdE1PZENSTlBuallDQlBqR1hLT0pHb3JybG1SNVBGTkp0NDQwdUkyRDBtR2M0cWpabzV3eEpRa3Q3eHNjY25DQ0E5dlNYTHBraUdtTlhsMERXbDZSMVRkdkVXTm45cHo1c3dCTGw3ZyswQmY3TGE0NHNZNFgzdWtpVjlkNkJBenN1U0RxSEFaK0N2em5qK3pHZ0tHWFlNdHFRaXIxaWtpUXZIdXhacDRSUFBFMW1iK3ZOS2tQMk93ZFJpU0Vlak54akNFSW1ZTFRwNnJBUmRjemJ3T1FjclRIRGt0RHlrNHNuT1lvV3lNcmYwTzZha3hoaktLVjdwZC92M2FCQnBKS2dNYisxeTI5THVjTmlmTFQ1OHllZGQxY2Q1M2hNRXBNNFp4SEYxbTRSRENOK1g5K2FVWWQyOXFKcDMxK055SncxeStMQTE1cnhUMXJFRlltdDdoQ0w5Nm9vVjF2UWE5T1VGRWV2VG5ERkFTSjlCYjk0SkZiODd6OHcwOUJiZ0dML1ZhWkYzSjVVdXpTQ09IMTI5eXpOdzA1eHdZNFk0MWdvOGU2KzkvOEZUSkdiT0d3UFhUbGt6VDVJejVMclBhUmlBak9XSktuc09tUnpoem5nc3BoK2xOTHNmUGhxSGdPaEJxRHlQRUFtR0RYUzd5VTRvakxtSnI4SXNXSXZ4WERLVkpTUk5YakVNa29yZmJCMHR6RjMzSVd2dXJRKzJpY3hJaWtUMmJLTE5wSDFoRFpmR1VLcy95TWJXaUs5SkVUcG9ZZGNLTFJBMGZhKzAvamVLSEZlRnZkZDFneWYwckVrNUF4akhCemZPUjB5WC9kOFptdHQzN0hUNzR3US95dnorN2hwM0RlV0x4QkZPblRLR2xwUVVwSlVxcG9nclRwazJieG1BQ0hrMU5UWFIzZDQvT25uTjVXdG9uY3M2eVZzNWRsQ0UvNHBGWHhyNnBhT1VvNW5jSURwZ291SDlUakkwRGt1Tm1DOGk3SERkYjBwdU5jUE9hR0xQYkZCMXRIdjFwUlgvYUkyazZBVGo3ZHBHSnlTRHZUZm42cWdZZUtBZGRrVm9Da01wRDNIVEJkSDBmWStDdnFOd3U3OEJCRTFMODdFMGpUR3d5K2RRZGNmNzFybmJTWGdSVGpLM0RHWWtwSHQyYTVMSy90TEttUDhaWkMxME9tYUxRU0dTd1loWUMydU9BTWtEQ2NGWUhSZFlMcVJFK295TFE4ZTVPbTVnU2t2RUlyY2ttSWthU3cyWkYrZlJKaW9UcDh2YkZmWHo5ckN3UGJ6WjUrN1ZOL0hwNUMwVDBtSXZPdkFmSmlNSEpzN0ljTVh1UTQyY05jZmpjUVE3czhQQ1E0eEpyS2xwZnpXRU9uK3F5YlVUeXA1VW12V25KR1hOY2JPRXhuSU91SWNWb2hZaUZnSVNSeGN0bk1WU0tRMmNOOFlrM3VDenZObGpYYXlFdFZRd2tPM1NLeTg2VTRKbnRKc1ExK2J6aStDbEQvUEd0TzNqMzRSN05jUU1qcXJqNWxTWStjR3NMUTI2TWN4YzVMT3BVT05vZzdSckZQc2w3d1N3U0JIRW9CZmtnWjlyMUJJNm5jVHhGeGpWSVJHQmFlNFRtZUJNUnE0bXBIWEcrZktabWVqTXNtenJBRDg4Ym9TOXI4TUdiRXZ6M1kzNTBmemdqVldsZjAvWkRSNmI0NFJsYitlT0ZPM2ovVVVQWU91ZVBZUXFXQkk5WCtwcTQ0cVkySHQ0UzVkUURGTWZNOEhOVXc4c2pVWVNWNnBaeERkcGlFSThJOEh5ckRJWkxYRG9NWnYyWEtPL0Nnb2thS1EyOFluUTJURWlhNEFialQvdEJmMUw2ZlM4RVJBMWRhVWZjQ3hSalY3ZlhaYUJSRnBSWE1YQU5OTjFXbEx3d0dDdERXTHQ1eUtYOXZtMXU5aU4ramRlZWozbmRHNnFsTW5WMVBNZXdhZU9XMVJvdTMxU1BHYzg3bGdjN3RIRDRlMkdzWmVEcVNjeVU0b0JKa3UrZm4rZStWMS9nMXZ0ZjV2TjNYOHZjdzg3aXhCT081NEFaSFN3NFlEYTJIY0UwVFF6RG9LdXJpOW16WjljOXRtRVlSS05SZHU3Y09UcldPWG1hVzlwNFlRQlUxa01KbTMwVnFLOWNRV2V6eDJGVGN2enl1U2d6V2oyT25PcENYbkxzOURUWEw0L3p4R2FUSzQvS2dRVlRXaXptZGhnOHNMV0ZKWE4yRW92blFjZDRacXVrTStHQm5jWFZFVCsxb0U3VThzUzQ1cW10RmtQcEtNM05mV0RiOUR1eHFnSHBLb0dONXREWmZmeHVlaC9YdnRESjFmY21PWHVleTduejA3alo4dU1uSXhwaUxsRlRnRlJnMi96MTVSZ0RhY1Y5NytvaU1qTkQ4Nk9kL0hsbGtuQ040Sndiakg1UHMyU3F4VjlYbVd6cWIyTG1wQUhRRmhzR1RGOHFXY0xjcGd5OW1WYmVmbENLcFFmdWhFRUJ0czlDTXlrQnB1SnRoM2J6dG9VV2I3MitrK3RYUmJuOHNEZ0dDaWtFelZFTnRvTjBqVElHSlFWNFN0T2ZsY1NrU2RZeGlDSklPNEp4U1JSSTZCbFJaQjBCV2NGWkIzaGM5NUxtaS9mSGVPT0NMSk1uT2d3UEdpeVliS0tVQXVIN09tMERpSHNZZVJkRCtaV3QzYnlCakpxZ0hYODJGNUpYK3dRdEVVMUhYQmRGWWx3bFdOS1JZbHBUbEo4OGFYTDYzQTZtdFBlRG00V1lTMnVrQlZOS0JCRnVlU1ZLZThUaHgrZHVoMDZYZ2ZRazdsNW5JWVV1UG92d2ZGR0l6UWpueThwQTJOMDJIUVl5Qm9kUGNYalhjZDB3RWdoVElNZ09TL0FFcHl6czU1UURCdm5DUFoxY3V6TEdteGE1TEd6dUs2WUpGZHEwSm84cHJUbklDL0pwZ2RLU3FGVUtQT21Jd2ErZWtUeTEyV1B0UjN0cG16ckNjeTlQNXNiVkVUeVZDL29oc0Q3R05lUVYyaXMveDlSNG5nMTlpaGU3REE2YUpZaVlPZHgwSzh0M1JsazJSWVBwZDdNdGcwSXVYcWtQY202SjdTbE5pUWtIUU91cXZWMUNvbDd3VXVndktsd0xkUFJnSnkxMGVSNnNCa2ZJc1NzbldqWTZQVXoybDEvSFBPUU5HUE1XSVdjY2lKd3kzVS9oVS9qK1ZkZmQ2elYwZFM2RDJ2WUthdHQ2bkpjZVF2VnNSa1RqWmY1VjVlbXkwd3F0eVJrbW5wRDFtV210M3RaakxXeEVuYVhQZnBySE90YlE4clRBeS9tbGtrNC93T1gwaFNuVzd0ek1YMS80SG45KzVLZGtXZzltMm9JaldiWjRIazJKS01PcERIMTl2V05ZS0RTdHJhME1EZzdXQnpxbHlHYXp6Smd4Z3l4UjBxN0V0bmF0aE9ldXRMd3lpTnBaNXJkRytOL3RjWlpOZHBtWkhFRjdCZ2MwWlZBcXlvNFJnME02cytDNkhOaVo1OExGSHQ5NTFHWlN2SVdsMHpRL2VpTEc1aUdUejV5WUFzOGw3UWd5RlVGOE9SZHlnWXJTTzVaaytjdXFaajV4ZTR3UG5UQ1JsN2NaL1BLNUtDMVJ0Mmp5RkFFRGU3eXJoYTJEY094TTZCcVIySVpMUzFSWGRJZ2c1Mm9lM21EUWFyZVQ5OER4WUdHbnBqM3FNcEkzZUx5cmlhWlVrdjk5ekdRNDQySUZqQzNyK3RzQzZMemdQWWRtdUdOZEMxZmNHT2VmajVkczZUUDQ1VE1HeWFqRzlUU0h6OHl4YUtMSGxUZEt2bngyQndlMHduUGJZRm95ejdKSmVXNVkwY0xFaEdKU1VqQ1lGWFRFUERCY3BqZTdkQTA1L0dXVnpWbnpPNWtSUzVFd3ZhSUtqZVA1MTZLckRRcGtuUEsvYS95L2xhbFlTY0dHWG8rMlJBUThrNWt0STB5TTJqeVVpbkxxbkdFUWFmSXFpYWMwZzNrTGxFUFUwS3pyZzc4dGJ3SVZJK2NKWXBaZzZjUXMxejlqTTZkRE1uOEMzUEVFL09oSmkwK2U2REN0T1kyVDlZSERVNEtrNWZEL3pzcnduaHNUblA4N3lmc1BnM2tkR3RPQ2U5WkpodE11R0lxa3Jla2FodWU2MnhqWXF2bnVJNEtNNjJCSVdieDNWNVV6K0t4YkRyVHBQR1JjUVV0SGhqUG5PM3ptRG9rbEpuRENMSWZWUFpCekZLZlB5WExudWlhVWhvT25hQVp6QnBad2FMR2NzanhTclFWWkYxS09BRWRXcVU4Vit0MVJNQ0Voc0EzQi9ac1NMSFNpZlBNaGcrMkRiakVncnlraTJEd2t1ZWFGaVp3OE0wT2JuU1BuQlF6YzB5eWFsT2VzK1I1ZnVOZG1Tdk5FcG5XNGZPOEJpeFU3REw1eXlnQlltcXdIV1ZWZWdqUG5Cc2NvTUNkZFBVWnlvZkc3eDB3MVpNTVY5VXlzUWxRQVdibVVSSG13VFNsd3FYQmZCcG91TTBwZXlrSldWZjE1T0JMRGZlRlIzRWZ2QUR1Q3NmQXdqTG1MTWVZc3hEandFT1NCeXhDSkJMamFyNWZxS1lyQy83dDY5MzNiY1Y5K0FtL3JHcncxeitDdGVRbzkzQS9SQkNLYTlLT0k5U2dwTGxxelBkcEUyakNSNHppL3FNSlFYUnRZaS9pcGk3VmwvNjU4ckhXQlRrUEdNUkFPSE5BNndyK2RaZUJtTlM5dWVveG4xOS9KcXk5UFpFaE9ZdWZHZmdhR1VtTUNhMmRuSnhzM2JoelZYSnpOWnBrNWZTclNUckl6RjJGR1JLSFVQclNjNXp5T25nN3ZPQ3JDK1FkNG9EeGNUNUMwTlJjZWJMSmgwR1RoQkE4eUFvTThuenUrRnlFNitPckRUVVFOalczQkQ4NGQ1b3c1STVDVkxKMXFNcW5GTEs2d0JiQjBxc0hFbUViblBRNmZNc2ovWFdCdzlUMHhMcnZHWm1FbnZHMnB5d3M3Ykd5elZEdlJORFFEK1FqZmZTcktENS95MVpvK2ZseU9ZNmNNa2M4YlJRZEV6RlFjTlZPd2ZjamtENnZhQUUxLzF1UzBvV0d1UEtxZjVUMFcvM0pyZ3NXZEJvZk85RGh3a2tLaWtNQ2gweVF6Mi93SWFkZVRITkF5ekM4dTBIenZxV1orK1d3YmgwOVR2T1hnRERldU1zZzZFdFBPOGFzM0QvR0p1NXI1MkMyU2pvUm1NRy95aFpQVEhHazUzTDJ4aVdjMmU5Z0d6RzZIVHh3empNNDdIRGs1elZuekkzejdZWGk1djQydm5aakZORnh5cmtCcHphdzJPR3k2OUUzY3V1Z0VaMFlMSERWTFlrdUZ3aWZpbHRRY1BjdGdSaXVnbEwrNXF6bDB1a2tpWnZpRXd2VjQ2ekxOaERiSnNUTVVwQ1dHVUJ3MUhkcWFvcERKY05Ba3hmSnVtMnRlaWlLRXZ6aVprRFNZMjc2VERjTXgvcmpLUmdvUGpjR1hUcy94N29QNmNISWVyamFLNzN2ZWhVTW5EM0RkV3oxKytteUMzNjVvWWlEdDBSdzFtTjZpdWZ4SURhN0RGWWRsZUtXdm1mZjlOYzc4Q1pLTGxubWs4b0Qyc0tYazhPbVNLVTArZTVVYURwamdCNkFJclVBSklwYmdsQU10cHJSSXlHdStmUElnN2ZGV3Z2Vm9oQjg4YVpQeERDNWNBdWNjMk0ybTRUaS9lczdDbGk2V0lmakNTU21tSkViSTVtVnB6RmdlaDAyVHRFWjE5VHdjNnZlQnJPWWR5ektzR2tqd3FUdGpMT2cwT1dTS3c0Um1RWE5FUVY3eWxrWERQTHU5aFEvZEZPWC9uU080NGhDSFE2Y0sycU1TbmRmWWhzdDN6aHJpYTQ4MDg1bTdvd2dFclhIQnI5ODh4T0ZUQnlGak0zK0NJSzlEYVJRS2xrNHptTnJzLzY2QnRwam1zT21TaVBUN1JHdk5RWk1sVXhNK2ZkVjdRQ1IwU05pbjRNY1RvWGxMaENTWk5NcXZzRlJ2OGk5R2pzc0tLcXNSS0RMQ3hFTmdqSlhVb3pVaUVvTm9ISlNIdC9vNTNHY2ZRRmdSNVBRNXlNbXprYk1QeEZ4ME9NYXk0eEV0N1g0Vkhzc0N6ME9QcHR5a1BOeFhuc0Y3NVVuY3RjK2d1OWJqYlYrUEh1NUh4SktJZURPaWZVcGxtYmJpcjVYVkVQMWFySEpjNlRSMVdlbzRBRm1Qb2JvVXNPZlhweDdybnJhSTlCQTJZQnFvakNidEtmNzdiOE5NZlBNUCtNZ0hMcTI3My9Ed01FODg4UVMvL3ZXditlVXZmMW16QkYwcWxXTHIxcTFZc1ZhKzhZV1BjZFdzeDFuYW1TUG43YnRLR3lLd2dUdmF3QlRLcjVkWmNOTGpUOVNXOFB3QnBTRm1LNVEyMlR3SXFaeG1VcE9rbzluRHpXazhKY2hyQTYzQmxsNFpNeFlDYk9FaHBjYXlCZDFEQmp0SEZKMUp3WVFtR000S0RKU2Y0a0JCdmxYUWx4SDBwelZ0Y2NtMFpvWHJlYjY0UjJnYlIwbGNWVEtOS2UyblNreEllcVR6ZmdwRTNJSVpiWUtjNjFzR3BOQTR5a0FLalNrVU90akhiZ21FamRNZU5FWDRuM3VhdVcydHpaOHZHYVRkSGdKcDRIZ21tL28xR1VmVEZCVjBKa0FLUmNxUjlLWTByb0xaN1pLWTdaSExhZ3dEWEcyeWRWQmhHWUxPaENhc29lSnFpVUpnQ1QvZXVYRC9ycFo0V21CSkwzUy9GSy9iRXFxNGJWNzdZOFFTL3JiU0VEaWV4SktlcjIxYWZBNGFXeWhjSkk0blNvdzlNTGNtTElVUWtoM0RtbFJlTXlFcDZXeFM0SHErMEVKRjdwNUVFNGxvdExib1RjRkFXaUVsZENRa3pSSEk1MTBpdG1Bd2E3QjFVTkVXRjB4cEVhUnlJTFNIRVA3ek00VEdFRDZIZDdSRUJmZGRrQ2pQS3hOVEtFemhFVEUxR0JhYit6VURhVTNjRmt4cUFrc3FYQ1hwU2NGSU1EWW5OaWx5dVhMSnhzS1lNVVZwdklYZmgwSy9HMEtSc0R5eW5zbW1BZis3dVIxK243bEtZUWxmWkdRNGI3QnRTTk1hZzlZWXhlQXVXL2lSVFJFYkVDYnJkbXF5cm1acWkwRmJ3c0hKZy9JRWpxL1poQ1c4NGpYa3RlK0h0SUo0QWs4TFhDMnhRcktTVG1pYjNRSFdZajNXeHc4aWJwVEUzaEg0c1NPQjdLRC9lNkUyYTNrOVZ1a1hhdzNWWnczS3pBbmZqeDJ1NlpvMUxJNU43K1MvdHo5TlFybmt4UzRTQmlIQWM5RzVER1F6WUpxSVpBdWlkU0p5emtMTWc0N0VXSHdFc25NYW9xMlRtRzFpQVRxWDhpdm1ySHNPOTVXbmNGOTZGRDNRamM2TVFIWUVUQnNSVFl3dGpSaGdXcVpmNFdSMHNWaE5pNVBoeDNPTzVtZXpqc1JXcmwvaFJvd0dwcUUzU05jMkhZdHdEZGJLd3VmKzV1dWYvZXpWKzA4OTFqMG1lTXFBWURGa0NrMnlSVEMzemVPbGJmV0RrbHpYSlpmTEVZdjVZZng5ZlgxMGRuWldCenBrTW42SGFnOHoza0p2eGtUSVhLMTg0NzBhcmlCUkpBeUZxeWlHN1B2ZzZQckZKZ0l4Y2lId21adjBtTlVTckc2VklwY3BoVERFRFJjaENCUjNBdituNmZvVGdmSWpUVlZXMHhsMzZReXFQamw1U0pnVTFac0sxMlVJeGJRbW1OYnNPemNjRjd4UVFGVGgycE5XdGJTMzBwRE5DNktHeDZKT2YyUFhMYmhFL2ZNa0xkZXZDcVVGcHRRTU9qWS91S09KQlcwWkZrNVVQUENVeGRjZXNQajBTUzd0eVF4T3hzQnpCWlowbWRkUnVvaTg1d2ZFdEVZODJtTWxzMzR1SjlCQzRDcUsrMmpsUjQ2R1g2V280U0ZGcVo4TDkyWkxEeVBVL3dYald2aTZDOXZHRFRjd1l3YkhVSXFvVktYL0YvYlRnZjlhZU1UdDZySGdlSDYvejJxbFdIQThud2VscTFPOUNrbnYyWnpBbEM0ZFVaZ1FMMWprRks3clI0Ym1IR2kyWFZvbWxaNTNUQmFLSm1pU2xvdW5mUERRb2Y0b2lPQkxvTVZ5Y0lKdHNxN0E4RnhtTlB2c0VzRDFndnVTSHJNcnJqMGNHaGNlTTY2aVNtcXdzdCt6cnI4NE9YQkNNSVk4c0lLTURoVmNTOEx5V05EcEsrODVTcFE5QzRRZzY0QVpHak5hS1hKWlVWUkFpd1lMcDRLc1pPRjVha3FGTUV3WlBNL1FHS25jWm85TWM1SnlWY0lRQ3gyZFJma0JmcldOeUdHRzVYK1hENWpkYnBVMzBMNW92b2dsSVpiMEI1UG5vYnEzb0hac3huMzBkakF0akhrSFlTdytHcm5vSUVqdklML2lJYndOSzlFakEwWFJmU0VOWDhRL0d0ODFkcStESU9IeUVBY3lob1VuWkRFcWQvU1lzdEFrSjZyRkhzcEJ0WUt0aGlmSXYxZFQ4RmpOMVJMVDgyaE5tR3pmdnJVK0dPZHlaTE5aWXJFWVVrcTJiOTllQmF4YTY2SjZrNVNRYU8xa3g2QW95dVB0VzVPMzhIMmdWVDYrMmkrVnEwU1pUMnlzZlNvcm5HaEVtUS9OTjRQWHZxNnNPOWJDUUpUNW9xck83WW55aFltdStDNXNqVEEwZzNtREg3OHdrWGhVNGpnT1h6b2p5MlVIRGVIazNLSVoxRkdpWnFXZXFuTlY5SXRUcDgvcVRZeWVGbFg5b210Y2Q2MSs5N1NvU3RNSjcxZnIyS1hyb2U3enJmc3VLSUVMTmU5ZjR5OG1xUEFaMW5zT3Jxb0d1NnhYNC83Y09uMjJoMk9tc20rcW5wMGUvYm5YZWdkR2UyZHFQZi9LWXloZGZjMTd0NXBUS0tvM01QMldGckM2TEkybXpHd3BLZ3FJYWxuY1hpTWhDR0RTMmsrMzZiSmk1SVNrV1lzOWo3d1NFa3lKQ0ROTnJmSFdyTUI5OFFsME5JL1hia01rZ2JCamZtVHhYdWdsWGFHMGFDcEZqNTBnS3lWTmpocDNYMWYrV3JBZWxqRlZIVWdZaGszQW1yKy80S1ZkUjFlWTNCckQzdGxMVDk4Z0U5dXJDeGRuczFrY3h5RWVqeE9MeGVqdjc2OXBCaTdJSTZJOTJpWk1vVzg3KzJGaTBqOW04N1FnS2gyK2VYby9QYWxCaHJLYTlvU2tQWm1IdkV2R01ldnFFVGRhby8zZHR3by9heFdqTldSNHZnK1ZteXN3S2NxVFdDdjEvb1J2S2VnMUluaGlOeG5yT00zRklocURTQXpaSkpITkFxMzJyRjlFS0Q1THU2SGdrZkRDVHhwQmVJamU3ZXN1WTdGRm43WXVMV0IwQ1ZUcjZkZi80OENGQngxTkZwWXpRSCtOQUNiUDh4Z2VIdlo5THJhTmJkdjA5UFJVYlRjOFBJeldHcVVVcGhRMFQ1ekJ5enRjMys3VWFLOFp1Q28zVDJjOHl3RWRPZHJ0REU1R2tYV05CcWcyMmo5azAwVk9XdU9ieWh5b1d2c1hncTRDZjZHdXdYSjFTSHRJYXNXQXRQZnZUdkhkeGtVQkNPV0NrOUZrQnpXWkFWMEcxSmIyMkJtSk0yVGFXTHVENEFXL3RhWk13c29QOVFwV0pHSDVwc0NRWGc4VnpIK2trZGthTi9CR2VobXNBYXlEZzRObEdzS0pSSUowdXJ6bVczOS9QNWxNaGtRaVFUeWVvTG1saGMyYmJ5SVpDUW5LTnRwcjBod2xjVlNqSHhydC8yZm9xaWdHOG9aSkxOb3ZabEV6cjFVSE93b2ovTmNpRUdzOGhBZ0ZYbXFGSndRN3JTamtCdmMvTUEySXRsYmc1c0RMYXp4SG94eU41NFNJWlVWZ2tpY2xTaGlJOGRpMnc2VlZBd1dxNHFJbEtHeXVpeXNVVWVHRERVQlY3S2VGenZkbVUxclFtcENvZEEvcENpZElKcE1oblU0WGhmc2prUWdqR1llLzNuNC9GNzdsbmNUakZxNExEalpiZW9ZWkhOaE1mMzh2cTlhOHlzcUhidUIvVGhGNDZRWmpiYlJHYTdSOXpWcUw5TkkzNUdwUnJHRXV0SzVJd2ZGTnVUcGdXNFVNRDRFcXFhMkpRaENrTGxWMkNTekdHV0hVTEZuNG1vSm9DT1EwdnVDYWs5TjRlWTF5Tlo3ck05VkM1bEM5QUdaYmVYUkZteGkyb2xoYVZadG9LN09LUXY4WElVQUZYNEd1S0FBaGRJVlNTaEMxWFpDUC9FY09YZ0kveU1OT0twcU1EUGMrK2h3bkhiRVFnS0hoRWJwMzlwSE5lMlR6R1pBV0w3NzBMTnRlZlFrNXVKNS9mdjk3YUo4d2tYeXFsNUdCWHJTVG9TMlNvOFZ5YUdHSS8zNURqZ1VkZnZVZEd0amFhSTNXYVBzQ1lVSWFWd1dkcEJBVStzQWpLaXVNaHBXWUZFSWF4ZjhYdncxTXdENjdDcExJdE1ZUmdtMW1qRll2VDFLNURFdVRyRFR3eHNmM2R2OU9DMHd6WUtSSytjRHA1UlJ1SHBTclMzVldnMHVXUnUxRmlBUWl5aVhoNW9rNldZYWJKNUV5TEl5Q0tUaGNCYjFNRFNLRTVCUkl2d2pZZlpqS2xnTnE0Zm9Mb0tvMDFFdFgvUWRpckJLVmMzalAwVEgrODdhZjhNRWRYY3lhT1oxdEc5ZENwZytSNjJka1lBZk84RTVVZG9pckR2TTRZMTZHKzljL1Rzb3htVEl0VC9Nc2g4NjRnMjM0T1dPV2FTQU1TUzR2R3FEYWFJM1dhSzhOYlMzaWdRcWllNmtSSGV3WFhTLzZVRVZGTFJkRnFhQjlSZEt6RUFxcEJYY21wMkFDQzNLRHpNbVBNQ3MvaktFMXc0WkZSaHA3cWJac2NFVkJHcEgyS0pwMFBVZmo1ZjMvVjVxK1IwdXRqU2lYSmplUDBKb2RrU1F2dFhheU9kYk13eDJ6U1JrV0VWVW4vU0NFc3pvYzlhdHJlTGZMUkpqS1RiODZZS3BhLy8vQUZBeVF6eGtjT2pYSHQwL2V3bCtlK3pycEZUbVd0TVNZMFdFemFhSkIyeXlEaVVsSVJqMXc4MlR6QmlmUHpvSElvcFZBYVlHcm84WEZURjZ4WjVGc2pkWm9qZFpvNDJXdG1sQ0tERVdsSlJGU0JTcmxxZXBTMVJvZDhGcGR5RXoxcGJORVVEaEM2QUljKzZJalFnc3NGS3NpTFR5Y21FU0hjbGlTSCtUQTNDQUhab2M0Sk5QTHd1d0FsbGJraGNRVnZuQ0tFdXd5MklyQUJleWt3Y2txbEJzQXF4dFNacXpEV3dRZ3RhL09abWlGcVJXR1Vyd2FiK1BlQ1oyc1RuYndTbklDcTVNVDJSWnJKdW5tU0xoNXBISlJpR0E5VVo0MjQvZGhQUzFnVFMwNXhtSlZzSUpldE5JVWM0di8wVTNCaGZ2T1pBVnpXak44N0Z3TFJDRHc2N3ArMXJnQ3JRUk9WdUFGQ2ptVmd1Q04xbWlOMW1pdk8yc0ZFQUVJNk5DMEhwZ290UlNCenpVTXZnR0RMWm8xZlNEVkFhaUlzclFSaWEwOHBqa3BITVBrNldnSER5Y20wYVJjcHJnWnBycHBsbVQ2T1RMZHc1SjBIMGt2VDF4NVdFcmhDRWsyVkhadXJPWm1GRTdLbHlBcytFcGxuV2xYYW8ydFBTS2VpeEtDdEdHVGtRWWI0bTI4MERLWjUxcW1zaW5hVEhja1FiOFZ4ZFNhaEpkbmNuWTQxSDBsY1oxeXhxcnJkM2lGVEtFUHBnV1RzZS9uMW1YTVZsUXo0bjlZWUtXZ1NtU0EwM2cvRzYzUkd1M3ZDVTExdWJtU1FKZW1tT21oRUZyNlRMV3N1azJGR3BDb3pHZVZJZldnY2pVaGpjQlVpbGFkQTVYSEU0THRWb3pOa1NUUHh5ZHdZL3RjMnJ3OEIyZjZPQ1RkeTZKMEw5UHlLYWJtVThTVXk1QmhrWkhXcUNDcnZlQXE2dnBLTlRIUEplbmw4UkIwUjVLc2k3ZXpQdDdHczgyVFdkazhpUjNSSm5LR1JjWXdNYlFpNHJsMDV0UEZnSzR5ZGlYRzJkKzZVdTlYQjVaelVYWThCZWd3U3czNlZkU3ZCL0NQQjZ5TjFtaU4xbWgvcjdoS1FaWXcwQzR0NXJkcVgvdFgxQUJpVFVIT1VCUUJHQzJMR1NJaVZKVkZGUFZ6UTZiaWtMaUVnYVlwQ01WVlF1QUl5UTRyeGpaN0pqZTF6U1dwSFJabCtqazQxY3VpVEI4TE1nTWNtT2tqcGx4UzBpSWpUVlFOemMxS0FCSm9Jc29qNmVWUlNEYkVXMW1kNkdCMXNvTTFpUW04OFAreGR5NDlkaHhWSFArZnV2TzRjOGNlTzNoc3l5QkxrWUlJQW1FVUpNT0hZSUZZOFFYNEJPeGd3WW9Qd0E2eHlRSWs4Z1ZZc2lCWmtJVWxCQkd2V0NFRUJRaTJGUnZiTTljejkzYlhZVkd2MHpYVlhkVjNIaDdIZGFSVzM3bmRYZFhkMDdkL2RSNTF6czUxZkxxK2hRM1dXTk1hRXpCVTIyQ25iWVJwMXR3alB4M0pBek5mMW8waVpTd09Cdk54U3lZdktXU0dDb0wyVU9hWHdoUmNwVXFWS2kraUVNUzhTUU0vNHFDTkVuV24yN0RWUWwzTWtsRkFoUTlXeVNrMmR2b08yOXFzckl5ZUtJKzM4Q0FRbUF3NENNQWF0eUJvRUZyTWRBTk5DbitZN2VLZG5TOWdteHU4OXV3eFhqMThpaThlL0E5djdEL0ExL2J1NDZLZGJFcHNxczIwUkZETVdHTlRoSUVKYUVqaHp4ZXU0bzg3MS9HbjdhdjRlT3NTL2pGN0JZODJ0bkNoV1dDbWw3aXlmQWEyYzByaDRVbDJNR0FqcGwxU2g0N0dISG1DWFlKMXFhVjIwamk1cjBOSmpnNHd5Zm12elFaaVFCOHhDVmV3VnFsU3BjcTUxRmdON0tqalovV0ttUFA3TVFOa3RGTFBCZzUrMWtCYUdmbEtvZUM1bjRJamJNNGlqMkk0Qnc1VFVZaEJOcERvUXJ2RXhYWUpQU0Y4Tk4zQlgyZWZ3eFEzY2FVNXdKWG1BSy9QSCtMMmszdTR0ZjhBVjVkemJMVU5EdFFFOTlkbStOdUZYZHpadVlHL2JPL2kzdVkySG0zTXNEZlp3S1p1TWROTDNEaDQ2cThoNUQ0U3BaOHAzQ2MzNTFTbWNpUWJEUlZtMXdUVGJSaXRrSGVwc2t1THFLT0pybUd5c1BDMW1sVWJRc1R3MHZoWXExU3BVdVhGcFNzNkptR25PWVphcmR5Wno4cEg1cm5hYjdUMlRrMlNjM2dZQnNxMmpBNnpxZXZxKzBHSUxEWndOVEJpN3ZvV25aOTNodzl4c1YxQUUyRmZyZUh4OUJJK21sN0NiMTU1RlZ2YzR1djdEL0RhL0JIK3Mza1I3MTI4am9mcm05QlEwQlBDT2pNMjJnYlhtb1dIUEF1b3VjaG9BZ2R6YlNkNWcvUXJzd2pvTmZjSWNTVWFSQlZzT05JNlpjMWFsbXpWa2NuWC9XKzQrbGlyVktsUzVWeGpWZFRhSnBlZ2dPQk50cjZnalNBdENkT29OL2xhVXpDeE1lK3lNaWxaaVp5WjF5V0swS2J1SG9zcFBtQXdsSUFyZzdXeVBseUdzcFZ5VE5ZblpmTGdLOGFFQWRXMjJOQ05pVVFHWVVuQXV6czM4UGJsbTVpd3hsUzMyTkRHdEF6TlBwYktSQzVidGhHTzFENTFpaVlKejZuYmwwV1ZIL1pCV3lSdllrZWo3VnB3S1JnRjVLQ0JXUm9SUXErMm5BNTFDcTVYamJWS2xTcFZ6ajlkSFRnRlpMb1J2eUdwc0hjZmtnYTBTMWRvNGVtekJ6a3c2bUJLZGx6UkJxNU1FdEsyZmJhR1dESytVV0tUa0o0OGRpMnNMZlRJQXRmMW8wQlF6UkpUYW15Z01ubTZlV3UzRFE0aUVUVGswak1LYTZ6MXRVckZrazE2Wk1GS2hVakw1MDZXQnhITUJkRytIWkJvZEdBSytKQWxDOUx1WEdKd0YvSVZyRldxVktseVBxbnF0Vk8ybXFjSk5uSTVmdGxxVlNGL3NDZVBCcUNFbDFVYlRkSnBXRUZoYy81U3A1RmFuTEQxWkxwNXI0N2hvT0RtSlJaYU05bm9XR05TMWhEbDY2dy8xMk9RMmRSd1YrNHFxVFA3aDczL0Z4M3doem02aUJMa0J3Z0s2NjJNNlUxNlBqbGFwOHJMZFdLV2hLbVlCVmpOYVpETktWdzExaXBWcWxRNXoxd1ZXcHZJOWVzU1FJaGdKYkl2ZFZlZFJZS0FZYUJxb01oZ2JrR1RpZFhTTktBVldBVzRRc0RjWnlwbU52dllLRjVpQnhpbk5EdkFzUGZ2T3VqN2szYVFFMEZSUmx0VkxpbGpLRGJnZFdEMk1WY3lYYThJWDRid0pJZlVoSWxibVpwc1F3UGJJTFJZV2NpUElRWTM5bHZOZ3VZandWcExlMWVwVXFYSzJlbXJ3cTk2dEJoTFNNdlBZRXc2UHNjaitZQzBEamtEbFRJbVg1K0FsMDFRTVluZ0htYUFWTkROeU9VYjFwRGwwQldzZjlWTmczRitSeERZbTU4QlVkZ1VzTGtzM05reU14U0YwUU5iRUFmVExEcDZaMGlETE9icHh0ZWJ1QS9kT0Y4WmFkemQxamxXekljTndEZjZiVEFCazh6VnJNYUN0YTJQZXBVcVZhcWNzbmh6ckV3T3daMlh2azlJUU4xSTJXQWhKWkZMR0tJRUdrU1dKdlkrVkJlZzVMSWdzRE1aazZ5SVEwQm5WbytGREhGSHF3NHpkYlR3RGZ1YWJCWkxOdmV4blZDcmJZNUFJb0tNUi9ZQlJBanRlMDJhSkJxZGtzbXh3bTgreXlqajFDZnVOd0hIWmVlWjQwcERMUGZRWTdYUzM5VW52a3FWS2xYT1VtMWxIOTNMbmJCVWtmSVFZUXFJbjBxamRWZmo4bE5FT0dpa2J1Nm50dnR4ZHh2YmR1QVBrNEU2N052c3pDRzFmV2htSCtUam8ycVpPOWZBNHRvOHZKaWh0YmJub0QzT1dIVHJ6Yk8yUFhkZUtmOW14Kzg4c0ZEeUtQYTkrMnRqSFlLbE9xVlpyVmtiK3AyeEd1dVBBSHdad08yK1FkYWtHb3VyVktsUzVYaWlnSWt5T1lEREhKU3dkb2toM1B6VkVBa3NJbTNkTmtVKzM2MTc5WnNwcXhSU0FTb0s2UThwNU1idGxKOGpaZnZnVVBPTnJFL1ZKMkh3RGZxcEw1MWN1NzZOYnY1ZG8zT2FhVHR1cnF3bVVlR09BYVdjcVJraHNZVTlQNi9CeXdBcEdrclhrQmkvSFBsQ1FjNGpKbVZOdmJxVnVxdTViZ3RiWm40VGhCK1BCZXUvQUh3YndBOEJmQS9BTmRiQTFpWUJtd3JRakwyOVk5VlVvOEx2cWxSNW9YU093dWVaeitDWjU4SnpxTCsvNXloVEJSdzJHdHkyNWhYdUNHaHRvc0dmYVlGR0JySm1FcW41VzhQVWtDWnR0cld0K1J0RTBQWXpXN01yVVd1aWZ5M3d0QTNYSmV1VERXdGwrcC9ZZEljVTluSG5FV0JIdm9BNXdiVm5ncVRjMUI5WDJjYVhkU2NLd1U2a3VqOGNDajVYaUhKMVppcVA2bnRvV1NaYllneXdOcHJGZEtSQk5nT1F0ZGtNZXJrRUx3N2hValJweGdjQWZnSGdwd1FjakFVckFEd0E4QU5tL0dSdGdzMzF6NjlqL3U4bFByeDNpSC9lYi9EOVgzNHFUNFBNYlRQbDgyemI2d0EyQVV3QmJObGxadGRUdTIzRDdqdXhTOThQUEw0RkdsMS9OU2YyNWNSMkx2anMvdFk5Mi9yYTdtc25qaERYQS92S2E5TWordVBvM3FEbjJuTnQ4c0E5NTRMOU9MTWVjMnhwMjMzZkRRR1BWNFFUajNobm50YStZd2VzcDcwdmoyaUxDcmJSd0hmVTA0NzhQbzVQb1o3KzQ4OGwvWS9aVG9uUFIvb2hnbHBxb0ZsOGpMMlFyMEFGZnlsOHJXMVBzcVB0aDc5RkdsMlpycjdUTDRrTWlCMFYrY2kxV0gzWFFjdW9tQlRPSTNldGlQb1ZmMU1ZTFJ4OUxBaVIvaTUrSkJUdDZONlZtazFzVUVOQXc4QWhEUGllMldWdTF3Y0FEZ2hZTU5EQUxEcCtsNjVmdUlDYjMvME9wcnU3MkxwK0hjMThqc1dUSnd6UUhNQ1RvWWQ4RUt6Y01yYTJKOERseVVQTU5YNzE5bE84OWR1bitQVjd6M0kvSGdmVVRRRGJGcVlMbUdKdWpWMGZSbEJWQXkrOEZBQlRDeExRNGdSWU9JS1hQRGJYZmdwY3VnZkk2RG1IdUwrK0FjSFFjZFJ6clgxZzVRTG9Ec0UrTmJEcGd5OEsyK3diVUtEd09KMTRadmlFQVhZV1lEMHBxSTZGSm8wNFA3VWlTTWYwUnltOUlmcWJCdlpGdEg5ZnZ5b0RScmNQRis1UFBlQ1BsWTRNYkZ1WDg4RFBRdUdqeDZnc3ZQcTNVODg5VXRHOVZqRllFOWVhYWs5bHRzbmoxVUQvcVRiNnJpVitOclJkR3N1Y1E3dk1BZXpieFgwK3NOc1dxZDlnczdlSHV6LzdPWGErOURwMmIzOER6SXpkYjMwVGg0OGZvMzEyQUZKcVBGaW5Nd1Zjbk9ETzcrZDQ4OTA5UEo1cnZIVm5IejBqR3FkdHJndW9iZ2d0ZFNyV0RxYnVaaTdSclo3S0EvRGlBZ2lXQUZKblFLMTcyaG1DWmFsV1dhb3Q5MEU3cDJubXR2V3RhVUF6UndFOHgyempBWGdOYmRNRmtPTlRnRmhwbXpUaXVzN1NKSjJDRjJjR0RkUXprRHFPQllCVzJNNEp3UE1BUE5zQ1lPZTA1Qkx0bG51QXd5UGhXN0l0QlVFYWdEUm53RXFaYzh1ZEYwV0FIQU5jdWIvS2dET0dNUFhBZU1ocXNDN2FjR3lhV1lYdndDNE93RXY3L0xUaU9lSW5kOS9Iazd2dkF3Q2VmdkIzWEw1MUM1ZSsraFUwKzN2b21VWUw2c3QxK01iTlRVdzJDUjkrc3NTanVlNTdFS1hwZDkxQzA2MDNCVWczQkhUWEVnOUJDbkphUENEdGdLYkhDZWdPd1pFTE5HRDNBNlVlc0thMHpTRUlsb0p2RmZpTk1aVlM1Z1ZaK29MbWpIVmg3TXYrTkdCM0ZtMXhBbGFybWxxZmwvVEJsSTl4L3FkeDNUVEMvRXlGN1JDR2ZkMlU2V3RNUHlWbTVOd0FJRGNvS0FGM0tkaEx3TXFGWUtXRTVxb1N4NlMwMUw1OTQ3Yjd6ay95eEZsTHBTWjdLTFRXaGQybnRldWtBaldaVGpHOWRoVjZzUUFBekQvNWJ6bFlLWTFpZWFGeVdiT0xCS2hiSnRHb2dSS2pabzVHbXp4ZzV1UUI3UlVEWnRnaG4ra1lQeVZHUUxFRWRya1JPZzFvd0dOZ3NTclVlSVVYNEhINld2V2x6Q2p6elplYzEyYzVpSWRQNGZwV3ZYOVVxUG12TXNnWkM5YVRIRHlNM1RiRzc5d0greEtOZWl6UWgyQmVZbmJPYWJzcHpWTU5tSzVMWVJ6M0hiUER3WE1Sd1hZcHROWkdtSlY1Z0FQSlJQeHJLenhFS2pGeWtQN1JWb0JwS2JZam82RWlBOU9TNDVBQnBpNDBTeUxSQm8wMGI1WnFmbU5NYWlmdDN6dHI4K1J4dE5xejFHS2YxMzA1RC9mL0xOdm5NM29HY3BybmFjbEorcmx6KzFOaWdCSDd4c2RDUDZYUmwwSTdCVzZWMFpSTC9jUWxmeFA2ZmJFeXpzWnhTa2VnbDVCdmtjbUd1QXBZUzh3VWt1cE56NmdqRjZSVG90Mmx2czhGc0hCR0c4eUJsVTRJZ0pUUlNFLzdoZmRaaDBXVktpWFBQaituZm5OYStrbkRQSGI5NUh6OVl5UEVxZkQ2K3JUZk1YN3ZXTEhMN1V1Wi91TDdyeE93Ulk4Rm9BaXVheXYrNDJJTjBLMGJwSjM0akhFbTFWSU5Ed1VYeXFmMEF6bUpOazd6bkt0VXFmSnlXQXRvUUdrcERaNWpqSjgyZFZ3Ly9CZy9lWW1DbDROeTMvRTVsK0w0aXl2d3NZNjF6ZWYra1VOZ3pZMElPQVA2NHo3QVE2TWFHZ0h6S2xXcVZQa3NDQTI4RC9rRU5mQlYvUEo5ZWZmSEJyVlJSc0ViVlA1U0RCMEwxcElUSFRPOW9BU0lxZllxMUtwVXFWTGw1UUE3Ri9CbGxRanhFcDVrR2JVcVdNZWM2TkI4dmlwVnFsU3BVdVc4YWVHbEVlVkpqcVVZK3Y4QkFFN1NzVzlCUE9qdEFBQUFBRWxGVGtTdVFtQ0M"},{ name : "__ASSET__:bitmap_LogoImage", data : ""}];
var this1;
this1 = new Array(256);
lime.graphics.utils.ImageDataUtil.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime.graphics.utils.ImageDataUtil.__alpha16[i] = i * 65536 / 255 | 0;
}
var this2;
this2 = new Array(510);
lime.graphics.utils.ImageDataUtil.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime.graphics.utils.ImageDataUtil.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime.graphics.utils.ImageDataUtil.__clamp[i2] = 255;
}
if(window.createjs != null) createjs.Sound.alternateExtensions = ["ogg","mp3","wav"];
openfl.display.DisplayObject.__instanceCount = 0;
openfl.display.DisplayObject.__worldRenderDirty = 0;
openfl.display.DisplayObject.__worldTransformDirty = 0;
Main.setPauseHandler = true;
Main.color1 = 13666590;
Main.color2 = 16777215;
Main.color3 = 4238513;
Main.color4 = 14116637;
LogoImage.resourceType = "image/png";
LogoImage.resourceName = "__ASSET__:bitmap_LogoImage";
SGLogoImage.resourceType = "image/png";
SGLogoImage.resourceName = "__ASSET__:bitmap_SGLogoImage";
com.Initializer.rope = 0;
com.Initializer.die = 1;
com.Initializer.collect = 2;
com.Initializer.collectInOneGame = 3;
com.Initializer.breakFloor = 4;
com.Initializer.newHero = 5;
com.Initializer.saw = 6;
com.Initializer.dieLaser = 7;
com.Initializer.booster = 8;
com.Initializer.newRecord = 9;
com.Initializer.climbFloor = 10;
com.Variables.sizeOfTextures = "";
com.Variables.audioFormat = "";
com.Variables.usedBrowser = "";
com.Variables.loadSound = true;
com.Variables.nativeSW = 720;
com.Variables.nativeSH = 480;
com.Variables.mSW = 994;
com.Variables.mSH = 528;
com.Variables.txtShiftX = 0;
com.Variables.txtShiftY = 0;
com.Variables.physDebug = false;
com.Variables.showFps = false;
com.Variables.numLevels = 12;
com.Variables.currentVersion = 1;
com.Variables.currentWorld = 0;
com.Variables.onMobile = false;
com.Variables.isChrome = false;
com.Variables.currentScale = 1;
com.Variables.shiftX = 0;
com.Variables.shiftY = 0;
com.Variables.shiftLayerX = 0;
com.Variables.shiftLayerY = 0;
com.Variables.sizeOfScale = 1;
com.Variables.alreadyInited = false;
com.Variables.currentOrientation = "";
com.Variables.loaded = false;
openfl.display.Tilesheet.TILE_SCALE = 1;
openfl.display.Tilesheet.TILE_ROTATION = 2;
openfl.display.Tilesheet.TILE_RGB = 4;
openfl.display.Tilesheet.TILE_ALPHA = 8;
openfl.display.Tilesheet.TILE_TRANS_2x2 = 16;
openfl.display.Tilesheet.TILE_RECT = 32;
openfl.display.Tilesheet.TILE_ORIGIN = 64;
openfl.display.Tilesheet.TILE_BLEND_NORMAL = 0;
openfl.display.Tilesheet.TILE_BLEND_ADD = 65536;
openfl.display.Tilesheet.TILE_BLEND_MULTIPLY = 131072;
openfl.display.Tilesheet.TILE_BLEND_SCREEN = 262144;
openfl.display.Tilesheet.TILE_BLEND_SUBTRACT = 524288;
openfl.display.Tilesheet.__defaultPoint = new openfl.geom.Point(0,0);
com.sound.SoundManager.musicEnable = true;
com.sound.SoundManager.sfxEnable = true;
com.tools.Color.BLACK = 0;
com.tools.Color.WHITE = 16777215;
com.tools.Color.RED = 16711680;
com.tools.Color.GREEN = 65280;
com.tools.Color.GRAY = 12632256;
com.tools.Color.BLUE = 255;
com.tools.Color.CYAN = 65535;
com.tools.Color.MAGENTA = 16711935;
com.tools.Color.YELLOW = 16776960;
openfl.events.Event.ACTIVATE = "activate";
openfl.events.Event.ADDED = "added";
openfl.events.Event.ADDED_TO_STAGE = "addedToStage";
openfl.events.Event.CANCEL = "cancel";
openfl.events.Event.CHANGE = "change";
openfl.events.Event.CLOSE = "close";
openfl.events.Event.COMPLETE = "complete";
openfl.events.Event.CONNECT = "connect";
openfl.events.Event.CONTEXT3D_CREATE = "context3DCreate";
openfl.events.Event.DEACTIVATE = "deactivate";
openfl.events.Event.ENTER_FRAME = "enterFrame";
openfl.events.Event.ID3 = "id3";
openfl.events.Event.INIT = "init";
openfl.events.Event.MOUSE_LEAVE = "mouseLeave";
openfl.events.Event.OPEN = "open";
openfl.events.Event.REMOVED = "removed";
openfl.events.Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl.events.Event.RENDER = "render";
openfl.events.Event.RESIZE = "resize";
openfl.events.Event.SCROLL = "scroll";
openfl.events.Event.SELECT = "select";
openfl.events.Event.SOUND_COMPLETE = "soundComplete";
openfl.events.Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl.events.Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl.events.Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl.events.Event.UNLOAD = "unload";
com.tools.DataManager.OwnAchieve = "ownAchieve";
com.tools.KeyCode.arrowUp = 38;
com.tools.KeyCode.arrowDown = 40;
com.tools.KeyCode.arrowLeft = 37;
com.tools.KeyCode.arrowRight = 39;
com.tools.KeyCode.space = 32;
com.tools.Performance.fpsHistoryLen = 30;
haxe.crypto.Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe.crypto.Base64.BYTES = haxe.io.Bytes.ofString(haxe.crypto.Base64.CHARS);
haxe.ds.ObjectMap.count = 0;
haxe.xml.Parser.escapes = (function($this) {
	var $r;
	var h = new haxe.ds.StringMap();
	h.set("lt","<");
	h.set("gt",">");
	h.set("amp","&");
	h.set("quot","\"");
	h.set("apos","'");
	h.set("nbsp",String.fromCharCode(160));
	$r = h;
	return $r;
}(this));
js.Boot.__toStr = {}.toString;
lime.Assets.cache = new lime.AssetCache();
lime.Assets.libraries = new haxe.ds.StringMap();
lime.Assets.initialized = false;
lime._Assets.AssetType_Impl_.BINARY = "BINARY";
lime._Assets.AssetType_Impl_.FONT = "FONT";
lime._Assets.AssetType_Impl_.IMAGE = "IMAGE";
lime._Assets.AssetType_Impl_.MUSIC = "MUSIC";
lime._Assets.AssetType_Impl_.SOUND = "SOUND";
lime._Assets.AssetType_Impl_.TEMPLATE = "TEMPLATE";
lime._Assets.AssetType_Impl_.TEXT = "TEXT";
lime.app.Preloader.images = new haxe.ds.StringMap();
lime.app.Preloader.loaders = new haxe.ds.StringMap();
lime.audio.openal.AL.NONE = 0;
lime.audio.openal.AL.FALSE = 0;
lime.audio.openal.AL.TRUE = 1;
lime.audio.openal.AL.SOURCE_RELATIVE = 514;
lime.audio.openal.AL.CONE_INNER_ANGLE = 4097;
lime.audio.openal.AL.CONE_OUTER_ANGLE = 4098;
lime.audio.openal.AL.PITCH = 4099;
lime.audio.openal.AL.POSITION = 4100;
lime.audio.openal.AL.DIRECTION = 4101;
lime.audio.openal.AL.VELOCITY = 4102;
lime.audio.openal.AL.LOOPING = 4103;
lime.audio.openal.AL.BUFFER = 4105;
lime.audio.openal.AL.GAIN = 4106;
lime.audio.openal.AL.MIN_GAIN = 4109;
lime.audio.openal.AL.MAX_GAIN = 4110;
lime.audio.openal.AL.ORIENTATION = 4111;
lime.audio.openal.AL.SOURCE_STATE = 4112;
lime.audio.openal.AL.INITIAL = 4113;
lime.audio.openal.AL.PLAYING = 4114;
lime.audio.openal.AL.PAUSED = 4115;
lime.audio.openal.AL.STOPPED = 4116;
lime.audio.openal.AL.BUFFERS_QUEUED = 4117;
lime.audio.openal.AL.BUFFERS_PROCESSED = 4118;
lime.audio.openal.AL.REFERENCE_DISTANCE = 4128;
lime.audio.openal.AL.ROLLOFF_FACTOR = 4129;
lime.audio.openal.AL.CONE_OUTER_GAIN = 4130;
lime.audio.openal.AL.MAX_DISTANCE = 4131;
lime.audio.openal.AL.SEC_OFFSET = 4132;
lime.audio.openal.AL.SAMPLE_OFFSET = 4133;
lime.audio.openal.AL.BYTE_OFFSET = 4134;
lime.audio.openal.AL.SOURCE_TYPE = 4135;
lime.audio.openal.AL.STATIC = 4136;
lime.audio.openal.AL.STREAMING = 4137;
lime.audio.openal.AL.UNDETERMINED = 4144;
lime.audio.openal.AL.FORMAT_MONO8 = 4352;
lime.audio.openal.AL.FORMAT_MONO16 = 4353;
lime.audio.openal.AL.FORMAT_STEREO8 = 4354;
lime.audio.openal.AL.FORMAT_STEREO16 = 4355;
lime.audio.openal.AL.FREQUENCY = 8193;
lime.audio.openal.AL.BITS = 8194;
lime.audio.openal.AL.CHANNELS = 8195;
lime.audio.openal.AL.SIZE = 8196;
lime.audio.openal.AL.NO_ERROR = 0;
lime.audio.openal.AL.INVALID_NAME = 40961;
lime.audio.openal.AL.INVALID_ENUM = 40962;
lime.audio.openal.AL.INVALID_VALUE = 40963;
lime.audio.openal.AL.INVALID_OPERATION = 40964;
lime.audio.openal.AL.OUT_OF_MEMORY = 40965;
lime.audio.openal.AL.VENDOR = 45057;
lime.audio.openal.AL.VERSION = 45058;
lime.audio.openal.AL.RENDERER = 45059;
lime.audio.openal.AL.EXTENSIONS = 45060;
lime.audio.openal.AL.DOPPLER_FACTOR = 49152;
lime.audio.openal.AL.SPEED_OF_SOUND = 49155;
lime.audio.openal.AL.DOPPLER_VELOCITY = 49153;
lime.audio.openal.AL.DISTANCE_MODEL = 53248;
lime.audio.openal.AL.INVERSE_DISTANCE = 53249;
lime.audio.openal.AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime.audio.openal.AL.LINEAR_DISTANCE = 53251;
lime.audio.openal.AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime.audio.openal.AL.EXPONENT_DISTANCE = 53253;
lime.audio.openal.AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime.audio.openal.ALC.FALSE = 0;
lime.audio.openal.ALC.TRUE = 1;
lime.audio.openal.ALC.FREQUENCY = 4103;
lime.audio.openal.ALC.REFRESH = 4104;
lime.audio.openal.ALC.SYNC = 4105;
lime.audio.openal.ALC.MONO_SOURCES = 4112;
lime.audio.openal.ALC.STEREO_SOURCES = 4113;
lime.audio.openal.ALC.NO_ERROR = 0;
lime.audio.openal.ALC.INVALID_DEVICE = 40961;
lime.audio.openal.ALC.INVALID_CONTEXT = 40962;
lime.audio.openal.ALC.INVALID_ENUM = 40963;
lime.audio.openal.ALC.INVALID_VALUE = 40964;
lime.audio.openal.ALC.OUT_OF_MEMORY = 40965;
lime.audio.openal.ALC.ATTRIBUTES_SIZE = 4098;
lime.audio.openal.ALC.ALL_ATTRIBUTES = 4099;
lime.audio.openal.ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime.audio.openal.ALC.DEVICE_SPECIFIER = 4101;
lime.audio.openal.ALC.EXTENSIONS = 4102;
lime.audio.openal.ALC.ENUMERATE_ALL_EXT = 1;
lime.audio.openal.ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime.audio.openal.ALC.ALL_DEVICES_SPECIFIER = 4115;
lime.graphics.Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_.DEFAULT = 0;
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_.NONE = 1;
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_.GRAY = 2;
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_.SUBPIXEL = 3;
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_.FAST = 4;
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_.GOOD = 5;
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_.BEST = 6;
lime.graphics.cairo._CairoContent.CairoContent_Impl_.COLOR = 4096;
lime.graphics.cairo._CairoContent.CairoContent_Impl_.ALPHA = 8192;
lime.graphics.cairo._CairoContent.CairoContent_Impl_.COLOR_ALPHA = 12288;
lime.graphics.cairo._CairoExtend.CairoExtend_Impl_.NONE = 0;
lime.graphics.cairo._CairoExtend.CairoExtend_Impl_.REPEAT = 1;
lime.graphics.cairo._CairoExtend.CairoExtend_Impl_.REFLECT = 2;
lime.graphics.cairo._CairoExtend.CairoExtend_Impl_.PAD = 3;
lime.graphics.cairo._CairoFillRule.CairoFillRule_Impl_.WINDING = 0;
lime.graphics.cairo._CairoFillRule.CairoFillRule_Impl_.EVEN_ODD = 1;
lime.graphics.cairo._CairoFilter.CairoFilter_Impl_.FAST = 0;
lime.graphics.cairo._CairoFilter.CairoFilter_Impl_.GOOD = 1;
lime.graphics.cairo._CairoFilter.CairoFilter_Impl_.BEST = 2;
lime.graphics.cairo._CairoFilter.CairoFilter_Impl_.NEAREST = 3;
lime.graphics.cairo._CairoFilter.CairoFilter_Impl_.BILINEAR = 4;
lime.graphics.cairo._CairoFilter.CairoFilter_Impl_.GAUSSIAN = 5;
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_.INVALID = -1;
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_.ARGB32 = 0;
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_.RGB24 = 1;
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_.A8 = 2;
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_.A1 = 3;
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_.RGB16_565 = 4;
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_.RGB30 = 5;
lime.graphics.cairo._CairoHintMetrics.CairoHintMetrics_Impl_.DEFAULT = 0;
lime.graphics.cairo._CairoHintMetrics.CairoHintMetrics_Impl_.OFF = 1;
lime.graphics.cairo._CairoHintMetrics.CairoHintMetrics_Impl_.ON = 2;
lime.graphics.cairo._CairoHintStyle.CairoHintStyle_Impl_.DEFAULT = 0;
lime.graphics.cairo._CairoHintStyle.CairoHintStyle_Impl_.NONE = 1;
lime.graphics.cairo._CairoHintStyle.CairoHintStyle_Impl_.SLIGHT = 2;
lime.graphics.cairo._CairoHintStyle.CairoHintStyle_Impl_.MEDIUM = 3;
lime.graphics.cairo._CairoHintStyle.CairoHintStyle_Impl_.FULL = 4;
lime.graphics.cairo._CairoLineCap.CairoLineCap_Impl_.BUTT = 0;
lime.graphics.cairo._CairoLineCap.CairoLineCap_Impl_.ROUND = 1;
lime.graphics.cairo._CairoLineCap.CairoLineCap_Impl_.SQUARE = 2;
lime.graphics.cairo._CairoLineJoin.CairoLineJoin_Impl_.MITER = 0;
lime.graphics.cairo._CairoLineJoin.CairoLineJoin_Impl_.ROUND = 1;
lime.graphics.cairo._CairoLineJoin.CairoLineJoin_Impl_.BEVEL = 2;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.CLEAR = 0;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.SOURCE = 1;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.OVER = 2;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.IN = 3;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.OUT = 4;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.ATOP = 5;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.DEST = 6;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.DEST_OVER = 7;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.DEST_IN = 8;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.DEST_OUT = 9;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.DEST_ATOP = 10;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.XOR = 11;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.ADD = 12;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.SATURATE = 13;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.MULTIPLY = 14;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.SCREEN = 15;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.OVERLAY = 16;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.DARKEN = 17;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.LIGHTEN = 18;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.COLOR_DODGE = 19;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.COLOR_BURN = 20;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.HARD_LIGHT = 21;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.SOFT_LIGHT = 22;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.DIFFERENCE = 23;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.EXCLUSION = 24;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.HSL_HUE = 25;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.HSL_SATURATION = 26;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.HSL_COLOR = 27;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.HSL_LUMINOSITY = 28;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.SUCCESS = 0;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.NO_MEMORY = 1;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_RESTORE = 2;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_POP_GROUP = 3;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.NO_CURRENT_POINT = 4;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_MATRIX = 5;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_STATUS = 6;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.NULL_POINTER = 7;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_STRING = 8;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_PATH_DATA = 9;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.READ_ERROR = 10;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.WRITE_ERROR = 11;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.SURFACE_FINISHED = 12;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.SURFACE_TYPE_MISMATCH = 13;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.PATTERN_TYPE_MISMATCH = 14;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_CONTENT = 15;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_FORMAT = 16;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_VISUAL = 17;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.FILE_NOT_FOUND = 18;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_DASH = 19;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_DSC_COMMENT = 20;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_INDEX = 21;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.CLIP_NOT_REPRESENTABLE = 22;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.TEMP_FILE_ERROR = 23;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_STRIDE = 24;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.FONT_TYPE_MISMATCH = 25;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.USER_FONT_IMMUTABLE = 26;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.USER_FONT_ERROR = 27;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.NEGATIVE_COUNT = 28;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_CLUSTERS = 29;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_SLANT = 30;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_WEIGHT = 31;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_SIZE = 32;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.USER_FONT_NOT_IMPLEMENTED = 33;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.DEVICE_TYPE_MISMATCH = 34;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.DEVICE_ERROR = 35;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_MESH_CONSTRUCTION = 36;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.DEVICE_FINISHED = 37;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.JBIG2_GLOBAL_MISSING = 38;
lime.graphics.cairo._CairoSubpixelOrder.CairoSubpixelOrder_Impl_.DEFAULT = 0;
lime.graphics.cairo._CairoSubpixelOrder.CairoSubpixelOrder_Impl_.RGB = 1;
lime.graphics.cairo._CairoSubpixelOrder.CairoSubpixelOrder_Impl_.BGR = 2;
lime.graphics.cairo._CairoSubpixelOrder.CairoSubpixelOrder_Impl_.VRGB = 3;
lime.graphics.cairo._CairoSubpixelOrder.CairoSubpixelOrder_Impl_.VBGR = 4;
lime.graphics.opengl.GL.DEPTH_BUFFER_BIT = 256;
lime.graphics.opengl.GL.STENCIL_BUFFER_BIT = 1024;
lime.graphics.opengl.GL.COLOR_BUFFER_BIT = 16384;
lime.graphics.opengl.GL.POINTS = 0;
lime.graphics.opengl.GL.LINES = 1;
lime.graphics.opengl.GL.LINE_LOOP = 2;
lime.graphics.opengl.GL.LINE_STRIP = 3;
lime.graphics.opengl.GL.TRIANGLES = 4;
lime.graphics.opengl.GL.TRIANGLE_STRIP = 5;
lime.graphics.opengl.GL.TRIANGLE_FAN = 6;
lime.graphics.opengl.GL.ZERO = 0;
lime.graphics.opengl.GL.ONE = 1;
lime.graphics.opengl.GL.SRC_COLOR = 768;
lime.graphics.opengl.GL.ONE_MINUS_SRC_COLOR = 769;
lime.graphics.opengl.GL.SRC_ALPHA = 770;
lime.graphics.opengl.GL.ONE_MINUS_SRC_ALPHA = 771;
lime.graphics.opengl.GL.DST_ALPHA = 772;
lime.graphics.opengl.GL.ONE_MINUS_DST_ALPHA = 773;
lime.graphics.opengl.GL.DST_COLOR = 774;
lime.graphics.opengl.GL.ONE_MINUS_DST_COLOR = 775;
lime.graphics.opengl.GL.SRC_ALPHA_SATURATE = 776;
lime.graphics.opengl.GL.FUNC_ADD = 32774;
lime.graphics.opengl.GL.BLEND_EQUATION = 32777;
lime.graphics.opengl.GL.BLEND_EQUATION_RGB = 32777;
lime.graphics.opengl.GL.BLEND_EQUATION_ALPHA = 34877;
lime.graphics.opengl.GL.FUNC_SUBTRACT = 32778;
lime.graphics.opengl.GL.FUNC_REVERSE_SUBTRACT = 32779;
lime.graphics.opengl.GL.BLEND_DST_RGB = 32968;
lime.graphics.opengl.GL.BLEND_SRC_RGB = 32969;
lime.graphics.opengl.GL.BLEND_DST_ALPHA = 32970;
lime.graphics.opengl.GL.BLEND_SRC_ALPHA = 32971;
lime.graphics.opengl.GL.CONSTANT_COLOR = 32769;
lime.graphics.opengl.GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime.graphics.opengl.GL.CONSTANT_ALPHA = 32771;
lime.graphics.opengl.GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime.graphics.opengl.GL.BLEND_COLOR = 32773;
lime.graphics.opengl.GL.ARRAY_BUFFER = 34962;
lime.graphics.opengl.GL.ELEMENT_ARRAY_BUFFER = 34963;
lime.graphics.opengl.GL.ARRAY_BUFFER_BINDING = 34964;
lime.graphics.opengl.GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime.graphics.opengl.GL.STREAM_DRAW = 35040;
lime.graphics.opengl.GL.STATIC_DRAW = 35044;
lime.graphics.opengl.GL.DYNAMIC_DRAW = 35048;
lime.graphics.opengl.GL.BUFFER_SIZE = 34660;
lime.graphics.opengl.GL.BUFFER_USAGE = 34661;
lime.graphics.opengl.GL.CURRENT_VERTEX_ATTRIB = 34342;
lime.graphics.opengl.GL.FRONT = 1028;
lime.graphics.opengl.GL.BACK = 1029;
lime.graphics.opengl.GL.FRONT_AND_BACK = 1032;
lime.graphics.opengl.GL.CULL_FACE = 2884;
lime.graphics.opengl.GL.BLEND = 3042;
lime.graphics.opengl.GL.DITHER = 3024;
lime.graphics.opengl.GL.STENCIL_TEST = 2960;
lime.graphics.opengl.GL.DEPTH_TEST = 2929;
lime.graphics.opengl.GL.SCISSOR_TEST = 3089;
lime.graphics.opengl.GL.POLYGON_OFFSET_FILL = 32823;
lime.graphics.opengl.GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime.graphics.opengl.GL.SAMPLE_COVERAGE = 32928;
lime.graphics.opengl.GL.NO_ERROR = 0;
lime.graphics.opengl.GL.INVALID_ENUM = 1280;
lime.graphics.opengl.GL.INVALID_VALUE = 1281;
lime.graphics.opengl.GL.INVALID_OPERATION = 1282;
lime.graphics.opengl.GL.OUT_OF_MEMORY = 1285;
lime.graphics.opengl.GL.CW = 2304;
lime.graphics.opengl.GL.CCW = 2305;
lime.graphics.opengl.GL.LINE_WIDTH = 2849;
lime.graphics.opengl.GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime.graphics.opengl.GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime.graphics.opengl.GL.CULL_FACE_MODE = 2885;
lime.graphics.opengl.GL.FRONT_FACE = 2886;
lime.graphics.opengl.GL.DEPTH_RANGE = 2928;
lime.graphics.opengl.GL.DEPTH_WRITEMASK = 2930;
lime.graphics.opengl.GL.DEPTH_CLEAR_VALUE = 2931;
lime.graphics.opengl.GL.DEPTH_FUNC = 2932;
lime.graphics.opengl.GL.STENCIL_CLEAR_VALUE = 2961;
lime.graphics.opengl.GL.STENCIL_FUNC = 2962;
lime.graphics.opengl.GL.STENCIL_FAIL = 2964;
lime.graphics.opengl.GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime.graphics.opengl.GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime.graphics.opengl.GL.STENCIL_REF = 2967;
lime.graphics.opengl.GL.STENCIL_VALUE_MASK = 2963;
lime.graphics.opengl.GL.STENCIL_WRITEMASK = 2968;
lime.graphics.opengl.GL.STENCIL_BACK_FUNC = 34816;
lime.graphics.opengl.GL.STENCIL_BACK_FAIL = 34817;
lime.graphics.opengl.GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime.graphics.opengl.GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime.graphics.opengl.GL.STENCIL_BACK_REF = 36003;
lime.graphics.opengl.GL.STENCIL_BACK_VALUE_MASK = 36004;
lime.graphics.opengl.GL.STENCIL_BACK_WRITEMASK = 36005;
lime.graphics.opengl.GL.VIEWPORT = 2978;
lime.graphics.opengl.GL.SCISSOR_BOX = 3088;
lime.graphics.opengl.GL.COLOR_CLEAR_VALUE = 3106;
lime.graphics.opengl.GL.COLOR_WRITEMASK = 3107;
lime.graphics.opengl.GL.UNPACK_ALIGNMENT = 3317;
lime.graphics.opengl.GL.PACK_ALIGNMENT = 3333;
lime.graphics.opengl.GL.MAX_TEXTURE_SIZE = 3379;
lime.graphics.opengl.GL.MAX_VIEWPORT_DIMS = 3386;
lime.graphics.opengl.GL.SUBPIXEL_BITS = 3408;
lime.graphics.opengl.GL.RED_BITS = 3410;
lime.graphics.opengl.GL.GREEN_BITS = 3411;
lime.graphics.opengl.GL.BLUE_BITS = 3412;
lime.graphics.opengl.GL.ALPHA_BITS = 3413;
lime.graphics.opengl.GL.DEPTH_BITS = 3414;
lime.graphics.opengl.GL.STENCIL_BITS = 3415;
lime.graphics.opengl.GL.POLYGON_OFFSET_UNITS = 10752;
lime.graphics.opengl.GL.POLYGON_OFFSET_FACTOR = 32824;
lime.graphics.opengl.GL.TEXTURE_BINDING_2D = 32873;
lime.graphics.opengl.GL.SAMPLE_BUFFERS = 32936;
lime.graphics.opengl.GL.SAMPLES = 32937;
lime.graphics.opengl.GL.SAMPLE_COVERAGE_VALUE = 32938;
lime.graphics.opengl.GL.SAMPLE_COVERAGE_INVERT = 32939;
lime.graphics.opengl.GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime.graphics.opengl.GL.DONT_CARE = 4352;
lime.graphics.opengl.GL.FASTEST = 4353;
lime.graphics.opengl.GL.NICEST = 4354;
lime.graphics.opengl.GL.GENERATE_MIPMAP_HINT = 33170;
lime.graphics.opengl.GL.BYTE = 5120;
lime.graphics.opengl.GL.UNSIGNED_BYTE = 5121;
lime.graphics.opengl.GL.SHORT = 5122;
lime.graphics.opengl.GL.UNSIGNED_SHORT = 5123;
lime.graphics.opengl.GL.INT = 5124;
lime.graphics.opengl.GL.UNSIGNED_INT = 5125;
lime.graphics.opengl.GL.FLOAT = 5126;
lime.graphics.opengl.GL.DEPTH_COMPONENT = 6402;
lime.graphics.opengl.GL.ALPHA = 6406;
lime.graphics.opengl.GL.RGB = 6407;
lime.graphics.opengl.GL.RGBA = 6408;
lime.graphics.opengl.GL.LUMINANCE = 6409;
lime.graphics.opengl.GL.LUMINANCE_ALPHA = 6410;
lime.graphics.opengl.GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime.graphics.opengl.GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime.graphics.opengl.GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime.graphics.opengl.GL.FRAGMENT_SHADER = 35632;
lime.graphics.opengl.GL.VERTEX_SHADER = 35633;
lime.graphics.opengl.GL.MAX_VERTEX_ATTRIBS = 34921;
lime.graphics.opengl.GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime.graphics.opengl.GL.MAX_VARYING_VECTORS = 36348;
lime.graphics.opengl.GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime.graphics.opengl.GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime.graphics.opengl.GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime.graphics.opengl.GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime.graphics.opengl.GL.SHADER_TYPE = 35663;
lime.graphics.opengl.GL.DELETE_STATUS = 35712;
lime.graphics.opengl.GL.LINK_STATUS = 35714;
lime.graphics.opengl.GL.VALIDATE_STATUS = 35715;
lime.graphics.opengl.GL.ATTACHED_SHADERS = 35717;
lime.graphics.opengl.GL.ACTIVE_UNIFORMS = 35718;
lime.graphics.opengl.GL.ACTIVE_ATTRIBUTES = 35721;
lime.graphics.opengl.GL.SHADING_LANGUAGE_VERSION = 35724;
lime.graphics.opengl.GL.CURRENT_PROGRAM = 35725;
lime.graphics.opengl.GL.NEVER = 512;
lime.graphics.opengl.GL.LESS = 513;
lime.graphics.opengl.GL.EQUAL = 514;
lime.graphics.opengl.GL.LEQUAL = 515;
lime.graphics.opengl.GL.GREATER = 516;
lime.graphics.opengl.GL.NOTEQUAL = 517;
lime.graphics.opengl.GL.GEQUAL = 518;
lime.graphics.opengl.GL.ALWAYS = 519;
lime.graphics.opengl.GL.KEEP = 7680;
lime.graphics.opengl.GL.REPLACE = 7681;
lime.graphics.opengl.GL.INCR = 7682;
lime.graphics.opengl.GL.DECR = 7683;
lime.graphics.opengl.GL.INVERT = 5386;
lime.graphics.opengl.GL.INCR_WRAP = 34055;
lime.graphics.opengl.GL.DECR_WRAP = 34056;
lime.graphics.opengl.GL.VENDOR = 7936;
lime.graphics.opengl.GL.RENDERER = 7937;
lime.graphics.opengl.GL.VERSION = 7938;
lime.graphics.opengl.GL.NEAREST = 9728;
lime.graphics.opengl.GL.LINEAR = 9729;
lime.graphics.opengl.GL.NEAREST_MIPMAP_NEAREST = 9984;
lime.graphics.opengl.GL.LINEAR_MIPMAP_NEAREST = 9985;
lime.graphics.opengl.GL.NEAREST_MIPMAP_LINEAR = 9986;
lime.graphics.opengl.GL.LINEAR_MIPMAP_LINEAR = 9987;
lime.graphics.opengl.GL.TEXTURE_MAG_FILTER = 10240;
lime.graphics.opengl.GL.TEXTURE_MIN_FILTER = 10241;
lime.graphics.opengl.GL.TEXTURE_WRAP_S = 10242;
lime.graphics.opengl.GL.TEXTURE_WRAP_T = 10243;
lime.graphics.opengl.GL.TEXTURE_2D = 3553;
lime.graphics.opengl.GL.TEXTURE = 5890;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP = 34067;
lime.graphics.opengl.GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime.graphics.opengl.GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime.graphics.opengl.GL.TEXTURE0 = 33984;
lime.graphics.opengl.GL.TEXTURE1 = 33985;
lime.graphics.opengl.GL.TEXTURE2 = 33986;
lime.graphics.opengl.GL.TEXTURE3 = 33987;
lime.graphics.opengl.GL.TEXTURE4 = 33988;
lime.graphics.opengl.GL.TEXTURE5 = 33989;
lime.graphics.opengl.GL.TEXTURE6 = 33990;
lime.graphics.opengl.GL.TEXTURE7 = 33991;
lime.graphics.opengl.GL.TEXTURE8 = 33992;
lime.graphics.opengl.GL.TEXTURE9 = 33993;
lime.graphics.opengl.GL.TEXTURE10 = 33994;
lime.graphics.opengl.GL.TEXTURE11 = 33995;
lime.graphics.opengl.GL.TEXTURE12 = 33996;
lime.graphics.opengl.GL.TEXTURE13 = 33997;
lime.graphics.opengl.GL.TEXTURE14 = 33998;
lime.graphics.opengl.GL.TEXTURE15 = 33999;
lime.graphics.opengl.GL.TEXTURE16 = 34000;
lime.graphics.opengl.GL.TEXTURE17 = 34001;
lime.graphics.opengl.GL.TEXTURE18 = 34002;
lime.graphics.opengl.GL.TEXTURE19 = 34003;
lime.graphics.opengl.GL.TEXTURE20 = 34004;
lime.graphics.opengl.GL.TEXTURE21 = 34005;
lime.graphics.opengl.GL.TEXTURE22 = 34006;
lime.graphics.opengl.GL.TEXTURE23 = 34007;
lime.graphics.opengl.GL.TEXTURE24 = 34008;
lime.graphics.opengl.GL.TEXTURE25 = 34009;
lime.graphics.opengl.GL.TEXTURE26 = 34010;
lime.graphics.opengl.GL.TEXTURE27 = 34011;
lime.graphics.opengl.GL.TEXTURE28 = 34012;
lime.graphics.opengl.GL.TEXTURE29 = 34013;
lime.graphics.opengl.GL.TEXTURE30 = 34014;
lime.graphics.opengl.GL.TEXTURE31 = 34015;
lime.graphics.opengl.GL.ACTIVE_TEXTURE = 34016;
lime.graphics.opengl.GL.REPEAT = 10497;
lime.graphics.opengl.GL.CLAMP_TO_EDGE = 33071;
lime.graphics.opengl.GL.MIRRORED_REPEAT = 33648;
lime.graphics.opengl.GL.FLOAT_VEC2 = 35664;
lime.graphics.opengl.GL.FLOAT_VEC3 = 35665;
lime.graphics.opengl.GL.FLOAT_VEC4 = 35666;
lime.graphics.opengl.GL.INT_VEC2 = 35667;
lime.graphics.opengl.GL.INT_VEC3 = 35668;
lime.graphics.opengl.GL.INT_VEC4 = 35669;
lime.graphics.opengl.GL.BOOL = 35670;
lime.graphics.opengl.GL.BOOL_VEC2 = 35671;
lime.graphics.opengl.GL.BOOL_VEC3 = 35672;
lime.graphics.opengl.GL.BOOL_VEC4 = 35673;
lime.graphics.opengl.GL.FLOAT_MAT2 = 35674;
lime.graphics.opengl.GL.FLOAT_MAT3 = 35675;
lime.graphics.opengl.GL.FLOAT_MAT4 = 35676;
lime.graphics.opengl.GL.SAMPLER_2D = 35678;
lime.graphics.opengl.GL.SAMPLER_CUBE = 35680;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime.graphics.opengl.GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime.graphics.opengl.GL.POINT_SPRITE = 34913;
lime.graphics.opengl.GL.COMPILE_STATUS = 35713;
lime.graphics.opengl.GL.LOW_FLOAT = 36336;
lime.graphics.opengl.GL.MEDIUM_FLOAT = 36337;
lime.graphics.opengl.GL.HIGH_FLOAT = 36338;
lime.graphics.opengl.GL.LOW_INT = 36339;
lime.graphics.opengl.GL.MEDIUM_INT = 36340;
lime.graphics.opengl.GL.HIGH_INT = 36341;
lime.graphics.opengl.GL.FRAMEBUFFER = 36160;
lime.graphics.opengl.GL.RENDERBUFFER = 36161;
lime.graphics.opengl.GL.RGBA4 = 32854;
lime.graphics.opengl.GL.RGB5_A1 = 32855;
lime.graphics.opengl.GL.RGB565 = 36194;
lime.graphics.opengl.GL.DEPTH_COMPONENT16 = 33189;
lime.graphics.opengl.GL.STENCIL_INDEX = 6401;
lime.graphics.opengl.GL.STENCIL_INDEX8 = 36168;
lime.graphics.opengl.GL.DEPTH_STENCIL = 34041;
lime.graphics.opengl.GL.RENDERBUFFER_WIDTH = 36162;
lime.graphics.opengl.GL.RENDERBUFFER_HEIGHT = 36163;
lime.graphics.opengl.GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime.graphics.opengl.GL.RENDERBUFFER_RED_SIZE = 36176;
lime.graphics.opengl.GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime.graphics.opengl.GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime.graphics.opengl.GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime.graphics.opengl.GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime.graphics.opengl.GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime.graphics.opengl.GL.COLOR_ATTACHMENT0 = 36064;
lime.graphics.opengl.GL.DEPTH_ATTACHMENT = 36096;
lime.graphics.opengl.GL.STENCIL_ATTACHMENT = 36128;
lime.graphics.opengl.GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime.graphics.opengl.GL.NONE = 0;
lime.graphics.opengl.GL.FRAMEBUFFER_COMPLETE = 36053;
lime.graphics.opengl.GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime.graphics.opengl.GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime.graphics.opengl.GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime.graphics.opengl.GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime.graphics.opengl.GL.FRAMEBUFFER_BINDING = 36006;
lime.graphics.opengl.GL.RENDERBUFFER_BINDING = 36007;
lime.graphics.opengl.GL.MAX_RENDERBUFFER_SIZE = 34024;
lime.graphics.opengl.GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime.graphics.opengl.GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime.graphics.opengl.GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime.graphics.opengl.GL.CONTEXT_LOST_WEBGL = 37442;
lime.graphics.opengl.GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime.graphics.opengl.GL.BROWSER_DEFAULT_WEBGL = 37444;
lime.math._ColorMatrix.ColorMatrix_Impl_.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime.math.Matrix3.__identity = new lime.math.Matrix3();
lime.math._Matrix4.Matrix4_Impl_.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime.net._URLRequestMethod.URLRequestMethod_Impl_.DELETE = "DELETE";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.GET = "GET";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.HEAD = "HEAD";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.OPTIONS = "OPTIONS";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.POST = "POST";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.PUT = "PUT";
lime.system.System.__moduleNames = null;
lime.system._System.SystemDirectory_Impl_.APPLICATION = 0;
lime.system._System.SystemDirectory_Impl_.APPLICATION_STORAGE = 1;
lime.system._System.SystemDirectory_Impl_.DESKTOP = 2;
lime.system._System.SystemDirectory_Impl_.DOCUMENTS = 3;
lime.system._System.SystemDirectory_Impl_.FONTS = 4;
lime.system._System.SystemDirectory_Impl_.USER = 5;
lime.ui.Gamepad.devices = new haxe.ds.IntMap();
lime.ui._GamepadAxis.GamepadAxis_Impl_.LEFT_X = 0;
lime.ui._GamepadAxis.GamepadAxis_Impl_.LEFT_Y = 1;
lime.ui._GamepadAxis.GamepadAxis_Impl_.RIGHT_X = 2;
lime.ui._GamepadAxis.GamepadAxis_Impl_.RIGHT_Y = 3;
lime.ui._GamepadAxis.GamepadAxis_Impl_.TRIGGER_LEFT = 4;
lime.ui._GamepadAxis.GamepadAxis_Impl_.TRIGGER_RIGHT = 5;
lime.ui._GamepadButton.GamepadButton_Impl_.A = 0;
lime.ui._GamepadButton.GamepadButton_Impl_.B = 1;
lime.ui._GamepadButton.GamepadButton_Impl_.X = 2;
lime.ui._GamepadButton.GamepadButton_Impl_.Y = 3;
lime.ui._GamepadButton.GamepadButton_Impl_.BACK = 4;
lime.ui._GamepadButton.GamepadButton_Impl_.GUIDE = 5;
lime.ui._GamepadButton.GamepadButton_Impl_.START = 6;
lime.ui._GamepadButton.GamepadButton_Impl_.LEFT_STICK = 7;
lime.ui._GamepadButton.GamepadButton_Impl_.RIGHT_STICK = 8;
lime.ui._GamepadButton.GamepadButton_Impl_.LEFT_SHOULDER = 9;
lime.ui._GamepadButton.GamepadButton_Impl_.RIGHT_SHOULDER = 10;
lime.ui._GamepadButton.GamepadButton_Impl_.DPAD_UP = 11;
lime.ui._GamepadButton.GamepadButton_Impl_.DPAD_DOWN = 12;
lime.ui._GamepadButton.GamepadButton_Impl_.DPAD_LEFT = 13;
lime.ui._GamepadButton.GamepadButton_Impl_.DPAD_RIGHT = 14;
lime.ui._KeyCode.KeyCode_Impl_.UNKNOWN = 0;
lime.ui._KeyCode.KeyCode_Impl_.BACKSPACE = 8;
lime.ui._KeyCode.KeyCode_Impl_.TAB = 9;
lime.ui._KeyCode.KeyCode_Impl_.RETURN = 13;
lime.ui._KeyCode.KeyCode_Impl_.ESCAPE = 27;
lime.ui._KeyCode.KeyCode_Impl_.SPACE = 32;
lime.ui._KeyCode.KeyCode_Impl_.EXCLAMATION = 33;
lime.ui._KeyCode.KeyCode_Impl_.QUOTE = 34;
lime.ui._KeyCode.KeyCode_Impl_.HASH = 35;
lime.ui._KeyCode.KeyCode_Impl_.DOLLAR = 36;
lime.ui._KeyCode.KeyCode_Impl_.PERCENT = 37;
lime.ui._KeyCode.KeyCode_Impl_.AMPERSAND = 38;
lime.ui._KeyCode.KeyCode_Impl_.SINGLE_QUOTE = 39;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_PARENTHESIS = 40;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_PARENTHESIS = 41;
lime.ui._KeyCode.KeyCode_Impl_.ASTERISK = 42;
lime.ui._KeyCode.KeyCode_Impl_.PLUS = 43;
lime.ui._KeyCode.KeyCode_Impl_.COMMA = 44;
lime.ui._KeyCode.KeyCode_Impl_.MINUS = 45;
lime.ui._KeyCode.KeyCode_Impl_.PERIOD = 46;
lime.ui._KeyCode.KeyCode_Impl_.SLASH = 47;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_0 = 48;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_1 = 49;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_2 = 50;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_3 = 51;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_4 = 52;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_5 = 53;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_6 = 54;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_7 = 55;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_8 = 56;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_9 = 57;
lime.ui._KeyCode.KeyCode_Impl_.COLON = 58;
lime.ui._KeyCode.KeyCode_Impl_.SEMICOLON = 59;
lime.ui._KeyCode.KeyCode_Impl_.LESS_THAN = 60;
lime.ui._KeyCode.KeyCode_Impl_.EQUALS = 61;
lime.ui._KeyCode.KeyCode_Impl_.GREATER_THAN = 62;
lime.ui._KeyCode.KeyCode_Impl_.QUESTION = 63;
lime.ui._KeyCode.KeyCode_Impl_.AT = 64;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_BRACKET = 91;
lime.ui._KeyCode.KeyCode_Impl_.BACKSLASH = 92;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_BRACKET = 93;
lime.ui._KeyCode.KeyCode_Impl_.CARET = 94;
lime.ui._KeyCode.KeyCode_Impl_.UNDERSCORE = 95;
lime.ui._KeyCode.KeyCode_Impl_.GRAVE = 96;
lime.ui._KeyCode.KeyCode_Impl_.A = 97;
lime.ui._KeyCode.KeyCode_Impl_.B = 98;
lime.ui._KeyCode.KeyCode_Impl_.C = 99;
lime.ui._KeyCode.KeyCode_Impl_.D = 100;
lime.ui._KeyCode.KeyCode_Impl_.E = 101;
lime.ui._KeyCode.KeyCode_Impl_.F = 102;
lime.ui._KeyCode.KeyCode_Impl_.G = 103;
lime.ui._KeyCode.KeyCode_Impl_.H = 104;
lime.ui._KeyCode.KeyCode_Impl_.I = 105;
lime.ui._KeyCode.KeyCode_Impl_.J = 106;
lime.ui._KeyCode.KeyCode_Impl_.K = 107;
lime.ui._KeyCode.KeyCode_Impl_.L = 108;
lime.ui._KeyCode.KeyCode_Impl_.M = 109;
lime.ui._KeyCode.KeyCode_Impl_.N = 110;
lime.ui._KeyCode.KeyCode_Impl_.O = 111;
lime.ui._KeyCode.KeyCode_Impl_.P = 112;
lime.ui._KeyCode.KeyCode_Impl_.Q = 113;
lime.ui._KeyCode.KeyCode_Impl_.R = 114;
lime.ui._KeyCode.KeyCode_Impl_.S = 115;
lime.ui._KeyCode.KeyCode_Impl_.T = 116;
lime.ui._KeyCode.KeyCode_Impl_.U = 117;
lime.ui._KeyCode.KeyCode_Impl_.V = 118;
lime.ui._KeyCode.KeyCode_Impl_.W = 119;
lime.ui._KeyCode.KeyCode_Impl_.X = 120;
lime.ui._KeyCode.KeyCode_Impl_.Y = 121;
lime.ui._KeyCode.KeyCode_Impl_.Z = 122;
lime.ui._KeyCode.KeyCode_Impl_.DELETE = 127;
lime.ui._KeyCode.KeyCode_Impl_.CAPS_LOCK = 1073741881;
lime.ui._KeyCode.KeyCode_Impl_.F1 = 1073741882;
lime.ui._KeyCode.KeyCode_Impl_.F2 = 1073741883;
lime.ui._KeyCode.KeyCode_Impl_.F3 = 1073741884;
lime.ui._KeyCode.KeyCode_Impl_.F4 = 1073741885;
lime.ui._KeyCode.KeyCode_Impl_.F5 = 1073741886;
lime.ui._KeyCode.KeyCode_Impl_.F6 = 1073741887;
lime.ui._KeyCode.KeyCode_Impl_.F7 = 1073741888;
lime.ui._KeyCode.KeyCode_Impl_.F8 = 1073741889;
lime.ui._KeyCode.KeyCode_Impl_.F9 = 1073741890;
lime.ui._KeyCode.KeyCode_Impl_.F10 = 1073741891;
lime.ui._KeyCode.KeyCode_Impl_.F11 = 1073741892;
lime.ui._KeyCode.KeyCode_Impl_.F12 = 1073741893;
lime.ui._KeyCode.KeyCode_Impl_.PRINT_SCREEN = 1073741894;
lime.ui._KeyCode.KeyCode_Impl_.SCROLL_LOCK = 1073741895;
lime.ui._KeyCode.KeyCode_Impl_.PAUSE = 1073741896;
lime.ui._KeyCode.KeyCode_Impl_.INSERT = 1073741897;
lime.ui._KeyCode.KeyCode_Impl_.HOME = 1073741898;
lime.ui._KeyCode.KeyCode_Impl_.PAGE_UP = 1073741899;
lime.ui._KeyCode.KeyCode_Impl_.END = 1073741901;
lime.ui._KeyCode.KeyCode_Impl_.PAGE_DOWN = 1073741902;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT = 1073741903;
lime.ui._KeyCode.KeyCode_Impl_.LEFT = 1073741904;
lime.ui._KeyCode.KeyCode_Impl_.DOWN = 1073741905;
lime.ui._KeyCode.KeyCode_Impl_.UP = 1073741906;
lime.ui._KeyCode.KeyCode_Impl_.NUM_LOCK = 1073741907;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DIVIDE = 1073741908;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MULTIPLY = 1073741909;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MINUS = 1073741910;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PLUS = 1073741911;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_ENTER = 1073741912;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_1 = 1073741913;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_2 = 1073741914;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_3 = 1073741915;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_4 = 1073741916;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_5 = 1073741917;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_6 = 1073741918;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_7 = 1073741919;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_8 = 1073741920;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_9 = 1073741921;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_0 = 1073741922;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PERIOD = 1073741923;
lime.ui._KeyCode.KeyCode_Impl_.APPLICATION = 1073741925;
lime.ui._KeyCode.KeyCode_Impl_.POWER = 1073741926;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_EQUALS = 1073741927;
lime.ui._KeyCode.KeyCode_Impl_.F13 = 1073741928;
lime.ui._KeyCode.KeyCode_Impl_.F14 = 1073741929;
lime.ui._KeyCode.KeyCode_Impl_.F15 = 1073741930;
lime.ui._KeyCode.KeyCode_Impl_.F16 = 1073741931;
lime.ui._KeyCode.KeyCode_Impl_.F17 = 1073741932;
lime.ui._KeyCode.KeyCode_Impl_.F18 = 1073741933;
lime.ui._KeyCode.KeyCode_Impl_.F19 = 1073741934;
lime.ui._KeyCode.KeyCode_Impl_.F20 = 1073741935;
lime.ui._KeyCode.KeyCode_Impl_.F21 = 1073741936;
lime.ui._KeyCode.KeyCode_Impl_.F22 = 1073741937;
lime.ui._KeyCode.KeyCode_Impl_.F23 = 1073741938;
lime.ui._KeyCode.KeyCode_Impl_.F24 = 1073741939;
lime.ui._KeyCode.KeyCode_Impl_.EXECUTE = 1073741940;
lime.ui._KeyCode.KeyCode_Impl_.HELP = 1073741941;
lime.ui._KeyCode.KeyCode_Impl_.MENU = 1073741942;
lime.ui._KeyCode.KeyCode_Impl_.SELECT = 1073741943;
lime.ui._KeyCode.KeyCode_Impl_.STOP = 1073741944;
lime.ui._KeyCode.KeyCode_Impl_.AGAIN = 1073741945;
lime.ui._KeyCode.KeyCode_Impl_.UNDO = 1073741946;
lime.ui._KeyCode.KeyCode_Impl_.CUT = 1073741947;
lime.ui._KeyCode.KeyCode_Impl_.COPY = 1073741948;
lime.ui._KeyCode.KeyCode_Impl_.PASTE = 1073741949;
lime.ui._KeyCode.KeyCode_Impl_.FIND = 1073741950;
lime.ui._KeyCode.KeyCode_Impl_.MUTE = 1073741951;
lime.ui._KeyCode.KeyCode_Impl_.VOLUME_UP = 1073741952;
lime.ui._KeyCode.KeyCode_Impl_.VOLUME_DOWN = 1073741953;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_COMMA = 1073741957;
lime.ui._KeyCode.KeyCode_Impl_.ALT_ERASE = 1073741977;
lime.ui._KeyCode.KeyCode_Impl_.SYSTEM_REQUEST = 1073741978;
lime.ui._KeyCode.KeyCode_Impl_.CANCEL = 1073741979;
lime.ui._KeyCode.KeyCode_Impl_.CLEAR = 1073741980;
lime.ui._KeyCode.KeyCode_Impl_.PRIOR = 1073741981;
lime.ui._KeyCode.KeyCode_Impl_.RETURN2 = 1073741982;
lime.ui._KeyCode.KeyCode_Impl_.SEPARATOR = 1073741983;
lime.ui._KeyCode.KeyCode_Impl_.OUT = 1073741984;
lime.ui._KeyCode.KeyCode_Impl_.OPER = 1073741985;
lime.ui._KeyCode.KeyCode_Impl_.CLEAR_AGAIN = 1073741986;
lime.ui._KeyCode.KeyCode_Impl_.CRSEL = 1073741987;
lime.ui._KeyCode.KeyCode_Impl_.EXSEL = 1073741988;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_00 = 1073742000;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_000 = 1073742001;
lime.ui._KeyCode.KeyCode_Impl_.THOUSAND_SEPARATOR = 1073742002;
lime.ui._KeyCode.KeyCode_Impl_.DECIMAL_SEPARATOR = 1073742003;
lime.ui._KeyCode.KeyCode_Impl_.CURRENCY_UNIT = 1073742004;
lime.ui._KeyCode.KeyCode_Impl_.CURRENCY_SUBUNIT = 1073742005;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_LEFT_BRACE = 1073742008;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_RIGHT_BRACE = 1073742009;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_TAB = 1073742010;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_BACKSPACE = 1073742011;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_A = 1073742012;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_B = 1073742013;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_C = 1073742014;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_D = 1073742015;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_E = 1073742016;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_F = 1073742017;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_XOR = 1073742018;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_POWER = 1073742019;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PERCENT = 1073742020;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_LESS_THAN = 1073742021;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_GREATER_THAN = 1073742022;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_AMPERSAND = 1073742023;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_VERTICAL_BAR = 1073742025;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_COLON = 1073742027;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_HASH = 1073742028;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_SPACE = 1073742029;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_AT = 1073742030;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_EXCLAMATION = 1073742031;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_STORE = 1073742032;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_RECALL = 1073742033;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_CLEAR = 1073742034;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_ADD = 1073742035;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_SUBTRACT = 1073742036;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_MULTIPLY = 1073742037;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_DIVIDE = 1073742038;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PLUS_MINUS = 1073742039;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_CLEAR = 1073742040;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_CLEAR_ENTRY = 1073742041;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_BINARY = 1073742042;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_OCTAL = 1073742043;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DECIMAL = 1073742044;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_HEXADECIMAL = 1073742045;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_CTRL = 1073742048;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_SHIFT = 1073742049;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_ALT = 1073742050;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_META = 1073742051;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_CTRL = 1073742052;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_SHIFT = 1073742053;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_ALT = 1073742054;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_META = 1073742055;
lime.ui._KeyCode.KeyCode_Impl_.MODE = 1073742081;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_NEXT = 1073742082;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_PREVIOUS = 1073742083;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_STOP = 1073742084;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_PLAY = 1073742085;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_MUTE = 1073742086;
lime.ui._KeyCode.KeyCode_Impl_.MEDIA_SELECT = 1073742087;
lime.ui._KeyCode.KeyCode_Impl_.WWW = 1073742088;
lime.ui._KeyCode.KeyCode_Impl_.MAIL = 1073742089;
lime.ui._KeyCode.KeyCode_Impl_.CALCULATOR = 1073742090;
lime.ui._KeyCode.KeyCode_Impl_.COMPUTER = 1073742091;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_SEARCH = 1073742092;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_HOME = 1073742093;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_BACK = 1073742094;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_FORWARD = 1073742095;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_STOP = 1073742096;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_REFRESH = 1073742097;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_BOOKMARKS = 1073742098;
lime.ui._KeyCode.KeyCode_Impl_.BRIGHTNESS_DOWN = 1073742099;
lime.ui._KeyCode.KeyCode_Impl_.BRIGHTNESS_UP = 1073742100;
lime.ui._KeyCode.KeyCode_Impl_.DISPLAY_SWITCH = 1073742101;
lime.ui._KeyCode.KeyCode_Impl_.BACKLIGHT_TOGGLE = 1073742102;
lime.ui._KeyCode.KeyCode_Impl_.BACKLIGHT_DOWN = 1073742103;
lime.ui._KeyCode.KeyCode_Impl_.BACKLIGHT_UP = 1073742104;
lime.ui._KeyCode.KeyCode_Impl_.EJECT = 1073742105;
lime.ui._KeyCode.KeyCode_Impl_.SLEEP = 1073742106;
lime.ui._KeyModifier.KeyModifier_Impl_.NONE = 0;
lime.ui._KeyModifier.KeyModifier_Impl_.LEFT_SHIFT = 1;
lime.ui._KeyModifier.KeyModifier_Impl_.RIGHT_SHIFT = 2;
lime.ui._KeyModifier.KeyModifier_Impl_.LEFT_CTRL = 64;
lime.ui._KeyModifier.KeyModifier_Impl_.RIGHT_CTRL = 128;
lime.ui._KeyModifier.KeyModifier_Impl_.LEFT_ALT = 256;
lime.ui._KeyModifier.KeyModifier_Impl_.RIGHT_ALT = 512;
lime.ui._KeyModifier.KeyModifier_Impl_.LEFT_META = 1024;
lime.ui._KeyModifier.KeyModifier_Impl_.RIGHT_META = 2048;
lime.ui._KeyModifier.KeyModifier_Impl_.NUM_LOCK = 4096;
lime.ui._KeyModifier.KeyModifier_Impl_.CAPS_LOCK = 8192;
lime.ui._KeyModifier.KeyModifier_Impl_.MODE = 16384;
lime.ui._KeyModifier.KeyModifier_Impl_.CTRL = 192;
lime.ui._KeyModifier.KeyModifier_Impl_.SHIFT = 3;
lime.ui._KeyModifier.KeyModifier_Impl_.ALT = 768;
lime.ui._KeyModifier.KeyModifier_Impl_.META = 3072;
lime.utils.ByteArray.lime_byte_array_overwrite_file = lime.system.System.load("lime","lime_byte_array_overwrite_file",2);
lime.utils.ByteArray.lime_byte_array_read_file = lime.system.System.load("lime","lime_byte_array_read_file",1);
lime.utils.ByteArray.lime_lzma_decode = lime.system.System.load("lime","lime_lzma_decode",1);
lime.utils.ByteArray.lime_lzma_encode = lime.system.System.load("lime","lime_lzma_encode",1);
motion.actuators.SimpleActuator.actuators = new Array();
motion.actuators.SimpleActuator.actuatorsLength = 0;
motion.actuators.SimpleActuator.addedEvent = false;
motion.Actuate.defaultActuator = motion.actuators.SimpleActuator;
motion.Actuate.defaultEase = motion.easing.Linear.get_easeNone();
motion.Actuate.targetLibraries = new haxe.ds.ObjectMap();
nape.Config.epsilon = 1e-8;
nape.Config.fluidAngularDragFriction = 2.5;
nape.Config.fluidAngularDrag = 100;
nape.Config.fluidVacuumDrag = 0.5;
nape.Config.fluidLinearDrag = 0.5;
nape.Config.collisionSlop = 0.2;
nape.Config.collisionSlopCCD = 0.5;
nape.Config.distanceThresholdCCD = 0.05;
nape.Config.staticCCDLinearThreshold = 0.05;
nape.Config.staticCCDAngularThreshold = 0.005;
nape.Config.bulletCCDLinearThreshold = 0.125;
nape.Config.bulletCCDAngularThreshold = 0.0125;
nape.Config.dynamicSweepLinearThreshold = 17;
nape.Config.dynamicSweepAngularThreshold = 0.6;
nape.Config.angularCCDSlipScale = 0.75;
nape.Config.arbiterExpirationDelay = 6;
nape.Config.staticFrictionThreshold = 2;
nape.Config.elasticThreshold = 20;
nape.Config.sleepDelay = 60;
nape.Config.linearSleepThreshold = 0.2;
nape.Config.angularSleepThreshold = 0.4;
nape.Config.contactBiasCoef = 0.3;
nape.Config.contactStaticBiasCoef = 0.6;
nape.Config.contactContinuousBiasCoef = 0.4;
nape.Config.contactContinuousStaticBiasCoef = 0.5;
nape.Config.constraintLinearSlop = 0.1;
nape.Config.constraintAngularSlop = 1e-3;
nape.Config.illConditionedThreshold = 2e+8;
nape.callbacks.CbTypeIterator.zpp_pool = null;
nape.callbacks.ListenerIterator.zpp_pool = null;
nape.constraint.ConstraintIterator.zpp_pool = null;
nape.dynamics.ArbiterIterator.zpp_pool = null;
nape.dynamics.ContactIterator.zpp_pool = null;
nape.dynamics.InteractionGroupIterator.zpp_pool = null;
nape.geom.ConvexResultIterator.zpp_pool = null;
nape.geom.GeomPolyIterator.zpp_pool = null;
nape.geom.RayResultIterator.zpp_pool = null;
nape.geom.Vec2Iterator.zpp_pool = null;
nape.phys.BodyIterator.zpp_pool = null;
nape.phys.CompoundIterator.zpp_pool = null;
nape.phys.InteractorIterator.zpp_pool = null;
nape.shape.EdgeIterator.zpp_pool = null;
nape.shape.ShapeIterator.zpp_pool = null;
openfl.Assets.cache = new openfl.AssetCache();
openfl.Assets.dispatcher = new openfl.events.EventDispatcher();
openfl._Assets.AssetType_Impl_.BINARY = "BINARY";
openfl._Assets.AssetType_Impl_.FONT = "FONT";
openfl._Assets.AssetType_Impl_.IMAGE = "IMAGE";
openfl._Assets.AssetType_Impl_.MOVIE_CLIP = "MOVIE_CLIP";
openfl._Assets.AssetType_Impl_.MUSIC = "MUSIC";
openfl._Assets.AssetType_Impl_.SOUND = "SOUND";
openfl._Assets.AssetType_Impl_.TEMPLATE = "TEMPLATE";
openfl._Assets.AssetType_Impl_.TEXT = "TEXT";
openfl.display.LoaderInfo.__rootURL = window.document.URL;
openfl.system.ApplicationDomain.currentDomain = new openfl.system.ApplicationDomain(null);
openfl.geom.Matrix.__identity = new openfl.geom.Matrix();
openfl.Lib.current = new openfl.display.MovieClip();
openfl.Lib.__sentWarnings = new haxe.ds.StringMap();
openfl._internal.renderer.canvas.CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl._internal.renderer.canvas.CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL = null;
openfl._internal.renderer.opengl.GLRenderer.glContextId = 0;
openfl._internal.renderer.opengl.GLRenderer.glContexts = [];
openfl._internal.renderer.opengl.shaders.AbstractShader.__UID = 0;
openfl._internal.renderer.opengl.shaders.DefaultShader.defaultVertexSrc = ["attribute vec2 aVertexPosition;","attribute vec2 aTextureCoord;","attribute vec2 aColor;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","varying vec2 vTextureCoord;","varying vec4 vColor;","const vec2 center = vec2(-1.0, 1.0);","void main(void) {","   gl_Position = vec4( ((aVertexPosition + offsetVector) / projectionVector) + center , 0.0, 1.0);","   vTextureCoord = aTextureCoord;","   vec3 color = mod(vec3(aColor.y/65536.0, aColor.y/256.0, aColor.y), 256.0) / 256.0;","   vColor = vec4(color * aColor.x, aColor.x);","}"];
openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex = 0;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.graphicsDataPool = [];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.bucketPool = [];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectPosition = new openfl.geom.Point();
openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds = new openfl.geom.Rectangle();
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_.DEFAULT = 0;
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_.STENCIL = 1;
openfl.display.BitmapDataChannel.ALPHA = 8;
openfl.display.BitmapDataChannel.BLUE = 4;
openfl.display.BitmapDataChannel.GREEN = 2;
openfl.display.BitmapDataChannel.RED = 1;
openfl.display.Graphics.TILE_SCALE = 1;
openfl.display.Graphics.TILE_ROTATION = 2;
openfl.display.Graphics.TILE_RGB = 4;
openfl.display.Graphics.TILE_ALPHA = 8;
openfl.display.Graphics.TILE_TRANS_2x2 = 16;
openfl.display.Graphics.TILE_RECT = 32;
openfl.display.Graphics.TILE_ORIGIN = 64;
openfl.display.Graphics.TILE_BLEND_NORMAL = 0;
openfl.display.Graphics.TILE_BLEND_ADD = 65536;
openfl.display.GraphicsPathCommand.LINE_TO = 2;
openfl.display.GraphicsPathCommand.MOVE_TO = 1;
openfl.display.GraphicsPathCommand.CURVE_TO = 3;
openfl.display.GraphicsPathCommand.WIDE_LINE_TO = 5;
openfl.display.GraphicsPathCommand.WIDE_MOVE_TO = 4;
openfl.display.GraphicsPathCommand.NO_OP = 0;
openfl.display.GraphicsPathCommand.CUBIC_CURVE_TO = 6;
openfl.display.OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl.display.OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 34046;
openfl.display3D.Context3D.MAX_SAMPLERS = 8;
openfl.display3D.Context3D.MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
openfl.display3D.Context3D.anisotropySupportTested = false;
openfl.display3D.Context3D.supportsAnisotropy = false;
openfl.display3D.Context3D.maxSupportedAnisotropy = 256;
openfl.display3D.Context3DClearMask.ALL = 17664;
openfl.display3D.Context3DClearMask.COLOR = 16384;
openfl.display3D.Context3DClearMask.DEPTH = 256;
openfl.display3D.Context3DClearMask.STENCIL = 1024;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.BACK = 1028;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.FRONT = 1029;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.FRONT_AND_BACK = 1032;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.NONE = 0;
openfl.errors.Error.DEFAULT_TO_STRING = "Error";
openfl.events.TextEvent.LINK = "link";
openfl.events.TextEvent.TEXT_INPUT = "textInput";
openfl.events.ErrorEvent.ERROR = "error";
openfl.events.FocusEvent.FOCUS_IN = "focusIn";
openfl.events.FocusEvent.FOCUS_OUT = "focusOut";
openfl.events.FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl.events.FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl.events.HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl.events.IOErrorEvent.IO_ERROR = "ioError";
openfl.events.KeyboardEvent.KEY_DOWN = "keyDown";
openfl.events.KeyboardEvent.KEY_UP = "keyUp";
openfl.events.MouseEvent.CLICK = "click";
openfl.events.MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl.events.MouseEvent.MIDDLE_CLICK = "middleClick";
openfl.events.MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl.events.MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl.events.MouseEvent.MOUSE_DOWN = "mouseDown";
openfl.events.MouseEvent.MOUSE_MOVE = "mouseMove";
openfl.events.MouseEvent.MOUSE_OUT = "mouseOut";
openfl.events.MouseEvent.MOUSE_OVER = "mouseOver";
openfl.events.MouseEvent.MOUSE_UP = "mouseUp";
openfl.events.MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl.events.MouseEvent.RIGHT_CLICK = "rightClick";
openfl.events.MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl.events.MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl.events.MouseEvent.ROLL_OUT = "rollOut";
openfl.events.MouseEvent.ROLL_OVER = "rollOver";
openfl.events.MouseEvent.__buttonDown = [false,false,false];
openfl.events.ProgressEvent.PROGRESS = "progress";
openfl.events.ProgressEvent.SOCKET_DATA = "socketData";
openfl.events.SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl.events.TimerEvent.TIMER = "timer";
openfl.events.TimerEvent.TIMER_COMPLETE = "timerComplete";
openfl.events.TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl.events.TouchEvent.TOUCH_END = "touchEnd";
openfl.events.TouchEvent.TOUCH_MOVE = "touchMove";
openfl.events.TouchEvent.TOUCH_OUT = "touchOut";
openfl.events.TouchEvent.TOUCH_OVER = "touchOver";
openfl.events.TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl.events.TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl.events.TouchEvent.TOUCH_TAP = "touchTap";
openfl.media.Sound.__registeredSounds = new haxe.ds.StringMap();
openfl.net.URLRequestMethod.DELETE = "DELETE";
openfl.net.URLRequestMethod.GET = "GET";
openfl.net.URLRequestMethod.HEAD = "HEAD";
openfl.net.URLRequestMethod.OPTIONS = "OPTIONS";
openfl.net.URLRequestMethod.POST = "POST";
openfl.net.URLRequestMethod.PUT = "PUT";
openfl.system.Capabilities.avHardwareDisable = true;
openfl.system.Capabilities.cpuArchitecture = "";
openfl.system.Capabilities.hasAccessibility = false;
openfl.system.Capabilities.hasAudio = true;
openfl.system.Capabilities.hasAudioEncoder = false;
openfl.system.Capabilities.hasEmbeddedVideo = false;
openfl.system.Capabilities.hasIME = false;
openfl.system.Capabilities.hasMP3 = false;
openfl.system.Capabilities.hasPrinting = false;
openfl.system.Capabilities.hasScreenBroadcast = false;
openfl.system.Capabilities.hasScreenPlayback = false;
openfl.system.Capabilities.hasStreamingAudio = false;
openfl.system.Capabilities.hasStreamingVideo = false;
openfl.system.Capabilities.hasTLS = true;
openfl.system.Capabilities.hasVideoEncoder = false;
openfl.system.Capabilities.isDebugger = false;
openfl.system.Capabilities.isEmbeddedInAcrobat = false;
openfl.system.Capabilities.localFileReadDisable = true;
openfl.system.Capabilities.manufacturer = "OpenFL Contributors";
openfl.system.Capabilities.maxLevelIDC = 0;
openfl.system.Capabilities.playerType = "OpenFL";
openfl.system.Capabilities.screenColor = "color";
openfl.system.Capabilities.serverString = "";
openfl.system.Capabilities.supports32BitProcesses = false;
openfl.system.Capabilities.supports64BitProcesses = false;
openfl.system.Capabilities.touchscreenType = openfl.system.TouchscreenType.FINGER;
openfl.system.SecurityDomain.currentDomain = new openfl.system.SecurityDomain();
openfl.system.System.useCodePage = false;
openfl.text.Font.__registeredFonts = new Array();
openfl.ui._KeyLocation.KeyLocation_Impl_.STANDARD = 0;
openfl.ui._KeyLocation.KeyLocation_Impl_.LEFT = 1;
openfl.ui._KeyLocation.KeyLocation_Impl_.RIGHT = 2;
openfl.ui._KeyLocation.KeyLocation_Impl_.NUM_PAD = 3;
openfl.ui.Keyboard.NUMBER_0 = 48;
openfl.ui.Keyboard.NUMBER_1 = 49;
openfl.ui.Keyboard.NUMBER_2 = 50;
openfl.ui.Keyboard.NUMBER_3 = 51;
openfl.ui.Keyboard.NUMBER_4 = 52;
openfl.ui.Keyboard.NUMBER_5 = 53;
openfl.ui.Keyboard.NUMBER_6 = 54;
openfl.ui.Keyboard.NUMBER_7 = 55;
openfl.ui.Keyboard.NUMBER_8 = 56;
openfl.ui.Keyboard.NUMBER_9 = 57;
openfl.ui.Keyboard.A = 65;
openfl.ui.Keyboard.B = 66;
openfl.ui.Keyboard.C = 67;
openfl.ui.Keyboard.D = 68;
openfl.ui.Keyboard.E = 69;
openfl.ui.Keyboard.F = 70;
openfl.ui.Keyboard.G = 71;
openfl.ui.Keyboard.H = 72;
openfl.ui.Keyboard.I = 73;
openfl.ui.Keyboard.J = 74;
openfl.ui.Keyboard.K = 75;
openfl.ui.Keyboard.L = 76;
openfl.ui.Keyboard.M = 77;
openfl.ui.Keyboard.N = 78;
openfl.ui.Keyboard.O = 79;
openfl.ui.Keyboard.P = 80;
openfl.ui.Keyboard.Q = 81;
openfl.ui.Keyboard.R = 82;
openfl.ui.Keyboard.S = 83;
openfl.ui.Keyboard.T = 84;
openfl.ui.Keyboard.U = 85;
openfl.ui.Keyboard.V = 86;
openfl.ui.Keyboard.W = 87;
openfl.ui.Keyboard.X = 88;
openfl.ui.Keyboard.Y = 89;
openfl.ui.Keyboard.Z = 90;
openfl.ui.Keyboard.NUMPAD_0 = 96;
openfl.ui.Keyboard.NUMPAD_1 = 97;
openfl.ui.Keyboard.NUMPAD_2 = 98;
openfl.ui.Keyboard.NUMPAD_3 = 99;
openfl.ui.Keyboard.NUMPAD_4 = 100;
openfl.ui.Keyboard.NUMPAD_5 = 101;
openfl.ui.Keyboard.NUMPAD_6 = 102;
openfl.ui.Keyboard.NUMPAD_7 = 103;
openfl.ui.Keyboard.NUMPAD_8 = 104;
openfl.ui.Keyboard.NUMPAD_9 = 105;
openfl.ui.Keyboard.NUMPAD_MULTIPLY = 106;
openfl.ui.Keyboard.NUMPAD_ADD = 107;
openfl.ui.Keyboard.NUMPAD_ENTER = 108;
openfl.ui.Keyboard.NUMPAD_SUBTRACT = 109;
openfl.ui.Keyboard.NUMPAD_DECIMAL = 110;
openfl.ui.Keyboard.NUMPAD_DIVIDE = 111;
openfl.ui.Keyboard.F1 = 112;
openfl.ui.Keyboard.F2 = 113;
openfl.ui.Keyboard.F3 = 114;
openfl.ui.Keyboard.F4 = 115;
openfl.ui.Keyboard.F5 = 116;
openfl.ui.Keyboard.F6 = 117;
openfl.ui.Keyboard.F7 = 118;
openfl.ui.Keyboard.F8 = 119;
openfl.ui.Keyboard.F9 = 120;
openfl.ui.Keyboard.F10 = 121;
openfl.ui.Keyboard.F11 = 122;
openfl.ui.Keyboard.F12 = 123;
openfl.ui.Keyboard.F13 = 124;
openfl.ui.Keyboard.F14 = 125;
openfl.ui.Keyboard.F15 = 126;
openfl.ui.Keyboard.BACKSPACE = 8;
openfl.ui.Keyboard.TAB = 9;
openfl.ui.Keyboard.ALTERNATE = 18;
openfl.ui.Keyboard.ENTER = 13;
openfl.ui.Keyboard.COMMAND = 15;
openfl.ui.Keyboard.SHIFT = 16;
openfl.ui.Keyboard.CONTROL = 17;
openfl.ui.Keyboard.CAPS_LOCK = 20;
openfl.ui.Keyboard.NUMPAD = 21;
openfl.ui.Keyboard.ESCAPE = 27;
openfl.ui.Keyboard.SPACE = 32;
openfl.ui.Keyboard.PAGE_UP = 33;
openfl.ui.Keyboard.PAGE_DOWN = 34;
openfl.ui.Keyboard.END = 35;
openfl.ui.Keyboard.HOME = 36;
openfl.ui.Keyboard.LEFT = 37;
openfl.ui.Keyboard.RIGHT = 39;
openfl.ui.Keyboard.UP = 38;
openfl.ui.Keyboard.DOWN = 40;
openfl.ui.Keyboard.INSERT = 45;
openfl.ui.Keyboard.DELETE = 46;
openfl.ui.Keyboard.NUMLOCK = 144;
openfl.ui.Keyboard.BREAK = 19;
openfl.ui.Keyboard.SEMICOLON = 186;
openfl.ui.Keyboard.EQUAL = 187;
openfl.ui.Keyboard.COMMA = 188;
openfl.ui.Keyboard.MINUS = 189;
openfl.ui.Keyboard.PERIOD = 190;
openfl.ui.Keyboard.SLASH = 191;
openfl.ui.Keyboard.BACKQUOTE = 192;
openfl.ui.Keyboard.LEFTBRACKET = 219;
openfl.ui.Keyboard.BACKSLASH = 220;
openfl.ui.Keyboard.RIGHTBRACKET = 221;
openfl.ui.Keyboard.QUOTE = 222;
openfl.ui.Keyboard.DOM_VK_CANCEL = 3;
openfl.ui.Keyboard.DOM_VK_HELP = 6;
openfl.ui.Keyboard.DOM_VK_BACK_SPACE = 8;
openfl.ui.Keyboard.DOM_VK_TAB = 9;
openfl.ui.Keyboard.DOM_VK_CLEAR = 12;
openfl.ui.Keyboard.DOM_VK_RETURN = 13;
openfl.ui.Keyboard.DOM_VK_ENTER = 14;
openfl.ui.Keyboard.DOM_VK_SHIFT = 16;
openfl.ui.Keyboard.DOM_VK_CONTROL = 17;
openfl.ui.Keyboard.DOM_VK_ALT = 18;
openfl.ui.Keyboard.DOM_VK_PAUSE = 19;
openfl.ui.Keyboard.DOM_VK_CAPS_LOCK = 20;
openfl.ui.Keyboard.DOM_VK_ESCAPE = 27;
openfl.ui.Keyboard.DOM_VK_SPACE = 32;
openfl.ui.Keyboard.DOM_VK_PAGE_UP = 33;
openfl.ui.Keyboard.DOM_VK_PAGE_DOWN = 34;
openfl.ui.Keyboard.DOM_VK_END = 35;
openfl.ui.Keyboard.DOM_VK_HOME = 36;
openfl.ui.Keyboard.DOM_VK_LEFT = 37;
openfl.ui.Keyboard.DOM_VK_UP = 38;
openfl.ui.Keyboard.DOM_VK_RIGHT = 39;
openfl.ui.Keyboard.DOM_VK_DOWN = 40;
openfl.ui.Keyboard.DOM_VK_PRINTSCREEN = 44;
openfl.ui.Keyboard.DOM_VK_INSERT = 45;
openfl.ui.Keyboard.DOM_VK_DELETE = 46;
openfl.ui.Keyboard.DOM_VK_0 = 48;
openfl.ui.Keyboard.DOM_VK_1 = 49;
openfl.ui.Keyboard.DOM_VK_2 = 50;
openfl.ui.Keyboard.DOM_VK_3 = 51;
openfl.ui.Keyboard.DOM_VK_4 = 52;
openfl.ui.Keyboard.DOM_VK_5 = 53;
openfl.ui.Keyboard.DOM_VK_6 = 54;
openfl.ui.Keyboard.DOM_VK_7 = 55;
openfl.ui.Keyboard.DOM_VK_8 = 56;
openfl.ui.Keyboard.DOM_VK_9 = 57;
openfl.ui.Keyboard.DOM_VK_SEMICOLON = 59;
openfl.ui.Keyboard.DOM_VK_EQUALS = 61;
openfl.ui.Keyboard.DOM_VK_A = 65;
openfl.ui.Keyboard.DOM_VK_B = 66;
openfl.ui.Keyboard.DOM_VK_C = 67;
openfl.ui.Keyboard.DOM_VK_D = 68;
openfl.ui.Keyboard.DOM_VK_E = 69;
openfl.ui.Keyboard.DOM_VK_F = 70;
openfl.ui.Keyboard.DOM_VK_G = 71;
openfl.ui.Keyboard.DOM_VK_H = 72;
openfl.ui.Keyboard.DOM_VK_I = 73;
openfl.ui.Keyboard.DOM_VK_J = 74;
openfl.ui.Keyboard.DOM_VK_K = 75;
openfl.ui.Keyboard.DOM_VK_L = 76;
openfl.ui.Keyboard.DOM_VK_M = 77;
openfl.ui.Keyboard.DOM_VK_N = 78;
openfl.ui.Keyboard.DOM_VK_O = 79;
openfl.ui.Keyboard.DOM_VK_P = 80;
openfl.ui.Keyboard.DOM_VK_Q = 81;
openfl.ui.Keyboard.DOM_VK_R = 82;
openfl.ui.Keyboard.DOM_VK_S = 83;
openfl.ui.Keyboard.DOM_VK_T = 84;
openfl.ui.Keyboard.DOM_VK_U = 85;
openfl.ui.Keyboard.DOM_VK_V = 86;
openfl.ui.Keyboard.DOM_VK_W = 87;
openfl.ui.Keyboard.DOM_VK_X = 88;
openfl.ui.Keyboard.DOM_VK_Y = 89;
openfl.ui.Keyboard.DOM_VK_Z = 90;
openfl.ui.Keyboard.DOM_VK_CONTEXT_MENU = 93;
openfl.ui.Keyboard.DOM_VK_NUMPAD0 = 96;
openfl.ui.Keyboard.DOM_VK_NUMPAD1 = 97;
openfl.ui.Keyboard.DOM_VK_NUMPAD2 = 98;
openfl.ui.Keyboard.DOM_VK_NUMPAD3 = 99;
openfl.ui.Keyboard.DOM_VK_NUMPAD4 = 100;
openfl.ui.Keyboard.DOM_VK_NUMPAD5 = 101;
openfl.ui.Keyboard.DOM_VK_NUMPAD6 = 102;
openfl.ui.Keyboard.DOM_VK_NUMPAD7 = 103;
openfl.ui.Keyboard.DOM_VK_NUMPAD8 = 104;
openfl.ui.Keyboard.DOM_VK_NUMPAD9 = 105;
openfl.ui.Keyboard.DOM_VK_MULTIPLY = 106;
openfl.ui.Keyboard.DOM_VK_ADD = 107;
openfl.ui.Keyboard.DOM_VK_SEPARATOR = 108;
openfl.ui.Keyboard.DOM_VK_SUBTRACT = 109;
openfl.ui.Keyboard.DOM_VK_DECIMAL = 110;
openfl.ui.Keyboard.DOM_VK_DIVIDE = 111;
openfl.ui.Keyboard.DOM_VK_F1 = 112;
openfl.ui.Keyboard.DOM_VK_F2 = 113;
openfl.ui.Keyboard.DOM_VK_F3 = 114;
openfl.ui.Keyboard.DOM_VK_F4 = 115;
openfl.ui.Keyboard.DOM_VK_F5 = 116;
openfl.ui.Keyboard.DOM_VK_F6 = 117;
openfl.ui.Keyboard.DOM_VK_F7 = 118;
openfl.ui.Keyboard.DOM_VK_F8 = 119;
openfl.ui.Keyboard.DOM_VK_F9 = 120;
openfl.ui.Keyboard.DOM_VK_F10 = 121;
openfl.ui.Keyboard.DOM_VK_F11 = 122;
openfl.ui.Keyboard.DOM_VK_F12 = 123;
openfl.ui.Keyboard.DOM_VK_F13 = 124;
openfl.ui.Keyboard.DOM_VK_F14 = 125;
openfl.ui.Keyboard.DOM_VK_F15 = 126;
openfl.ui.Keyboard.DOM_VK_F16 = 127;
openfl.ui.Keyboard.DOM_VK_F17 = 128;
openfl.ui.Keyboard.DOM_VK_F18 = 129;
openfl.ui.Keyboard.DOM_VK_F19 = 130;
openfl.ui.Keyboard.DOM_VK_F20 = 131;
openfl.ui.Keyboard.DOM_VK_F21 = 132;
openfl.ui.Keyboard.DOM_VK_F22 = 133;
openfl.ui.Keyboard.DOM_VK_F23 = 134;
openfl.ui.Keyboard.DOM_VK_F24 = 135;
openfl.ui.Keyboard.DOM_VK_NUM_LOCK = 144;
openfl.ui.Keyboard.DOM_VK_SCROLL_LOCK = 145;
openfl.ui.Keyboard.DOM_VK_COMMA = 188;
openfl.ui.Keyboard.DOM_VK_PERIOD = 190;
openfl.ui.Keyboard.DOM_VK_SLASH = 191;
openfl.ui.Keyboard.DOM_VK_BACK_QUOTE = 192;
openfl.ui.Keyboard.DOM_VK_OPEN_BRACKET = 219;
openfl.ui.Keyboard.DOM_VK_BACK_SLASH = 220;
openfl.ui.Keyboard.DOM_VK_CLOSE_BRACKET = 221;
openfl.ui.Keyboard.DOM_VK_QUOTE = 222;
openfl.ui.Keyboard.DOM_VK_META = 224;
openfl.ui.Keyboard.DOM_VK_KANA = 21;
openfl.ui.Keyboard.DOM_VK_HANGUL = 21;
openfl.ui.Keyboard.DOM_VK_JUNJA = 23;
openfl.ui.Keyboard.DOM_VK_FINAL = 24;
openfl.ui.Keyboard.DOM_VK_HANJA = 25;
openfl.ui.Keyboard.DOM_VK_KANJI = 25;
openfl.ui.Keyboard.DOM_VK_CONVERT = 28;
openfl.ui.Keyboard.DOM_VK_NONCONVERT = 29;
openfl.ui.Keyboard.DOM_VK_ACEPT = 30;
openfl.ui.Keyboard.DOM_VK_MODECHANGE = 31;
openfl.ui.Keyboard.DOM_VK_SELECT = 41;
openfl.ui.Keyboard.DOM_VK_PRINT = 42;
openfl.ui.Keyboard.DOM_VK_EXECUTE = 43;
openfl.ui.Keyboard.DOM_VK_SLEEP = 95;
zpp_nape.ZPP_Const.FMAX = 1e100;
zpp_nape.ZPP_ID._Constraint = 0;
zpp_nape.ZPP_ID._Interactor = 0;
zpp_nape.ZPP_ID._CbType = 0;
zpp_nape.ZPP_ID._CbSet = 0;
zpp_nape.ZPP_ID._Listener = 0;
zpp_nape.ZPP_ID._ZPP_SimpleVert = 0;
zpp_nape.ZPP_ID._ZPP_SimpleSeg = 0;
zpp_nape.ZPP_ID._Space = 0;
zpp_nape.ZPP_ID._InteractionGroup = 0;
zpp_nape.callbacks.ZPP_Callback.zpp_pool = null;
zpp_nape.callbacks.ZPP_CbSet.zpp_pool = null;
zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = null;
zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE = new nape.callbacks.CbType();
zpp_nape.callbacks.ZPP_CbType.ANY_BODY = new nape.callbacks.CbType();
zpp_nape.callbacks.ZPP_CbType.ANY_COMPOUND = new nape.callbacks.CbType();
zpp_nape.callbacks.ZPP_CbType.ANY_CONSTRAINT = new nape.callbacks.CbType();
zpp_nape.util.ZPP_Flags.internal = false;
zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT = 1;
zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE = 2;
zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS = 4;
zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT = 0;
zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED = 1;
zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED = 2;
zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT = 0;
zpp_nape.util.ZPP_Flags.id_InertiaMode_FIXED = 1;
zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT = 0;
zpp_nape.util.ZPP_Flags.id_MassMode_FIXED = 1;
zpp_nape.util.ZPP_Flags.id_BodyType_STATIC = 1;
zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC = 2;
zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC = 3;
zpp_nape.util.ZPP_Flags.id_ListenerType_BODY = 0;
zpp_nape.util.ZPP_Flags.id_ListenerType_CONSTRAINT = 1;
zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT = 1;
zpp_nape.util.ZPP_Flags.id_ListenerType_INTERACTION = 2;
zpp_nape.util.ZPP_Flags.id_PreFlag_IGNORE = 2;
zpp_nape.util.ZPP_Flags.id_ListenerType_PRE = 3;
zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT_ONCE = 3;
zpp_nape.util.ZPP_Flags.id_PreFlag_IGNORE_ONCE = 4;
zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN = 0;
zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING = 6;
zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION = 1;
zpp_nape.util.ZPP_Flags.id_CbEvent_END = 1;
zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR = 2;
zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE = 2;
zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID = 4;
zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP = 3;
zpp_nape.util.ZPP_Flags.id_InteractionType_ANY = 7;
zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK = 4;
zpp_nape.util.ZPP_Flags.id_CbEvent_PRE = 5;
zpp_nape.util.ZPP_Flags.id_Winding_UNDEFINED = 0;
zpp_nape.util.ZPP_Flags.id_Winding_CLOCKWISE = 1;
zpp_nape.util.ZPP_Flags.id_Winding_ANTICLOCKWISE = 2;
zpp_nape.util.ZPP_Flags.id_ValidationResult_VALID = 0;
zpp_nape.util.ZPP_Flags.id_ValidationResult_DEGENERATE = 1;
zpp_nape.util.ZPP_Flags.id_ValidationResult_CONCAVE = 2;
zpp_nape.util.ZPP_Flags.id_ValidationResult_SELF_INTERSECTING = 3;
zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE = 0;
zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON = 1;
zpp_nape.util.ZPP_Flags.id_Broadphase_DYNAMIC_AABB_TREE = 0;
zpp_nape.util.ZPP_Flags.id_Broadphase_SWEEP_AND_PRUNE = 1;
zpp_nape.util.ZPP_Flags.id_ArbiterType_COLLISION = 1;
zpp_nape.util.ZPP_Flags.id_ArbiterType_SENSOR = 2;
zpp_nape.util.ZPP_Flags.id_ArbiterType_FLUID = 4;
zpp_nape.callbacks.ZPP_Listener.types = [(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ListenerType_BODY == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_BODY = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ListenerType_BODY;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ListenerType_PRE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_PRE = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ListenerType_PRE;
	return $r;
}(this))];
zpp_nape.callbacks.ZPP_Listener.events = [(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_PRE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_PRE = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_PRE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
	return $r;
}(this))];
zpp_nape.callbacks.ZPP_InteractionListener.UCbSet = new zpp_nape.util.ZNPList_ZPP_CbSet();
zpp_nape.callbacks.ZPP_InteractionListener.VCbSet = new zpp_nape.util.ZNPList_ZPP_CbSet();
zpp_nape.callbacks.ZPP_InteractionListener.WCbSet = new zpp_nape.util.ZNPList_ZPP_CbSet();
zpp_nape.callbacks.ZPP_InteractionListener.UCbType = new zpp_nape.util.ZNPList_ZPP_CbType();
zpp_nape.callbacks.ZPP_InteractionListener.VCbType = new zpp_nape.util.ZNPList_ZPP_CbType();
zpp_nape.callbacks.ZPP_InteractionListener.WCbType = new zpp_nape.util.ZNPList_ZPP_CbType();
zpp_nape.constraint.ZPP_AngleDraw.maxarc = Math.PI / 4;
zpp_nape.dynamics.ZPP_Arbiter.internal = false;
zpp_nape.dynamics.ZPP_Arbiter.COL = 1;
zpp_nape.dynamics.ZPP_Arbiter.FLUID = 4;
zpp_nape.dynamics.ZPP_Arbiter.SENSOR = 2;
zpp_nape.dynamics.ZPP_Arbiter.types = [null,(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR;
	return $r;
}(this)),null,(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ArbiterType_FLUID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ArbiterType_FLUID;
	return $r;
}(this))];
zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = null;
zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = null;
zpp_nape.dynamics.ZPP_ColArbiter.FACE1 = 0;
zpp_nape.dynamics.ZPP_ColArbiter.FACE2 = 1;
zpp_nape.dynamics.ZPP_ColArbiter.CIRCLE = 2;
zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = null;
zpp_nape.dynamics.ZPP_Contact.internal = false;
zpp_nape.dynamics.ZPP_Contact.zpp_pool = null;
zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = null;
zpp_nape.dynamics.ZPP_InteractionGroup.SHAPE = 1;
zpp_nape.dynamics.ZPP_InteractionGroup.BODY = 2;
zpp_nape.geom.ZPP_AABB.zpp_pool = null;
zpp_nape.geom.ZPP_Collide.flowpoly = new zpp_nape.util.ZNPList_ZPP_Vec2();
zpp_nape.geom.ZPP_Collide.flowsegs = new zpp_nape.util.ZNPList_ZPP_Vec2();
zpp_nape.geom.ZPP_ConvexRayResult.convexPool = null;
zpp_nape.geom.ZPP_ConvexRayResult.rayPool = null;
zpp_nape.geom.ZPP_ConvexRayResult.internal = false;
zpp_nape.geom.ZPP_CutVert.zpp_pool = null;
zpp_nape.geom.ZPP_CutInt.zpp_pool = null;
zpp_nape.geom.ZPP_Cutter.ints = null;
zpp_nape.geom.ZPP_Cutter.paths = null;
zpp_nape.geom.ZPP_GeomVert.zpp_pool = null;
zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = null;
zpp_nape.geom.ZPP_MarchSpan.zpp_pool = null;
zpp_nape.geom.ZPP_MarchPair.zpp_pool = null;
zpp_nape.geom.ZPP_MarchingSquares.me = new zpp_nape.geom.ZPP_MarchingSquares();
zpp_nape.geom.ZPP_MarchingSquares.look_march = [-1,224,56,216,14,-1,54,214,131,99,-1,91,141,109,181,85];
zpp_nape.geom.ZPP_Mat23.zpp_pool = null;
zpp_nape.geom.ZPP_Monotone.queue = null;
zpp_nape.geom.ZPP_Monotone.edges = null;
zpp_nape.geom.ZPP_PartitionVertex.nextId = 0;
zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = null;
zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = null;
zpp_nape.geom.ZPP_SimpleVert.zpp_pool = null;
zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = null;
zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = null;
zpp_nape.geom.ZPP_Simple.sweep = null;
zpp_nape.geom.ZPP_Simple.inthash = null;
zpp_nape.geom.ZPP_Simple.vertices = null;
zpp_nape.geom.ZPP_Simple.queue = null;
zpp_nape.geom.ZPP_Simple.ints = null;
zpp_nape.geom.ZPP_Simple.list_vertices = null;
zpp_nape.geom.ZPP_Simple.list_queue = null;
zpp_nape.geom.ZPP_SimplifyV.zpp_pool = null;
zpp_nape.geom.ZPP_SimplifyP.zpp_pool = null;
zpp_nape.geom.ZPP_Simplify.stack = null;
zpp_nape.geom.ZPP_ToiEvent.zpp_pool = null;
zpp_nape.geom.ZPP_PartitionPair.zpp_pool = null;
zpp_nape.geom.ZPP_Triangular.queue = null;
zpp_nape.geom.ZPP_Triangular.stack = null;
zpp_nape.geom.ZPP_Triangular.edgeSet = null;
zpp_nape.geom.ZPP_Vec2.zpp_pool = null;
zpp_nape.phys.ZPP_Body.types = [null,(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
	return $r;
}(this))];
zpp_nape.phys.ZPP_Body.bodystack = null;
zpp_nape.phys.ZPP_Body.bodyset = null;
zpp_nape.phys.ZPP_Body.cur_graph_depth = 0;
zpp_nape.phys.ZPP_FluidProperties.zpp_pool = null;
zpp_nape.phys.ZPP_Material.zpp_pool = null;
zpp_nape.phys.ZPP_Material.WAKE = 1;
zpp_nape.phys.ZPP_Material.PROPS = 2;
zpp_nape.phys.ZPP_Material.ANGDRAG = 4;
zpp_nape.phys.ZPP_Material.ARBITERS = 8;
zpp_nape.shape.ZPP_Shape.types = [(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ShapeType_POLYGON == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ShapeType_POLYGON;
	return $r;
}(this))];
zpp_nape.shape.ZPP_Edge.zpp_pool = null;
zpp_nape.shape.ZPP_Edge.internal = false;
zpp_nape.space.ZPP_AABBNode.zpp_pool = null;
zpp_nape.space.ZPP_AABBPair.zpp_pool = null;
zpp_nape.space.ZPP_AABBTree.tmpaabb = new zpp_nape.geom.ZPP_AABB();
zpp_nape.space.ZPP_DynAABBPhase.FATTEN = 3.0;
zpp_nape.space.ZPP_DynAABBPhase.VEL_STEPS = 2.0;
zpp_nape.space.ZPP_Island.zpp_pool = null;
zpp_nape.space.ZPP_Component.zpp_pool = null;
zpp_nape.space.ZPP_CallbackSet.zpp_pool = null;
zpp_nape.space.ZPP_SweepData.zpp_pool = null;
zpp_nape.util.ZPP_Debug.internal = false;
zpp_nape.util.Hashable2_Boolfalse.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = null;
zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = null;
zpp_nape.util.ZNPNode_RayResult.zpp_pool = null;
zpp_nape.util.ZPP_ConstraintList.internal = false;
zpp_nape.util.ZPP_BodyList.internal = false;
zpp_nape.util.ZPP_InteractorList.internal = false;
zpp_nape.util.ZPP_CompoundList.internal = false;
zpp_nape.util.ZPP_ListenerList.internal = false;
zpp_nape.util.ZPP_CbTypeList.internal = false;
zpp_nape.util.ZPP_Vec2List.internal = false;
zpp_nape.util.ZPP_GeomPolyList.internal = false;
zpp_nape.util.ZPP_RayResultList.internal = false;
zpp_nape.util.ZPP_ConvexResultList.internal = false;
zpp_nape.util.ZPP_EdgeList.internal = false;
zpp_nape.util.ZPP_ShapeList.internal = false;
zpp_nape.util.ZPP_InteractionGroupList.internal = false;
zpp_nape.util.ZPP_ArbiterList.internal = false;
zpp_nape.util.ZPP_ContactList.internal = false;
zpp_nape.util.ZPP_PubPool.poolGeomPoly = null;
zpp_nape.util.ZPP_PubPool.poolVec2 = null;
zpp_nape.util.ZPP_PubPool.poolVec3 = null;
zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = null;
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = null;
zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = null;
ApplicationMain.main();

function hidePreloader() {
	SGHelper.preloader.__visible = false;
}

function turnOnSoundForAd() {
    //SGHelper.musicChanel.soundTransform.volume = 1;
    //SGHelper.musicChanel.enable();
}

function turnOffSoundForAd() {
    //SGHelper.musicChanel.soundTransform.volume = 0;
    //SGHelper.musicChanel.disable();
}

function observer(command) {
    if(!command) return;

    switch(command.action) {
        case 'runGame':
            console.log('runGame called')
            ApplicationMain.start();
            SG_Hooks.start();
            break;
    }
}
SG_Hooks.registerObserver(observer);

})(typeof window != "undefined" ? window : exports);

//SG.gameCommandObserver({id:1, action: 'runGame'})